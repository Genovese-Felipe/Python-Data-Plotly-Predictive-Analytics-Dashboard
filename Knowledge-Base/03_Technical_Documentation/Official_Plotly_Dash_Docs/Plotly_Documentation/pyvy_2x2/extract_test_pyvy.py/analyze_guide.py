import xml.etree.ElementTree as ET
from collections import defaultdict
import re

def analyze_semantic_guide(xml_file):
    """Analisa a estrutura sem√¢ntica do guia Plotly"""
    
    print("üîç AN√ÅLISE DO GUIA SEM√ÇNTICO PLOTLY PYTHON")
    print("=" * 60)
    
    # Parsear o XML
    tree = ET.parse(xml_file)
    root = tree.getroot()
    
    # Extrair metadados
    metadata = root.find('metadata')
    title = metadata.find('title').text
    description = metadata.find('description').text
    
    print(f"üìñ T√≠tulo: {title}")
    print(f"üìù Descri√ß√£o: {description}")
    print(f"üïí Gerado em: {root.get('generated_on')}")
    print(f"üî¢ Vers√£o: {root.get('version')}")
    print()
    
    # Analisar categorias
    categories = root.findall('category')
    print("üìä CATEGORIAS E DISTRIBUI√á√ÉO:")
    print("-" * 40)
    
    category_stats = {}
    total_charts = 0
    total_examples = 0
    library_usage = defaultdict(int)
    
    for category in categories:
        cat_name = category.get('name')
        cat_id = category.get('id')
        charts = category.findall('chart')
        chart_count = len(charts)
        
        if chart_count > 0:
            category_stats[cat_name] = {
                'count': chart_count,
                'charts': [],
                'examples': 0,
                'customizations': 0
            }
            
            for chart in charts:
                chart_name = chart.get('name')
                category_stats[cat_name]['charts'].append(chart_name)
                
                # Contar exemplos
                examples = chart.findall('.//example')
                category_stats[cat_name]['examples'] += len(examples)
                total_examples += len(examples)
                
                # Contar customiza√ß√µes
                customizations = chart.findall('customization')
                category_stats[cat_name]['customizations'] += len(customizations)
                
                # Analisar uso de bibliotecas
                for example in examples:
                    library = example.find('library')
                    if library is not None:
                        library_usage[library.text] += 1
            
            total_charts += chart_count
            print(f"  {cat_name}: {chart_count} gr√°ficos")
    
    print(f"\nüìà ESTAT√çSTICAS GERAIS:")
    print("-" * 30)
    print(f"  Total de gr√°ficos: {total_charts}")
    print(f"  Total de exemplos: {total_examples}")
    print(f"  M√©dia de exemplos por gr√°fico: {total_examples/total_charts:.1f}")
    print(f"  Categorias ativas: {len(category_stats)}")
    
    print(f"\nüõ†Ô∏è USO DE BIBLIOTECAS:")
    print("-" * 25)
    for library, count in sorted(library_usage.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_examples) * 100
        print(f"  {library}: {count} exemplos ({percentage:.1f}%)")
    
    print(f"\nüìã DETALHES POR CATEGORIA:")
    print("-" * 35)
    
    for cat_name, stats in sorted(category_stats.items(), key=lambda x: x[1]['count'], reverse=True):
        print(f"\nüî∏ {cat_name}")
        print(f"   üìä {stats['count']} gr√°ficos")
        print(f"   üí° {stats['examples']} exemplos")
        print(f"   üé® {stats['customizations']} customiza√ß√µes")
        
        # Mostrar alguns exemplos de gr√°ficos
        if len(stats['charts']) <= 5:
            print(f"   üìà Gr√°ficos: {', '.join(stats['charts'])}")
        else:
            print(f"   üìà Exemplos: {', '.join(stats['charts'][:3])}... (+{len(stats['charts'])-3} mais)")
    
    # Analisar qualidade dos exemplos de c√≥digo
    print(f"\nüî¨ AN√ÅLISE DE QUALIDADE DOS C√ìDIGOS:")
    print("-" * 40)
    
    code_blocks = root.findall('.//code')
    valid_imports = 0
    has_fig_show = 0
    avg_lines = 0
    total_lines = 0
    
    for code in code_blocks:
        if code.text:
            lines = code.text.strip().split('\n')
            total_lines += len(lines)
            
            code_text = code.text.lower()
            if 'import' in code_text:
                valid_imports += 1
            if 'fig.show()' in code_text:
                has_fig_show += 1
    
    avg_lines = total_lines / len(code_blocks) if code_blocks else 0
    
    print(f"   üìù Total de blocos de c√≥digo: {len(code_blocks)}")
    print(f"   üì¶ Com imports v√°lidos: {valid_imports} ({(valid_imports/len(code_blocks)*100):.1f}%)")
    print(f"   üñºÔ∏è Com fig.show(): {has_fig_show} ({(has_fig_show/len(code_blocks)*100):.1f}%)")
    print(f"   üìè M√©dia de linhas por c√≥digo: {avg_lines:.1f}")
    
    # Verificar conte√∫do comum
    common_content = root.find('common_content')
    if common_content is not None:
        reusable_items = common_content.findall('reusable_content')
        print(f"\n‚ôªÔ∏è CONTE√öDO REUTILIZ√ÅVEL:")
        print("-" * 30)
        for item in reusable_items:
            item_title = item.get('title', 'Sem t√≠tulo')
            item_id = item.get('id', 'Sem ID')
            print(f"   üîó {item_title} (ID: {item_id})")
    
    print(f"\n‚ú® RESUMO DA MELHORIA ESTRUTURAL:")
    print("-" * 45)
    print("  ‚úÖ Estrutura sem√¢ntica implementada")
    print("  ‚úÖ Categoriza√ß√£o inteligente por tipos de gr√°fico")
    print("  ‚úÖ Extra√ß√£o autom√°tica de exemplos de c√≥digo")
    print("  ‚úÖ Separa√ß√£o entre Plotly Express e Graph Objects")
    print("  ‚úÖ Se√ß√µes de customiza√ß√£o identificadas")
    print("  ‚úÖ Metadados estruturados inclu√≠dos")
    print("  ‚úÖ Conte√∫do reutiliz√°vel organizado")
    print("  ‚úÖ Estrutura XML bem formatada e hier√°rquica")
    
    return category_stats, library_usage, total_charts, total_examples

if __name__ == "__main__":
    analyze_semantic_guide('semantic_plotly_guide.xml')
