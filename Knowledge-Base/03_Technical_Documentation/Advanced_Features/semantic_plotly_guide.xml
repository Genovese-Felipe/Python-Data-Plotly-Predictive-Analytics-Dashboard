<?xml version='1.0' encoding='utf-8'?>
<plotly_guide generated_on="2025-07-18 09:04:26" version="2.0" description="Guia semântico estruturado de Plotly para Python">
  <metadata>
    <title>Guia Semântico Plotly Python</title>
    <description>Documentação estruturada semanticamente para visualização de dados com Plotly</description>
    <statistics total_charts="204" categories="7" />
  </metadata>
  <common_content>
    <reusable_content id="about_dash" title="Sobre o Dash">Dash é a estrutura original de baixo código para criar rapidamente aplicativos de dados em Python...</reusable_content>
  </common_content>
  <category id="basic_charts" name="Gráficos Básicos">
    <chart name="Bar charts" source_file="Bar charts in Python.pdf">
      <description>Bar chart with Plotly Express
Bar charts with Long Format Data &gt;  &gt; Bar
Charts
Bar Charts in Python
How to make Bar Charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
With px.bar, each row o...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
long_df</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()
wide_df
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Restaurant tips by day of week'),
    dcc.Dropdown(
        id="dropdown",
        options=["Fri", "Sat", "Sun"],
        value="Fri",
        clearable=False,
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def update_bar_chart(day):
    df = px.data.tips() # replace with your own data source
    mask = df["day"] == day
    fig = px.bar(df[mask], x="sex", y="total_bill",
 l " k"b d" ")DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(df, x='year', y='pop',
             hover_data =['lifeExp' , 'gdpPercap' ], color='lifeExp' ,
             labels={'pop':'population of Canada' }, height=400)
fig.show()
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.bar(df, x='year', y='pop',
             hover_data =['lifeExp' , 'gdpPercap' ], color='country' ,
             labels={'pop':'population of Oceania' }, height=400)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description># Add an annotation above the center of each category showing its value
        fig.add_trace  / 2],  # Compute the location of the center
            y=[max_icons_per_column *  + 1.15],
            mode="text",
            text=[f"{value}"],
            textfont =dict,
            showlegend =False
        ))
        # Track locations where we will put the text labeling each category
        tick_locations .append / 2)
        #compute the left edge of the next category
        x_start += num_columns  + inter_group_spacing
    fig.update_layout ),
            tickangle =-45,
            showgrid =False,
            title="Categories"
        ),
        yaxis=dict),
            showgrid =False,
            zeroline =False,
        ),
        # We have already got all the labeling we need so we suppress the legend.
        showlegend =False,  
        height=700,
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 25/34
        # The x-coordinates scale to fill available space, so adjusting the width of the image is a good way to adjust spacing between columns.
        width= * 150 + 50)  
    )
    fig.show
df = pd.DataFrame 
pictogram_bar },
    title="Undergraduate Enrollment at Participating Schools" ,
    units_per_icon =1000,
    unit_description  = "students" ,
    icon_size =27,
    icon_vertical_spacing =0.05
)
142136117226 65174
Haverford College
University of Mary Washington
Brown University
Arizona State University0510Undergraduate Enrollment at Participating Schools
CategoriesEach icon represents 1,000 students
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 26/34
Customizing Individual Bar Base
Rounded Barsimport plotly.graph_objects  as go
years = ['2016','2017','2018']
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.show
New in 5.19
You can round the corners on all bar traces in a figure by setting barcornerradius on the figure's layout. barcornerradius can be a number of pixels or a percentage of
the bar width .
In this example, we set all bars to have a radius of 15 pixels.2016 2017 2018−600−400−2000200400600expenses
revenue
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 27/34
import plotly.graph_objects  as go
from plotly import data
df = data.medals_wide 
fig = go.Figure,
        go.Bar,
        go.Bar,
    ],
    layout=dict,
)
fig.show
When you don't want all bar traces in a figure to have the same rounded corners, you can instead configure rounded corners on each trace using
marker.cornerradius. In this example, which uses subplots, the first trace has a corner radius of 30 pixels, the second trace has a bar corner radius of 30% of the bar
width, and the third trace has no rounded corners set.South Korea China Canada0510152025
Gold
Silver
Bronze
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 28/34
Colored and Styled Bar Chartimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
from plotly import data
df = data.medals_wide 
fig = make_subplots 
fig.add_trace ), 1, 1
)
fig.add_trace ),
    1,
    2,
)
fig.add_trace ,
    1,
    3,
)
fig.show
In this example several parameters of the layout as customized, hence it is convenient to use directly the go.Layout constructor instead of calling fig.update.South KoreaChinaCanada0510152025
South KoreaChinaCanada South KoreaChinaCanadaGold
Silver
Bronze
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 29/34
import plotly.graph_objects  as go
years = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
         2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]
fig = go.Figure
fig.add_trace '
                ))
fig.add_trace '
                ))
fig.update_layout ,
    xaxis_tickfont_size =14,
    yaxis=dict" ,
            font=dict
        ),
    ),
    legend=dict' ,
        bordercolor ='rgba'
    ),
    barmode='group',
    bargap=0.15, # gap between bars of adjacent location coordinates.
    bargroupgap =0.1 # gap between bars of the same location coordinate.
)
fig.show
1996 1998 2000 2002 2004 2006 2008 2010 20120100200300400500Rest of world
ChinaUS Export of Plastic ScrapUSD 
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 30/34
Bar Chart with Sorted or Ordered Categories
Set categoryorder to "category ascending" or "category descending" for the alphanumerical order of the category names or "total ascending" or "total descending" for
numerical order of values.  for more information. Note that sorting the
bars by a particular trace isn't possible right now - it's only possible to sort by the total values. Of course, you can always sort your data before plotting it if you need
more customization.
categoryorder )
fig.add_trace )
fig.add_trace )
fig.update_layout 
fig.show
This example shows how to customise sort ordering by defining categoryorder to "array" to derive the ordering from the attribute categoryarray.a b c d051015202530Toronto
Ottawa
Montreal
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 31/34
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure)
fig.add_trace )
fig.add_trace )
fig.update_layout 
fig.show
This example orders the bar chart by descending value with categoryorder: 'total descending'
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure)
fig.add_trace )
fig.add_trace )
fig.update_layout 
fig.showd a c b051015202530Toronto
Ottawa
Montreal
d a c b051015202530Toronto
Ottawa
Montreal
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 32/34
Horizontal Bar Charts
Bar Charts With Multicategory Axis Type
ReferenceSee examples of horizontal bar charts .
here 
fig.add_bar
fig.add_bar
fig.update_layout 
fig.show
See  or 
 for more information and chart attribute options!
function reference for px.bar , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
 34/34</description>
      </customization>
    </chart>
    <chart name="Basic charts" source_file="Basic charts in Python.pdf" />
    <chart name="Bubble charts" source_file="Bubble charts in Python.pdf">
      <description>Bubble chart with plotly.express &gt;  &gt; Bubble
Charts
Bubble Charts in Python
How to make bubble charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a scatter plot in which a third dimension of the data is shown through the size of markers. For other
types of scatter plot, see the .
bubble chart 
operates on
a variety of types of data 
eas...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df.query("year==2007" ), x="gdpPercap" , y="lifeExp" ,
         size="pop", color="continent" ,
                 hover_name ="country" , log_x=True, size_max =60)
fig.show()
2 345678910002 345678910k2 345674050607080continent</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4], y=[10, 11, 12, 13],
    mode='markers' ,
    marker_size =[40, 60, 80, 100])
])
fig.show()
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 2/9</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4], y=[10, 11, 12, 13],
    mode='markers' ,
    marker=dict(
        color=['rgb(93, 164, 214)' , 'rgb(255, 144, 14)' ,
               'rgb(44, 160, 101)' , 'rgb(255, 65, 54)' ],
        opacity=[1, 0.8, 0.6, 0.4],
        size=[40, 60, 80, 100],
    )
)])
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
size = [20, 40, 60, 80, 100, 80, 60, 40, 20, 40]
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    y=[11, 12, 10, 11, 12, 11, 12, 13, 12, 11],
    mode='markers' ,
    marker=dict(
        size=size,
        sizemode ='area',
        sizeref=2.*max(size)/(40.**2),
        sizemin=4
    )
)])
fig.show()
2 4 6 8 101010.51111.51212.513
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 4/9</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4], y=[10, 11, 12, 13],
    text=['A&lt;br&gt;size: 40' , 'B&lt;br&gt;size: 60' , 'C&lt;br&gt;size: 80' , 'D&lt;br&gt;size: 100' ],
    mode='markers' ,
    marker=dict(
        color=['rgb(93, 164, 214)' , 'rgb(255, 144, 14)' ,  'rgb(44, 160, 101)' , 'rgb(255, 65, 54)' ],
        size=[40, 60, 80, 100],
    )
)])
fig.show()
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 5/9</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>])
fig.show
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
 2/9
Setting Marker Size and Color
Scaling the Size of Bubble Chartsimport plotly.graph_objects  as go
fig = go.Figure' , 'rgb' ,
               'rgb' , 'rgb' ],
        opacity=[1, 0.8, 0.6, 0.4],
        size=[40, 60, 80, 100],
    )
)])
fig.show
To scale the bubble size, use the attribute sizeref. We recommend using the following formula to calculate a sizeref value:
sizeref = 2. * max / 
Note that setting 'sizeref' to a value greater than 1, decreases the rendered marker sizes, while setting 'sizeref' to less than 1, increases the rendered marker sizes. See
 for more information.
Additionally, we recommend setting the sizemode attribute: 
 to area.
 /,
        sizemin=4
    )
)])
fig.show
2 4 6 8 101010.51111.51212.513
cts16/07/2025, 06:21 Bubble charts in Python
 4/9
Hover Text with Bubble Charts
import plotly.graph_objects  as go
fig = go.Figure' , 'rgb' ,  'rgb' , 'rgb' ],
        size=[40, 60, 80, 100],
    )
)])
fig.show
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
 5/9
Bubble Charts with Colorscale
import plotly.graph_objects  as go
fig = go.Figure
)])
fig.show
2 4 6 8 10 12 140246810121416
120125130135140145
cts16/07/2025, 06:21 Bubble charts in Python
 6/9
Categorical Bubble Charts
import plotly.graph_objects  as go
import plotly.express  as px
import pandas as pd
import math
# Load data, define hover text and bubble size
data = px.data.gapminder 
df_2007 = data[data['year']==2007]
df_2007 = df_2007.sort_values 
hover_text  = []
bubble_size  = []
for index, row in df_2007.iterrows :
    hover_text .append.format)
    bubble_size .append)
df_2007['text'] = hover_text
df_2007['size'] = bubble_size
sizeref = 2.*max/
# Dictionary with dataframes for each continent
continent_names  = ['Africa' , 'Americas' , 'Asia', 'Europe' , 'Oceania' ]
continent_data  = {continent :df_2007.query
                              for continent  in continent_names }
# Create figure
fig = go.Figure
for continent_name , continent  in continent_data .items:
    fig.add_trace )
# Tune marker appearance and layout
fig.update_traces )
fig.update_layout ,
    xaxis=dict' ),
        gridcolor ='white',
        type='log',
        gridwidth =2,
    ),
    yaxis=dict' ),
        gridcolor ='white',
        gridwidth =2,
    ),
    paper_bgcolor ='rgb' ,
    plot_bgcolor ='rgb' ,
)
fig.show
cts16/07/2025, 06:21 Bubble charts in Python
 7/9
Reference
What About Dash?See  for more information and chart attribute options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
Life Expectancy 
JOIN OUR MAILING LIST Products Pricing
cts16/07/2025, 06:21 Bubble charts in Python
 8/9
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!
SUBSCRIBE</description>
      </customization>
    </chart>
    <chart name="Categorical axes" source_file="Categorical axes in Python.pdf">
      <description>2-D Cartesian Axis Type and Auto-Detection
'linear' 
'log' 
'date' 
'category' see below
'multicategory' see below
First check for multicategory, then date, then category, else default to linear 
multicategory is just a shape test: is the array nested?
date and category: require more than twice as many distinct date or category strings as distinct numbers in order to choose that axis type.
Both of these test an evenly-spaced sample of at most 1000 values
Forcing an axis to be categorical &gt;  &gt;
Ca...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.bar(x=["a", "a", "b", 3], y = [1,2,3,4])
fig.update_xaxes (type='category' )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="nation" , x="count", color="medal", symbol="medal")
fig.update_traces (marker_size =10)
fig.show()
 and  are often shown with one categorical and one continuous axis.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="sex", y="total_bill" , color="smoker" )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, x="sex", y="total_bill" , color="smoker" )
fig.show()
 is the easy-to-use, high-level interface to Plotly, which  and
produces .</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="group", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack')
fig.update_xaxes (categoryorder ='category ascending' )
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Dot plots" source_file="Dot plots in Python.pdf">
      <description>Basic Dot Plot &gt;  &gt; Dot
Plots
Dot Plots in Python
How to make dot plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
Dot plots  are  with one
categorical axis and one continuous axis. They can be used to show changes between two  points in time or between two  conditions. Compared to
a , dot plots can be less cluttered and allow for an easier ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="nation" , x="count", color="medal", symbol="medal")
fig.update_traces (marker_size =10)
fig.show()
8 10 12 14 16 18 20 22 24South KoreaChinaCanadamedal
gold
silver
bronze
countnation
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 1/6
import plotly.express  as px
import pandas as pd
schools = ["Brown", "NYU", "Notre Dame" , "Cornell" , "Tufts", "Yale",
           "Dartmouth" , "Chicago" , "Columbia" , "Duke", "Georgetown" ,
           "Princeton" , "U.Penn" , "Stanford" , "MIT", "Harvard" ]
n_schools  = len(schools)
women_salary  = [72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112]
men_salary  = [92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165]
df = pd.DataFrame (dict(school=schools*2, salary=men_salary  + women_salary ,
                       gender=["Men"]*n_schools  + ["Women"]*n_schools ))</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
schools = ["Brown", "NYU", "Notre Dame" , "Cornell" , "Tufts", "Yale",
           "Dartmouth" , "Chicago" , "Columbia" , "Duke", "Georgetown" ,
           "Princeton" , "U.Penn" , "Stanford" , "MIT", "Harvard" ]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112],
    y=schools,
    marker=dict(color="crimson" , size=12),
    mode="markers" ,
    name="Women",
))
fig.add_trace (go.Scatter(
    x=[92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165],
    y=schools,
    marker=dict(color="gold", size=12),
    mode="markers" ,
    name="Men",
))
fig.update_layout (
    title=dict(
        text="Gender Earnings Disparity"
    ),
    xaxis=dict(
        title=dict(
            text="Annual Salary (in thousands)"
        )
    ),
    yaxis=dict(
        title=dict(
            text="School"
        )
    ),
)
fig.show()
80 100 120 140 160BrownNYUNotre DameCornellTuftsYaleDartmouthChicagoColumbiaDukeGeorgetownPrincetonU.PennStanfordMITHarvardWomen</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
country = ['Switzerland (2011)' , 'Chile (2013)' , 'Japan (2014)' ,
           'United States (2012)' , 'Slovenia (2014)' , 'Canada (2011)' ,
           'Poland (2010)' , 'Estonia (2015)' , 'Luxembourg (2013)' , 'Portugal (2011)' ]
voting_pop  = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]
reg_voters  = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=voting_pop ,
    y=country,
    name='Percent of estimated voting age population' ,
    marker=dict(
        color='rgba(156, 165, 196, 0.95)' ,
        line_color ='rgba(156, 165, 196, 1.0)' ,
    )
))
fig.add_trace (go.Scatter(
    x=reg_voters , y=country,
    name='Percent of estimated registered voters' ,
    marker=dict(
        color='rgba(204, 204, 204, 0.95)' ,
        line_color ='rgba(217, 217, 217, 1.0)'
    )
))
fig.update_traces (mode='markers' , marker=dict(line_width =1, symbol='circle' , size=16))
fig.update_layout (
    title=dict(text="Votes cast for ten lowest voting age population in OECD countries" ),
    xaxis=dict(
        showgrid =False,
        showline =True,
        linecolor ='rgb(102, 102, 102)' ,
        tickfont_color ='rgb(102, 102, 102)' ,
        showticklabels =True,
        dtick=10,
        ticks='outside' ,
        tickcolor ='rgb(102, 102, 102)' ,
    ),
    margin=dict(l=140, r=40, b=50, t=80),
    legend=dict(
        font_size =10,
        yanchor='middle' ,
        xanchor='right',
    ),
    width=800,
    height=600,
    paper_bgcolor ='white',
    plot_bgcolor ='white',
    hovermode ='closest' ,
)
fig.show()
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 4/6</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)40 50 60 70 80 90Switzerland (2011)Chile (2013)Japan (2014)United States (2012)Slovenia (2014)Canada (2011)Poland (2010)Estonia (2015)Luxembourg (2013)Portugal (2011)Percent of estimated voting age population</code>
        </example>
      </examples>
    </chart>
    <chart name="Dumbbell plots" source_file="Dumbbell plots in Python.pdf">
      <description>Basic Dumbbell Plot &gt;  &gt; Dumbbell
Plots
Dumbbell Plots in Python
How to create dumbbell plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
Dumbbell plots are useful for demonstrating change between two sets of data points, for example, the population change for a selection of countries for two different
years.
In this example, we compare life ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly import data
import pandas as pd
df = data.gapminder ()
df = df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([1952, 2002]))]
countries  = (
    df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([2002]))]
    .sort_values (by=["lifeExp" ], ascending =True)["country" ]
    .unique()
)
data = {"line_x" : [], "line_y" : [], "1952": [], "2002": [], "colors" : [], "years": [], "countries" : []}
for country in countries :
    data["1952"].extend([df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["2002"].extend([df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["line_x" ].extend(
        [
            df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0],
            df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0],
            None,
        ]
    )
    data["line_y" ].extend([country, country, None]),
fig = go.Figure(
    data=[
        go.Scatter(
            x=data["line_x" ],
            y=data["line_y" ],
            mode="lines",
            showlegend =False,
            marker=dict(
                color="grey"
            )
        ),
        go.Scatter(
            x=data["1952"],
            y=countries ,
            mode="markers" ,
            name="1952",
            marker=dict(
                color="green",
                size=10
            )
        ),
        go.Scatter(
            x=data["2002"],
            y=countries ,
            mode="markers" ,
            name="2002",
            marker=dict(
                color="blue",
                size=10
            )
        ),
    ]
)
fig.update_layout (
    title=dict(text="Life Expectancy in Europe: 1952 and 2002" ),
    height=1000,
    legend_itemclick =False
)
fig.show()
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 2/6</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import pandas as pd
import plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
df = df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([1952, 2002]))]
countries  = (
    df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([2002]))]
    .sort_values (by=["lifeExp" ], ascending =True)["country" ]
    .unique()
)
data = {"line_x" : [], "line_y" : [], "1952": [], "2002": [], "colors" : [], "years": [], "countries" : []}
for country in countries :
    data["1952"].extend([df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["2002"].extend([df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["line_x" ].extend(
        [
            df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0],
            df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0],
            None,
        ]
    )
    data["line_y" ].extend([country, country, None]),
fig = go.Figure(
    data=[
        go.Scatter(
            x=data["line_x" ],
            y=data["line_y" ],
            mode="markers+lines" ,
            showlegend =False,
            marker=dict(
                symbol="arrow",
                color="black",
                size=16,
                angleref ="previous" ,
                standoff =8
            )
        ),
        go.Scatter(
            x=data["1952"],
            y=countries ,
            name="1952",
            mode="markers" ,
            marker=dict(
                color="silver" ,
                size=16,
            )
        ),
        go.Scatter(
            x=data["2002"],
            y=countries ,
            name="2002",
            mode="markers" ,
            marker=dict(
                color="lightskyblue" ,
                size=16,
            ),
        ),
    ]
)
fig.update_layout (
    title=dict(text="Life Expectancy in Europe: 1952 and 2002" ),
    height=1000,
    legend_itemclick =False
)
fig.show()
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 4/6</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter45 50 55 60 65 70 75 80TurkeyRomaniaBulgariaHungarySerbiaSlovak RepublicMontenegroBosnia and HerzegovinaPolandCroatiaCzech RepublicAlbaniaSloveniaDenmarkPortugalIrelandGreeceBelgiumFinlandUnited KingdomNetherlandsGermanyAustriaNorwayFranceSpainSwedenItalyIcelandSwitzerland1952
2002Life Expectancy in Europe: 1952 and 2002
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 5/6
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure(
    data=[
        go.Scatter(
            x=data["line_x" ],
            y=data["line_y" ],
            mode="lines",
            showlegend =False,
            marker=dict(
                color="grey"
            )
        ),
        go.Scatter(
            x=data["1952"],
            y=countries ,
            mode="markers" ,
            name="1952",
            marker=dict(
                color="green",
                size=10
            )
        ),
        go.Scatter(
            x=data["2002"],
            y=countries ,
            mode="markers" ,
            name="2002",
            marker=dict(
                color="blue",
                size=10
            )
        ),
    ]
)
fig.update_layout (
    title=dict(text="Life Expectancy in Europe: 1952 and 2002" ),
    height=1000,
    legend_itemclick =False
)
fig.show()
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 2/6</code>
        </example>
      </examples>
    </chart>
    <chart name="Figure factory tables" source_file="Figure factory tables in Python.pdf">
      <description>Simple Table
Add Links &gt;  &gt; Figure
Factory Tables
Figure Factory Tables in Python
How to make tables in Python with Plotly's Figure Factory.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
Tables can be created using a , or by using a  as detailed in this page.
table trace type 
figure factory 
import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'P...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig = ff.create_table (data_matrix )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
data_matrix  = [['User', 'Language' , 'Chart Type' , '# of Views' ],
               ['&lt;a href="https://plotly.com/~empet/folder/home"&gt;empet&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/python/"&gt;Python&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~empet/8614/"&gt;Network Graph&lt;/a&gt;' ,
                298],
               ['&lt;a href="https://plotly.com/~Grondo/folder/home"&gt;Grondo&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/matlab/"&gt;Matlab&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Grondo/42/"&gt;Subplots&lt;/a&gt;' ,
                356],
               ['&lt;a href="https://plotly.com/~Dreamshot/folder/home"&gt;Dreamshot&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/"&gt;Bubble Map&lt;/a&gt;' ,
                262],
               ['&lt;a href="https://plotly.com/~FiveThirtyEight/folder/home"&gt;FiveThirtyEight&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~FiveThirtyEight/30/"&gt;Scatter&lt;/a&gt;' ,
                692],
               ['&lt;a href="https://plotly.com/~cpsievert/folder/home"&gt;cpsievert&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/r/"&gt;R&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~cpsievert/1130/"&gt;Surface&lt;/a&gt;' ,
                302]]
fig = ff.create_table (data_matrix )
fig.show()
import plotly.figure_factory  as ff
data_matrix  = [['Name', 'Equation' ],
               ['Pythagorean Theorem' , '$a^{2}+b^{2}=c^{2}$'],
               ['Euler\'s Formula' , '$F-E+V=2$' ],
               ['The Origin of Complex Numbers' , '$i^{2}=-1$'],
               ['Einstein \'s Theory of Relativity' , '$E=m c^ {2}$']]
fig =  ff.create_table (data_matrix )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[100:120]
fig =  ff.create_table (df_sample )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig =  ff.create_table (data_matrix , height_constant =20)
fig.show()
country year pop continent lifeExp gdpPercap</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[400:410]
colorscale  = [[0, '#4d004c' ],[.5, '#f2e5ff' ],[1, '#ffffff' ]]
fig =  ff.create_table (df_sample , colorscale =colorscale )
fig.show()
import plotly.figure_factory  as ff
text = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]
colorscale  = [[0, '#272D31' ],[.5, '#ffffff' ],[1, '#ffffff' ]]
font=['#FCFCFC' , '#00EE00' , '#008B00' , '#004F00' , '#660000' , '#CD0000' , '#FF3030' ]
fig = ff.create_table (text, colorscale =colorscale , font_colors =font)
fig.layout.width=250
fig.show()
country year pop continent lifeExp gdpPercap</code>
        </example>
      </examples>
    </chart>
    <chart name="Filled area plots" source_file="Filled area plots in Python.pdf">
      <description>Filled area plot with plotly.express
Filled area plot in Dash &gt;  &gt; Filled
Area Plots
Filled Area Plots in Python
How to make filled area plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
This example shows how to fill the area enclosed by traces.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operat...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.area(df, x="year", y="pop", color="continent" , line_group ="country" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Country's key performance analytics"),
    html.P("Select data on y-axis:"),
    dcc.Dropdown(
        id='y-axis',
        options=['lifeExp', 'pop', 'gdpPercap'],
        value='gdpPercap'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("y-axis", "value"))
def display_area(y):
    df = px.data.gapminder() # replace with your own data source
    countries = (
        df.country.drop_duplicates()
        .sample(n=10, random_state=42)
    )
 df df[df t ii( ti)]DOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.area(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"])
fig.show()
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy' )) # fill down to xaxis
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty' )) # fill to trace0 y
fig.show()gold silver bronze051015202530354045
nation</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy' ,
                    mode='none' # override default markers+lines
                    ))
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty' ,
                    mode= 'none'))
fig.show()
1 1.5 2 2.5 3 3.5 401234567 trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 4/10</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[3, 4, 8, 3],
    fill=None,
    mode='lines',
    line_color ='indigo' ,
    ))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4],
    y=[1, 6, 2, 6],
    fill='tonexty' , # fill area between trace0 and trace1
    mode='lines', line_color ='indigo' ))
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Gantt charts" source_file="Gantt charts in Python.pdf">
      <description>Gantt Charts and Timelines with plotly.express &gt;  &gt; Gantt
Charts
Gantt Charts in Python
How to make Gantt Charts in Python with Plotly. Gantt Charts use horizontal bars to represent the start and end times of tasks.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a type of bar chart that illustrates a project schedule. The chart lists the tasks to be performed on...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task")
fig.update_yaxes (autorange ="reversed" ) # otherwise tasks are listed from the bottom up
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Resource" )
fig.update_yaxes (autorange ="reversed" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Completion_pct =50),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Completion_pct =25),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Completion_pct =75)
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Completion_pct" )
fig.update_yaxes (autorange ="reversed" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Resource" , color="Resource" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
df = [dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
      dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
      dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )]
fig = ff.create_gantt (df)
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="High performance visualization" source_file="High performance visualization in Python.pdf">
      <description>New in Plotly.py version 6
You can improve the performance of generating Plotly figures that use a large number of data points by passing data as NumPy arrays, or in a format that Plotly can
convert easily to NumPy arrays, such as pandas and Polars Series or DataFrames. These formats will usually show better performance than passing data as a Python
list.
Plotly.py uses Plotly.js for rendering, which supports typed arrays. In Plotly.py, NumPy arrays and NumPy-convertible arrays are base64 encode...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv' )
dff = df.query('Lat &lt; 40.82' ).query('Lat &gt; 40.70' ).query('Lon &gt; -74.02' ).query('Lon &lt; -73.91' )
import datashader  as ds
cvs = ds.Canvas(plot_width =1000, plot_height =1000)
agg = cvs.points(dff, x='Lon', y='Lat')</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import fire
import datashader.transfer_functions  as tf
img = tf.shade(agg, cmap=fire)[::-1].to_pil()
import plotly.express  as px</code>
        </example>
      </examples>
    </chart>
    <chart name="Horizontal bar charts" source_file="Horizontal bar charts in Python.pdf">
      <description>Horizontal Bar Chart with Plotly Express
Basic Horizontal Bar Chart with Plotly Express
Configure horizontal bar chart &gt;  &gt; Horizontal
Bar Charts
Horizontal Bar Charts in Python
How to make horizontal bar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
See more examples of bar charts  and styling options .
here 
operates on a variety of ty...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="day", orientation ='h')
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="sex", color='day', orientation ='h',
             hover_data =["tip", "size"],
             height=400,
             title='Restaurant bills' )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Bar(
            x=[20, 14, 23],
            y=['giraffes' , 'orangutans' , 'monkeys' ],
            orientation ='h'))
fig.show()0 500 1000 1500 2000 2500 3000FemaleMaleday</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[20, 14, 23],
    name='SF Zoo' ,
    orientation ='h',
    marker=dict(
        color='hotpink' ,
        line=dict(color='deeppink' , width=3)
    )
))
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[12, 18, 29],
    name='LA Zoo' ,
    orientation ='h',
    marker=dict(
        color='dimgray' ,
        line=dict(color='black', width=3)
    )
))
fig.update_layout (barmode='stack')
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
import plotly.express  as px
data = {
    "Quarter" : ["Q1", "Q2", "Q3", "Q4"] * 3,
    "Region" : ["North", "North", "North", "North", "South", "South", "South", "South", "West", "West", "West", "West"],
    "Outcome" : [150, 200, 250, 300, 120, 180, 240, 310, 100, 150, 220, 280]
}
df = pd.DataFrame (data)
fig = px.bar(
    df, 
    x="Outcome" , 
    y="Region" ,
    orientation ="h",  
    facet_col ="Quarter" , 
    title="Number of Patients Served by Region and Quarter" , 
    labels={"Outcome" : "Patients Served" , "Region" : "Region" } 
)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>for i in range):
    for xd, yd in zip:
        fig.add_trace 
            )
        ))
fig.update_layout ,
    yaxis=dict,
    barmode='stack',
    paper_bgcolor ='lavenderblush' ,
    plot_bgcolor ='lavenderblush' ,
    margin=dict,
    showlegend =False,
)
annotations  = []
for yd, xd in zip:
    # labeling the y-axis
    annotations .append,
                            font=dict,
                            showarrow =False, align='right'))
    # labeling the first percentage of each bar 
    annotations .append + '%',
                            font=dict,
                            showarrow =False))
    # labeling the first Likert scale 
    if yd == y_data[-1]:
        annotations .append,
                                showarrow =False))
    space = xd[0]
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 5/11
Diverging Bar  Chart    for i in range):
            # labeling the rest of percentages for each bar 
            annotations .append, y=yd,
                                    text=str + '%',
                                    font=dict,
                                    showarrow =False))
            # labeling the Likert scale
            if yd == y_data[-1]:
                annotations .append, y=1.1,
                                        text=top_labels [i],
                                        font=dict,
                                        showarrow =False))
            space += xd[i]
fig.update_layout 
fig.show
Diverging bar charts show counts of positive outcomes or sentiments to the right of zero and counts of negative outcomes to the left of zero, allowing the reader to
easily spot areas of excellence and concern. This example allows the reader of the graph to infer the number of people offering a neutral response because the
neutral category, which is left implicit, would make the responses add to 100%.The course was effectively
organized21% 30% 21% 16% 12%The course developed my
abilities and skills for
the subject24% 31% 19% 15% 11%The course developed my
ability to think critically about
the subject27% 26% 23% 11%13%I would recommend this
course to a friend29%Strongly
agree
24%Agree
15%Neutral
18%Disagree
14%Strongly
disagree
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 6/11
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
df.rename
#achieve the diverging effect by putting a negative sign on the "disagree" answers 
for v in ["Disagree" ,"Strongly Disagree" ]:
    df[v]=df[v]*-1
fig = go.Figure
# this color palette conveys meaning:  blues for positive, red and orange for negative
color_by_category ={
    "Strongly Agree" :'darkblue' ,
    "Agree":'lightblue' ,
    "Disagree" :'orange' ,
    "Strongly Disagree" :'red',
}
# We want the legend to be ordered in the same order that the categories appear, left to right --
# which is different from the order in which we have to add the traces to the figure.
# since we need to create the "somewhat" traces before the "strongly" traces to display
# the segments in the desired order
legend_rank_by_category ={
    "Strongly Disagree" :1,
    "Disagree" :2,
    "Agree":3,
    "Strongly Agree" :4,
}
# Add bars for each category
for col in ["Disagree" ,"Strongly Disagree" ,"Agree","Strongly Agree" ]:
    fig.add_trace ,
        legendrank =legend_rank_by_category [col]
    ))
fig.update_layout 
fig.update_xaxes 
fig.show
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 7/11
0 50People should … help others who are less fortunatePeople who are better off should help friends who are less well offYou should take care of yourself and your family first…Those in need have to learn to take care of themselves…Strongly Disagree
Disagree
Agree
Strongly AgreeReactions to statements from the 2002 General Social Survey:
Percent of Responses
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 8/11
Bar Chart with Line Plot
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
y_saving  = [1.3586, 2.2623000000000002 , 4.9821999999999997 , 6.5096999999999996 ,
            7.4812000000000003 , 7.5133000000000001 , 15.2148, 17.520499999999998
            ]
y_net_worth  = [93453.919999999998 , 81666.570000000007 , 69889.619999999995 ,
               78381.529999999999 , 141395.29999999999 , 92969.020000000004 ,
               66090.179999999993 , 122379.3 ]
x = ['Japan', 'United Kingdom' , 'Canada' , 'Netherlands' ,
     'United States' , 'Belgium' , 'Sweden' , 'Switzerland' ]
# Creating two subplots
fig = make_subplots 
fig.add_trace ,
    ),
    name='Household savings, percentage of household disposable income' ,
    orientation ='h',
), 1, 1)
fig.add_trace , 1, 2)
fig.update_layout ,
    yaxis=dict,
    yaxis2=dict,
    xaxis=dict,
    xaxis2=dict,
    legend=dict,
    margin=dict,
    paper_bgcolor ='lavenderblush' ,
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 9/11
Reference    plot_bgcolor ='lavenderblush' ,
)
annotations  = []
y_s = np.round
y_nw = np.rint
# Adding labels
for ydn, yd, xd in zip:
    # labeling the scatter savings
    annotations .append + 'M',
                            font=dict,
                            showarrow =False))
    # labeling the bar net worth
    annotations .append + '%',
                            font=dict,
                            showarrow =False))
# Source
annotations .append, Household savings , '  +
                             'Household net worth . doi: '  +
                             '10.1787/cfc6f499-en ' ,
                        font=dict,
                        showarrow =False))
fig.update_layout 
fig.show
See more examples of bar charts and styling options .
See  for more information and chart attribute options!
here , Household savings , Household net worth . doi: 10.1787/cfc6f499-en 
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 10/11
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
 11/11</description>
      </customization>
    </chart>
    <chart name="Horizontal bar charts2" source_file="Horizontal bar charts in Python2.pdf">
      <description>Horizontal Bar Chart with Plotly Express
Basic Horizontal Bar Chart with Plotly Express
Configure horizontal bar chart &gt;  &gt; Horizontal
Bar Charts
Horizontal Bar Charts in Python
How to make horizontal bar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
See more examples of bar charts  and styling options .
here 
operates on a variety of ty...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="day", orientation ='h')
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="sex", color='day', orientation ='h',
             hover_data =["tip", "size"],
             height=400,
             title='Restaurant bills' )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Bar(
            x=[20, 14, 23],
            y=['giraffes' , 'orangutans' , 'monkeys' ],
            orientation ='h'))
fig.show()0 500 1000 1500 2000 2500 3000FemaleMaleday</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[20, 14, 23],
    name='SF Zoo' ,
    orientation ='h',
    marker=dict(
        color='hotpink' ,
        line=dict(color='deeppink' , width=3)
    )
))
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[12, 18, 29],
    name='LA Zoo' ,
    orientation ='h',
    marker=dict(
        color='dimgray' ,
        line=dict(color='black', width=3)
    )
))
fig.update_layout (barmode='stack')
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
import plotly.express  as px
data = {
    "Quarter" : ["Q1", "Q2", "Q3", "Q4"] * 3,
    "Region" : ["North", "North", "North", "North", "South", "South", "South", "South", "West", "West", "West", "West"],
    "Outcome" : [150, 200, 250, 300, 120, 180, 240, 310, 100, 150, 220, 280]
}
df = pd.DataFrame (data)
fig = px.bar(
    df, 
    x="Outcome" , 
    y="Region" ,
    orientation ="h",  
    facet_col ="Quarter" , 
    title="Number of Patients Served by Region and Quarter" , 
    labels={"Outcome" : "Patients Served" , "Region" : "Region" } 
)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>for i in range):
    for xd, yd in zip:
        fig.add_trace 
            )
        ))
fig.update_layout ,
    yaxis=dict,
    barmode='stack',
    paper_bgcolor ='lavenderblush' ,
    plot_bgcolor ='lavenderblush' ,
    margin=dict,
    showlegend =False,
)
annotations  = []
for yd, xd in zip:
    # labeling the y-axis
    annotations .append,
                            font=dict,
                            showarrow =False, align='right'))
    # labeling the first percentage of each bar 
    annotations .append + '%',
                            font=dict,
                            showarrow =False))
    # labeling the first Likert scale 
    if yd == y_data[-1]:
        annotations .append,
                                showarrow =False))
    space = xd[0]
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 5/11
Diverging Bar  Chart    for i in range):
            # labeling the rest of percentages for each bar 
            annotations .append, y=yd,
                                    text=str + '%',
                                    font=dict,
                                    showarrow =False))
            # labeling the Likert scale
            if yd == y_data[-1]:
                annotations .append, y=1.1,
                                        text=top_labels [i],
                                        font=dict,
                                        showarrow =False))
            space += xd[i]
fig.update_layout 
fig.show
Diverging bar charts show counts of positive outcomes or sentiments to the right of zero and counts of negative outcomes to the left of zero, allowing the reader to
easily spot areas of excellence and concern. This example allows the reader of the graph to infer the number of people offering a neutral response because the
neutral category, which is left implicit, would make the responses add to 100%.The course was effectively
organized21% 30% 21% 16% 12%The course developed my
abilities and skills for
the subject24% 31% 19% 15% 11%The course developed my
ability to think critically about
the subject27% 26% 23% 11%13%I would recommend this
course to a friend29%Strongly
agree
24%Agree
15%Neutral
18%Disagree
14%Strongly
disagree
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 6/11
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
df.rename
#achieve the diverging effect by putting a negative sign on the "disagree" answers 
for v in ["Disagree" ,"Strongly Disagree" ]:
    df[v]=df[v]*-1
fig = go.Figure
# this color palette conveys meaning:  blues for positive, red and orange for negative
color_by_category ={
    "Strongly Agree" :'darkblue' ,
    "Agree":'lightblue' ,
    "Disagree" :'orange' ,
    "Strongly Disagree" :'red',
}
# We want the legend to be ordered in the same order that the categories appear, left to right --
# which is different from the order in which we have to add the traces to the figure.
# since we need to create the "somewhat" traces before the "strongly" traces to display
# the segments in the desired order
legend_rank_by_category ={
    "Strongly Disagree" :1,
    "Disagree" :2,
    "Agree":3,
    "Strongly Agree" :4,
}
# Add bars for each category
for col in ["Disagree" ,"Strongly Disagree" ,"Agree","Strongly Agree" ]:
    fig.add_trace ,
        legendrank =legend_rank_by_category [col]
    ))
fig.update_layout 
fig.update_xaxes 
fig.show
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 7/11
0 50People should … help others who are less fortunatePeople who are better off should help friends who are less well offYou should take care of yourself and your family first…Those in need have to learn to take care of themselves…Strongly Disagree
Disagree
Agree
Strongly AgreeReactions to statements from the 2002 General Social Survey:
Percent of Responses
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 8/11
Bar Chart with Line Plot
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
y_saving  = [1.3586, 2.2623000000000002 , 4.9821999999999997 , 6.5096999999999996 ,
            7.4812000000000003 , 7.5133000000000001 , 15.2148, 17.520499999999998
            ]
y_net_worth  = [93453.919999999998 , 81666.570000000007 , 69889.619999999995 ,
               78381.529999999999 , 141395.29999999999 , 92969.020000000004 ,
               66090.179999999993 , 122379.3 ]
x = ['Japan', 'United Kingdom' , 'Canada' , 'Netherlands' ,
     'United States' , 'Belgium' , 'Sweden' , 'Switzerland' ]
# Creating two subplots
fig = make_subplots 
fig.add_trace ,
    ),
    name='Household savings, percentage of household disposable income' ,
    orientation ='h',
), 1, 1)
fig.add_trace , 1, 2)
fig.update_layout ,
    yaxis=dict,
    yaxis2=dict,
    xaxis=dict,
    xaxis2=dict,
    legend=dict,
    margin=dict,
    paper_bgcolor ='lavenderblush' ,
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 9/11
Reference    plot_bgcolor ='lavenderblush' ,
)
annotations  = []
y_s = np.round
y_nw = np.rint
# Adding labels
for ydn, yd, xd in zip:
    # labeling the scatter savings
    annotations .append + 'M',
                            font=dict,
                            showarrow =False))
    # labeling the bar net worth
    annotations .append + '%',
                            font=dict,
                            showarrow =False))
# Source
annotations .append, Household savings , '  +
                             'Household net worth . doi: '  +
                             '10.1787/cfc6f499-en ' ,
                        font=dict,
                        showarrow =False))
fig.update_layout 
fig.show
See more examples of bar charts and styling options .
See  for more information and chart attribute options!
here , Household savings , Household net worth . doi: 10.1787/cfc6f499-en 
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 10/11
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
 11/11</description>
      </customization>
    </chart>
    <chart name="Icicle charts" source_file="Icicle charts in Python.pdf">
      <description>Basic Icicle Plot with plotly.express &gt;  &gt; Icicle
Charts
Icicle Charts in Python
How to make Icicle Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
New in v5.0
Icicle charts visualize hierarchical data using rectangular sectors that cascade from root to leaves in one of four directions: up, down, left, or right. Similar to 
 and  charts, the hierarchy is define...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data = dict(
    character =["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parent=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])
fig =px.icicle(
    data,
    names='character' ,
    parents='parent' ,
    values='value',
)
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'day', 'time', 'sex'], values='total_bill' )
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.icicle(df, path=[px.Constant ("world"), 'continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ],
                  color_continuous_scale ='RdBu',
                  color_continuous_midpoint =np.average(df['lifeExp' ], weights=df['pop']))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                values='total_bill' , color='day')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()world Asia</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                values='total_bill' , color='time')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Line charts" source_file="Line charts in Python.pdf">
      <description>Line Plots with plotly.express &gt;  &gt; Line
Charts
Line Charts in Python
How to make line charts in Python with Plotly. Examples on creating and styling line charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.line, each data point is represented as a vertex 
of a ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("country=='Canada'" )
fig = px.line(df, x="year", y="lifeExp" , title='Life expectancy in Canada' )
fig.show()
1960 1970 1980 1990 2000707274767880Life expectancy in Canada
yearlifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 1/17</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color='country' )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Life expentancy progression of countries per continents'),
    dcc.Graph(id="graph"),
    dcc.Checklist(
        id="checklist",
        options=["Asia", "Europe", "Africa","Americas","Oceania"],
        value=["Americas", "Oceania"],
        inline=True
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("checklist", "value"))
def update_line_chart(continents):
    df = px.data.gapminder() # replace with your own data source
    mask = df.continent.isin(continents)
    fig = px.line(df[mask],
" " "lifE" l ' t')DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    x = [1, 3, 2, 4],
    y = [1, 2, 3, 4]
))
fig = px.line(df, x="x", y="y", title="Unsorted Input" )
fig.show()
df = df.sort_values (by="x")
fig = px.line(df, x="x", y="y", title="Sorted Input" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("country in ['Canada', 'Botswana']" )
fig = px.line(df, x="lifeExp" , y="gdpPercap" , color="country" , text="year")
fig.update_traces (textposition ="bottom right" )
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Patterns, hatching, texture" source_file="Patterns, hatching, texture in Python.pdf">
      <description>to double-encode variables  to improve accessibility for visually-impaired end-users
to encode an additional variable beyond just using color
to make charts that are easier to print in black and white
Patterned Charts with Plotly Express &gt;  &gt; Patterns,
Hatching, Texture
Patterns, Hatching, Texture in Python
How to use patterns  with bar charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" , pattern_shape ="nation" )
fig.show()
gold silver bronze051015202530354045
nation</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.area(df, x="medal", y="count", color="nation" , pattern_shape ="nation" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="total_bill" , color="sex", pattern_shape ="smoker" )
fig.show()gold silver bronze051015202530354045
nation</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"])
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_map ={
             "China": ".", "Canada" : "/", "South Korea" : "+"
             })
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>the px.bar, px.histogram, px.bar_polar and px.area functions support the pattern_shape argument. In the chart below, we double-encode nation using color and
pattern:
import plotly.express  as px
df = px.data.medals_long 
fig = px.bar
fig.show
gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 1/8
import plotly.express  as px
df = px.data.medals_long 
fig = px.area
fig.show
In the chart below we use px.histogram instead of px.bar to aggregate multiple values together, and encode one variable  using both color and x-position and
another  using patterns:
import plotly.express  as px
df = px.data.tips
fig = px.histogram 
fig.showgold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
Female Male050010001500200025003000sex, smoker
Female, No
Female, Yes
Male, No
Male, Yes
sexsum of total_bill
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 2/8
Controlling Pattern Assignment
In the charts above, the first value of the variable assigned pattern_shape gets the empty pattern, but this  can be
controlled using pattern_shape_sequence and pattern_shape_map, analogously to the way  can be mapped using Plotly
Express.
discrete colors 
Here we use pattern_shape_sequence to replace the defaults and include a pattern-shape for the first variable:
import plotly.express  as px
df = px.data.medals_long 
fig = px.bar
fig.show
Here we use pattern_shape_map to explictly assign a shape to each value of nation, regardless of order:gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 3/8
Black on White Patterns for Printimport plotly.express  as px
df = px.data.medals_long 
fig = px.bar
fig.show
When creating figures meant to be printed on black and white printers, it is better to replace the fill-color with the pattern, rather than to overlay it. This can be
controlled with the &lt;trace&gt;.marker.pattern.fillmode attribute, which defaults to "overlay" but can be set to "replace" instead. Changing this attribute, and using a
simpler default template and color scheme gives the following output:gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 4/8
import plotly.express  as px
df = px.data.medals_long 
fig = px.bar
fig.update_traces 
)
fig.show
Of course, this setting can be used without making the figure monochrome as well:gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 5/8
Patterns using Graph Objectsimport plotly.express  as px
df = px.data.medals_long 
fig = px.bar
fig.update_traces 
)
fig.show
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Bar class from plotly.graph_objects gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 6/8
Reference
What About Dash?import plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.add_trace )
fig.show
See  for more information and chart attribute options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupytera b00.511.522.53 trace 0
trace 1
trace 2
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 7/8
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
s16/07/2025, 06:27 Patterns, hatching, texture in Python
 8/8</description>
      </customization>
    </chart>
    <chart name="Pie charts" source_file="Pie charts in Python.pdf">
      <description>Pie chart with plotly express
Pie chart with repeated labels &gt;  &gt; Pie
Charts
Pie Charts in Python
How to make Pie Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
A pie chart is a circular statistical chart, which is divided into sectors to illustrate numerical proportion.
If you're looking instead for a multilevel hierarchical pie-like chart, go to the .
Sunbur...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" ).query("continent == 'Europe'" )
df.loc[df['pop'] &lt; 2.e6, 'country' ] = 'Other countries'  # Represent only large countries
fig = px.pie(df, values='pop', names='country' , title='Population of European continent' )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Analysis of the restaurant sales'),
    dcc.Graph(id="graph"),
    html.P("Names:"),
    dcc.Dropdown(id='names',
        options=['smoker', 'day', 'time', 'sex'],
        value='day', clearable=False
    ),
    html.P("Values:"),
    dcc.Dropdown(id='values',
        options=['total_bill', 'tip', 'size'],
        value='total_bill', clearable=False
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("names", "value"),
 I t("l ""l"))DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.pie(df, values='tip', names='day', color_discrete_sequence =px.colors.sequential .RdBu)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.pie(df, values='tip', names='day', color='day',
             color_discrete_map ={'Thur':'lightcyan' ,
                                 'Fri':'cyan',
                                 'Sat':'royalblue' ,
                                 'Sun':'darkblue' })
fig.show()35.6%33.8%
23.5%
7.1%Sat</code>
        </example>
      </examples>
    </chart>
    <chart name="Sankey diagram" source_file="Sankey diagram in Python.pdf">
      <description>Basic Sankey Diagram &gt;  &gt; Sankey
Diagram
Sankey Diagram in Python
How to make Sankey Diagrams in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a flow diagram, in which the width of arrows is proportional to the flow quantity.
Sankey diagram 
label ,
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      color = "blue"
    ),
    link = di...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Sankey(
    node = dict(
      pad = 15,
      thickness  = 20,
      line = dict(color = "black", width = 0.5),
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      color = "blue"
    ),
    link = dict(
      source = [0, 1, 0, 2, 3, 3], # indices correspond to labels, eg A1, A2, A1, B1, ...
      target = [2, 3, 3, 4, 4, 5],
      value = [8, 4, 2, 8, 4, 2]
  ))])
fig.update_layout (title_text ="Basic Sankey Diagram" , font_size =10)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import urllib, json
url = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'
response  = urllib.request.urlopen(url)
data = json.loads(response .read())</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">importsBiomass imports</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">importsCoal Coal reservesDistrict heating</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">importsNgasGas reservesThermal generation</code>
        </example>
      </examples>
    </chart>
    <chart name="Scatter plots" source_file="Scatter plots in Python.pdf">
      <description>Scatter plots with Plotly Express &gt;  &gt; Scatter
Plots
Scatter Plots in Python
How to make scatter plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
With px.scatter, each data point is represe...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 40246810121416
xy
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 1/25</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris() # iris is a pandas DataFrame
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 size='petal_length' , hover_data =['petal_width' ])
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color='petal_length' )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , symbol="species" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>N = 100
random_x  = np.linspace 
random_y0  = np.random.randn + 5
random_y1  = np.random.randn
random_y2  = np.random.randn - 5
fig = go.Figure
# Add traces
fig.add_trace )
fig.add_trace )
fig.add_trace )
fig.show
In , a third dimension of the data is shown through the size of markers. For more examples, see the 
bubble charts 
))
fig.show
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 18/25
Data Labels on Hoverimport plotly.graph_objects  as go
import numpy as np
t = np.linspace 
fig = go.Figure
fig.add_trace ,
    name='sin',
    mode='markers' ,
    marker_color ='rgba'
))
fig.add_trace ,
    name='cos',
    marker_color ='rgba'
))
# Set options common to all traces with fig.update_traces
fig.update_traces 
fig.update_layout ,
                  yaxis_zeroline =False, xaxis_zeroline =False)
fig.show
0 2 4 6 8 10−1−0.500.51sin
cosStyled Scatter
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 19/25
Scatter with a Color Dimensionimport plotly.graph_objects  as go
import pandas as pd
data= pd.read_csv 
fig = go.Figure) # hover text goes here
fig.update_layout )
fig.show
ALAZCACTDCGAIDINKSLAMDMIMSMTNVNJNYNDOKPARISDTXVTWAWI05M10M15M20M25M30M35M40MPopulation of USA States
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 20/25
Trace Zorderimport plotly.graph_objects  as go
import numpy as np
fig = go.Figure,
    mode='markers' ,
    marker=dict, #set color equal to a variable
        colorscale ='Viridis' , # one of plotly colorscales
        showscale =True
    )
))
fig.show
New in 5.21
For many trace types, including go.Scatter, you can define the order traces are drawn in by setting a zorder. Traces with a higher zorder appear at the front, with
traces with a lower zorder at the back. In this example, we give our trace for 'France' the highest zorder, meaning it is drawn in front of the other two traces:0 100 200 300 400 500−3−2−101234
−3−2−1012
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 21/25
Large Data Setsimport plotly.graph_objects  as go
import plotly.data  as data
df = data.gapminder 
df_europe  = df[df['continent' ] == 'Europe' ]
trace1 = go.Scatter)
trace2 = go.Scatter)
trace3 = go.Scatter)
layout = go.Layout)
fig = go.Figure
fig.show
Now in Plotly you can implement WebGL with Scattergl in place of Scatter
for increased speed, improved interactivity, and the ability to plot even more data!1950 1960 1970 1980 1990 2000 201064666870727476788082France
Germany
SpainLife Expectancy in Europe Over Time
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 22/25
import plotly.graph_objects  as go
import numpy as np
N = 100000
fig = go.Figure,
    y = np.random.randn,
    mode='markers' ,
    marker=dict,
        colorscale ='Viridis' ,
        line_width =1
    )
))
fig.show
−4 −3 −2 −1 0 1 2 3 4−4−2024
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 23/25
Referenceimport plotly.graph_objects  as go
import numpy as np
N = 100000
r = np.random.uniform
theta = np.random.uniform
fig = go.Figure, # non-uniform distribution
    y = r * np.sin, # zoom to see more points at the center
    mode='markers' ,
    marker=dict,
        colorscale ='Viridis' ,
        line_width =1
    )
))
fig.show
See  or 
 or  for more information
and chart attribute options!
function reference for px.scatter , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
 25/25</description>
      </customization>
    </chart>
    <chart name="Sunburst charts" source_file="Sunburst charts in Python.pdf">
      <description>Basic Sunburst Plot with plotly.express &gt;  &gt; Sunburst
Charts
Sunburst Charts in Python
How to make Sunburst Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
Sunburst plots visualize hierarchical data spanning outwards radially from root to leaves. Similar to  and
, the hierarchy is defined by labels  and parents attributes. The root starts from the center and
ch...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data = dict(
    character =["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parent=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])
fig = px.sunburst (
    data,
    names='character' ,
    parents='parent' ,
    values='value',
)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['day', 'time', 'sex'], values='total_bill' )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.sunburst (df, path=['continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ],
                  color_continuous_scale ='RdBu',
                  color_continuous_midpoint =np.average(df['lifeExp' ], weights=df['pop']))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['sex', 'day', 'time'], values='total_bill' , color='day')
fig.show()Asia</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['sex', 'day', 'time'], values='total_bill' , color='time')
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Tables" source_file="Tables in Python.pdf">
      <description>Basic Table
Styled Table &gt;  &gt; Tables
Tables in Python
How to make tables in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this page
go.Table provides a Table object for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for header, columns,
rows or individual cells. Table is using a column-major order, ie. the grid is represented as ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(header=dict(values=['A Scores' , 'B Scores' ]),
                 cells=dict(values=[[100, 90, 80, 90], [95, 85, 75, 95]]))
                     ])
fig.show()
100
90
80
9095
85
75
95
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 1/9</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(
    header=dict(values=['A Scores' , 'B Scores' ],
                line_color ='darkslategray' ,
                fill_color ='lightskyblue' ,
                align='left'),
    cells=dict(values=[[100, 90, 80, 90], # 1st column
                       [95, 85, 75, 95]], # 2nd column
               line_color ='darkslategray' ,
               fill_color ='lightcyan' ,
               align='left'))
])
fig.update_layout (width=500, height=300)
fig.show()
100
90
80
9095
85
75
95
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 2/9</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv' )
fig = go.Figure(data=[go.Table(
    header=dict(values=list(df.columns),
                fill_color ='paleturquoise' ,
                align='left'),
    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population ],
               fill_color ='lavender' ,
               align='left'))
])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, html, Input, Output, dash_table
import pandas as pd
data_url = 'https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv'
df = pd.read_csv(data_url) # replace with your own data source
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Simple interactive table'),
    html.P(id='table_out'),
    dash_table.DataTable(
        id='table',
        columns=[{"name": i, "id": i}
                 for i in df.columns],
        data=df.to_dict('records'),
        style_cell=dict(textAlign='left'),
        style_header=dict(backgroundColor="paleturquoise"),
        style_data=dict(backgroundColor="lavender")
    ),
])
@app.callback(
    Output('table_out', 'children'),
 I t('tbl''ti ll'))DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
values = [['Salaries' , 'Office' , 'Merchandise' , 'Legal', '&lt;b&gt;TOTAL&lt;br&gt;EXPENSES&lt;/b&gt;' ], #1st col
  ["Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ]]
fig = go.Figure(data=[go.Table(
  columnorder  = [1,2],
  columnwidth  = [80,400],
  header = dict(
    values = [['&lt;b&gt;EXPENSES&lt;/b&gt;&lt;br&gt;as of July 2017' ],
                  ['&lt;b&gt;DESCRIPTION&lt;/b&gt;' ]],
    line_color ='darkslategray' ,
    fill_color ='royalblue' ,
    align=['left','center' ],
    font=dict(color='white', size=12),
    height=40
  ),
  cells=dict(
    values=values,
    line_color ='darkslategray' ,
    fill=dict(color=['paleturquoise' , 'white']),
    align=['left', 'center' ],
    font_size =12,
    height=30)
    )
])
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Tables2" source_file="Tables in Python2.pdf">
      <description>Basic Table
Styled Table &gt;  &gt; Tables
Tables in Python
How to make tables in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this page
go.Table provides a Table object for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for header, columns,
rows or individual cells. Table is using a column-major order, ie. the grid is represented as ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(header=dict(values=['A Scores' , 'B Scores' ]),
                 cells=dict(values=[[100, 90, 80, 90], [95, 85, 75, 95]]))
                     ])
fig.show()
100
90
80
9095
85
75
95
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 1/9</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(
    header=dict(values=['A Scores' , 'B Scores' ],
                line_color ='darkslategray' ,
                fill_color ='lightskyblue' ,
                align='left'),
    cells=dict(values=[[100, 90, 80, 90], # 1st column
                       [95, 85, 75, 95]], # 2nd column
               line_color ='darkslategray' ,
               fill_color ='lightcyan' ,
               align='left'))
])
fig.update_layout (width=500, height=300)
fig.show()
100
90
80
9095
85
75
95
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 2/9</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv' )
fig = go.Figure(data=[go.Table(
    header=dict(values=list(df.columns),
                fill_color ='paleturquoise' ,
                align='left'),
    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population ],
               fill_color ='lavender' ,
               align='left'))
])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, html, Input, Output, dash_table
import pandas as pd
data_url = 'https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv'
df = pd.read_csv(data_url) # replace with your own data source
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Simple interactive table'),
    html.P(id='table_out'),
    dash_table.DataTable(
        id='table',
        columns=[{"name": i, "id": i}
                 for i in df.columns],
        data=df.to_dict('records'),
        style_cell=dict(textAlign='left'),
        style_header=dict(backgroundColor="paleturquoise"),
        style_data=dict(backgroundColor="lavender")
    ),
])
@app.callback(
    Output('table_out', 'children'),
 I t('tbl''ti ll'))DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
values = [['Salaries' , 'Office' , 'Merchandise' , 'Legal', '&lt;b&gt;TOTAL&lt;br&gt;EXPENSES&lt;/b&gt;' ], #1st col
  ["Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ]]
fig = go.Figure(data=[go.Table(
  columnorder  = [1,2],
  columnwidth  = [80,400],
  header = dict(
    values = [['&lt;b&gt;EXPENSES&lt;/b&gt;&lt;br&gt;as of July 2017' ],
                  ['&lt;b&gt;DESCRIPTION&lt;/b&gt;' ]],
    line_color ='darkslategray' ,
    fill_color ='royalblue' ,
    align=['left','center' ],
    font=dict(color='white', size=12),
    height=40
  ),
  cells=dict(
    values=values,
    line_color ='darkslategray' ,
    fill=dict(color=['paleturquoise' , 'white']),
    align=['left', 'center' ],
    font_size =12,
    height=30)
    )
])
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Treemap charts" source_file="Treemap charts in Python.pdf">
      <description>Basic Treemap with plotly.express
Treemap of a rectangular DataFrame with plotly.express &gt;  &gt; Treemap
Charts
Treemap Charts in Python
How to make Treemap Charts with Plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
 visualize hierarchical data using nested rectangles. The input data format is the same as for 
 and : the hierarchy is defined by 
  and 
 attributes...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.treemap(
    names = ["Eve","Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"]
)
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'day', 'time', 'sex'], values='total_bill' )
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.treemap(df, path=[px.Constant ("world"), 'continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ],
                  color_continuous_scale ='RdBu',
                  color_continuous_midpoint =np.average(df['lifeExp' ], weights=df['pop']))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                 values='total_bill' , color='day')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()world</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                 values='total_bill' , color='time')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Plotly Python Graphing Library" source_file="pyvy_2x/Plotly Python Graphing Library.pdf">
      <description>Plotly Open Source Graphing Library for Python
Plotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box
plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.
Plotly.py is  and you can .
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
free and open source 
view the source, report issues or contribute on G...</description>
    </chart>
    <chart name="Random walk" source_file="pyvy_2x/Random walk in Python.pdf">
      <description>Random Walk in 1D &gt;  &gt; Random Walk
Random Walk in Python
Learn how to use Python to make a Random Walk
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
l = 100
steps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l) # l steps
position  = np.cumsum(steps) # integrate the position by summing steps values
y = 0.05 * np.random.randn(l)
fig = go.Figure(data=go.Scatter(
    x=position ,
    y=y,
    mode='markers' ,
    name='Random Walk in 1D' ,
    marker=dict(
        color=np.arange(l),
        size=7,
        colorscale ='Reds',
        showscale =True,
    )
))
fig.update_layout (yaxis_range =[-1, 1])
fig.show()
−4 −2 0 2 4 6 8 10−1−0.500.51
020406080
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 2/6</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
l = 1000
x_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l) # l steps
y_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l) # l steps
x_position  = np.cumsum(x_steps) # integrate the position by summing steps values
y_position  = np.cumsum(y_steps) # integrate the position by summing steps values
fig = go.Figure(data=go.Scatter(
    x=x_position ,
    y=y_position ,
    mode='markers' ,
    name='Random Walk' ,
    marker=dict(
        color=np.arange(l),
        size=8,
        colorscale ='Greens' ,
        showscale =True
    )
))
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
l = 1000</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
l = 1000</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
A  can be thought of as a random process in which a token or a marker is randomly moved around some
space, that is, a space with a metric used to compute distance. It is more commonly conceptualized in one dimension , two dimensions
 or three dimensions  in Cartesian space, where $\mathbb{Z}$ represents the set of integers. In the visualizations below, we will be
using  as well as a colorscale to denote the time sequence of the walk.
random walk 
16/07/2025, 06:17 Random walk in Python
 1/6
Random Walk in 2Dimport plotly.graph_objects  as go
import numpy as np
np.random.seed
l = 100
steps = np.random.choice + 0.05 * np.random.randn # l steps
position  = np.cumsum # integrate the position by summing steps values
y = 0.05 * np.random.randn
fig = go.Figure,
        size=7,
        colorscale ='Reds',
        showscale =True,
    )
))
fig.update_layout 
fig.show
−4 −2 0 2 4 6 8 10−1−0.500.51
020406080
16/07/2025, 06:17 Random walk in Python
 2/6
Random walk and diffusionimport plotly.graph_objects  as go
import numpy as np
l = 1000
x_steps = np.random.choice + 0.2 * np.random.randn # l steps
y_steps = np.random.choice + 0.2 * np.random.randn # l steps
x_position  = np.cumsum # integrate the position by summing steps values
y_position  = np.cumsum # integrate the position by summing steps values
fig = go.Figure,
        size=8,
        colorscale ='Greens' ,
        showscale =True
    )
))
fig.show
In the two following charts we show the link between random walks and diffusion. We compute a large number N of random walks representing for examples
molecules in a small drop of chemical. While all trajectories start at 0, after some time the spatial distribution of points is a Gaussian distribution. Also, the average
distance to the origin grows as $\sqrt$.−25 −20 −15 −10 −5 0 5 10 15 20−30−20−10010
0200400600800
16/07/2025, 06:17 Random walk in Python
 3/6
import plotly.graph_objects  as go
import numpy as np
l = 1000
N = 10000
steps = np.random.choice) + 0.05 * np.random.standard_normal ) # l steps
position  = np.cumsum # integrate all positions by summing steps values along time axis
fig = go.Figure) # positions at final time step
fig.show
−100 −50 0 50 100050100150200250
16/07/2025, 06:17 Random walk in Python
 4/6
Advanced Tipimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
l = 1000
N = 10000
t = np.arange
steps = np.random.choice) + 0.05 * np.random.standard_normal ) # l steps
position  = np.cumsum # integrate the position by summing steps values
average_distance  = np.std # average distance
fig = make_subplots 
fig.add_trace , 1, 1)
fig.add_trace , 1, 2)
fig.update_xaxes 
fig.update_yaxes 
fig.update_yaxes 
fig.update_layout 
fig.show
We can formally think of a 1D random walk as a point jumping along the integer number line. Let $Z_i$ be a random variable that takes on the values +1 and -1. Let
this random variable represent the steps we take in the random walk in 1D . Also, as with the above visualizations, let us
assume that the probability of moving left and right is just $\frac{1}{2}$. Then, consider the sum
Sn=n
∑
i=0Zi
where S_n represents the point that the random walk ends up on after n steps have been taken.
To find the expected value of $S_n$, we can compute it directly. Since each $Z_i$ is independent, we have
E=n
∑
i=0E
but since $Z_i$ takes on the values +1 and -1 then
E=1 ⋅P+−1 ⋅P=−=01
21
2
Therefore, we expect our random walk to hover around $0$ regardless of how many steps we take in our walk.0 200 400 600 800051015202530
0 200 400 600 80002004006008001000
16/07/2025, 06:17 Random walk in Python
 5/6
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:17 Random walk in Python
 6/6</description>
      </customization>
    </chart>
    <chart name="pyvy_2x" source_file="pyvy_2x/pyvy_2x.md">
      <description>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>&lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;</description>
      </customization>
    </chart>
    <chart name="pyvy_2x" source_file="pyvy_2x/pyvy_2x.txt">
      <description>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>&lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;</description>
      </customization>
    </chart>
    <chart name="pyvy_2x_01x" source_file="pyvy_2x/pyvy_2x_01x.txt" />
    <chart name="pyvy_2x_02x" source_file="pyvy_2x/pyvy_2x_02x.txt" />
    <chart name="Axes" source_file="pyvy_2x1/Axes in Python.pdf">
      <description>The axis object is 
. The axis object is 
. The axis object is 
. The axis object is 
. The axis object is 
. The axis object is .
2-D Cartesian Axis Types and Auto-Detection
'linear' as described in this page
'log' 
'date' 
'category' 
'multicategory' 
First check for multicategory, then date, then category, else default to linear 
multicategory is just a shape test: is the array nested?
date and category: require more than twice as many distinct date or category strings as distinct numbers in ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.bar(x=["a", "a", "b", 3], y = [1,2,3,4])
fig.update_xaxes (type='category' )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex")
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex",
    labels=dict(total_bill ="Total Bill ($)" , tip="Tip ($)" , sex="Payer Gender" )
)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.bar(df, x=["Apples" , "Oranges" ], y=[10,20], color=["Here", "There"],
    labels=dict(x="Fruit", y="Amount" , color="Place")
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive Plotly Express axes'),
    html.Button("Rotate labels", n_clicks=0,
                id='button'),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("button", "n_clicks"))
def rotate_figure(n_clicks):
    df = px.data.tips() # replace with your own data source
    fig = px.histogram(df, x="sex", height=500)
    fig.update_xaxes(tickangle=n_clicks*45)
    return fig
app.run(debug=True)DOWNLOAD</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Axis titles are automatically set to the column names when .
using Plotly Express with a data frame as input a b 300.511.522.533.54
xy
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 2/43
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
Axis titles  can also be overridden using the labels argument of Plotly Express functions:
legend titles 
import plotly.express  as px
df = px.data.tips
fig = px.scatter" , tip="Tip " , sex="Payer Gender" )
)
fig.show
The PX labels argument can also be used without a data frame argument:10 20 30 40 50246810sex
Female
Male
total_billtip
10 20 30 40 50246810Payer Gender
Female
Male
Total Bill Tip 
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 3/43
Rotating tick labels in Dashimport plotly.express  as px
fig = px.bar
)
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 4/43
Moving Tick Labels Inside the PlotSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now 
app.layout = html.Div,
    html.Button,
    dcc.Graph,
])
@app.callback,
    Input)
def rotate_figure:
    df = px.data.tips # replace with your own data source
    fig = px.histogram
    fig.update_xaxes
    return fig
app.runDOWNLOAD
Interactive Plotly Express axes
ROTATE LABELS
Female Male020406080100120140160
sexcount
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 5/43
Specifying Label Aliasesimport plotly.express  as px
df = px.data.stocks-1
fig = px.bar
fig.update_yaxes 
fig.show
New in 5.14
With labelalias, you can specify replacement text for specific tick and hover labels. In this example, the dataset has the values of "Sat" and "Sun" in the day column. By
setting labelalias=dict, we swap these out for "Saturday" and "Sunday".Jan 2018Apr 2018Jul 2018 Oct 2018Jan 2019Apr 2019Jul 2019 Oct 2019Jan 2020−0.1−0.0500.050.10.150.2
date
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 6/43
Set axis title text with Graph Objectsimport plotly.express  as px
import pandas as pd
df = px.data.tips
df = df[df.day.isin].groupby.sum
fig = px.bar
fig.update_xaxes )
fig.show
Axis titles are set using the nested title.text property of the x or y axis. Here is an example of creating a new figure and using update_xaxes and update_yaxes, with
magic underscore notation, to set the axis titles.Saturday Sunday020040060080010001200140016001800
daytotal_bill
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 7/43
Set axis title positionimport plotly.express  as px
fig = px.line
fig.update_xaxes 
fig.update_yaxes 
fig.show
This example sets standoff attribute to cartesian axes to determine the distance between the tick labels and the axis title. Note that the axis title position is always
constrained within the margins, so the actual standoff distance is always less than the set or default value. By default 
 is True in Plotly template for the cartesian axis, so the margins will be pushed to fit the axis title at given standoff distance.
automargin 0 0.2 0.4 0.6 0.8 100.20.40.60.81
TimeValue A
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 8/43
Set axis title fontimport plotly.graph_objects  as go
fig = go.Figure)
fig.update_xaxes 
fig.update_yaxes 
fig.show
Here is an example that configures the font family, size, and color for the axis titles in a figure created using Plotly Express.
DecemberJanuaryFebruary11.522.533.54
MonthTemperature
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 9/43
Tick Placement, Color, and Style
Toggling axis tick marksimport plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_xaxes )
fig.update_yaxes )
fig.show
Axis tick marks are disabled by default for the default plotly theme, but they can easily be turned on by setting the ticks axis property to "inside"  or "outside" .
Here is an example of turning on inside x-axis and y-axis ticks in a faceted figure created using Plotly Express. Note how the col argument to update_yaxes is used to
only turn on the y-axis ticks for the left-most subplot.2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 10/43
Set number of tick marks import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_xaxes 
fig.update_yaxes 
fig.show
The approximate number of ticks displayed for an axis can be specified using the nticks axis property.
Here is an example of updating the y-axes of a figure created using Plotly Express to display approximately 20 ticks.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_yaxes 
fig.show2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 11/43
Set start position and distance between ticks
Set exact location of axis ticksThe tick0 and dtick axis properties can be used to control to placement of axis ticks as follows: If specified, a tick will fall exactly on the location of tick0 and additional
ticks will be added in both directions at intervals of dtick.
Here is an example of updating the y axis of a figure created using Plotly Express to position the ticks at intervals of 0.5, starting at 0.25.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_yaxes 
fig.show
It is possible to configure an axis to display ticks at a set of predefined locations by setting the tickvals property to an array of positions.
Here is an example of setting the exact location of ticks on the y axes of a figure created using Plotly Express.2 3 44.254.755.255.756.256.757.257.75
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 12/43
Style tick marksimport plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_yaxes 
fig.show
As discussed above, tick marks are disabled by default in the default plotly theme, but they can be enabled by setting the ticks axis property to "inside"  or "outside" .
The appearance of these tick marks can be customized by setting their length , width , and color .
Here is an example of enabling and styling the tick marks of a faceted figure created using Plotly Express. Note how the col argument to update_yaxes is used to only
turn on and style the y-axis ticks for the left-most subplot.2 3 45.15.96.37.5
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 13/43
Step for tick labelsimport plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_xaxes 
fig.update_yaxes 
fig.show
New in v5.6
You can set a step for tick labels with ticklabelstep. In this example, we hide labels between every 2 ticks on the y axes. Similarly, this can be used with
fig.update_xaxes for x axes: fig.update_xaxes.2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 14/43
Toggling axis labelsimport plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_yaxes 
fig.show
The axis tick mark labels can be disabled by setting the showticklabels axis property to False.
Here is an example of disabling tick labels in all subplots for a faceted figure created using Plotly Express.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_xaxes 
fig.update_yaxes 
fig.show2 3 45678
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 15/43
Set axis label rotation and font
Auto Tick Angle OptionsThe orientation of the axis tick mark labels is configured using the tickangle axis property. The value of tickangle is the angle of rotation, in the clockwise direction, of
the labels from vertical in units of degrees. The font family, size, and color for the tick labels are stored under the tickfont axis property.
Here is an example of rotating the x-axis tick labels by 45 degrees, and customizing their font properties, in a faceted histogram figure created using Plotly Express.
import plotly.express  as px
df = px.data.tips
fig = px.histogram 
fig.update_xaxes )
fig.show
New in 5.19
If tickangle is not explicitly set, its default value is auto, meaning if the label needs to be rotated to avoid labels overlapping, it will rotate by either 30 or 90 degrees.
Using autotickangles, you can also specify a list of angles for tickangle to use. If tickangle is auto and you provide a list of angles to autotickangles, the label angle will
be set to the first value in the list that prevents overlap.FemaleMale050100150200250300
FemaleMale
sex sexsum of tipsmoker=No smoker=Yes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 16/43
Enumerated Ticks with Tickvals and Ticktextimport plotly.express  as px
df = px.data.gapminder 
df = df.loc[ &amp; ]
fig = px.histogram 
fig.update_xaxes 
fig.show
The tickvals and ticktext axis properties can be used together to display custom tick label text at custom locations along an axis. They should be set to lists of the same
length where the tickvals list contains positions along the axis, and ticktext contains the strings that should be displayed at the corresponding positions.
Here is an example.AfghanistanBahrainBangladeshCambodiaChinaHong Kong, ChinaIndiaIndonesiaIranIraqIsraelJapanJordanKorea, Dem. Rep.Korea, Rep.KuwaitLebanonMalaysiaMongoliaMyanmarNepalOmanPakistanPhilippinesSaudi ArabiaSingaporeSri LankaSyriaTaiwanThailandVietnamWest Bank and GazaYemen, Rep.05k10k15k20k25k30k35k
countrysum of gdpPercap
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
 17/43
Adding minor ticksimport plotly.graph_objects  as go
import pandas as pd
apple_df  = pd.read_csv 
# Convert 'Date' column to datetime format
apple_df ['Date'] = pd.to_datetime 
# Set 'Date' column as index
apple_df .set_index 
# Filter for 2016
apple_df_2016  = apple_df .loc['2016']
# Create figure and add line
fig = go.Figure
fig.add_trace )
# Set custom x-axis labels
fig.update_xaxes ],
)
# Prefix y-axis tick labels with dollar sign
fig.update_yaxes 
# Set figure title
fig.update_layout 
fig.show
new in 5.8
You can position and style minor ticks on a Cartesian axis using the minor attribute. This takes a dict of properties to apply to minor ticks. See the 
 for full details on the accepted keys in this dict.
figure reference</description>
      </customization>
    </chart>
    <chart name="Continuous color scales and color bars" source_file="pyvy_2x1/Continuous color scales and color bars in Python.pdf">
      <description>Continuous vs Discrete Color
Continuous Color Concepts
color scales represent a mapping between the range 0 to 1 and some color domain within which colors are to be interpolated . Color scale defaults depend on the layout.colorscales attributes of the active 
, and can be explicitly specified using the color_continuous_scale argument for many  functions or
the colorscale argument in various graph_objects such as layout.coloraxis or marker.colorscale in go.Scatter traces or colorscale in go.Heatm...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str)
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="String 'size' values mean discrete colors" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str)
df["size"] = df["size"].astype(float)
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
colorscales = px.colors.named_colorscales()
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive color scale'),
    html.P("Select your palette:"),
    dcc.Dropdown(
        id='dropdown',
        options=colorscales,
        value='viridis'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def change_colorscale(scale):
    df = px.data.iris() # replace with your own data source
 fi tt(DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" ,
                 color="sepal_length" , color_continuous_scale =px.colors.sequential .Viridis)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Plotly Express 
built-in color scales 
Most  functions accept a color argument which automatically assigns data values to continuous color if the data is numeric. If
the data contains strings, the color will automatically be considered . This means that
numeric strings must be parsed to be used for continuous color, and conversely, numbers used as category codes must be converted to strings.
Plotly Express 
discrete  
For example, in the tips dataset, the size column contains numbers:
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:07 Continuous color scales and color bars in Python
 1/17
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
Converting this column to strings is very straightforward:
import plotly.express  as px
df = px.data.tips
df["size"] = df["size"].astype
fig = px.scatter
fig.show
If you have stringified numbers you can convert back just as easily:10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
10 20 30 40 50246810size
2
3
4
1
6
5String 'size' values mean discrete colors
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
 2/17
Colorscales in Dashimport plotly.express  as px
df = px.data.tips
df["size"] = df["size"].astype
df["size"] = df["size"].astype
fig = px.scatter
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
template 
built-in color scales 
Here is an example that creates a scatter plot using Plotly Express, with points colored using the Viridis color scale.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
colorscales = px.colors.named_colorscales
app = Dash
app.layout = html.Div,
    html.P,
    dcc.Dropdown,
    dcc.Graph,
])
@app.callback,
    Input)
def change_colorscale:
    df = px.data.iris # replace with your own data source
 fi tt
fig = px.scatter
fig.show
It is also possible to specify color scales by name. Here is an example that specifies the Inferno color scale by name, as a string
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
You can reverse a  by appending _r to its name, for color scales given either as a string or a plotly object.
built-in color scale 2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
 5/17
Explicitly Constructing a Color scaleimport plotly.express  as px
df = px.data.gapminder .query.sort_values 
fig = px.bar
fig.show
import plotly.express  as px
data = [[1, .3, .5, .9],
        [.3, .1, .4, 1],
        [.2, .8, .9, .3]]
fig = px.imshow
fig.show
The Plotly Express color_continuous_scale argument accepts explicitly-constructed color scales as well:0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BAfricaAsiaAmericasEuropeOceania
404550556065707580lifeExp
popcontinent
0 1 2 32.521.510.50−0.5
0.10.20.30.40.50.60.70.80.91
16/07/2025, 06:07 Continuous color scales and color bars in Python
 6/17
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
The example above provided a list of CSS colors to construct a scale, which inferred the reference points to be evenly spaced, but specific reference points can be
provided as well. The following example has the same result:
import plotly.express  as px
df = px.data.iris
fig = px.scatter, , ])
fig.show2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
 7/17
Constructing a Discrete or Discontinuous Color Scale
Explicitly setting a Color RangeYou can create a discrete color scale, with discontinuous color, by setting the same reference point twice in a row. This is useful for example with chart types that
don't support discrete colors, like . See below for how to customize tick text.
Parallel Coordinates plots 
import plotly.express  as px
df = px.data.iris
fig = px.parallel_coordinates ,   ,
                                                     , ,
                                                     ,  ])
fig.show
When using the range of the input data as the color range is inappropriate, for example when producing many figures which must have comparable color ranges, or
to clip the color range to account for outliers, the Plotly Express range_color argument can be used. Here we clip the top of the color range above the lower range of
the data and extend it below the lower range of the data:
11.522.53species_id
4.555.566.577.5sepal_length
7.9
4.322.533.54sepal_width
4.4
2123456petal_length
6.9
10.511.522.5petal_width
2.5
0.111.21.41.61.822.22.42.62.83species_id
3
1
16/07/2025, 06:07 Continuous color scales and color bars in Python
 8/17
Setting the Midpoint of a Color Range for a Diverging Color scaleimport plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
Diverging color scales have a well-defined midpoint color, and are best-used when that midpoint is mapped to a meaningful data value. The
color_continuous_midpoint argument to most Plotly Express functions is used for this. It cannot be used with range_color because setting it forces the color range to
be centered on the midpoint while including the entire dataset. This means that for asymmetric data distributions, not all colors in the color scale will appear in the
figure.
For example, a diverging color scale could be used to highlight points with a higher and lower value than the median in a choropleth map like this:2 2.5 3 3.5 4 4.54.555.566.577.58
55.566.577.58sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
 9/17
Hiding or Customizing the Plotly Express Color Barimport plotly.express  as px
df = px.data.gapminder .query
avg_lifeExp  = .sum/df['pop'].sum
fig = px.choropleth 
fig.show
Plotly Express binds all traces to , rather than using trace-specific color axes. This means that the color bar can
configured there, for example it can be hidden:
layout.coloraxis 405060708090lifeExpWorld Average Life Expectancy in 2007 in years was 68.9
16/07/2025, 06:07 Continuous color scales and color bars in Python
 10/17
import plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.update_layout 
fig.show
You can also configure the title, size, placement and tick marks and labels on a color bar:
0 10 20 30 40 500246810No color bar on this density plot
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
 11/17
Customizing Tick Text on Discrete Color Barsimport plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.update_layout ,
    thicknessmode ="pixels" , thickness =50,
    lenmode="pixels" , len=200,
    yanchor="top", y=1,
    ticks="outside" , ticksuffix =" bills" ,
    dtick=5
))
fig.show
This is the same example as the Parallel Coordinates plot above, with customized tick text for species:
0 10 20 30 40 500246810
0 bills5 bills10 bills15 bills20 bills25 bills30 billsNumber of Bills per CellCustomized color bar on this density plot
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
 12/17
Customizing Tick Text on Logarithmic Color Barsimport plotly.express  as px
df = px.data.iris
fig = px.parallel_coordinates ,   ,
                                                     , ,
                                                     ,  ])
fig.update_layout ,
    tickvals =[1,2,3],
    ticktext =["setosa" ,"versicolor" ,"virginica" ],
    lenmode="pixels" , len=100,
))
fig.show
You can customize text on a logarithmic color bar to make it more readable:
setosaversicolorvirginicaSpecies
4.555.566.577.5sepal_length
7.9
4.322.533.54sepal_width
4.4
2123456petal_length
6.9
10.511.522.5petal_width
2.5
0.1
16/07/2025, 06:07 Continuous color scales and color bars in Python
 13/17
Using Label Aliases on Colorbarsimport plotly.express  as px
import numpy as np
df = px.data.gapminder .query
fig = px.scatter, hover_name ="country" , log_x=True)
fig.update_layout ,
    tickvals =[6,7,8,9],
    ticktext =["1M", "10M", "100M", "1B"],
))
fig.show
New in 5.14
Using labelalias you can replace some labels on the colorbar with alternative values. In this example, the colorbar has five tickvals. Using labelalias, instead of
displaying all labels as the numbers in tickvals, we swap out three of the labels for text.2 51M2 510M2 5100M2 51B240455055606570758085
1M10M100M1BPopulation
poplifeExp
16/07/2025, 06:07 Continuous color scales and color bars in Python
 14/17
import plotly.graph_objects  as go
import urllib.request  as request
import json
# Load heatmap data
response  = request.urlopen
dataset = json.load
# Create and show figure
fig = go.Figure
fig.add_trace ,
        tickmode ="array",
        tickvals =[2, 25, 50, 75, 100],
        labelalias ={100: "Hot", 50: "Mild", 2: "Cold"},
        ticks="outside"
    )
))
fig.show
0 10 20 30 40010203040
Cold25Mild75HotSurface Heat
16/07/2025, 06:07 Continuous color scales and color bars in Python
 15/17
Custom Discretized Heatmap Color scale with Graph Objects
import plotly.graph_objects  as go
fig = go.Figure
fig.add_trace  of the values have color rgb
        [0, "rgb" ],
        [0.1, "rgb" ],
        # Let values between 10-20% of the min and max of z
        # have color rgb
        [0.1, "rgb" ],
        [0.2, "rgb" ],
        # Values between 20-30% of the min and max of z
        # have color rgb
        [0.2, "rgb" ],
        [0.3, "rgb" ],
        [0.3, "rgb" ],
        [0.4, "rgb" ],
        [0.4, "rgb" ],
        [0.5, "rgb" ],
        [0.5, "rgb" ],
        [0.6, "rgb" ],
        [0.6, "rgb" ],
        [0.7, "rgb" ],
        [0.7, "rgb" ],
        [0.8, "rgb" ],
        [0.8, "rgb" ],
        [0.9, "rgb" ],
        [0.9, "rgb" ],
        [1.0, "rgb" ]
    ],
    colorbar =dict
))
fig.show
16/07/2025, 06:07 Continuous color scales and color bars in Python
 16/17
Color scale for Scatter Plots with Graph Objects
import plotly.graph_objects  as go
fig = go.Figure
# Create list from 0 to 39 to use as x, y, and color
values = list)
fig.add_trace 
        ),
        colorscale ="Viridis"
    ),
    mode="markers" ))
fig.show
0 2 4 6 8−0.4−0.200.20.4
0123456789
16/07/2025, 06:07 Continuous color scales and color bars in Python
 17/17</description>
      </customization>
    </chart>
    <chart name="Creating and updating figures" source_file="pyvy_2x1/Creating and updating figures in Python.pdf">
      <description>Figures As Dictionaries &gt;  &gt;
Creating and Updating Figures
Creating and Updating Figures in Python
Creating and Updating Figures with Plotly's Python graphing library
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
The plotly Python package exists to create, manipulate and  graphical figures  represented by 
. The rendering process uses the  under the
hood although Pyt...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.show(fig)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],
    layout=go.Layout(
        title=go.layout.Title(text="A Figure Specified By A Graph Object" )
    )
)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
dict_of_fig  = dict({
    "data": [{"type": "bar",
              "x": [1, 2, 3],
              "y": [1, 3, 2]}],
    "layout" : {"title": {"text": "A Figure Specified By A Graph Object With A Dictionary" }}
})
fig = go.Figure(dict_of_fig )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],
    layout=go.Layout(height=600, width=800)
)
fig.layout.template  = None # to slim down the output
print("Dictionary Representation of A Graph Object: \n\n" + str(fig.to_dict()))
print("\n\n")
print("JSON Representation of A Graph Object: \n\n" + str(fig.to_json()))
print("\n\n")0.5 1 1.5 2 2.5 3 3.500.511.522.53A Figure Specified By A Graph Object With A Dictionary</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
import json
fig = px.line(
    x=["a","b","c"], y=[1,3,2], # replace with your own data source
    title="sample figure", height=325
)
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Displaying figure structure as JSON'),
    dcc.Graph(id="graph", figure=fig),
    dcc.Clipboard(target_id="structure"),
    html.Pre(
        id='structure',
        style={
            'border': 'thin lightgrey solid',
            'overflowY': 'scroll',
            'height': '275px'
        }
    ),
])DOWNLOAD

Displaying figure structure as JSON
{
  "data": [
    {
      "hovertemplate": "x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;",
      "legendgroup": "",
      "line": {
        "color": "#636efa",
        "dash": "solid"
      },
      "marker": {
        "symbol": "circle"
}a b c11.522.53sample figure
xy
naries</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>.update_layout 
 .update_xaxes 
 .update_traces ,
     selector =dict)
).show
Trace and layout properties can be updated using property assignment syntax. Here is an example of setting the figure title using property assignment.
import plotly.graph_objects  as go
fig = go.Figure)
fig.layout.title.text = "Using Property Assignment Syntax With A Graph Object Figure"
fig.show2 3 44.555.566.577.58
2 3 4 2 3 4species
setosa
versicolor
virginicaChaining Multiple Figure Operations With A Plotly Express Figure
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
0.5 1 1.5 2 2.5 3 3.500.511.522.53Using Property Assignment Syntax With A Graph Object Figure
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
 27/29
What About Dash?And here is an example of updating the bar outline using property assignment.
import plotly.graph_objects  as go
fig = go.Figure)
fig.data[0].marker.line.width = 4
fig.data[0].marker.line.color = "black"
fig.show
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter0.5 1 1.5 2 2.5 3 3.500.511.522.53
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
 28/29
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
 29/29</description>
      </customization>
    </chart>
    <chart name="Discrete colors" source_file="pyvy_2x1/Discrete colors in Python.pdf">
      <description>Discrete vs Continuous Color
Discrete Color Concepts
color sequences are lists of colors to be mapped onto discrete data values. No interpolation occurs when using color sequences, unlike with 
, and each color is used as-is. Color sequence defaults depend on the layout.colorway attribute of the active 
, and can be explicitly specified using the color_discrete_sequence argument for many  functions.
legends are visible representations of the mapping between colors and data values. Legend markers...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" ,
                 title="String 'smoker' values mean discrete colors" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str)
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="String 'size' values mean discrete colors" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str) #convert to string
df["size"] = df["size"].astype(float) #convert back to numeric
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()10 20 30 40 50246810size
2
3
4
1
6
5String 'size' values mean discrete colors
total_billtip
10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 3/12</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Interactive color mode option with Dash"),
    html.P("Color mode:"),
    dcc.RadioItems(
        id='color-mode',
        value='discrete',
        options=['discrete', 'continuous'],
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("color-mode", "value"))
def generate_chart(mode):
    df = px.data.tips() # replace with your own data source
    if mode == 'discrete':
        df["size"] = df["size"].astype(str)
lDOWNLOAD</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Plotly Express 
Legends are configurable 
continuous color bars 
Most Plotly Express functions accept a color argument which automatically assigns data values to discrete colors if the data is non-numeric. If the data is numeric,
the color will automatically be considered . This means that numeric strings must be parsed to be used for continuous color, and
conversely, numbers used as category codes must be converted to strings.
continuous 
For example, in the tips dataset, the smoker column contains strings:
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ence
ues16/07/2025, 06:08 Discrete colors in Python
 1/12
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
The size column, however, contains numbers:
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
Converting this column to strings is very straightforward, but note that the ordering in the legend is not sequential by default :10 20 30 40 50246810smoker
No
YesString 'smoker' values mean discrete colors
total_billtip
10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
 2/12
import plotly.express  as px
df = px.data.tips
df["size"] = df["size"].astype
fig = px.scatter
fig.show
Converting a string column to a numeric one is also quite straightforward:
import plotly.express  as px
df = px.data.tips
df["size"] = df["size"].astype #convert to string
df["size"] = df["size"].astype #convert back to numeric
fig = px.scatter
fig.show10 20 30 40 50246810size
2
3
4
1
6
5String 'size' values mean discrete colors
total_billtip
10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
 3/12
Discrete Colors in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
app.layout = html.Div,
    html.P,
    dcc.RadioItems,
    dcc.Graph,
])
@app.callback,
    Input)
def generate_chart:
    df = px.data.tips # replace with your own data source
    if mode == 'discrete':
        df["size"] = df["size"].astype
lDOWNLOAD
Interactive color mode option with Dash
Color mode:
discrete
continuous
10 20 30 40 50246810'size' values mean using DISCRETE colors
size
2
3
4
1
6
5
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
 4/12
Color Sequences in Plotly Express
By default, Plotly Express will use the color sequence from the active 's layout.colorway attribute, and the default active template is
plotly which uses the plotly color sequence. You can choose any of the following built-in qualitative color sequences from the px.colors.qualitative module, however,
or define your own.
template 
import plotly.express  as px
fig = px.colors.qualitative .swatches 
fig.show
Color sequences in the px.colors.qualitative module are stored as lists of CSS colors:
import plotly.express  as px
print
Here is an example that creates a scatter plot using Plotly Express, with points colored using the built-in qualitative G10 color sequence.VividSafePrismPastelBoldAntiqueSet3Pastel2Set2Dark2Pastel1Set1Light24Dark24AlphabetT10G10D3Plotlyplotly.colors.qualitative
['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3', '#FF6692', '#B6E880', '#FF97FF', '#FECB52']
ence
ues16/07/2025, 06:08 Discrete colors in Python
 5/12
Explicitly Constructing a Color Sequenceimport plotly.express  as px
df = px.data.gapminder 
fig = px.line
fig.show
The Plotly Express color_discrete_sequence argument accepts explicitly-constructed color sequences as well, as lists of CSS colors:
import plotly.express  as px
df = px.data.gapminder .query
fig = px.bar
fig.show1960 1970 1980 1990 2000304050607080continent
Asia
Europe
Africa
Americas
OceaniaBuilt-in G10 color sequence
yearlifeExp
0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BOceaniaAmericasAfricaEuropeAsiacontinent
Asia
Europe
Africa
Americas
OceaniaExplicit color sequence
popcontinent
ence
ues16/07/2025, 06:08 Discrete colors in Python
 6/12
Directly Mapping Colors to Data ValuesWarning: If your color sequence is has fewer colors than the number of unique values in the column you are mapping to color, the colors will cycle through and repeat,
possibly leading to ambiguity:
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
The example above assigned colors to data values on a first-come-first-served basis, but you can directly map colors to data values if this is important to your
application with color_discrete_map. Note that this does not change the order in which values appear in the figure or legend, as can be controlled below:10 20 30 40 50246810day
Sun
Sat
Thur
FriAmbiguous! Explicit color sequence cycling because it is too short
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
 7/12
import plotly.express  as px
df = px.data.gapminder .query
fig = px.bar
fig.show
If your data set already contains valid CSS colors which you wish to use directly, you can pass the special value "identity" to color_discrete_map, in which case the
legend is hidden by default, and the color does not appear in the hover label:
import plotly.express  as px
fig = px.bar
fig.show0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BOceaniaAmericasAfricaEuropeAsiacontinent
Asia
Europe
Africa
Americas
OceaniaExplicit color mapping
popcontinent
a b c00.511.522.53
xy
ence
ues16/07/2025, 06:08 Discrete colors in Python
 8/12
Controlling Discrete Color Order
Plotly Express lets you specify an ordering over categorical variables with category_orders, which will apply to colors and legends as well as symbols, 
 and . This can be used with either color_discrete_sequence or color_discrete_map.
axes</description>
      </customization>
    </chart>
    <chart name="Figure factory tables" source_file="pyvy_2x1/Figure factory tables in Python.pdf">
      <description>Simple Table
Add Links &gt;  &gt; Figure
Factory Tables
Figure Factory Tables in Python
How to make tables in Python with Plotly's Figure Factory.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
Tables can be created using a , or by using a  as detailed in this page.
table trace type 
figure factory 
import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'P...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig = ff.create_table (data_matrix )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
data_matrix  = [['User', 'Language' , 'Chart Type' , '# of Views' ],
               ['&lt;a href="https://plotly.com/~empet/folder/home"&gt;empet&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/python/"&gt;Python&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~empet/8614/"&gt;Network Graph&lt;/a&gt;' ,
                298],
               ['&lt;a href="https://plotly.com/~Grondo/folder/home"&gt;Grondo&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/matlab/"&gt;Matlab&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Grondo/42/"&gt;Subplots&lt;/a&gt;' ,
                356],
               ['&lt;a href="https://plotly.com/~Dreamshot/folder/home"&gt;Dreamshot&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/"&gt;Bubble Map&lt;/a&gt;' ,
                262],
               ['&lt;a href="https://plotly.com/~FiveThirtyEight/folder/home"&gt;FiveThirtyEight&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~FiveThirtyEight/30/"&gt;Scatter&lt;/a&gt;' ,
                692],
               ['&lt;a href="https://plotly.com/~cpsievert/folder/home"&gt;cpsievert&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/r/"&gt;R&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~cpsievert/1130/"&gt;Surface&lt;/a&gt;' ,
                302]]
fig = ff.create_table (data_matrix )
fig.show()
import plotly.figure_factory  as ff
data_matrix  = [['Name', 'Equation' ],
               ['Pythagorean Theorem' , '$a^{2}+b^{2}=c^{2}$'],
               ['Euler\'s Formula' , '$F-E+V=2$' ],
               ['The Origin of Complex Numbers' , '$i^{2}=-1$'],
               ['Einstein \'s Theory of Relativity' , '$E=m c^ {2}$']]
fig =  ff.create_table (data_matrix )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[100:120]
fig =  ff.create_table (df_sample )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig =  ff.create_table (data_matrix , height_constant =20)
fig.show()
country year pop continent lifeExp gdpPercap</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[400:410]
colorscale  = [[0, '#4d004c' ],[.5, '#f2e5ff' ],[1, '#ffffff' ]]
fig =  ff.create_table (df_sample , colorscale =colorscale )
fig.show()
import plotly.figure_factory  as ff
text = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]
colorscale  = [[0, '#272D31' ],[.5, '#ffffff' ],[1, '#ffffff' ]]
font=['#FCFCFC' , '#00EE00' , '#008B00' , '#004F00' , '#660000' , '#CD0000' , '#FF3030' ]
fig = ff.create_table (text, colorscale =colorscale , font_colors =font)
fig.layout.width=250
fig.show()
country year pop continent lifeExp gdpPercap</code>
        </example>
      </examples>
    </chart>
    <chart name="Gantt charts" source_file="pyvy_2x1/Gantt charts in Python.pdf">
      <description>Gantt Charts and Timelines with plotly.express &gt;  &gt; Gantt
Charts
Gantt Charts in Python
How to make Gantt Charts in Python with Plotly. Gantt Charts use horizontal bars to represent the start and end times of tasks.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Basic Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a type of bar chart that illustrates a project schedule. The chart lists the tasks to be performed on...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task")
fig.update_yaxes (autorange ="reversed" ) # otherwise tasks are listed from the bottom up
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Resource" )
fig.update_yaxes (autorange ="reversed" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Completion_pct =50),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Completion_pct =25),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Completion_pct =75)
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Completion_pct" )
fig.update_yaxes (autorange ="reversed" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Resource" , color="Resource" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
df = [dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
      dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
      dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )]
fig = ff.create_gantt (df)
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Hover text and formatting" source_file="pyvy_2x1/Hover text and formatting in Python.pdf">
      <description>Hover Labels
Hovermode closest 
Hovermode x or y &gt;  &gt; Hover
Text and Formatting
Hover Text and Formatting in Python
How to use hover text and formatting in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
One of the most deceptively-powerful features of interactive visualization using Plotly is the ability for the user to reveal more information abou...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="layout.hovermode='closest' (the default)" )
fig.update_traces (mode="markers+lines" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="layout.hovermode='x'" )
fig.update_traces (mode="markers+lines" , hovertemplate =None)
fig.update_layout (hovermode ="x")
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="layout.hovermode='x unified'" )
fig.update_traces (mode="markers+lines" , hovertemplate =None)
fig.update_layout (hovermode ="x unified" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Life expectancy plot with a selectable hover mode'),
    html.P("Select hovermode:"),
    dcc.RadioItems(
        id='hovermode',
        inline=True,
        options=['x', 'x unified', 'closest'],
        value='closest'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("hovermode", "value"))
def update_hovermode(mode):
    df = px.data.gapminder().query("continent=='Oceania'") # replace with your own data source
    fig = px.line(
 df " " "lifE" l " t"DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
t = np.linspace (0, 2 * np.pi, 100)
fig = go.Figure()
fig.add_trace (go.Scatter(x=t, y=np.sin(t), name='sin(t)' ))
fig.add_trace (go.Scatter(x=t, y=np.cos(t), name='cost(t)' ))
fig.update_layout (hovermode ='x unified' )
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Installation _ Dash for Python Documentation _ Plotly" source_file="pyvy_2x1/Installation _ Dash for Python Documentation _ Plotly.pdf">
      <description>S tar 23,448
Dash Python  &gt; Installation
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. Sign up for early access
now.
 Dash Installation
In your terminal, install dash.
pip install dash
This also brings along the plotly graphing library. This library is under active development, so install and
upgrade frequently.
We also recommend installing Pandas , which is required by Plotly Express  and used in many of our examples.
pip install pandas
With Dash ...</description>
    </chart>
    <chart name="Multiple chart types" source_file="pyvy_2x1/Multiple chart types in Python.pdf">
      <description>Chart Types versus Trace Types
Multiple Trace Types with Plotly Express &gt;  &gt;
Multiple Chart Types
Multiple Chart Types in Python
How to design figures with multiple chart types in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
Plotly's  supports defining  of   with attached traces of 
 . This means that Plotly figures are not constrained to representing a fixe...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fruits = ["apples" , "oranges" , "bananas" ]
fig = px.line(x=fruits, y=[1,3,2], color=px.Constant ("This year" ),
             labels=dict(x="Fruit", y="Amount" , color="Time Period" ))
fig.add_bar(x=fruits, y=[2,1,3], name="Last year" )
fig.show()
apples oranges bananas00.511.522.53Time Period</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly import data
df = data.tips()[data.tips()["day"] == "Sun"]
mean_values_df  = df.groupby(by=["sex", "smoker" ], as_index =False).mean(
    numeric_only =True
)
smoker_mean  = mean_values_df [mean_values_df .smoker == "Yes"].sort_values (
    by="tip", ascending =False
)
non_smoker_mean  = mean_values_df [mean_values_df .smoker == "No"].sort_values (
    by="tip", ascending =False
)
smoker = df[df.smoker == "Yes"].sort_values (by="tip", ascending =False)
non_smoker  = df[df.smoker == "No"].sort_values (by="tip", ascending =False)
fig = go.Figure(
    layout=dict(
        xaxis=dict(categoryorder ="category descending" ),
        yaxis=dict(range=[0, 7]),
        scattermode ="group",
        legend=dict(groupclick ="toggleitem" ),
    )
)
fig.add_trace (
    go.Bar(
        x=smoker_mean .sex,
        y=smoker_mean .tip,
        name="Average" ,
        marker_color ="IndianRed" ,
        offsetgroup ="smoker" ,
        legendgroup ="smoker" ,
        legendgrouptitle_text ="Smoker" ,
    )
)
fig.add_trace (
    go.Scatter(
        x=smoker.sex,
        y=smoker.tip,
        mode="markers" ,
        name="Individual tips" ,
        marker=dict(color="LightSlateGrey" , size=5),
        offsetgroup ="smoker" ,
        legendgroup ="smoker" ,
    )
)
fig.add_trace (
    go.Bar(
        x=non_smoker_mean .sex,
        y=non_smoker_mean .tip,
        name="Average" ,
        marker_color ="LightSalmon" ,
        offsetgroup ="non-smoker" ,
        legendgroup ="non-smoker" ,
        legendgrouptitle_text ="Non-Smoker" ,
    )
)
fig.add_trace (
    go.Scatter(
        x=non_smoker .sex,
        y=non_smoker .tip,
        mode="markers" ,
        name="Individual tips" ,
        marker=dict(color="LightSteelBlue" , size=5),
        offsetgroup ="non-smoker" ,
        legendgroup ="non-smoker" ,
    )
)
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 3/7</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (
    go.Scatter(
        x=[0, 1, 2, 3, 4, 5],
        y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]
    ))
fig.add_trace (
    go.Bar(
        x=[0, 1, 2, 3, 4, 5],
        y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]
    ))
fig.show()Male Female01234567</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import json
import urllib
response  = urllib.request.urlopen(
    "https://raw.githubusercontent.com/plotly/datasets/master/steepest.json" )
data = json.load(response )</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
Plotly Express exposes a number of functions such as px.scatter and px.choropleth which generally speaking only contain traces of the same type, with exceptions
made for  and .
trendlines 
marginal distribution plots 
Figures produced with Plotly Express functions support the add_trace method documented below, just like figures created with 
 so it is easy to start with a Plotly Express figure containing only traces of a given type, and add traces of another type.
graph objects 
import plotly.express  as px
fruits = ["apples" , "oranges" , "bananas" ]
fig = px.line,
             labels=dict)
fig.add_bar
fig.show
apples oranges bananas00.511.522.53Time Period
This year
Last year
FruitAmount
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
 1/7
Grouped Bar and Scatter Chart
New in 5.12
In this example, we display individual data points with a grouped scatter chart and show averages using a grouped bar chart. offsetgroup links the bar trace for
smoker with the scatter trace for smoker, and the bar trace for non-smoker with the scatter trace for non-smoker. If you deselect a trace using the legend, other
traces maintain the position of the traces they are linked to.
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
 2/7
import plotly.graph_objects  as go
from plotly import data
df = data.tips[data.tips["day"] == "Sun"]
mean_values_df  = df.groupby.mean
smoker_mean  = mean_values_df [mean_values_df .smoker == "Yes"].sort_values 
non_smoker_mean  = mean_values_df [mean_values_df .smoker == "No"].sort_values 
smoker = df[df.smoker == "Yes"].sort_values 
non_smoker  = df[df.smoker == "No"].sort_values 
fig = go.Figure,
        yaxis=dict,
        scattermode ="group",
        legend=dict,
    )
)
fig.add_trace 
)
fig.add_trace ,
        offsetgroup ="smoker" ,
        legendgroup ="smoker" ,
    )
)
fig.add_trace 
)
fig.add_trace ,
        offsetgroup ="non-smoker" ,
        legendgroup ="non-smoker" ,
    )
)
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
 3/7
Line Chart and a Bar Chartfig.show
import plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.showMale Female01234567
Smoker
Average
Individual tips
Non-Smoker
Average
Individual tips
0 1 2 3 4 5−1−0.500.511.5trace 0
trace 1
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
 4/7
A Contour and Scatter Plot of the Method of Steepest Descent
Trace Zorderimport plotly.graph_objects  as go
# Load data
import json
import urllib
response  = urllib.request.urlopen
data = json.load
# Create figure
fig = go.Figure
fig.add_trace 
)
fig.add_trace 
    )
)
fig.show
New in 5.21
You can move a trace in front of or behind another trace by setting its zorder. All traces have a default zorder of 0. In the following example, we set zorder on the bar
trace to 1 to move it in front of the scatter trace.−1 −0.5 0 0.5 1−1−0.500.51
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
 5/7
Referenceimport plotly.graph_objects  as go
x = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
y_bar = [10, 15, 7, 10, 17, 15, 14, 20, 16, 19, 15, 17]
y_area = [12, 13, 10, 14, 15, 13, 16, 18, 15, 17, 14, 16]
area_trace  = go.Scatter,
)
bar_trace  = go.Bar,
)
fig = go.Figure
fig.show
See  for more information and attribute options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
 7/7</description>
      </customization>
    </chart>
    <chart name="Orca management" source_file="pyvy_2x1/Orca management in Python.pdf">
      <description>Overview
What is orca?
Installing orca
conda
$ conda install -c plotly plotly-orca==1.2.1 psutil requests
npm + pip
$ npm install -g electron@1.8.4 orca $ pip install psutil requests
Standalone Binaries + pip
$ pip install psutil requests &gt;  &gt; Orca
Management
Orca Management in Python
This section covers the low-level details of how plotly.py uses orca to perform static image generation.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundam...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure( go.Scatter(x=[1,2,3], y=[1,3,2] ) )
fig.write_image ("fig1.svg" )
fig.write_image ("fig1.png" )</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import files
files.download ('fig1.svg' )
files.download ('fig1.png' )</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.orca.config</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.orca.status</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Once this is done you can use this code to make, show and export a figure:
import plotly.graph_objects  as go
fig = go.Figure )
fig.write_image 
fig.write_image 
The files can then be downloaded with:
from google.colab  import files
files.download 
files.download 
Now let's create a simple scatter plot with 100 random points of varying color and size.
  1
  2
  3
  4
16/07/2025, 06:04 Orca management in Python
 2/9
configimport plotly.graph_objects  as go
import numpy as np
np.random.seed
# Generate scatter plot data
N = 100
x = np.random.rand
y = np.random.rand
colors = np.random.rand
sz = np.random.rand * 30
# Build and display figure
fig = go.Figure
fig.add_trace )
fig.show
We can use the plotly.io.orca.config object to view the current orca configuration settings.
0 0.2 0.4 0.6 0.8 100.20.40.60.81
16/07/2025, 06:04 Orca management in Python
 3/9
statusimport plotly.io  as pio
pio.orca.config
We can use the plotly.io.orca.status object to see the current status of the orca server
import plotly.io  as pio
pio.orca.status
Since no image export operations have been performed yet, the orca server is not yet running.
Let's export this figure as an SVG image, and record the runtime.orca configuration
------------------
server_url: None
executable: orca
port: None
timeout: None
default_width: None
default_height: None
default_scale: 1
default_format: png
mathjax: 
topojson: None
mapbox_access_token: None
use_xvfb: auto
constants
---------
plotlyjs: /home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/package_data/plotly.min.js
config_file: /home/circleci/.plotly/.orca
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
 4/9
%%time
import plotly.io  as pio
from IPython.display  import SVG, display
img_bytes  = pio.to_image 
display)
By checking the status object again, we see that the orca server is now running
import plotly.io  as pio
pio.orca.status
Let's perform this same export operation again, now that the server is already running.
0 0.2 0.4 0.6 0.8 100.20.40.60.81
CPU times: user 44.2 ms, sys: 23.6 ms, total: 67.8 ms
Wall time: 3.62 s
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
 5/9
Shutdown the Server%%time
import plotly.io  as pio
from IPython.display  import SVG, display
img_bytes  = pio.to_image 
display)
The difference in runtime is dramatic. Starting the server and exporting the first image takes a couple seconds, while exporting an image with a running server is
much faster.
By default, the orca server will continue to run until the main Python process exits. It can also be manually shut down by calling the plotly.io.orca.shutdown_server
function. Additionally, it is possible to configure the server to shut down automatically after a certain period of inactivity. See the timeout configuration parameter
below for more information.
Regardless of how the server is shut down, it will start back up automatically the next time an image export operation is performed.
import plotly.io  as pio
pio.orca.shutdown_server 
pio.orca.status
0 0.2 0.4 0.6 0.8 100.20.40.60.81
CPU times: user 37.6 ms, sys: 14.9 ms, total: 52.5 ms
Wall time: 2.79 s
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
 6/9
import plotly.io  as pio
img_bytes  = pio.to_image 
display)
import plotly.io  as pio
pio.orca.status
0 0.2 0.4 0.6 0.8 100.20.40.60.81
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
 7/9
Configuring the Executable
Other Configuration Settings
server_url: The URL to an externally running instance of Orca. When this is set, plotly.py will not launch an orca server process and instead use the one
provided.
port: The specific port to use to communicate with the orca server, or None if the port will be chosen automatically.
timeout: The number of seconds of inactivity required before the orca server is shut down. For example, if timeout is set to 20, then the orca server will
shutdown once is has not been used for at least 20 seconds. If timeout is set to None , then the server will not be automatically shut down due to
inactivity.
default_width: The default pixel width to use on image export.
default_height: The default pixel height to use on image export.
default_scale: The default image scale factor applied on image export.
default_format: The default image format used on export. One of "png", "jpeg", "webp", "svg", "pdf", or "eps".
mathjax: Location of the MathJax bundle needed to render LaTeX characters. Defaults to a CDN location. If fully offline export is required, set this to a local
MathJax bundle.
topojson: Location of the topojson files needed to render choropleth traces. Defaults to a CDN location. If fully offline export is required, set this to a local
directory containing the .
mapbox_access_token: Mapbox access token required to render scattermapbox traces.
use_xvfb: Whether to call orca using  on Linux. Xvfb is needed for orca to work in a
Linux environment if an X11 display server is not available. By default, plotly.py will automatically use Xvfb if it is installed, and no active X11 display server is
detected. This can be set to True to force the use of Xvfb, or it can be set to False to disable the use of Xvfb.By default, plotly.py searches the PATH for an executable named orca and checks that it is a valid plotly orca executable. If plotly.py is unable to find the executable,
you'll get an error message that looks something like this:
----------------------------------------------------------------------------
ValueError:
The orca executable is required in order to export figures as static images,
but it could not be found on the system path.
Searched for executable 'orca' on the following path:
    /anaconda3/envs/plotly_env/bin
    /usr/local/bin
    /usr/bin
    /bin
    /usr/sbin
    /sbin
If you haven 't installed orca yet, you can do so using conda as follows:
    $ conda install -c plotly plotly-orca== 1.2.1
Alternatively, see other installation methods in the orca project README at</description>
      </customization>
    </chart>
    <chart name="Plotly express" source_file="pyvy_2x1/Plotly express in Python.pdf">
      <description>Overview &gt;  &gt;
Plotly Express
Plotly Express in Python
Plotly Express is a terse, consistent, high-level API for creating figures.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
The plotly.express module  contains functions that can create entire figures at once, and is referred to as Plotly Express or PX. Plotly Express is
a built-in part of the plotly library, and is...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.graph_objects</library>
          <code language="python">imported as px) contains functions that can create entire figures at once, and is referred to as Plotly Express or PX. Plotly Express is
a built-in part of the plotly library, and is the recommended starting point for creating most common figures. Every Plotly Express function uses 
 internally and returns a plotly.graph_objects.Figure instance. Throughout the plotly documentation, you will find the Plotly Express way of
building figures at the top of any applicable page, followed by a section on how to use graph objects to build similar figures. Any figure created in a single function call
with Plotly Express could be created using graph objects alone, but with between 5 and 100 times more code.
graph objects
(/python/graph-objects/)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express as px and get access to 
, plus 
 and 
. Every PX function returns a plotly.graph_objects.Figure object, so you can edit it using all the same methods like 
.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Analysis of Iris data using scatter matrix'),
    dcc.Dropdown(
        id="dropdown",
        options=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'],
        value=['sepal_length', 'sepal_width'],
        multi=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def update_bar_chart(dims):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter_matrix(
        df, dimensions=dims, color="species")
    return figDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , marginal_y ="violin" ,
           marginal_x ="box", trendline ="ols", template ="simple_white" )
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Plotly Express provides . The API for these
functions was carefully designed to be as consistent and easy to learn as possible, making it easy to switch from a scatter plot to a bar chart to a histogram to a
sunburst chart throughout a data exploration session. Scroll down for a gallery of Plotly Express plots, each made in a single function call.
more than 30 functions for creating different types of figures 
16/07/2025, 06:03 Plotly express in Python
 1/23
Basics: , , , , 
, 
Part-of-Whole: , , , , 
1D Distributions: , , , , 
2D Distributions: , 
Matrix or Image Input: 
3-Dimensional: , 
Multidimensional: , , 
Tile Maps: , , , 
Outline Maps: , , 
Polar Charts: , , 
Ternary Charts: , 
High-Level Features
A single entry point into plotly: just import plotly.express as px and get access to 
, plus 
 and 
. Every PX function returns a plotly.graph_objects.Figure object, so you can edit it using all the same methods like 
.
Sensible, Overridable Defaults: PX functions will infer sensible defaults wherever possible, and will always let you override them.
Flexible Input Formats: PX functions , from lists and dicts to 
 to  to .
Automatic Trace and Layout configuration: PX functions will create one  per animation frame for each unique combination
of data values mapped to discrete color, symbol, line-dash, facet-row and/or facet-column. Traces' 
 are set such that only one legend item appears per unique combination of discrete color, symbol and/or line-dash. Traces
are automatically linked to a correctly-configured .
Automatic Figure Labelling: PX functions  based in the input DataFrame or xarray,
and provide .
Automatic Hover Labels: PX functions populate the hover-label using the labels mentioned above, and provide 
.
Styling Control: PX functions , and support commonly-needed
 to precisely control categorical variables.
Uniform Color Handling: PX functions automatically switch between  and  based
on the input type.
Faceting: the 2D-cartesian plotting functions support 
.
Marginal Plots: the 2D-cartesian plotting functions support  with the marginal, marginal_x and marginal_y
arguments.
A Pandas backend: the 2D-cartesian plotting functions are available as  so you can call them via
df.plot.
Trendlines: px.scatter supports .
Animations: many PX functions support .
Automatic WebGL switching: for sufficiently large scatter plots, PX will automatically 
.
Plotly Express in DashPlotly Express currently includes the following functions:
scatter 
line 
area 
bar 
funnel 
timeline 
sunburst 
treemap 
icicle 
funnel_area</description>
      </customization>
    </chart>
    <chart name="Plotly express wide-form support" source_file="pyvy_2x1/Plotly express wide-form support in Python.pdf">
      <description>Plotly Express works with Column-oriented, Matrix or Geographic Data
Plotly Express works with Long-, Wide-, and Mixed-Form Data
long-form data has one row per observation, and one column per variable. This is suitable for storing and displaying multivariate data i.e. with dimension
greater than 2. This format is sometimes called "tidy".
wide-form data has one row per value of one of the first variable, and one column per value of the second variable. This is suitable for storing and displaying
...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
long_df
nationmedalcount
0South Koreagold24
1China gold10
2Canadagold9
3South Koreasilver13
4China silver15
5Canadasilver12
6South Koreabronze11
7China bronze8
8Canadabronze12
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 1/21
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input, relabelled" ,
            labels={"value": "count", "variable" : "medal"})
fig.show()South Korea China Canada01020304050variable
gold
silver
bronzeWide-Form Input
nationvalue</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ],
             title="Wide-Form Input, styled" ,
             labels={"value": "Medal Count" , "variable" : "Medal", "nation" : "Olympic Nation" },
             color_discrete_map ={"gold": "gold", "silver" : "silver" , "bronze" : "#c96"},
             template ="simple_white"
            )
fig.update_layout (font_family ="Rockwell" , showlegend =False)
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Static image export" source_file="pyvy_2x1/Static image export in Python.pdf">
      <description>Install Dependencies
Kaleido
Chrome
Write Image to a File &gt;  &gt; Static
Image Export
Static Image Export in Python
Plotly allows you to save static images of your plots. Save the image to your local computer, or embed it inside your Jupyter notebooks as a static image.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
This page demonstrates how to export interactive Plotly...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
fig.write_image ("fig1.png" )</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
fig.write_image ("fig1", format="png")
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 2/8</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.express  as px
import plotly.io  as pio
fig1 = go.Figure(
    data=go.Scatter(x=[1, 2, 3], y=[4, 5, 6], mode='lines+markers' ),
    layout=go.Layout(title='Line Chart' )
)
fig2 = go.Figure(
    data=go.Bar(x=['A', 'B', 'C'], y=[10, 5, 15]),
    layout=go.Layout(title='Bar Chart' )
)
fig3 = px.pie(
    values=[30, 20, 10, 40],
    names=['A', 'B', 'C', 'D'],
    title='Pie Chart'
)
pio.write_images (
    fig=[fig1, fig2, fig3],
    file=['export_images/line_chart.png' , 'export_images/bar_chart.png' , 'export_images/pie_chart.png' ]
)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
img_bytes  = fig.to_image (format="png")</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
fig = dict({
    "data": [{"type": "bar",
              "x": [1, 2, 3],
              "y": [1, 3, 2]}],
    "layout" : {"title": {"text": "A Figure Specified By Python Dictionary" }}
})
pio.write_image (fig, "fig.png" )
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 5/8</code>
        </example>
      </examples>
    </chart>
    <chart name="Styling markers" source_file="pyvy_2x1/Styling markers in Python.pdf">
      <description>Add Marker Border &gt;  &gt;
Styling Markers
Styling Markers in Python
How to style markers in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
In order to make markers look more distinct, you can add a border to the markers. This can be achieved by adding the line property to the marker object.
Here is an example of adding a marker border to a faceted sca...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.update_traces (marker=dict(size=12,
                              line=dict(width=2,
                                        color='DarkSlateGrey' )),
                  selector =dict(mode='markers' ))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import numpy as np
np.random.seed(1)
x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=6, size=(500,))</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import plotly.express as px
import dash_daq as daq
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive marker style control'),
    dcc.Graph(id="graph"),
    daq.ColorPicker(
        id='color', label='Border Color',
        value=dict(hex='#2F4F4F'), size=164),
])
@app.callback(
    Output("graph", "figure"),
    Input("color", "value"))
def update_marker_border(color):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter(
        df, x="sepal_width", y="sepal_length",
        color="species", height=350)
 fi Fi (fi)DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
      </examples>
    </chart>
    <chart name="Text and annotations" source_file="pyvy_2x1/Text and annotations in Python.pdf">
      <description>Adding Text to Figures
1. Certain trace types, notably in the scatter family , support a text attribute, and can be displayed with or without markers.
2. Standalone text annotations can be added to figures using fig.add_annotation, with or without arrows, and they can be positioned absolutely within the
figure, or they can be positioned relative to the axes of 2d or 3d cartesian subplots i.e. in data coordinates.
Traces can optionally support hover labels and can appear in legends.
Text annotati...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year==2007 and continent=='Americas'" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , text="country" , log_x=True, size_max =60)
fig.update_traces (textposition ='top center' )
fig.update_layout (
    height=800,
    title_text ='GDP and Life Expectancy (Americas, 2007)'
)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[1, 1, 1],
    mode="lines+markers+text" ,
    name="Lines, Markers and Text" ,
    text=["Text A" , "Text B" , "Text C" ],
    textposition ="top center"
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[2, 2, 2],
    mode="markers+text" ,
    name="Markers and Text" ,
    text=["Text D" , "Text E" , "Text F" ],
    textposition ="bottom center"
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[3, 3, 3],
    mode="lines+text" ,
    name="Lines and Text" ,
    text=["Text G" , "Text H" , "Text I" ],
    textposition ="bottom center"
))
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live control of annotations'),
    html.P("Select text position:"),
    dcc.RadioItems(
        id='pos-x', inline=True,
        options=['left', 'center', 'right'],
        value='center'
    ),
    dcc.RadioItems(
        id='pos-y', inline=True,
        options=['top', 'bottom'],
        value='top'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
 I t(" ""l")DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.bar(df, x='continent' , y='pop', color="lifeExp" , text='country' ,
             title="Default behavior: some text is tiny" )
fig.update_traces (textposition ='inside' )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.bar(df, x='continent' , y='pop', color="lifeExp" , text='country' ,
             title="Uniform Text: min size is 8, hidden if can't fit" )
fig.update_traces (textposition ='inside' )
fig.update_layout (uniformtext_minsize =8, uniformtext_mode ='hide')
fig.show()Afghanistan</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Try panning or zooming in the following figure:0 1 2 3 4 5 6 7 80123456
Text annotation using bolded text, italicized text, underlined text, 
and a new line
Text annotation with 
a link.
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
 20/28
Adding Annotations Referenced to an Axisimport plotly.express  as px
fig = px.scatter
fig.add_annotation 
fig.show
To place annotations relative to the length or height of an axis, the string ' domain' can be added after the axis reference in the xref or yref fields. For example:1 1.5 2 2.5 311.522.53Try panning or zooming!
xy
Absolutely-positioned annotation
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
 21/28
Specifying the Text's Position Absolutelyimport plotly.express  as px
import plotly.graph_objects  as go
df = px.data.wind
fig = px.scatter
# Set a custom domain to see how the ' domain' string changes the behaviour
fig.update_layout , yaxis=dict)
fig.add_annotation 
fig.show
The text coordinates / dimensions of the arrow can be specified absolutely, as long as they use exactly the same coordinate system as the arrowhead. For example:0 50 100012
indexfrequency
An annotation referencing the axes
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
 22/28
Specifying Source Lines or Figure Notes on the Bottom of a Figureimport plotly.express  as px
import plotly.graph_objects  as go
df = px.data.wind
fig = px.scatter
fig.update_layout , yaxis=dict)
fig.add_annotation 
fig.show
This example shows how to add a note about the data source or interpretation at the bottom of the figure. This example aligns the note in the bottom right corner
using the title element and container coordinates and then uses an annotation to add a figure title. A near zero container coordinate is an easy and robust way to put
text -- such as a source line or figure note -- at the bottom of a figure. It is easier to specify the bottom of the figure in container coordinates than using paper
coordinates, since uncertainty about the size of legends and x-axis labels make the paper coordinate of the bottom of the figure uncertain. Making the y container
coordinate very slightly positive avoids cutting off the descending strokes of letters like y, p, and q. Only the title command supports container coordinates, so this
example re-purposes the title element to insert the note and re-purposes an annotation element for the title. The top of the figure is typically less cluttered and more
predictable than the bottom of the figure, so an annotation with its bottom at a paper y-coordinate slightly greater than 1 is a reasonable title location on many
graphs.0 50 100012
indexfrequencyAn annotation whose text and arrowhead reference the axes and the data
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
 23/28
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_layout  embedding your graphic on a web page and
                 # putting the note in the HTML to use the browser's automated word wrap,
                 # 2) using this approach and also specifying a graph width that shows the whole title,
                 # or 3) using &lt;BR&gt; tags to wrap the text onto multiple lines
                yref="container" ,
                y=0.005,
                 # The "paper" x-coordinates lets us align this with either the right or left
                 # edge of the plot region. 
                 # The code to align this flush with the right edge of the plot area is 
                 # predictable and simple.  
                 # Putting the title in the lower left corner, aligned with the left edge of the axis labeling would
                 # require graph specific coordinate adjustments.
                xref="paper",
                xanchor="right",
                x=1, 
                font=dict),
                plot_bgcolor ="white",
  # We move the legend out of the right margin so the right-aligned note is 
  # flush with the right most element of the graph.
  # Here we put the legend in a corner of the graph region
  # because it has consistent coordinates at all screen resolutions.
  legend=dict
                )
# Insert a title by repurposing an annotation 
fig.add_annotation 
    )
fig.show
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
 24/28
Customize Displayed Text with a Text Template
Customize Text TemplateTo show an arbitrary text in your chart you can use , which is a template string used for
rendering the information, and will override . This template string can include variables in %
{variable} format, numbers in , and date in 
. texttemplate customizes the text that appears on your plot vs. 
 that customizes the tooltip text.
texttemplate ",
    textposition  = "inside" ))
fig.show
The following example uses  to customize the added text.
textfont Cost of sales: $30.0000M</description>
      </customization>
    </chart>
    <chart name="The figure data structure" source_file="pyvy_2x1/The figure data structure in Python.pdf">
      <description>Overview &gt;  &gt; The
Figure Data Structure
The Figure Data Structure in Python
The structure of a figure - data, traces and layout explained.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
The plotly Python package exists to  and  graphical figures  represented by data structures also referred to as figures. The rendering process uses the 
 under the hood although Python...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.line(x=["a","b","c"], y=[1,3,2], title="sample figure" )
print(fig)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
import json
fig = px.line(
    x=["a","b","c"], y=[1,3,2], # replace with your own data source
    title="sample figure", height=325
)
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Displaying figure structure as JSON'),
    dcc.Graph(id="graph", figure=fig),
    dcc.Clipboard(target_id="structure"),
    html.Pre(
        id='structure',
        style={
            'border': 'thin lightgrey solid',
            'overflowY': 'scroll',
            'height': '275px'
        }
    ),
])DOWNLOAD

Displaying figure structure as JSON
{
  "data": [
    {
      "hovertemplate": "x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;",
      "legendgroup": "",
      "line": {
        "color": "#636efa",
        "dash": "solid"
      },
      "marker": {
        "symbol": "circle"
}a b c11.522.53sample figure
xy
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 3/8</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">fig = px.line(x=["a","b","c"], y=[1,3,2], title="sample figure" )
print(fig)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>other
plotly.graph_objects components 
Viewing the underlying data structure for any plotly.graph_objects.Figure object, including those returned by Plotly Express, can be done via print or, in JupyterLab,
with the special fig.show renderer. Figures also support fig.to_dict and fig.to_json methods. printing the figure will result in the often-verbose
layout.template key being represented as ellipses '...' for brevity.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
 1/8
Accessing figure structures in Dashimport plotly.express  as px
fig = px.line
print
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash ,
'xaxis': 'x',
'y':{'bdata':'AQMC''dtype':'i1'}
a b c11.522.53sample figure
xy
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
 2/8
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now 
app = Dash
app.layout = html.Div,
    dcc.Graph,
    dcc.Clipboard,
    html.Pre,
])DOWNLOAD

Displaying figure structure as JSON
{
  "data": [
    {
      "hovertemplate": "x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;",
      "legendgroup": "",
      "line": {
        "color": "#636efa",
        "dash": "solid"
      },
      "marker": {
        "symbol": "circle"
}a b c11.522.53sample figure
xy
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
 3/8
Figures as Trees of Attributes
The Top-Level data Attribute
Each trace has one of more than 40 possible types , and represents a set of
related graphical marks in a figure. Each trace must have a type attribute which defines the other allowable attributes.
Each trace is drawn on a single  whose type must be compatible with the trace's type, or is its own subplot .
Traces may have a single  entry, with the exception of pie and funnelarea traces .
Certain trace types support , which can be controlled by attributes either within the trace,
or within the layout when using the .Plotly.js supports inputs adhering to a well-defined schema, whose overall architecture is explained in this page and which is exhaustively documented in the 
 . Figures are represented as trees with named nodes called "attributes". The root
node of the tree has three top-level attributes: data, layout and frames .
Figure
Reference 
machine-readable JSON representation of the schema</description>
      </customization>
    </chart>
    <chart name="Theming and templates" source_file="pyvy_2x1/Theming and templates in Python.pdf">
      <description>Theming and templates
Using built-in themes
View available themes
Specifying themes in Plotly Express &gt;  &gt; Theming
and templates
Theming and templates in Python
Theming and templates with plotly with Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
The Plotly Python library comes pre-loaded with several themes that you can get started using right away, and it als...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.templates</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
df_2007 = df.query("year==2007" )
for template  in ["plotly" , "plotly_white" , "plotly_dark" , "ggplot2" , "seaborn" , "simple_white" , "none"]:
    fig = px.scatter(df_2007,
                     x="gdpPercap" , y="lifeExp" , size="pop", color="continent" ,
                     log_x=True, size_max =60,
                     template =template , title="Gapminder 2007: ' %s' theme"  % template )
    fig.show()
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 2/24
2 345678910002 345678910k2 345674050607080continent</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
z_data = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv" )
fig = go.Figure(
    data=go.Surface(z=z_data.values),
    layout=go.Layout(
        title=dict(text="Mt Bruno Elevation" ),
        width=500,
        height=500,
    ))
for template  in ["plotly" , "plotly_white" , "plotly_dark" , "ggplot2" , "seaborn" , "simple_white" , "none"]:
    fig.update_layout (template =template , title=dict(text="Mt Bruno Elevation: ' %s' theme"  % template ))
    fig.show()
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 6/24
050100150200250300350Mt Bruno Elevation: 'plotly' theme
050100150200250300350Mt Bruno Elevation: 'plotly_white' theme
050100150200250300350Mt Bruno Elevation: 'plotly_dark' theme
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 7/24
050100150200250300350Mt Bruno Elevation: 'ggplot2' theme
050100150200250300350Mt Bruno Elevation: 'seaborn' theme
050100150200250300350Mt Bruno Elevation: 'simple_white' theme
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 8/24</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.io  as pio
import plotly.express  as px
pio.templates .default = "plotly_white"
df = px.data.gapminder ()
df_2007 = df.query("year==2007" )
fig = px.scatter(df_2007,
                 x="gdpPercap" , y="lifeExp" , size="pop", color="continent" ,
                 log_x=True, size_max =60,
                 title="Gapminder 2007: current default theme" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.templates .default = "none"</code>
        </example>
      </examples>
    </chart>
    <chart name="Dropdown menus" source_file="pyvy_2x10/Dropdown menus in Python.pdf">
      <description>Methods
"restyle": modify data or data attributes
"relayout": modify layout attributes
"update": modify data and layout attributes
"animate": start or pause an 
Restyle Dropdown
Update One Data Attribute &gt;  &gt; Dropdown
Menus
Dropdown Menus in Python
How to add dropdowns to update Plotly chart attributes in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Custom Controls 
Suggest an edit to this
page
Sign up for early access now. 
The  ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import numpy as np
np.random.seed(1)
x0 = np.random.normal(2, 0.4, 400)
y0 = np.random.normal(2, 0.4, 400)
x1 = np.random.normal(3, 0.6, 600)
y1 = np.random.normal(6, 0.4, 400)
x2 = np.random.normal(4, 0.2, 200)
y2 = np.random.normal(4, 0.4, 200)</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>See  for more information about updatemenu
dropdowns.
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
16/07/2025, 07:03 Dropdown menus in Python
 12/13
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 07:03 Dropdown menus in Python
 13/13</description>
      </customization>
    </chart>
    <chart name="Intro to animations" source_file="pyvy_2x10/Intro to animations in Python.pdf">
      <description>Animated figures with Plotly Express
Animated figures in Dash &gt;  &gt; Intro to
Animations
Intro to Animations in Python
An introduction to creating animations with Plotly in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Animations 
Suggest an edit to this
page
Sign up for early access now. 
Several  functions support the creation of animated figures through the animation_frame and animation_group arguments.
Plotly Express 
Here is an ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
px.scatter(df, x="gdpPercap" , y="lifeExp" , animation_frame ="year", animation_group ="country" ,
           size="pop", color="continent" , hover_name ="country" ,
           log_x=True, size_max =55, range_x=[100,100000], range_y=[25,90])
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Animated GDP and population over decades'),
    html.P("Select an animation:"),
    dcc.RadioItems(
        id='selection',
        options=["GDP - Scatter", "Population - Bar"],
        value='GDP - Scatter',
    ),
    dcc.Loading(dcc.Graph(id="graph"), type="cube")
])
@app.callback(
    Output("graph", "figure"),
    Input("selection", "value"))
def display_animated_graph(selection):
    df = px.data.gapminder() # replace with your own data source
    animations = {
        'GDP - Scatter': px.scatter(
 df "dP " "lifE" iti f " "DOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.bar(df, x="continent" , y="pop", color="continent" ,
  animation_frame ="year", animation_group ="country" , range_y=[0,4000000000 ])
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scatter(x=[0, 1], y=[0, 1])],
    layout=go.Layout(
        xaxis=dict(range=[0, 5], autorange =False),
        yaxis=dict(range=[0, 5], autorange =False),
        title=dict(text="Start Title" ),
        updatemenus =[dict(
            type="buttons" ,
            buttons=[dict(label="Play",
                          method="animate" ,
                          args=[None])])]
    ),
    frames=[go.Frame(data=[go.Scatter(x=[1, 2], y=[1, 2])]),
            go.Frame(data=[go.Scatter(x=[1, 4], y=[1, 4])]),
            go.Frame(data=[go.Scatter(x=[3, 4], y=[3, 4])],
                     layout=go.Layout(title_text ="End Title" ))]
)
fig.show()
0 1 2 3 4 5012345Start Title</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
      </examples>
    </chart>
    <chart name="2d histogram contour" source_file="pyvy_2x3/2d histogram contour in Python.pdf">
      <description>2D Histogram Contours or Density Contours
Density Contours with Plotly Express &gt;  &gt; 2D
Histogram Contour
2D Histogram Contour in Python
How to make 2D Histogram Contour plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
A 2D histogram contour plot, also known as a density contour plot, is a 2-dimensional generalization of a  which resemb...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip", marginal_x ="histogram" , marginal_y ="histogram" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip", facet_col ="sex", color="smoker" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip")
fig.update_traces (contours_coloring ="fill", contours_showlabels  = True)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.density_contour (df, x="petal_length" , y="petal_width" , z="sepal_length" , histfunc ="avg")
fig.show()5
1015
20
25
0 10 20 30 40 500246810
051015202530
total_billtip
0 2 4 6 8−0.500.511.522.53
petal_lengthpetal_width</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>scatter plots 
 is the easy-to-use, high-level interface to Plotly, which  and
produces . The Plotly Express function density_contour can be used to produce density contours.
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
import plotly.express  as px
df = px.data.tips
fig = px.density_contour 
fig.show
Marginal plots can be added to visualize the 1-dimensional distributions of the two variables. Here we use a marginal . Other
allowable values are violin, box and rug.
histogram 0 10 20 30 40 500246810
total_billtip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 1/9
import plotly.express  as px
df = px.data.tips
fig = px.density_contour 
fig.show
Density contours can also be  and :
faceted 
discretely colored 
import plotly.express  as px
df = px.data.tips
fig = px.density_contour 
fig.show
Plotly Express density contours can be  and labeled:
continuously-colored 010203040500246810
total_billtip
0 20 400246810
0 20 40smoker
No
Yes
total_bill total_billtipsex=Female sex=Male
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 2/9
Other aggregation functions than countimport plotly.express  as px
df = px.data.tips
fig = px.density_contour 
fig.update_traces 
fig.show
By passing in a z value and a histfunc, density contours can perform basic aggregation operations. Here we show average Sepal Length grouped by Petal Length and
Petal Width for the Iris dataset.
import plotly.express  as px
df = px.data.iris
fig = px.density_contour 
fig.show5
1015
20
25
0 10 20 30 40 500246810
051015202530
total_billtip
0 2 4 6 8−0.500.511.522.53
petal_lengthpetal_width
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 3/9
2D Histograms with Graph Objects
Basic 2D Histogram Contour
2D Histogram Contour ColorscaleTo build this kind of figure with  without using Plotly Express, we can use the go.Histogram2d class.
graph objects 
import plotly.graph_objects  as go
import numpy as np
np.random.seed
x = np.random.uniform
y = np.random.uniform
fig = go.Figure)
fig.show
−1.5 −1 −0.5 0 0.5 1 1.5−1−0.500.51
051015202530
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 4/9
2D Histogram Contour Styledimport plotly.graph_objects  as go
import numpy as np
x = np.random.uniform
y = np.random.uniform
fig = go.Figure)
fig.show
−1.5 −1 −0.5 0 0.5 1 1.5−1.5−1−0.500.511.5
05101520253035
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 5/9
2D Histogram Contour Subplotimport plotly.graph_objects  as go
import numpy as np
x = np.random.uniform
y = np.random.uniform
fig = go.Figure
        ),
        hoverlabel  = dict
        )
))
fig.show
5
5
1015
2025
30
3540
−1.5 −1 −0.5 0 0.5 1 1.5−1.5−1−0.500.511.5
010203040
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 6/9
import plotly.graph_objects  as go
import numpy as np
t = np.linspace 
x =  + )
y =  + )
fig = go.Figure
fig.add_trace )
fig.add_trace ' ,
            size = 3
        )
    ))
fig.add_trace '
        )
    ))
fig.add_trace '
        )
    ))
fig.update_layout ,
    yaxis = dict,
    xaxis2 = dict,
    yaxis2 = dict,
    height = 600,
    width = 600,
    bargap = 0,
    hovermode  = 'closest' ,
    showlegend  = False
)
fig.show
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 7/9
Reference
What About Dash?See  for more information and chart attribute
options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter−1012−1−0.500.511.522.533.505010015005010015020001020304050607080
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 8/9
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
 9/9</description>
      </customization>
    </chart>
    <chart name="2d histograms" source_file="pyvy_2x3/2d histograms in Python.pdf">
      <description>2D Histograms or Density Heatmaps
Density Heatmaps with Plotly Express &gt;  &gt; 2D
Histograms
2D Histograms in Python
How to make 2D Histograms in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
A 2D histogram, also known as a density heatmap, is the 2-dimensional generalization of a  which resembles a 
 but is computed by grouping a set of points...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", nbinsx=20, nbinsy=20, color_continuous_scale ="Viridis" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", marginal_x ="histogram" , marginal_y ="histogram" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", facet_row ="sex", facet_col ="smoker" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", text_auto =True)
fig.show()
0 20 400246810
0 20 40
0246810
024681012count
total_bill total_billtip tipsmoker=No smoker=Yessex=Male sex=Female
0 0 0 0 0 0 0 0 0 0 01 12 22 8 0 1 1 0 0 0 00 2 34 23 13 3 2 0 1 0 00 0 6 29 18 6 5 2 1 1 00 1 1 7 5 7 1 2 1 0 00 1 0 0 4 6 5 1 2 1 00 0 0 0 1 1 2 0 0 1 00 0 0 0 0 0 0 1 0 0 00 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 1 00 0 0 0 0 0 0 0 0 0 1
0 10 20 30 40 500246810
051015202530count
total_billtip
s
ss
ount</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>use Plotly with Datashader 
 is the easy-to-use, high-level interface to Plotly, which  and
produces . The Plotly Express function density_heatmap can be used to produce density heatmaps.
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
import plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.show
The number of bins can be controlled with nbinsx and nbinsy and the  with color_continuous_scale.
color scale 
0 10 20 30 40 500246810
051015202530count
total_billtip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 1/10
import plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.show
Marginal plots can be added to visualize the 1-dimensional distributions of the two variables. Here we use a marginal . Other
allowable values are violin, box and rug.
histogram 
import plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.show
Density heatmaps can also be :
faceted 
0 10 20 30 40 5012345678910
0510152025count
total_billtip
010203040500246810
051015202530count
total_billtip
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 2/10
Displaying Textimport plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.show
New in v5.5
You can add the z values as text using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting string will
control the output format.
import plotly.express  as px
df = px.data.tips
fig = px.density_heatmap 
fig.show
0 20 400246810
0 20 40
0246810
024681012count
total_bill total_billtip tipsmoker=No smoker=Yessex=Male sex=Female
0 0 0 0 0 0 0 0 0 0 01 12 22 8 0 1 1 0 0 0 00 2 34 23 13 3 2 0 1 0 00 0 6 29 18 6 5 2 1 1 00 1 1 7 5 7 1 2 1 0 00 1 0 0 4 6 5 1 2 1 00 0 0 0 1 1 2 0 0 1 00 0 0 0 0 0 0 1 0 0 00 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 1 00 0 0 0 0 0 0 0 0 0 1
0 10 20 30 40 500246810
051015202530count
total_billtip
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 3/10
Other aggregation functions than count
2D Histograms with Graph ObjectsBy passing in a z value and a histfunc, density heatmaps can perform basic aggregation operations. Here we show average Sepal Length grouped by Petal Length and
Petal Width for the Iris dataset.
import plotly.express  as px
df = px.data.iris
fig = px.density_heatmap 
fig.show
To build this kind of figure using  without using Plotly Express, we can use the go.Histogram2d class.
graph objects 
01234567800.511.522.5
55.566.577.5avg of sepal_length
petal_lengthpetal_width
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 4/10
2D Histogram of a Bivariate Normal Distribution
import plotly.graph_objects  as go
import numpy as np
np.random.seed
x = np.random.randn
y = np.random.randn+1
fig = go.Figure)
fig.show
−3 −2 −1 0 1 2 3−2−1012345
05101520
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 5/10
2D Histogram Binning and Styling Options
Sharing bin settings between 2D Histogramsimport plotly.graph_objects  as go
import numpy as np
x = np.random.randn
y = np.random.randn+1
fig = go.Figure,
        autobiny =False,
        ybins=dict,
        colorscale =[[0, 'rgb' ], [0.25, 'rgb' ], [0.5, 'rgb' ], [0.75, 'rgb' ], [1, 'rgb' ]]
    ))
fig.show
This example shows how to use  attribute to have a compatible bin settings for both
histograms. To define start, end and size value of x-axis and y-axis separately, set 
 and xbins.
bingroup 
fig.add_trace , 1,1)
fig.add_trace ,1,2)
fig.add_trace , 2,1)
fig.add_trace ,2,2)
fig.show
12345024
4 5 634567
2 4 6246
4 5 6 734567
00.511.522.53
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 7/10
2D Histogram Overlaid with a Scatter Chart
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn/5. + 0.5  # 5. enforces float division
y0 = np.random.randn/5. + 0.5
x1 = np.random.rand
y1 = np.random.rand + 1.0
x = np.concatenate 
y = np.concatenate 
fig = go.Figure
fig.add_trace ,
    )
))
fig.add_trace ,
    )
))
fig.add_trace )
fig.update_layout ,
    yaxis=dict,
    autosize =False,
    height=550,
    width=550,
    hovermode ='closest' ,
)
fig.show
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 8/10
Text on 2D Histogram Points
ReferenceIn this example we add text to 2D Histogram points. We use the values from the z attribute for the text.
import plotly.graph_objects  as go
from plotly import data
df = data.tips
fig = go.Figure)
fig.show
See  for more information and chart attribute options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
 10/10</description>
      </customization>
    </chart>
    <chart name="Error bars" source_file="pyvy_2x3/Error bars in Python.pdf">
      <description>Error Bars with Plotly Express
Asymmetric Error Bars with Plotly Express &gt;  &gt;
Error Bars
Error Bars in Python
How to add error-bars to charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces . For functions representing 2D data points such as 
, ,  etc., error bars are ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
df["e"] = df["sepal_width" ]/100
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 error_x="e", error_y="e")
fig.show()
2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
xpress</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
df["e_plus" ] = df["sepal_width" ]/100
df["e_minus" ] = df["sepal_width" ]/40
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 error_y="e_plus" , error_y_minus ="e_minus" )
fig.show()
2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
xpress</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[0, 1, 2],
        y=[6, 10, 2],
        error_y=dict(
            type='data', # value of error bar given in data coordinates
            array=[1, 2, 3],
            visible=True)
    ))
fig.show()
0 0.5 1 1.5 2024681012
xpress</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_y=dict(
            type='data',
            symmetric =False,
            array=[0.1, 0.2, 0.1, 0.1],
            arrayminus =[0.2, 0.4, 1, 0.2])
        ))
fig.show()
1 1.5 2 2.5 3 3.5 40.511.522.533.54
xpress</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[0, 1, 2],
        y=[6, 10, 2],
        error_y=dict(
            type='percent' , # value of error bar given as percentage of y value
            value=50,
            visible=True)
    ))
fig.show()
0 0.5 1 1.5 22468101214
xpress</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>measured
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
 9/10
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
 10/10</description>
      </customization>
    </chart>
    <chart name="Facet and trellis plots" source_file="pyvy_2x3/Facet and trellis plots in Python.pdf">
      <description>Facet and Trellis Plots
Scatter Plot Column Facets
Bar Chart Row Facets &gt;  &gt; Facet and
Trellis Plots
Facet and Trellis Plots in Python
How to make Facet and Trellis Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Facet plots, also known as trellis plots or small multiples, are figures made up of multiple subplots which have the same s...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" , facet_col ="sex")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="size", y="total_bill" , color="sex", facet_row ="smoker" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x='gdpPercap' , y='lifeExp' , color='continent' , size='pop',
                facet_col ='year', facet_col_wrap =4)
fig.show()1 2 3 4 5 60500100005001000sex</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", facet_row ="time", facet_col ="day",
       category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "time": ["Lunch", "Dinner" ]})
fig.show()
new in version 4.1320 400102030
20 40 20 40 20 400102030sex</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
df = df.melt(id_vars="district" , value_vars =["Coderre" , "Bergeron" , "Joly"],
            var_name ="candidate" , value_name ="votes")
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="votes", facet_col ="candidate" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.show()
introduced in plotly 4.12</code>
        </example>
      </examples>
    </chart>
    <chart name="Histograms" source_file="pyvy_2x3/Histograms in Python.pdf">
      <description>Histograms with Plotly Express &gt;  &gt;
Histograms
Histograms in Python
How to make Histograms in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
In statistics, a  is representation of the distribution of numerical data, where the data are binned and the count for
each bin is represented. More generally, in Plotly a histogram is an aggregated bar ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" )
fig.show()
10 20 30 40 50051015202530
total_billcount
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 1/23</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , nbins=20)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks()
fig = px.histogram (df, x="date")
fig.update_layout (bargap=0.2)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", category_orders =dict(day=["Thur", "Fri", "Sat", "Sun"]))
fig.show()Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 201902468101214
datecount</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>x = np.random.randn
fig = go.Figure])
fig.show
−2 −1 0 1 2 3051015202530354045
t values
an count16/07/2025, 06:31 Histograms in Python
 10/23
Normalized Histogram
import plotly.graph_objects  as go
import numpy as np
x = np.random.randn
fig = go.Figure])
fig.show
−3 −2 −1 0 1 2 3 400.020.040.060.080.1
t values
an count16/07/2025, 06:31 Histograms in Python
 11/23
Horizontal Histogram
import plotly.graph_objects  as go
import numpy as np
y = np.random.randn
# Use `y` argument instead of `x` for horizontal histogram
fig = go.Figure])
fig.show
0 5 10 15 20 25 30 35 40 45−3−2−10123
t values
an count16/07/2025, 06:31 Histograms in Python
 12/23
Overlaid Histogram
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn
# Add 1 to shift the mean of the Gaussian distribution
x1 = np.random.randn + 1
fig = go.Figure
fig.add_trace )
fig.add_trace )
# Overlay both histograms
fig.update_layout 
# Reduce opacity to see both histograms
fig.update_traces 
fig.show
−2 −1 0 1 2 3 4051015202530354045trace 0
trace 1
t values
an count16/07/2025, 06:31 Histograms in Python
 13/23
Stacked Histograms
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn
x1 = np.random.randn + 1
fig = go.Figure
fig.add_trace )
fig.add_trace )
# The two histograms are drawn on top of another
fig.update_layout 
fig.show
−3 −2 −1 0 1 2 3 4020406080100120140160trace 1
trace 0
t values
an count16/07/2025, 06:31 Histograms in Python
 14/23
Styled Histogram
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn
x1 = np.random.randn + 1
fig = go.Figure
fig.add_trace ,
    marker_color ='#EB89B5' ,
    opacity=0.75
))
fig.add_trace ,
    marker_color ='#330C73' ,
    opacity=0.75
))
fig.update_layout 
fig.show
−3 −2 −1 0 1 2 3 405101520control
experimental
Sampled Results
ValueCount
t values
an count16/07/2025, 06:31 Histograms in Python
 15/23
Histogram Bar Text
You can add text to histogram bars using the texttemplate argument. In this example we add the x-axis values as text following the format %{variable}. We also adjust
the size of the text using textfont_size.
import plotly.graph_objects  as go
numbers = ["5", "10", "3", "10", "5", "8", "5", "5"]
fig = go.Figure
fig.add_trace )
fig.show
5
10
3 8
5 10 3 800.511.522.533.54
t values
an count16/07/2025, 06:31 Histograms in Python
 16/23
Cumulative Histogram
import plotly.graph_objects  as go
import numpy as np
x = np.random.randn
fig = go.Figure])
fig.show
−3 −2 −1 0 1 2 3 40100200300400500
t values
an count16/07/2025, 06:31 Histograms in Python
 17/23
Specify Aggregation Function
Custom Binningimport plotly.graph_objects  as go
x = ["Apples" ,"Apples" ,"Apples" ,"Oranges" , "Bananas" ]
y = ["5","10","3","10","5"]
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.show
For custom binning along x-axis, use the attribute . Please note that the autobin algorithm
will choose a 'nice' round bin size that may result in somewhat fewer than nbinsx total bins. Alternatively, you can set the exact values for 
 along with autobinx = False.
nbinsx 
trace0 = go.Histogram 
trace1 = go.Histogram 
trace2 = go.Histogram 
trace3 = go.Histogram , # M18 stands for 18 months
                      autobinx =False
                     )
trace4 = go.Histogram , # 4 months bin size
                      autobinx =False
                      )
trace5 = go.Histogram , # 2 months
                      autobinx  = False
                      )
fig.add_trace 
fig.add_trace 
fig.add_trace 
fig.add_trace 
fig.add_trace 
fig.add_trace 
fig.show
If you want to display information about the individual items within each histogram bar, then create a stacked bar chart with hover information as shown below. Note
that this is not technically the histogram chart type, but it will have a similar effect as shown below by comparing the output of px.histogram and px.bar. For more
information, see the .
tutorial on bar charts 1970 1971 19720246
Jan 1970Jul 1970Jan 1971Jul 1971Jan 19720246
Jan 1970Jul 1970Jan 1971Jul 1971Jan 1972024
1970 1971 19720246
Jan 1970Jul 1970Jan 1971Jul 1971Jan 1972024
Jan 1970Jul 1970Jan 1971Jul 1971Jan 19720123trace 0
trace 1
trace 2
trace 3
trace 4
trace 5
t values
an count16/07/2025, 06:31 Histograms in Python
 19/23
Share bins between histogramsimport plotly.express  as px
df = px.data.tips
fig1 = px.bar
fig2 = px.histogram 
fig1.show
fig2.show
In this example both histograms have a compatible bin settings using  attribute. Note
that traces on the same subplot, and with the same barmode  are forced into the same bingroup, however traces with barmode = "overlay"
and on different axes  can have compatible bin settings. Histogram and  trace can share
the same bingroup.
bingroup ,
    bingroup =1))
fig.add_trace ,
    bingroup =1))
fig.update_layout 
fig.show
Histogram bars can also be sorted based on the ordering logic of the categorical values using the 
 attribute of the x-axis. Sorting of histogram bars using categoryorder also works with
multiple traces on the same x-axis. In the following examples, the histogram bars are sorted based on the total numerical values.
categoryorder</description>
      </customization>
    </chart>
    <chart name="Marginal distribution plots" source_file="pyvy_2x3/Marginal distribution plots in Python.pdf">
      <description>Overview
Scatter Plot Marginals &gt;  &gt; Marginal
Distribution Plots
Marginal Distribution Plots in Python
How to add marginal distribution plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Marginal distribution plots are small subplots above or to the right of a main plot, which show the distribution of data along only one dimension. Marginal distribution
plot ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , marginal_x ="histogram" , marginal_y ="rug")
fig.show()
44.555.566.577.5822.533.544.5
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 1/6</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_length" , y="sepal_width" , marginal_x ="box", marginal_y ="violin" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" , 
                 marginal_x ="box", marginal_y ="violin" ,
                  title="Click on the legend items!" )
fig.show()
44.555.566.577.5822.533.544.5
024681012141618count
sepal_lengthsepal_width
5 6 7 822.533.544.5species
setosa
versicolor
virginicaClick on the legend items!
sepal_lengthsepal_width
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 2/6</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.histogram (df, x="sepal_length" , color="species" , marginal ="box")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.histogram (df, x="lifeExp" , color="continent" , marginal ="rug", hover_name ="country" ,
                  title="Hover over the rug plot!" )
fig.show()4.254.755.255.756.256.757.257.75051015202530species
setosa
versicolor
virginica
sepal_lengthcount
40 50 60 70 80010203040continent</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>violin plots 
Marginal plots are linked to the main plot: try zooming or panning on the main plot.
Marginal plots also support hover, including per-point hover as with the rug-plot on the right: try hovering over the points on the right marginal plot.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
44.555.566.577.5822.533.544.5
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:34 Marginal distribution plots in Python
 1/6
Marginal Plots and Colorimport plotly.express  as px
df = px.data.iris
fig = px.density_heatmap 
fig.show
Marginal plots respect the color argument as well, and are linked to the respective legend elements. Try clicking on the legend items.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
44.555.566.577.5822.533.544.5
024681012141618count
sepal_lengthsepal_width
5 6 7 822.533.544.5species
setosa
versicolor
virginicaClick on the legend items!
sepal_lengthsepal_width
16/07/2025, 06:34 Marginal distribution plots in Python
 2/6
Marginal Plots on Histograms
 are often used to show the distribution of a variable, and they also support marginal plots in Plotly Express, with the marginal
argument:
Histograms 
import plotly.express  as px
df = px.data.iris
fig = px.histogram 
fig.show
Try hovering over the rug plot points to identify individual country values in the histogram below:
import plotly.express  as px
df = px.data.gapminder .query
fig = px.histogram 
fig.show4.254.755.255.756.256.757.257.75051015202530species
setosa
versicolor
virginica
sepal_lengthcount
40 50 60 70 80010203040continent
Asia
Europe
Africa
Americas
OceaniaHover over the rug plot!
lifeExpcount
16/07/2025, 06:34 Marginal distribution plots in Python
 3/6
Marginal Plots and Facets
Marginal plots can be used in conjunction with  so long as they go along different directions:
Plotly Express facets 
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show02040246810
020400204002040sex
Female
Male
total_bill total_bill total_bill total_billtipday=Sun day=Sat day=Thur day=Fri
01020304050246810246810 sex
Female
Male
total_billtip tiptime=Lunch time=Dinner
16/07/2025, 06:34 Marginal distribution plots in Python
 4/6
What About Dash?import plotly.express  as px
df = px.data.tips
fig = px.histogram 
fig.show
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:34 Marginal distribution plots in Python
 6/6</description>
      </customization>
    </chart>
    <chart name="Scatterplot matrix" source_file="pyvy_2x3/Scatterplot matrix in Python.pdf">
      <description>Scatter matrix with Plotly Express &gt;  &gt;
Scatterplot Matrix
Scatterplot Matrix in Python
How to make scatterplot matrices or sploms natively in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
A scatterplot matrix is a matrix associated to n numerical arrays , $X_1,X_2,…,X_n$ , of the same length. The cell  of such a matrix displays the scatter
...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df,
    dimensions =["sepal_length" , "sepal_width" , "petal_length" , "petal_width" ],
    color="species" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df,
    dimensions =["sepal_length" , "sepal_width" , "petal_length" , "petal_width" ],
    color="species" , symbol="species" ,
    title="Scatter matrix of iris data set" ,
    labels={col:col.replace('_', ' ') for col in df.columns}) # remove underscore
fig.update_traces (diagonal_visible =False)
fig.show()45678
234
246
45678012
2 3 4 246 0 1 2
species
setosa
versicolor
virginica
sepal_length sepal_width petal_length petal_widthsepal_length sepal_width petal_length petal_width
45678234
246
012
2 3 445678
246 0 1 2
species
setosa
versicolor
virginicaScatter matrix of iris data set
sepal length sepal width petal length petal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 2/11</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv' )</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv' )
index_vals  = df['class'].astype('category' ).cat.codes
fig = go.Figure(data=go.Splom(
                dimensions =[dict(label='sepal length' ,
                                 values=df['sepal length' ]),
                            dict(label='sepal width' ,
                                 values=df['sepal width' ]),
                            dict(label='petal length' ,
                                 values=df['petal length' ]),
                            dict(label='petal width' ,
                                 values=df['petal width' ])],
                diagonal_visible =False, # remove plots on diagonal
                text=df['class'],
                marker=dict(color=index_vals ,
                            showscale =False, # colors encode categorical variables
                            line_color ='white', line_width =0.5)
                ))
fig.update_layout (
    title=dict(text='Iris Data set' ),
    width=600,
    height=600,
)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>The label in each dimension is assigned to the axes titles of the corresponding matrix cell.
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 3/11
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
# The Iris dataset contains four data variables, sepal length, sepal width, petal length,
# petal width, for 150 iris flowers. The flowers are labeled as `Iris-setosa`,
# `Iris-versicolor`, `Iris-virginica`.
# Define indices corresponding to flower categories, using pandas label encoding
index_vals  = df['class'].astype.cat.codes
fig = go.Figure,
                            dict,
                            dict,
                            dict],
                text=df['class'],
                marker=dict
                ))
fig.update_layout ,
    dragmode ='select' ,
    width=600,
    height=600,
    hovermode ='closest' ,
)
fig.show
The scatter plots on the principal diagonal can be removed by setting diagonal_visible=False:45678
234
246
45678012
234 246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 4/11
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
index_vals  = df['class'].astype.cat.codes
fig = go.Figure,
                            dict,
                            dict,
                            dict],
                diagonal_visible =False, # remove plots on diagonal
                text=df['class'],
                marker=dict
                ))
fig.update_layout ,
    width=600,
    height=600,
)
fig.show
To plot only the lower/upper half of the splom we switch the default showlowerhalf=True/showupperhalf=True to False:45678234
246
012
23445678
246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 5/11
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
index_vals  = df['class'].astype.cat.codes
fig = go.Figure,
                            dict,
                            dict,
                            dict],
                showupperhalf =False, # remove plots on diagonal
                text=df['class'],
                marker=dict
                ))
fig.update_layout ,
    width=600,
    height=600,
)
fig.show
Each dict in the list dimensions has a key, visible, set by default on True. We can choose to remove a variable from splom, by setting visible=False in its corresponding
dimension. In this case the default grid associated to the scatterplot matrix keeps its number of cells, but the cells in the row and column corresponding to the visible
false dimension are empty:45678
234
246
45678012
234 246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 6/11
Splom for the diabetes datasetimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
index_vals  = df['class'].astype.cat.codes
fig = go.Figure,
                            dict,
                            dict,
                            dict],
                text=df['class'],
                marker=dict
                ))
fig.update_layout ,
    width=600,
    height=600,
)
fig.show
Diabetes dataset is downloaded from . It is used to predict the onset of diabetes based
on 8 diagnostic measures. The diabetes file contains the diagnostic measures for 768 patients, that are labeled as non-diabetic , respectively diabetic
. The splom associated to the 8 variables can illustrate the strength of the relationship between pairs of measures for diabetic/nondiabetic patients.
kaggle 
textd = ['non-diabetic'  if cl==0 else 'diabetic'  for cl in dfd['Outcome' ]]
fig = go.Figure,
                              dict,
                              dict,
                              dict,
                              dict,
                              dict,
                              dict,
                              dict],
                  marker=dict' )),
                  text=textd,
                  diagonal =dict))
title = "Scatterplot Matrix  for Diabetes Dataset&lt;br&gt;Data source:" +\
        " &lt;a href='
fig.update_layout 
fig.show
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 8/11
Hover Effects
New in 5.21
Set hoversubplots='axis' with hovermode set to x, x unified, y, or y unified for hover effects to appear across a column or row. For more on hover effects, see the
 page.
Hover Text and Formatting 051015050100150200
050100
050100
0500
0204060
012
20406080050100150200051015
0501000501000500 020406001220406080
Scatterplot Matrix  for Diabetes Dataset
Data source: 
[1]
Pregnancies
GlucoseBloodPressureSkinThicknessInsulin BMIDiabPedigreeFunAgePregnanciesGlucose BloodPressure SkinThickness InsulinBMIDiabPedigreeFunAge
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 9/11
Referenceimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
index_vals  = df["class"].astype.cat.codes
fig = go.Figure,
            dict,
            dict,
            dict,
        ],
        showupperhalf =False,
        text=df["class"],
        marker=dict,
    )
)
fig.update_layout ,
    hoversubplots ="axis",
    width=600,
    height=600,
    hovermode ="x",
)
fig.show
See  or
 for more information and chart attribute options!
function reference for px.scatter_matrix , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
press
m16/07/2025, 06:32 Scatterplot matrix in Python
 11/11</description>
      </customization>
    </chart>
    <chart name="Strip charts" source_file="pyvy_2x3/Strip charts in Python.pdf">
      <description>Strip Charts with Plotly Express &gt;  &gt; Strip
Charts
Strip Charts in Python
Strip charts are like 1-dimensional jittered scatter plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
The px.strip function will ma...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x="total_bill" , y="day")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x="total_bill" , y="time", color="sex", facet_col ="day")
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter2040DinnerLunch
2040 2040 2040sex</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">fig = px.strip(df, x="total_bill" , y="day")
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Maps" source_file="pyvy_2x4/Maps in Python.pdf">
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>plotly.express</library>
          <code language="python">fig = px.choropleth(
        df, geojson=geojson, color=candidate,
        locations="district", featureidkey="properties.district",
        projection="mercator", range_color=[0, 6500])
    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    return fig
app.run(debug=True)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>plotly.express</library>
          <code language="python">px.data.election() # replace with your own data source
    geojson = px.data.election_geojson()
    fig = px.choropleth(
        df, geojson=geojson, color=candidate,
        locations="district", featureidkey="properties.district",
        projection="mercator", range_color=[0, 6500])
    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    return fig
app.run(debug=True)</code>
        </example>
      </examples>
    </chart>
    <chart name="Scatter plots on maps" source_file="pyvy_2x4/Scatter plots on maps in Python.pdf">
      <description>Base Map Configuration
Geographical Scatter Plot with px.scatter_geo
Customize geographical scatter plot &gt;  &gt; Scatter Plots on
Maps
Scatter Plots on Maps in Python
How to make scatter plots on maps in Python. Scatter plots on maps highlight geographic areas and can be colored by value.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
Plotly figures made with px.scatter_geo, px....</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter_geo (df, locations ="iso_alpha" ,
                     size="pop", # size of markers, "pop" is one of the columns of gapminder
                     )
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 1/8</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter_geo (df, locations ="iso_alpha" ,
                     color="continent" , # which column to use to set the color of markers
                     hover_name ="country" , # column added to hover information
                     size="pop", # size of markers
                     projection ="natural earth" )
fig.show()
px.scatter_geo can work well with  dataframes whose geometry is of type Point.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import geopandas  as gpd
geo_df = gpd.read_file (gpd.datasets .get_path ('naturalearth_cities' ))
px.set_mapbox_access_token (open(".mapbox_token" ).read())
fig = px.scatter_geo (geo_df,
                    lat=geo_df.geometry .y,
                    lon=geo_df.geometry .x,
                    hover_name ="name")
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df['text'] = df['airport' ] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: '  + df['cnt'].astype(str)
fig = go.Figure(data=go.Scattergeo (
        lon = df['long'],
        lat = df['lat'],
        text = df['text'],
        mode = 'markers' ,
        marker_color  = df['cnt'],
        ))
fig.update_layout (
        title = 'Most trafficked US airports&lt;br&gt;(Hover for airport names)' ,
        geo_scope ='usa',
    )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df['text'] = df['airport' ] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: '  + df['cnt'].astype(str)
fig = go.Figure(data=go.Scattergeo (
        locationmode  = 'USA-states' ,
        lon = df['long'],
        lat = df['lat'],
        text = df['text'],
        mode = 'markers' ,
        marker = dict(
            size = 8,
            opacity = 0.8,
            reversescale  = True,
            autocolorscale  = False,
            symbol = 'square' ,
            line = dict(
                width=1,
                color='rgba(102, 102, 102)'
            ),
            colorscale  = 'Blues',
            cmin = 0,
            color = df['cnt'],
            cmax = df['cnt'].max(),
            colorbar =dict(
                title=dict(
                    text="Incoming flights&lt;br&gt;February 2011"
                )
            )
        )))
fig.update_layout (
        title = 'Most trafficked US airports&lt;br&gt;(Hover for airport names)' ,
        geo = dict(
            scope='usa',
            projection_type ='albers usa' ,
            showland  = True,
            landcolor  = "rgb(250, 250, 250)" ,
            subunitcolor  = "rgb(217, 217, 217)" ,
            countrycolor  = "rgb(217, 217, 217)" ,
            countrywidth  = 0.5,
            subunitwidth  = 0.5
        ),
    )
fig.show()
05k10k15k20k25kIncoming flights</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
 4/8
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
df['text'] = df['airport' ] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: '  + df['cnt'].astype
fig = go.Figure'
            ),
            colorscale  = 'Blues',
            cmin = 0,
            color = df['cnt'],
            cmax = df['cnt'].max,
            colorbar =dict
            )
        )))
fig.update_layout ' ,
        geo = dict" ,
            subunitcolor  = "rgb" ,
            countrycolor  = "rgb" ,
            countrywidth  = 0.5,
            subunitwidth  = 0.5
        ),
    )
fig.show
05k10k15k20k25kIncoming flights
February 2011Most trafficked US airports</description>
      </customization>
    </chart>
    <chart name="Scatter plots on tile maps" source_file="pyvy_2x4/Scatter plots on tile maps in Python.pdf">
      <description>Basic example with Plotly Express
Basic Example with GeoPandas &gt;  &gt; Scatter Plots on Tile
Maps
Scatter Plots on Tile Maps in Python
How to make scatter plots on tile maps in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
Here we show the  function px.scatter_map for a scatter plot on a tile map.
Plotly Express 
 is the easy-to-use, high-level interface to Plotly, whic...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.carshare ()
fig = px.scatter_map (df, lat="centroid_lat" , lon="centroid_lon" ,     color="peak_hour" , size="car_hours" ,
                  color_continuous_scale =px.colors.cyclical .IceFire, size_max =15, zoom=10)
fig.show()
px.scatter_map can work well with  dataframes whose geometry is of type Point.</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import geopandas  as gpd
geo_df = gpd.read_file (gpd.datasets .get_path ('naturalearth_cities' ))
fig = px.scatter_map (geo_df,
                        lat=geo_df.geometry .y,
                        lon=geo_df.geometry .x,
                        hover_name ="name",
                        zoom=1)
fig.show()
© , © 
contributors</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
        lat=['45.5017' ],
        lon=['-73.5673' ],
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=14
        ),
        text=['Montreal' ],
    ))
fig.update_layout (
    hovermode ='closest' ,
    map=dict(
        bearing=0,
        center=go.layout.map.Center(
            lat=45,
            lon=-73
        ),
        pitch=0,
        zoom=5
    )
)
fig.show()
© , © 
contributors</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
        lat=['38.91427' ,'38.91538' ,'38.91458' ,
             '38.92239' ,'38.93222' ,'38.90842' ,
             '38.91931' ,'38.93260' ,'38.91368' ,
             '38.88516' ,'38.921894' ,'38.93206' ,
             '38.91275' ],
        lon=['-77.02827' ,'-77.02013' ,'-77.03155' ,
             '-77.04227' ,'-77.02854' ,'-77.02419' ,
             '-77.02518' ,'-77.03304' ,'-77.04509' ,
             '-76.99656' ,'-77.042438' ,'-77.02821' ,
             '-77.01239' ],
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=9
        ),
        text=["The coffee bar" ,"Bistro Bohem" ,"Black Cat" ,
             "Snap","Columbia Heights Coffee" ,"Azi's Cafe" ,
             "Blind Dog Cafe" ,"Le Caprice" ,"Filter" ,
             "Peregrine" ,"Tryst","The Coupe" ,
             "Big Bear Cafe" ],
    ))
fig.update_layout (
    autosize =True,
    hovermode ='closest' ,
    map=dict(
        bearing=0,
        center=dict(
            lat=38.92,
            lon=-77.07
        ),
        pitch=0,
        zoom=10
    ),
)
fig.show()
© , © 
contributors</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Nuclear%20Waste%20Sites %20on%20American%20Campuses.csv' )
site_lat  = df.lat
site_lon  = df.lon
locations_name  = df.text
fig = go.Figure()
fig.add_trace (go.Scattermap (
        lat=site_lat ,
        lon=site_lon ,
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=17,
            color='rgb(255, 0, 0)' ,
            opacity=0.7
        ),
        text=locations_name ,
        hoverinfo ='text'
    ))
fig.add_trace (go.Scattermap (
        lat=site_lat ,
        lon=site_lon ,
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=8,
            color='rgb(242, 177, 172)' ,
            opacity=0.7
        ),
        hoverinfo ='none'
    ))
fig.update_layout (
    title=dict(text='Nuclear Waste Sites on Campus' ),
    autosize =True,
    hovermode ='closest' ,
    showlegend =False,
    map=dict(
        bearing=0,
        center=dict(
            lat=38,
            lon=-94
        ),
        pitch=0,
        zoom=3,
        style='light'
    ),
)
fig.show()
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 5/12</code>
        </example>
      </examples>
    </chart>
    <chart name="Carpet plots" source_file="pyvy_2x5/Carpet plots in Python.pdf">
      <description>Set X and Y Coordinates
Add Parameter Values &gt;  &gt;
Carpet Plots
Carpet Plots in Python
How to make carpet plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
To set the x and y coordinates use x and y attributes. If x coordinate values are omitted a cheater plot will be created. The plot below has a y array specified but
requires a and b pa...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
))
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
        tickprefix  = 'a = ',
        ticksuffix  = 'm',
        smoothing  = 1,
        minorgridcount  = 9,
    ),
    baxis = dict(
        tickprefix  = 'b = ',
        ticksuffix  = 'pa',
        smoothing  = 1,
        minorgridcount  = 9,
    )
))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4.5, 5, 6],
    b = [1, 2, 3],
    y = [[2, 3, 5.5, 8],
         [3.5, 4.5, 6.5, 8.5],
         [4, 5, 7.5, 10]]
))
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4.5, 5, 6],
    b = [1, 2, 3],
    y = [[2, 3, 5.5, 8],
         [3.5, 4.5, 6.5, 8.5],
         [4, 5, 7.5, 10]],
    cheaterslope  = -5,
    aaxis = dict(cheatertype  = 'index'),
    baxis = dict(cheatertype  = 'value')
))
fig.show()
44.556
123
246810
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 5/7</code>
        </example>
      </examples>
    </chart>
    <chart name="Carpet scatter plot" source_file="pyvy_2x5/Carpet scatter plot in Python.pdf">
      <description>Basic Carpet Plot &gt;  &gt; Carpet
Scatter Plot
Carpet Scatter Plot in Python
How to make carpet scatter plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
import plotly.graph_objects  as go
fig = go.Figure,
    baxis = dict
))
fig.show
a = 4ma = 4.5ma = 5ma = 6m
b = 1Pab = 2Pab = 3Pa
246810
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=s...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
      tickprefix  = 'a = ',
      ticksuffix  = 'm',
      smoothing  = 1,
      minorgridcount  = 9
      ),
    baxis = dict(
      tickprefix  = 'b = ',
      ticksuffix  = 'Pa',
      smoothing  = 1,
      minorgridcount  = 9
      )
))
fig.show()
a = 4ma = 4.5ma = 5ma = 6m
b = 1Pab = 2Pab = 3Pa
246810
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 1/5</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
      tickprefix  = 'a = ',
      ticksuffix  = 'm',
      smoothing  = 1,
      minorgridcount  = 9
      ),
    baxis = dict(
      tickprefix  = 'b = ',
      ticksuffix  = 'Pa',
      smoothing  = 1,
      minorgridcount  = 9
      )
))
fig.add_trace (go.Scattercarpet (
    a = [4, 4.5, 5, 6],
    b = [2.5, 2.5, 2.5, 2.5],
    line = dict(
      shape = 'spline' ,
      smoothing  = 1,
      color = 'blue'
    )
))
fig.show()
a = 4ma = 4.5ma = 5ma = 6m
b = 1Pab = 2Pab = 3Pa
246810
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 2/5</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Carpet(
    a = [0.1,0.2,0.3],
    b = [1,2,3],
    y = [[1,2.2,3],[1.5,2.7,3.5],[1.7,2.9,3.7]],
    cheaterslope  = 1,
    aaxis = dict(
        title = "a",
        tickmode  = "linear" ,
        dtick = 0.05
    ),
    baxis = dict(
        title = "b",
        tickmode  = "linear" ,
        dtick = 0.05
    )
))
fig.add_trace (go.Scattercarpet (
    name = "b = 1.5" ,
    a = [0.05, 0.15, 0.25, 0.35],
    b = [1.5, 1.5, 1.5, 1.5]
))
fig.add_trace (go.Scattercarpet (
    name = "b = 2",
    a = [0.05, 0.15, 0.25, 0.35],
    b = [2, 2, 2, 2]
))
fig.add_trace (go.Scattercarpet (
    name = "b = 2.5" ,
    a = [0.05, 0.15, 0.25, 0.35],
    b = [2.5, 2.5, 2.5, 2.5]
))
fig.add_trace (go.Scattercarpet (
    name = "a = 0.15" ,
    a = [0.15, 0.15, 0.15, 0.15],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing  = 1,
        shape = "spline"
    )
))
fig.add_trace (go.Scattercarpet (
    name = "a = 0.2" ,
    a = [0.2, 0.2, 0.2, 0.2],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing  = 1,
        shape = "spline"
    ),
      marker = dict(
        size = [10, 20, 30, 40],
        color = ["#000", "#f00", "#ff0", "#fff"]
      )
))
fig.add_trace (go.Scattercarpet (
    name = "a = 0.25" ,
    a = [0.25, 0.25, 0.25, 0.25],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing  = 1,
        shape = "spline"
    )
))
fig.update_layout (
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 3/5</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter0.10.150.20.250.3
1
1.051.1
1.151.2
1.251.3
1.351.4
1.451.5
1.551.6
1.651.7
1.751.8
1.851.9
1.952
2.052.1
2.152.2
2.252.3
2.352.4
2.452.5
2.552.6
2.652.7
2.752.8
2.852.9
2.953a
b
0.511.522.533.54b = 1.5
b = 2
b = 2.5
a = 0.15
a = 0.2
a = 0.25scattercarpet extrapolation, clipping, and smoothing
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 4/5
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST</code>
        </example>
      </examples>
    </chart>
    <chart name="Polar charts" source_file="pyvy_2x5/Polar charts in Python.pdf">
      <description>Polar chart with Plotly Express &gt;  &gt; Polar
Charts
Polar Charts in Python
How to make polar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A polar chart represents data along radial and angular axes. With Plotly Express, it is possible to represent polar data as scatter markers with px.scatter_polar, and as
lines with px.line_polar.
 ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.wind()
fig = px.scatter_polar (df, r="frequency" , theta="direction" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.wind()
fig = px.scatter_polar (df, r="frequency" , theta="direction" ,
                       color="strength" , symbol="strength" , size="frequency" ,
                       color_discrete_sequence =px.colors.sequential .Plasma_r )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.wind()
fig = px.line_polar (df, r="frequency" , theta="direction" , color="strength" , line_close =True,
                    color_discrete_sequence =px.colors.sequential .Plasma_r ,
                    template ="plotly_dark" ,)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.scatter_polar (r=range(0,90,10), theta=range(0,90,10),
                       range_theta =[0,90], start_angle =0, direction ="counterclockwise" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Scatterpolar (
        r = [0.5,1,2,2.5,3,4],
        theta = [35,70,120,155,205,240],
        mode = 'markers' ,
    ))
fig.update_layout (showlegend =False)
fig.show()
0°45°90°
135°
180°
225°
270°315°00.511.522.533.54
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 4/14</code>
        </example>
      </examples>
    </chart>
    <chart name="Scientific charts" source_file="pyvy_2x5/Scientific charts in Python.pdf" />
    <chart name="Ternary overlay" source_file="pyvy_2x5/Ternary overlay in Python.pdf">
      <description>Load and Process Data Files
Create Ternary Scatter Plot: &gt;  &gt;
Ternary Overlay
Ternary Overlay in Python
How to make a scatter plot overlaid on ternary contour in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
import json
import pandas as pd
contour_raw_data  = pd.read_json 
scatter_raw_data  = pd.read_json 
scatter_data  =  scatter_raw_data ['...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import json
import pandas as pd
contour_raw_data  = pd.read_json ('https://raw.githubusercontent.com/plotly/datasets/master/contour_data.json' )
scatter_raw_data  = pd.read_json ('https://raw.githubusercontent.com/plotly/datasets/master/scatter_data.json' )
scatter_data  =  scatter_raw_data ['Data']
def clean_data (data_in):
    """
    Cleans data in a format which can be conveniently
    used for drawing traces. Takes a dictionary as the
    input, and returns a list in the following format:
    input = {'key': ['a b c']}
    output = [key, [a, b, c]]
    """
    key = list(data_in.keys())[0]
    data_out  = [key]
    for i in data_in[key]:
        data_out .append(list(map(float, i.split(' '))))
    return data_out</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
a_list = []
b_list = []
c_list = []
text = []
for raw_data  in scatter_data :
    data = clean_data (raw_data )
    text.append(data[0])
    c_list.append(data[1][0])
    a_list.append(data[1][1])
    b_list.append(data[1][2])
fig = go.Figure(go.Scatterternary (
  text=text,
  a=a_list,
  b=b_list,
  c=c_list,
  mode='markers' ,
  marker={'symbol' : 100,
          'color': 'green',
          'size': 10},
))
fig.update_layout ({
    'title': 'Ternary Scatter Plot' ,
    'ternary' :
        {
        'sum':1,
        'aaxis':{'title': 'X', 'min': 0.01, 'linewidth' :2, 'ticks':'outside'  },
        'baxis':{'title': 'W', 'min': 0.01, 'linewidth' :2, 'ticks':'outside'  },
        'caxis':{'title': 'S', 'min': 0.01, 'linewidth' :2, 'ticks':'outside'  }
    },
    'showlegend' : False
})
fig.show()
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Ternary Scatter Plot</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
contour_dict  = contour_raw_data ['Data']</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
    </chart>
    <chart name="Ternary plots" source_file="pyvy_2x5/Ternary plots in Python.pdf">
      <description>Ternary Plots
Ternary scatter plot with Plotly Express &gt;  &gt;
Ternary Plots
Ternary Plots in Python
How to make Ternary plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A ternary plot depicts the ratios of three variables as positions in an equilateral triangle.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Pl...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
fig = px.scatter_ternary (df, a="Joly", b="Coderre" , c="Bergeron" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
fig = px.scatter_ternary (df, a="Joly", b="Coderre" , c="Bergeron" , hover_name ="district" ,
    color="winner" , size="total", size_max =15,
    color_discrete_map  = {"Joly": "blue", "Bergeron" : "green", "Coderre" :"red"} )
fig.show()
00.20.40.60.81
1 0.8 0.6 0.4 0.2 010.80.60.40.20
winner</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
rawData = [
    {'journalist' :75,'developer' :25,'designer' :0,'label':'point 1' },
    {'journalist' :70,'developer' :10,'designer' :20,'label':'point 2' },
    {'journalist' :75,'developer' :20,'designer' :5,'label':'point 3' },
    {'journalist' :5,'developer' :60,'designer' :35,'label':'point 4' },
    {'journalist' :10,'developer' :80,'designer' :10,'label':'point 5' },
    {'journalist' :10,'developer' :90,'designer' :0,'label':'point 6' },
    {'journalist' :20,'developer' :70,'designer' :10,'label':'point 7' },
    {'journalist' :10,'developer' :20,'designer' :70,'label':'point 8' },
    {'journalist' :15,'developer' :5,'designer' :80,'label':'point 9' },
    {'journalist' :10,'developer' :10,'designer' :80,'label':'point 10' },
    {'journalist' :20,'developer' :10,'designer' :70,'label':'point 11' },
];
def makeAxis (title, tickangle ):
    return {
      'title': {'text': title, 'font': { 'size': 20}},
      'tickangle' : tickangle ,
      'tickfont' : { 'size': 15 },
      'tickcolor' : 'rgba(0,0,0,0)' ,
      'ticklen' : 5,
      'showline' : True,
      'showgrid' : True
    }
fig = go.Figure(go.Scatterternary ({
    'mode': 'markers' ,
    'a': [i for i in map(lambda x: x['journalist' ], rawData)],
    'b': [i for i in map(lambda x: x['developer' ], rawData)],
    'c': [i for i in map(lambda x: x['designer' ], rawData)],
    'text': [i for i in map(lambda x: x['label'], rawData)],
    'marker' : {
        'symbol' : 100,
        'color': '#DB7365' ,
        'size': 14,
        'line': { 'width': 2 }
    }
}))
fig.update_layout ({
    'ternary' : {
        'sum': 100,
        'aaxis': makeAxis ('Journalist' , 0),
        'baxis': makeAxis ('&lt;br&gt;Developer' , 45),
        'caxis': makeAxis ('&lt;br&gt;Designer' , -45)
    },
    'annotations' : [{
      'showarrow' : False,
      'text': 'Simple Ternary Plot with Markers' ,
        'x': 0.5,
        'y': 1.3,
        'font': { 'size': 15 }
    }]
})
fig.show()
ress
ph16/07/2025, 06:42 Ternary plots in Python
https://plotly.com/python/ternary-plots/ 3/5</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)020406080100
100806040200100806040200Journalist</code>
        </example>
      </examples>
    </chart>
    <chart name="Wind rose and polar bar charts" source_file="pyvy_2x5/Wind rose and polar bar charts in Python.pdf">
      <description>Wind Rose Chart with Plotly Express
Basic Wind Rose Chart &gt;  &gt; Wind Rose
and Polar Bar Charts
Wind Rose and Polar Bar Charts in Python
How to graph wind rose charts in python. Wind Rose charts display wind speed and direction of a given location.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A   is a graphical tool used to visualize how wind speed and direction ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.wind()
fig = px.bar_polar (df, r="frequency" , theta="direction" ,
                   color="strength" , template ="plotly_dark" ,
                   color_discrete_sequence = px.colors.sequential .Plasma_r )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Barpolar (
    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],
    name='11-14 m/s' ,
    marker_color ='rgb(106,81,163)'
))
fig.add_trace (go.Barpolar (
    r=[57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0],
    name='8-11 m/s' ,
    marker_color ='rgb(158,154,200)'
))
fig.add_trace (go.Barpolar (
    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],
    name='5-8 m/s' ,
    marker_color ='rgb(203,201,226)'
))
fig.add_trace (go.Barpolar (
    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],
    name='&lt; 5 m/s' ,
    marker_color ='rgb(242,240,247)'
))
fig.update_traces (text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'])
fig.update_layout (
    title=dict(text='Wind Speed Distribution in Laurel, NE' ),
    font_size =16,
    legend_font_size =16,
    polar_radialaxis_ticksuffix ='%',
    polar_angularaxis_rotation =90,
)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">fig = px.bar_polar (df, r="frequency" , theta="direction" ,
                   color="strength" , template ="plotly_dark" ,
                   color_discrete_sequence = px.colors.sequential .Plasma_r )
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Bullet charts" source_file="pyvy_2x6/Bullet charts in Python.pdf">
      <description>Basic Bullet Charts
Add Steps, and Threshold &gt;  &gt; Bullet
Charts
Bullet Charts in Python
How to make bullet charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
Stephen Few's Bullet Chart was invented to replace dashboard  and meters, combining both types of charts into
simple bar charts with qualitative bars , quantitative bar  and performa...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" ,
    gauge = {'shape': "bullet" },
    value = 220,
    delta = {'reference' : 300},
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Profit" }))
fig.update_layout (height = 250)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" , value = 220,
    domain = {'x': [0.1, 1], 'y': [0, 1]},
    title = {'text' :"&lt;b&gt;Profit&lt;/b&gt;" },
    delta = {'reference' : 200},
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "red", 'width': 2},
            'thickness' : 0.75,
            'value': 280},
        'steps': [
            {'range': [0, 150], 'color': "lightgray" },
            {'range': [150, 250], 'color': "gray"}]}))
fig.update_layout (height = 250)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" , value = 220,
    domain = {'x': [0, 1], 'y': [0, 1]},
    delta = {'reference' : 280, 'position' : "top"},
    title = {'text':"&lt;b&gt;Profit&lt;/b&gt;&lt;br&gt;&lt;span style='color: gray; font-size:0.8em'&gt;U.S. $&lt;/span&gt;" , 'font': {"size": 14}},
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "red", 'width': 2},
            'thickness' : 0.75, 'value': 270},
        'bgcolor' : "white",
        'steps': [
            {'range': [0, 150], 'color': "cyan"},
            {'range': [150, 250], 'color': "royalblue" }],
        'bar': {'color': "darkblue" }}))
fig.update_layout (height = 250)
fig.show()220
▲20
0 50 100 150 200 250 300Profit
220▼−60
0 50 100 150 200 250 300Profit</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Indicator (
    mode = "number+gauge+delta" , value = 180,
    delta = {'reference' : 200},
    domain = {'x': [0.25, 1], 'y': [0.08, 0.25]},
    title = {'text': "Revenue" },
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "black", 'width': 2},
            'thickness' : 0.75,
            'value': 170},
        'steps': [
            {'range': [0, 150], 'color': "gray"},
            {'range': [150, 250], 'color': "lightgray" }],
        'bar': {'color': "black"}}))
fig.add_trace (go.Indicator (
    mode = "number+gauge+delta" , value = 35,
    delta = {'reference' : 200},
    domain = {'x': [0.25, 1], 'y': [0.4, 0.6]},
    title = {'text': "Profit" },
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 100]},
        'threshold' : {
            'line': {'color': "black", 'width': 2},
            'thickness' : 0.75,
            'value': 50},
        'steps': [
            {'range': [0, 25], 'color': "gray"},
            {'range': [25, 75], 'color': "lightgray" }],
        'bar': {'color': "black"}}))
fig.add_trace (go.Indicator (
    mode = "number+gauge+delta" , value = 220,
    delta = {'reference' : 200},
    domain = {'x': [0.25, 1], 'y': [0.7, 0.9]},
    title = {'text' :"Satisfaction" },
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "black", 'width': 2},
            'thickness' : 0.75,
            'value': 210},
        'steps': [
            {'range': [0, 150], 'color': "gray"},
            {'range': [150, 250], 'color': "lightgray" }],
        'bar': {'color': "black"}}))
fig.update_layout (height = 400 , margin = {'t':0, 'b':0, 'l':0})
fig.show()
180
▼−20
0 50 100 150 200 250 300Revenue35
▼−165
0 20 40 60 80 100Profit220
▲20
0 50 100 150 200 250 300Satisfaction
16/07/2025, 06:47 Bullet charts in Python
https://plotly.com/python/bullet-charts/ 4/5</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Time series and date axes" source_file="pyvy_2x6/Time series and date axes in Python.pdf">
      <description>Time Series using Axes of type date &gt;  &gt; Time Series
and Date Axes
Time Series and Date Axes in Python
How to plot date and time in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
Time series can be represented using either plotly.express functions  or plotly.graph_objects charts objects . For
more examples of such charts, see the documentation of  or .
lin...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x='date', y="GOOG")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure([go.Scatter(x=df['Date'], y=df['AAPL.High' ])])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Stock price analysis'),
    dcc.Graph(id="time-series-chart"),
    html.P("Select stock:"),
    dcc.Dropdown(
        id="ticker",
        options=["AMZN", "FB", "NFLX"],
        value="AMZN",
        clearable=False,
    ),
])
@app.callback(
    Output("time-series-chart", "figure"),
    Input("ticker", "value"))
def display_time_series(ticker):
    df = px.data.stocks() # replace with your own data source
    fig = px.line(df, x='date', y=ticker)
t fiDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks(indexed=True)-1
fig = px.bar(df, x=df.index, y="GOOG")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks(indexed=True)-1
fig = px.area(df, facet_col ="company" , facet_col_wrap =2)
fig.show()Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 2019 Jan 2020−0.1−0.0500.050.10.150.2
dateGOOG</code>
        </example>
      </examples>
    </chart>
    <chart name="3d charts" source_file="pyvy_2x7/3d charts in Python.pdf">
      <description>3D Streamtube Plots
Dash 
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:49 3d charts in Python
 1/3

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash
app.layout = html.Div,
    dcc.Graph,
    html.P,
    dcc.RangeSlider,
])
@app.callback,
    Input)
def update_bar_chart:
    df = px.data.iris # replace with your own data source
    low, high = slider_range
    mask =  &amp; 
 fi tt 3d Products
Dash 
e)
e/index/)
...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Iris samples filtered by petal width'),
    dcc.Graph(id="graph"),
    html.P("Petal Width:"),
    dcc.RangeSlider(
        id='range-slider',
        min=0, max=2.5, step=0.1,
        marks={0: '0', 2.5: '2.5'},
        value=[0.5, 2]
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("range-slider", "value"))
def update_bar_chart(slider_range):
    df = px.data.iris() # replace with your own data source
    low, high = slider_range
    mask = (df.petal_width &gt; low) &amp; (df.petal_width &lt; high)
 fi tt 3d(df[ k]DOWNLOAD</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>plotly.express</library>
          <code language="python">px.data.iris() # replace with your own data source
    low, high = slider_range
    mask = (df.petal_width &gt; low) &amp; (df.petal_width &lt; high)
 fi tt 3d(df[ k]DOWNLOAD</code>
        </example>
      </examples>
    </chart>
    <chart name="3d scatter plots" source_file="pyvy_2x7/3d scatter plots in Python.pdf">
      <description>3D scatter plot with Plotly Express &gt;  &gt; 3D Scatter
Plots
3D Scatter Plots in Python
How to make 3D scatter plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
Like the px.scatter, the 3D functio...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter_3d (df, x='sepal_length' , y='sepal_width' , z='petal_width' ,
              color='species' )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter_3d (df, x='sepal_length' , y='sepal_width' , z='petal_width' ,
                    color='petal_length' , symbol='species' )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter_3d (df, x='sepal_length' , y='sepal_width' , z='petal_width' ,
              color='petal_length' , size='petal_length' , size_max =18,
              symbol='species' , opacity=0.7)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Iris samples filtered by petal width'),
    dcc.Graph(id="graph"),
    html.P("Petal Width:"),
    dcc.RangeSlider(
        id='range-slider',
        min=0, max=2.5, step=0.1,
        marks={0: '0', 2.5: '2.5'},
        value=[0.5, 2]
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("range-slider", "value"))
def update_bar_chart(slider_range):
    df = px.data.iris() # replace with your own data source
    low, high = slider_range
    mask = (df.petal_width &gt; low) &amp; (df.petal_width &lt; high)
 fi tt 3d(df[ k]DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
      </examples>
    </chart>
    <chart name="Alignment chart" source_file="pyvy_2x8/Alignment chart in Python.pdf">
      <description>Alignment Viewer
Bar Chart for conservation visualization &gt;  &gt; Alignment Chart
Alignment Chart in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = (pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Genetic/gene_conservation.csv' )
        .set_index ('0')
        .loc[['consensus' ,'conservation' ]]
        .T
        .astype({"conservation" : float}))
fig = px.bar(df, labels={ 'index': 'base' }, hover_name ='consensus' , y='conservation' )
fig.show() 19172533414957657381899710511312112913714515316116917718519320120921722523324124925726527328128929730531332132933734535336136937738539300.10.20.30.40.50.60.70.80.9
baseconservation
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
tion16/07/2025, 06:53 Alignment chart in Python
https://plotly.com/python/alignment-chart/ 1/3</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import urllib.request as urlreq
from dash import Dash, html
import dash_bio as dashbio
app = Dash(__name__)
data = urlreq.urlopen('https://git.io/alignment_viewer_p53.fasta').read().decode('utf-8')
app.layout = html.Div([
    dashbio.AlignmentChart(
        id='alignment-viewer',
        data=data
    ),
])
if __name__ == '__main__':
    app.run(debug=True)DOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">fig = px.bar(df, labels={ 'index': 'base' }, hover_name ='consensus' , y='conservation' )
fig.show() 19172533414957657381899710511312112913714515316116917718519320120921722523324124925726527328128929730531332132933734535336136937738539300.10.20.30.40.50.60.70.80.9
baseconservation
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
tion16/07/2025, 06:53 Alignment chart in Python
https://plotly.com/python/alignment-chart/ 1/3</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
The Alignment Viewer  component is used to align multiple genomic or proteomic sequences from a FASTA or Clustal file. Among its extensive set of features,
the multiple sequence alignment viewer can display multiple subplots showing gap and conservation info, alongside industry standard colorscale support and
consensus sequence. No matter what size your alignment is, Alignment Viewer is able to display your genes or proteins snappily thanks to the underlying WebGL
architecture powering the component. You can quickly scroll through your long sequence with a slider or a heatmap overview.
Note that the AlignmentChart only returns a chart of the sequence, while AlignmentViewer has integrated controls for colorscale, heatmaps, and subplots allowing
you to interactively control your sequences.
import plotly.express  as px
import pandas as pd
df = 
        .set_index 
        .loc[['consensus' ,'conservation' ]]
        .T
        .astype)
fig = px.bar
fig.show 19172533414957657381899710511312112913714515316116917718519320120921722523324124925726527328128929730531332132933734535336136937738539300.10.20.30.40.50.60.70.80.9
baseconservation
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
tion16/07/2025, 06:53 Alignment chart in Python
 1/3
Alignment Chart in dash_bio
import urllib.request as urlreq
from dash import Dash, html
import dash_bio as dashbio
app = Dash
data = urlreq.urlopen,
])
if __name__ == '__main__':
    app.runDOWNLOAD
P53_BARBU     00
P53_CANFA     01
P53_BOSIN     02
P53_BOVIN     03
P53_CHICK     04
P53_CAVPO     05
P53_CHLAE     06
P53_CRIGR     07
P53_DANRE     08
P53_DELLE     09
P53_EQUAS     10
P53_FELCA     11
P53_HORSE     12
P53_HUMAN     13
P53_ICTPU     14
P53_MACFA     15
P53_MACFU     16
P53_MACMU     17
P53_MARMO     18
P53_MESAU     19
P53_MOUSE     20
P53_ONCMY     21
P53_ORYLA     22
P53_PLAFE     23
P53_PIG     24
P53_RABIT     25
P53_RAT     26
P53_SHEEP     27
P53_TETMU     28
P53_SPEBE     29
P53_TUPBE     30
P53_XENLA     31
P53_XIPMA     32
P53_XIPHE     3300.20.40.60.800.20.40.60.8
Conservation Gap
tion16/07/2025, 06:53 Alignment chart in Python
 2/3
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
tion16/07/2025, 06:53 Alignment chart in Python
 3/3</description>
      </customization>
    </chart>
    <chart name="Visualizing biological data" source_file="pyvy_2x8/Visualizing biological data in Python.pdf">
      <description>Plotly Python Open Source Graphing Library Visualizing Biological Data
Dash Bio is a suite of bioinformatics components that make it simple to analyze, visualize, and interact with bioinformatics data in a Dash application.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now.</description>
    </chart>
    <chart name="Volcano plot" source_file="pyvy_2x8/Volcano plot in Python.pdf">
      <description>VolcanoPlot
Point Sizes And Line Widths &gt;  &gt; Volcano Plot
Volcano Plot in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv' )
dash_bio .VolcanoPlot (
    dataframe =df,
)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv' )
dash_bio .VolcanoPlot (
    dataframe =df,
    point_size =10,
    effect_size_line_width =4,
    genomewideline_width =2
)
−2 −1 0 1 202468</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
df = pd.read_csv('https://git.io/volcano_data1.csv')
app = Dash(__name__)
app.layout = html.Div([
    'Effect sizes',
    dcc.RangeSlider(
        id='range-slider',
        min=-3,
        max=3,
        step=0.05,
        marks={i: {'label': str(i)} for i in range(-3, 3)},
        value=[-0.5, 1]
    ),
    html.Br(),
    html.Div(
        dcc.Graph(
            id='graph',
            figure=dashbio.VolcanoPlot(
 dtf dfDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
Volcano Plot interactively identifies clinically meaningful markers in genomic experiments, i.e., markers that are statistically significant and have an effect size greater
than some threshold. Specifically, volcano plots depict the negative log-base-10 p-values plotted against their effect size.
import pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .VolcanoPlot 
Change the size of the points on the scatter plot, and the widths of the effect lines and genome-wide line.−2 −1 0 1 202468
Point of interest
DatasetVolcano Plot
Effect Size-log10
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:53 Volcano plot in Python
 1/4
import pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .VolcanoPlot 
−2 −1 0 1 202468
Point of interest
DatasetVolcano Plot
Effect Size-log10
16/07/2025, 06:53 Volcano plot in Python
 2/4
VolcanoPlot with Dash

from dash import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
df = pd.read_csv
app.layout = html.Div} for i in range},
        value=[-0.5, 1]
    ),
    html.Br,
    html.Div of interest
DatasetVolcano Plot
Effect Size-log10
16/07/2025, 06:53 Volcano plot in Python
 3/4
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:53 Volcano plot in Python
 4/4</description>
      </customization>
    </chart>
    <chart name="Facet and trellis plots" source_file="pyvy_2x9/Facet and trellis plots in Python.pdf">
      <description>Facet and Trellis Plots
Scatter Plot Column Facets
Bar Chart Row Facets &gt;  &gt; Facet and
Trellis Plots
Facet and Trellis Plots in Python
How to make Facet and Trellis Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Facet plots, also known as trellis plots or small multiples, are figures made up of multiple subplots which have the same s...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" , facet_col ="sex")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="size", y="total_bill" , color="sex", facet_row ="smoker" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x='gdpPercap' , y='lifeExp' , color='continent' , size='pop',
                facet_col ='year', facet_col_wrap =4)
fig.show()1 2 3 4 5 60500100005001000sex</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", facet_row ="time", facet_col ="day",
       category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "time": ["Lunch", "Dinner" ]})
fig.show()
new in version 4.1320 400102030
20 40 20 40 20 400102030sex</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
df = df.melt(id_vars="district" , value_vars =["Coderre" , "Bergeron" , "Joly"],
            var_name ="candidate" , value_name ="votes")
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="votes", facet_col ="candidate" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.show()
introduced in plotly 4.12</code>
        </example>
      </examples>
    </chart>
    <chart name="Marginal distribution plots" source_file="pyvy_2x9/Marginal distribution plots in Python.pdf">
      <description>Overview
Scatter Plot Marginals &gt;  &gt; Marginal
Distribution Plots
Marginal Distribution Plots in Python
How to add marginal distribution plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Marginal distribution plots are small subplots above or to the right of a main plot, which show the distribution of data along only one dimension. Marginal distribution
plot ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , marginal_x ="histogram" , marginal_y ="rug")
fig.show()
44.555.566.577.5822.533.544.5
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 1/6</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_length" , y="sepal_width" , marginal_x ="box", marginal_y ="violin" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" , 
                 marginal_x ="box", marginal_y ="violin" ,
                  title="Click on the legend items!" )
fig.show()
44.555.566.577.5822.533.544.5
024681012141618count
sepal_lengthsepal_width
5 6 7 822.533.544.5species
setosa
versicolor
virginicaClick on the legend items!
sepal_lengthsepal_width
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 2/6</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.histogram (df, x="sepal_length" , color="species" , marginal ="box")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.histogram (df, x="lifeExp" , color="continent" , marginal ="rug", hover_name ="country" ,
                  title="Hover over the rug plot!" )
fig.show()4.254.755.255.756.256.757.257.75051015202530species
setosa
versicolor
virginica
sepal_lengthcount
40 50 60 70 80010203040continent</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>violin plots 
Marginal plots are linked to the main plot: try zooming or panning on the main plot.
Marginal plots also support hover, including per-point hover as with the rug-plot on the right: try hovering over the points on the right marginal plot.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
44.555.566.577.5822.533.544.5
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:57 Marginal distribution plots in Python
 1/6
Marginal Plots and Colorimport plotly.express  as px
df = px.data.iris
fig = px.density_heatmap 
fig.show
Marginal plots respect the color argument as well, and are linked to the respective legend elements. Try clicking on the legend items.
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.show
44.555.566.577.5822.533.544.5
024681012141618count
sepal_lengthsepal_width
5 6 7 822.533.544.5species
setosa
versicolor
virginicaClick on the legend items!
sepal_lengthsepal_width
16/07/2025, 06:57 Marginal distribution plots in Python
 2/6
Marginal Plots on Histograms
 are often used to show the distribution of a variable, and they also support marginal plots in Plotly Express, with the marginal
argument:
Histograms 
import plotly.express  as px
df = px.data.iris
fig = px.histogram 
fig.show
Try hovering over the rug plot points to identify individual country values in the histogram below:
import plotly.express  as px
df = px.data.gapminder .query
fig = px.histogram 
fig.show4.254.755.255.756.256.757.257.75051015202530species
setosa
versicolor
virginica
sepal_lengthcount
40 50 60 70 80010203040continent
Asia
Europe
Africa
Americas
OceaniaHover over the rug plot!
lifeExpcount
16/07/2025, 06:57 Marginal distribution plots in Python
 3/6
Marginal Plots and Facets
Marginal plots can be used in conjunction with  so long as they go along different directions:
Plotly Express facets 
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show
import plotly.express  as px
df = px.data.tips
fig = px.scatter
fig.show02040246810
020400204002040sex
Female
Male
total_bill total_bill total_bill total_billtipday=Sun day=Sat day=Thur day=Fri
01020304050246810246810 sex
Female
Male
total_billtip tiptime=Lunch time=Dinner
16/07/2025, 06:57 Marginal distribution plots in Python
 4/6
What About Dash?import plotly.express  as px
df = px.data.tips
fig = px.histogram 
fig.show
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:57 Marginal distribution plots in Python
 6/6</description>
      </customization>
    </chart>
    <chart name="Mixed subplots" source_file="pyvy_2x9/Mixed subplots in Python.pdf">
      <description>Mixed Subplots and Plotly Express
Mixed Subplot &gt;  &gt; Mixed
Subplots
Mixed Subplots in Python
How to make mixed subplots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Subplots 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
Note: At this time, Plotly Exp...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)United StatesRussiaIndonesiaJapanChileEthiopiaPapua New GuineaPhilippinesMexicoIceland050100150</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">fig = make_subplots (
    rows=2, cols=2,
    column_widths =[0.6, 0.4],
    row_heights =[0.4, 0.6],
    specs=[[{"type": "scattergeo" , "rowspan" : 2}, {"type": "bar"}],
           [            None                    , {"type": "surface" }]])</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="pyvy_2x2_1_basic_charts" source_file="pyvy_main/pyvy_2x2_1_basic_charts" />
    <chart name="pyvy_2x_1" source_file="pyvy_main/pyvy_2x_1.md">
      <description>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>&lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;</description>
      </customization>
    </chart>
    <chart name="pyvy_2x_1" source_file="pyvy_main/pyvy_2x_1.txt">
      <description>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects as go
      import numpy as np</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>&lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;</description>
      </customization>
    </chart>
    <chart name="pyvy_Insights_chart_colab" source_file="pyvy_main/pyvy_Insights_chart_colab" />
    <chart name="pyvy_Recomendations_plotly_colab" source_file="pyvy_main/pyvy_Recomendations_plotly_colab">
      <description>Tipo de arquivo não suportado: pyvy_Recomendations_plotly_colab</description>
    </chart>
  </category>
  <category id="statistical_charts" name="Gráficos Estatísticos">
    <chart name="Distplots" source_file="pyvy_2x1/Distplots in Python.pdf">
      <description>Combined statistical representations with px.histogram &gt;  &gt;
Distplots
Distplots in Python
How to make interactive Distplots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Several representations of statistical distributions are available in plotly, such as , 
,  . It is also
possible to combine several representations in the same plot.
his...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", marginal ="rug",
                   hover_data =df.columns)
fig.show()
10 20 30 40 50020406080sex</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex",
                   marginal ="box", # or violin, rug
                   hover_data =df.columns)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Analysis of the restaurant's revenue"),
    html.P("Select Distribution:"),
    dcc.RadioItems(
        id='distribution',
        options=['box', 'violin', 'rug'],
        value='box', inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("distribution", "value"))
def display_graph(distribution):
    df = px.data.tips() # replace with your own data source
    fig = px.histogram(
        df, x="total_bill", y="tip", color="sex",
        marginal=distribution, range_x=[-5, 60],
 h dtdf l )DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
x = np.random.randn(1000)
hist_data  = [x]
group_labels  = ['distplot' ] # name of the dataset
fig = ff.create_distplot (hist_data , group_labels )
fig.show()
00.10.20.30.4
−3 −2 −1 0 1 2 3 4distplot
ns with
ns in
ns with</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
      </examples>
    </chart>
    <chart name="Figure factories" source_file="pyvy_2x1/Figure factories in Python.pdf">
      <description>plotly.figure_factory
, deprecated by 
, deprecated by regular 
, mostly deprecated by  except for KDE plots, which px.histogram doesn't support yet
, deprecated by 
Reference &gt;  &gt;
Figure Factories
Figure Factories in Python
Figure Factories are dedicated functions for creating very specific types of plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
The plotly.fig...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.express</library>
          <code language="python">px.histogram doesn't support yet
, deprecated by</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">px.imshow() (/python/heatmaps/)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>16/07/2025, 06:09 Figure factories in Python
 1/2
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:09 Figure factories in Python
 2/2</description>
      </customization>
    </chart>
    <chart name="Heatmaps" source_file="pyvy_2x1/Heatmaps in Python.pdf">
      <description>1. Matrix Heatmaps accept a 2-dimensional matrix or array of data and visualizes it directly. This type of heatmap is the subject of this page.
2. Density Heatmaps accept data as a list and visualizes aggregated quantities like counts or sums of this data. Please refer to the 
 for this kind of figure.
Heatmaps with Plotly Express &gt;  &gt;
Heatmaps
Heatmaps in Python
How to make Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.imshow([[1, 20, 30],
                 [20, 1, 60],
                 [30, 60, 1]])
fig.show()
import plotly.express  as px
df = px.data.medals_wide (indexed=True)
fig = px.imshow(df)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Olympic medals won by countries'),
    dcc.Graph(id="graph"),
    html.P("Medals included:"),
    dcc.Checklist(
        id='medals',
        options=["gold", "silver", "bronze"],
        value=["gold", "silver"],
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("medals", "value"))
def filter_heatmap(cols):
    df = px.data.medals_wide(indexed=True) # replace with your own data source
    fig = px.imshow(df[cols])
    return figDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True, aspect="auto")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="Day of Week" , y="Time of Day" , color="Productivity" ),
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes (side="top")
fig.show()
 are labeled arrays (with labeled axes and coordinates). If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays (http://xarray.pydata.org/en/stable/)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.imshow, each value of the input array or data frame is represented as a heatmap pixel.
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
The px.imshow function can be used to display heatmaps . It accepts both array-like objects like lists of lists and
numpy or xarray arrays, as well as supported .
DataFrame objects 
For more examples using px.imshow, including examples of faceting and animations, as well as full-color image display, see the 
.
the imshow documentation
page 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 1/13
Displaying Text on Heatmapsimport plotly.express  as px
fig = px.imshow
fig.show
import plotly.express  as px
df = px.data.medals_wide 
fig = px.imshow
fig.show
New in v5.5
You can add the values to the figure as text using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting
string will control the output format.
0 1 22.521.510.50−0.5
102030405060
gold silver bronzeCanadaChinaSouth Korea
81012141618202224
medalnation
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 2/13
Heatmaps in Dashimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash  produces heatmaps with square tiles, but setting the aspect argument to "auto" will instead fill the plotting area with the heatmap, using non-
square tiles.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash
app.layout = html.Div,
    dcc.Graph,
    html.P,
    dcc.Checklist,
])
@app.callback,
    Input)
def filter_heatmap:
    df = px.data.medals_wide # replace with your own data source
    fig = px.imshow
    return figDOWNLOAD
Olympic medals won by countries
Medals included:
gold
silver
bronze
gold silverCanadaChinaSouth Korea
1012141618202224
medalnation
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 4/13
Customizing the axes and labels on a heatmapimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow
fig.show
You can use the x, y and labels arguments to customize the display of a heatmap, and use .update_xaxes to move the x axis tick labels to the top:
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 5/13
Display an xarray image with px.imshowimport plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow,
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes 
fig.show
 are labeled arrays . If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays .air.sel
fig = px.imshow
fig.show
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Heatmap class from plotly.graph_objects 
import plotly.graph_objects  as go
fig = go.Figure)
fig.show
Jan 2013Apr 2013Jul 2013Oct 2013Jan 2014Apr 2014Jul 2014Oct 2014203040506070
2402602803004xDaily Air temperature at
sigma level 995 [degK]
timelat
−0.5 0 0.5 1 1.5 2 2.5−0.500.511.522.5
102030405060
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 7/13
Heatmap with Categorical Axis Labels
In this example we also show how to ignore  when we have missing values in the data by setting the
 to False.
hovertext )
fig.show
Monday Tuesday Wednesday Thursday FridayMorningAfternoonEvening
−1001020304050607080
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 8/13
Heatmap with Unequal Block Sizes
import plotly.graph_objects  as go
import numpy as np
# Build the rectangles as a heatmap
# specify the edges of the heatmap squares
phi =  )/2. # golden ratio
xe = [0, 1, 1+), 1+), phi]
ye = [0, 1/, 1/phi**3+1/phi**4, 1/, 1]
z = [ [13,3,3,5],
      [13,2,1,5],
      [13,10,11,12],
      [13,8,8,8]
    ]
fig = go.Figure,
          y = np.sort,
          z = z,
          type = 'heatmap' ,
          colorscale  = 'Viridis' ))
# Add spiral line plot
def spiral:
    a = 1.120529
    b = 0.306349
    r = a*np.exp
    return , r*np.sin)
theta = np.linspace ; # angle
 = spiral
fig.add_trace ))
axis_template  = dict
fig.update_layout ,
    xaxis = axis_template ,
    yaxis = axis_template ,
    showlegend  = False,
    width = 700, height = 700,
    autosize  = False )
fig.show
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 9/13
24681012
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 10/13
Heatmap with Datetime Axis
Text on Heatmap Pointsimport plotly.graph_objects  as go
import datetime
import numpy as np
np.random.seed
programmers  = ['Alex','Nicole' ,'Sara','Etienne' ,'Chelsea' ,'Jody','Marianne' ]
base = datetime .datetime .today
dates = base - np.arange * datetime .timedelta 
z = np.random.poisson, len))
fig = go.Figure)
fig.update_layout ,
    xaxis_nticks =36)
fig.show
In this example we add text to heatmap points using texttemplate. We use the values from the text attribute for the text. We also adjust the font size using textfont.
Jan 12
2025Jan 19Jan 26Feb 2Feb 9Feb 16Feb 23Mar 2Mar 9Mar 16Mar 23Mar 30Apr 6Apr 13Apr 20Apr 27May 4May 11May 18May 25Jun 1Jun 8Jun 15Jun 22Jun 29Jul 6AlexNicoleSaraEtienneChelseaJodyMarianne
012345GitHub commits per day
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 11/13
Heatmap and datashader
Referenceimport plotly.graph_objects  as go
fig = go.Figure)
fig.show
Arrays of rasterized values build by datashader can be visualized using plotly's heatmaps, as shown in the .
plotly and datashader tutorial 
See  or 
 for more information and chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
 13/13</description>
      </customization>
    </chart>
    <chart name="Images" source_file="pyvy_2x1/Images in Python.pdf">
      <description>Add a Background Image &gt;  &gt;
Images
Images in Python
How to add images to charts as background images or logos.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
In this page we explain how to add static, non-interactive images as background, logo or annotation images to a figure. For exploring image data in interactive charts,
see the .
tutorial on displaying image data ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import Image; img = Image.open('filename.png')).
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (
    go.Bar(
        x=["-35.3", "-15.9", "-15.8", "-15.6", "-11.1",
           "-9.6", "-9.2", "-3.5", "-1.9", "-0.9",
           "1.0", "1.4", "1.7", "2.0", "2.8", "6.2",
           "8.1", "8.5", "8.5", "8.6", "11.4", "12.5",
           "13.3", "13.7", "14.4", "17.5", "17.7",
           "18.9", "25.1", "28.9", "41.4"],
        y=["Designers, musicians, artists, etc." ,
           "Secretaries and administrative assistants" ,
           "Waiters and servers" , "Archivists, curators, and librarians" ,
           "Sales and related" , "Childcare workers, home car workers, etc." ,
           "Food preparation occupations" , "Janitors, maids, etc." ,
           "Healthcare technicians, assistants. and aides" ,
           "Counselors, social and religious workers" ,
           "Physical, life and social scientists" , "Construction" ,
           "Factory assembly workers" , "Machinists, repairmen, etc." ,
           "Media and communications workers" , "Teachers" ,
           "Mechanics, repairmen, etc." , "Financial analysts and advisers" ,
           "Farming, fishing and forestry workers" ,
           "Truck drivers, heavy equipment operator, etc." , "Accountants and auditors" ,
           "Human resources, management analysts, etc." , "Managers" ,
           "Lawyers and judges" , "Engineers, architects and surveyors" ,
           "Nurses" , "Legal support workers" ,
           "Computer programmers and system admin." , "Police officers and firefighters" ,
           "Chief executives" , "Doctors, dentists and surgeons" ],
        marker=go.bar.Marker(
            color="rgb(253, 240, 54)" ,
            line=dict(color="rgb(0, 0, 0)" ,
                      width=2)
        ),
        orientation ="h",
    )
)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
from scipy.signal  import savgol_filter</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
      </examples>
    </chart>
    <chart name="Legends" source_file="pyvy_2x1/Legends in Python.pdf">
      <description>Trace Types, Legends and Color Bars
Legends with Plotly Express &gt;  &gt;
Legends
Legends in Python
How to configure and style the legend in Plotly with Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
 of most types and shapes can be optionally associated with a single legend item in the . Whether or not a
given trace or shape appears in the legend is controlled via...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex", symbol="smoker" , facet_col ="time",
          labels={"sex": "Gender" , "smoker" : "Smokes" })
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="group", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.show()0 20 40246810
0 20 40Gender, Smokes</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="stack", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.update_layout (legend_traceorder ="reversed" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(name="first", x=["a", "b"], y=[1,2]))
fig.add_trace (go.Bar(name="second" , x=["a", "b"], y=[2,1]))
fig.add_trace (go.Bar(name="third", x=["a", "b"], y=[1,2]))
fig.add_trace (go.Bar(name="fourth" , x=["a", "b"], y=[2,1]))
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(name="first", x=["a", "b"], y=[1, 2]))
fig.add_trace (go.Bar(name="second" , x=["a", "b"], y=[2, 1]))
fig.add_shape (
    name="first shape" ,
    showlegend =True,
    type="rect",
    xref="paper",
    line=dict(dash="dash"),
    x0=0.85,
    x1=0.95,
    y0=0,
    y1=1.5,
)
fig.add_trace (go.Bar(name="third", x=["a", "b"], y=[1, 2]))
fig.add_trace (go.Bar(name="fourth" , x=["a", "b"], y=[2, 1]))
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Traces corresponding to 2D fields  or 3D fields  can also appear in the legend. They come
with legend icons corresponding to each trace type, which are colored using the same colorscale as the trace.
The example below explores a vector field using several traces. Note that you can click on legend items to hide or to select  a specific trace. This
will make the exploration of your data easier!
import numpy as np
import plotly.graph_objects  as go
# Define vector and scalar fields
x, y, z = np.mgrid[0:1:8j, 0:1:8j, 0:1:8j]
u =    np.sin * np.cos
v = -2*np.sin * np.cos
w = np.cos*np.sin + np.cos*np.sin
magnitude  = np.sqrt
mask1 = np.logical_and 
mask2 = y&gt;.6
fig = go.Figure, y=y.ravel, z=z.ravel,
                      value=magnitude .ravel,
                      isomin=1.9, isomax=1.9,
                      colorscale ="BuGn",
                      name='isosurface' ))
fig.add_trace )
fig.add_trace )
# Update all traces together
fig.update_traces 
fig.update_layout 
fig.show
isosurface
cones
streamtubesExploration of a vector field using several traces
s</description>
      </customization>
    </chart>
    <chart name="Plotly express arguments" source_file="pyvy_2x1/Plotly express arguments in Python.pdf">
      <description>Data for the Examples
carshare - Each row represents the availability of car-sharing services near the centroid of a zone in Montreal over a month-long period.
election - Each row represents voting results for an electoral district in the 2013 Montreal mayoral election.
iris - Each row represents a flower. &gt;  &gt; Plotly
Express Arguments
Plotly Express Arguments in Python
Input data arguments accepted by Plotly Express functions
Plotly Studio: Transform any dataset into an interactive data applica...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
df.head()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
long_df
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input, relabelled" ,
            labels={"value": "count", "variable" : "medal"})
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
px provides native support for dataframe types other than pandas, including Polars:
import plotly.express  as px
df = px.data.iris(return_type ='polars' )
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 5/12</code>
        </example>
      </examples>
    </chart>
    <chart name="Selections" source_file="pyvy_2x1/Selections in Python.pdf">
      <description>Adding Selections to Cartesian Subplots &gt;  &gt;
Selections
Selections in Python
How to use selections in Python. Examples of adding and styling selections.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
New in 5.10
You can add persistent selections to a rendered figure using the Box Select and Lasso Select tools in the mode bar. To add multiple selections, select Shift w...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (x0=3.0, y0=6.5, x1=3.5, y1=5.5)
fig.show()
2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 1/11</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (path="M2,6.5L4,7.5L4,6Z" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (
    x0=2.5, y0=6.5, x1=3.5, y1=5.5,
    line=dict(
        color="Crimson" ,
        width=2,
        dash="dash",
    ))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.update_layout (dragmode ='select' ,
                  newselection =dict(line=dict(color='blue')))
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (x0=3.0, y0=6.5, x1=3.5, y1=5.5)
fig.update_layout (dragmode ='select' ,
                  activeselection =dict(fillcolor ='yellow' ))
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Styling plotly express figures" source_file="pyvy_2x1/Styling plotly express figures in Python.pdf">
      <description>Styling Figures made with Plotly Express
1. Control common parameters like width &amp; height, titles, labeling and colors using built-in Plotly Express function arguments
2. Updating the figure attributes using 
3. Using Plotly's  via the template argument to every Plotly Express function
4. Setting default values for common parameters using px.defaults
Built-in Plotly Express Styling Arguments
title to set the figure title
width and height to set the figure dimensions
template to  
labels to overr...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week" ,
            width=600, height=400,
            labels={ # replaces default labels by column name
                "sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts"
            },
            category_orders ={ # replaces default order by column name
                "day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]
            },
            color_discrete_map ={ # replaces default color mapping by value
                "Male": "RebeccaPurple" , "Female" : "MediumPurple"
            },
            template ="simple_white"
            )
fig.show()Sun Sat Thur Fri020040060080010001200140016001800 sex</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week vs Target" ,
            width=600, height=400,
            labels={"sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts" },
            category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]},
            color_discrete_map ={"Male": "RebeccaPurple" , "Female" : "MediumPurple" },
            template ="simple_white"
            )
fig.update_yaxes ( # the y-axis is in dollars
    tickprefix ="$", showgrid =True
)
fig.update_layout ( # customize font and legend orientation &amp; position
    font_family ="Rockwell" ,
    legend=dict(
        title=None, orientation ="h", y=1, yanchor="bottom" , x=0.5, xanchor="center"
    )
)
fig.add_shape ( # add a horizontal "target" line
    type="line", line_color ="salmon" , line_width =3, opacity=1, line_dash ="dot",
    x0=0, x1=1, xref="paper", y0=950, y1=950, yref="y"
)
fig.add_annotation ( # add a text callout with arrow
    text="below target!" , x="Fri", y=400, arrowhead =1, showarrow =True
)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , template ="seaborn" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import plotly.io  as pio
pio.templates .default = "simple_white"
px.defaults .template  = "ggplot2"
px.defaults .color_continuous_scale  = px.colors.sequential .Blackbody
px.defaults .width = 600
px.defaults .height = 400
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , width=400)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>the plotly.graph_objects.Figure object 
customize axes 
legends</description>
      </customization>
    </chart>
    <chart name="Subplots" source_file="pyvy_2x1/Subplots in Python.pdf">
      <description>Subplots and Plotly Express
Simple Subplot &gt;  &gt;
Subplots
Subplots in Python
How to make subplots in with Plotly's Python graphing library. Examples of stacked, custom-sized, gridded, and annotated subplots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Side By Side Subplots" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=3, cols=1)
fig.add_trace (go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
), row=1, col=1)
fig.add_trace (go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
), row=2, col=1)
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
), row=3, col=1)
fig.update_layout (height=600, width=600, title_text ="Stacked Subplots" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, start_cell ="bottom-left" )
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    subplot_titles =("Plot 1" , "Plot 2" , "Plot 3" , "Plot 4" ))
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.update_layout (height=500, width=700,
                  title_text ="Multiple Subplots with Titles" )
fig.show()
11.522.5344.555.56
20253035405055606570
300350400450500600650700750800
4000450050005500600070007500800085009000trace 0
trace 1
trace 2
trace 3Multiple Subplots with Titles</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[4, 5, 6],
        mode="markers+text" ,
        text=["Text A" , "Text B" , "Text C" ],
        textposition ="bottom center"
    ),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(
        x=[20, 30, 40],
        y=[50, 60, 70],
        mode="markers+text" ,
        text=["Text D" , "Text E" , "Text F" ],
        textposition ="bottom center"
    ),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Subplots with Annotations" )
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>specs examples
and Row
Titles
el API)
xis  which will be used to determine the appropriate subplot type for that trace.By default, the make_subplots function assumes that the traces that will be added to all subplots are 2-dimensional cartesian traces . Traces with other subplot types  are supported by specifying the type subplot option in the specs argument
to make_subplots.
Here are the possible values for the type option:
Here is an example that creates and populates a 2 x 2 subplot grid containing 4 different subplot types.
and Row
Titles
el API)
xis 
fig.add_trace ,
              row=1, col=1)
fig.add_trace ,
              row=1, col=2)
fig.add_trace ,
              row=2, col=1)
fig.add_trace ,
              row=2, col=2)
fig.update_layout 
fig.show
As an alternative to providing the name of a subplot type , the type option may also be set to a string containing the name of
a trace type , which will be used to determine the subplot type that is compatible with that trace.
Here is the example above, modified to specify the subplot types using trace type names.0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots 
fig.add_trace ,
              row=1, col=1)
fig.add_trace ,
              row=1, col=2)
fig.add_trace ,
              row=2, col=1)
fig.add_trace ,
              row=2, col=2)
fig.update_layout 
fig.show
0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis import plotly.graph_objects  as go
trace1 = go.Scatter
trace2 = go.Scatter
data = [trace1, trace2]
layout = go.Layout,
    xaxis2=dict,
    yaxis2=dict
)
fig = go.Figure
fig.show
1 1.5 2 2.5 344.555.56
20253035405055606570trace 0
trace 1
and Row
Titles
el API)
xis 
trace2 = go.Scatter
trace3 = go.Scatter
trace4 = go.Scatter
data = [trace1, trace2, trace3, trace4]
layout = go.Layout,
    yaxis=dict,
    xaxis2=dict,
    xaxis4=dict,
    yaxis3=dict,
    yaxis4=dict
)
fig = go.Figure
fig.show
1 2 3 42345600650700750800
20 25 30 35 404000 4500 5000 5500 600070007500800085009000 trace 0
trace 1
trace 2
trace 3
and Row
Titles
el API)
xis 
Setting Subplots on a Figure Directlyimport plotly.graph_objects  as go
trace1 = go.Scatter
trace2 = go.Scatter
trace3 = go.Scatter
data = [trace1, trace2, trace3]
layout = go.Layout,
    legend=dict,
    yaxis2=dict,
    yaxis3=dict
)
fig = go.Figure
fig.show
new in 4.13
Subplots can be added to an already existing figure, provided it doesn't already have subplots. go.Figure.set_subplots accepts all the same arguments as
plotly.subplots.make_subplots.
import plotly.graph_objects  as go
fig = go.Figure.set_subplots 0 1 2 3 4 51010.51111.51210010511011512010001050110011501200trace 2
trace 1
trace 0
and Row
Titles
el API)
xis 
All of the x-axis properties are found here:  All of the y-axis
properties are found here:</description>
      </customization>
    </chart>
    <chart name="Version 4 migration guide" source_file="pyvy_2x1/Version 4 migration guide in Python.pdf">
      <description>Upgrading to Version 4
Getting Help
Online features  moved to chart-studio package
Replace plotly.api with chart_studio.api
Replace plotly.dashboard_objs with chart_studio.dashboard_objs
Replace plotly.grid_objs with chart_studio.grid_objs
Replace plotly.presentation_objs with chart_studio.presentation_objs
Replace plotly.widgets with chart_studio.widgets &gt;  &gt; Version 4
Migration Guide
Version 4 Migration Guide in Python
Migration guide for upgrading from version 3 to version 4
Plotly Studio: Tr...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import statements to import "online" functionality from the top-level chart_studio package, rather than the top-level plotly package. For
example. replace
from plotly.plotly  import plot, iplot
with
from chart_studio.plotly  import plot, iplot</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.io  as pio
pio.templates .default = "none"
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import make_subplots
(make_subplots (rows=1, cols=2)
 .add_scatter (y=[2, 1, 3], row=1, col=1)
 .add_bar(y=[3, 2, 1], row=1, col=2)
 .update_layout (
     title_text ="Figure title" ,
     showlegend =False,
     width=800,
     height=500,
 )
 .show())</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objs  as go
fig = go.Figure()
scatter = fig.add_trace (go.Scatter(y=[2, 3, 1]))
scatter.marker.size = 20</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>In version 3, the plotly.offline.plot function was used to export figures to HTML files. In version 4, this function has been reimplemented on top of the new to_html and
write_html functions from the plotly.io module. These functions have a slightly more consistent API , and going forward we recommend
using them directly when performing HTML export. When working with a graph object figure, these functions are also available as the .to_html and .write_html figure
methods.
An updated "plotly" theme has been enabled by default in version 4.
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
# Make figure with subplots
fig = make_subplots 
# Add bar traces to subplot 
fig.add_trace , row=1, col=1)
fig.add_trace , row=1, col=1)
fig.add_trace , row=1, col=1)
# Add surface trace to subplot 
# Read data from a csv
z_data = pd.read_csv 
fig.add_surface 
# Hide legend
fig.update_layout 
fig.show
0 1 200.511.522.533.5
050100150200250300350Default Theme
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
 2/8
Add trace return valueYou can revert to the version 3 figure appearance by disabling the default theme as follows:
import plotly.io  as pio
pio.templates .default = "none"
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
# Make figure with subplots
fig = make_subplots 
# Add bar traces to subplot 
fig.add_trace , row=1, col=1)
fig.add_trace , row=1, col=1)
fig.add_trace , row=1, col=1)
# Add surface trace to subplot 
# Read data from a csv
z_data = pd.read_csv 
fig.add_surface 
# Hide legend
fig.update_layout 
fig.show
# Restore default theme
pio.templates .default = "plotly"
See  for more information on theming in plotly.py version 4.
Theming and templates 
In version 3, the add_trace graph object figure method returned a reference to the newly created trace. This was also the case for the add_{trace_type} methods . In version 4, these methods return a reference to the calling figure. This change was made to support method chaining of figure
operations. For example0 1 200.511.522.533.5
050100150200250300350Default Theme Disabled
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
 3/8
from plotly.subplots  import make_subplots</description>
      </customization>
    </chart>
    <chart name="Interactive data analysis with figurewidget ipywidgets" source_file="pyvy_2x10/Interactive data analysis with figurewidget ipywidgets in Python.pdf">
      <description>NYC Flights Database &gt;  &gt; Interactive Data Analysis
with FigureWidget ipywidgets
Interactive Data Analysis with FigureWidget ipywidgets in Python
Interactive Data Analysis with Plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Chart Events 
Suggest an edit to
this page
Sign up for early access now. 
import datetime
import numpy as np
import pandas as pd
import plotly.graph_objects  as go
from ipywidgets  import widgets
We'll be making a...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import datetime
import numpy as np
import pandas as pd
import plotly.graph_objects  as go
from ipywidgets  import widgets</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">go.Histogram (x=df['arr_delay' ], opacity=0.75, name='Arrival Delays' )
trace2 = go.Histogram (x=df['dep_delay' ], opacity=0.75, name='Departure Delays' )
g = go.FigureWidget (data=[trace1, trace2],
                    layout=go.Layout(
                        title=dict(
                            text='NYC FlightDatabase'
                        ),
                        barmode='overlay'
                    ))</code>
        </example>
      </examples>
    </chart>
    <chart name="Layout.xaxis" source_file="pyvy_2x10/Layout.xaxis in Python.pdf" />
    <chart name="Box plots" source_file="pyvy_2x3/Box plots in Python.pdf">
      <description>Box Plot with plotly.express &gt;  &gt; Box
Plots
Box Plots in Python
How to make Box Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a statistical representation of the distribution of a variable through its quartiles. The ends of the box represent
the lower and upper quartiles, while the median  is marked by a line inside the box. F...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.box(df, y="total_bill" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="time", y="total_bill" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Analysis of the restaurant's revenue"),
    html.P("x-axis:"),
    dcc.Checklist(
        id='x-axis',
        options=['smoker', 'day', 'time', 'sex'],
        value=['time'],
        inline=True
    ),
    html.P("y-axis:"),
    dcc.RadioItems(
        id='y-axis',
        options=['total_bill', 'tip', 'size'],
        value='total_bill',
        inline=True
    ),
    dcc.Graph(id="graph"),
])DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="time", y="total_bill" , points="all")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="day", y="total_bill" , color="smoker" )
fig.update_traces (quartilemethod ="exclusive" ) # or "inclusive", or "linear" by default
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>y0 = np.random.randn - 1
y1 = np.random.randn + 1
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.show
trace 0 trace 1−3−2−10123trace 0
trace 1
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 8/21
Basic Horizontal Box Plot
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn
x1 = np.random.randn + 2 # shift mean
fig = go.Figure
# Use x instead of y argument for horizontal plot
fig.add_trace )
fig.add_trace )
fig.show
−2 −1 0 1 2 3 4trace 0trace 1trace 0
trace 1
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 9/21
Box Plot That Displays The Underlying Data
Modifying The Algorithm For Computing Quartilesimport plotly.graph_objects  as go
fig = go.Figure])
fig.show
For an explanation of how each algorithm works, see .
Choosing The Algorithm For Computing Quartilestrace 005101520
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 10/21
Box Plot With Precomputed Quartilesimport plotly.graph_objects  as go
data = [1, 2, 3, 4, 5, 6, 7, 8, 9]
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.add_trace )
fig.update_traces 
fig.show
You can specify precomputed quartile attributes rather than using a built-in quartile computation algorithm.
This could be useful if you have already pre-computed those values or if you need to use a different algorithm than the ones provided.Linear Quartile Mode Inclusive Quartile Mode Exclusive Quartile Mode123456789 Linear Quartile Mode
Inclusive Quartile Mode
Exclusive Quartile Mode
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 11/21
import plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
fig.show
0 1 202468
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 12/21
Colored Box Plot
import plotly.graph_objects  as go
import numpy as np
y0 = np.random.randn
y1 = np.random.randn + 1 # shift mean
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.show
Sample A Sample B−2−10123Sample A
Sample B
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 13/21
Box Plot Styling Mean &amp; Standard Deviation
Styling Outliersimport plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.show
The example below shows how to use the boxpoints argument. If "outliers", only the sample points lying outside the whiskers are shown. If "suspectedoutliers", the
outlier points are shown and points either less than 4Q1-3Q3 or greater than 4Q3-3Q1 are highlighted . If "all", all sample points are shown. If False,
only the boxes are shown with no sample points.Only Mean Mean &amp; SD012345
Only Mean
Mean &amp; SD
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 14/21
import plotly.graph_objects  as go
fig = go.Figure
fig.add_trace ' ,
    line_color ='rgb'
))
fig.add_trace ' ,
    line_color ='rgb'
))
fig.add_trace ' ,
        outliercolor ='rgba' ,
        line=dict' ,
            outlierwidth =2)),
    line_color ='rgb'
))
fig.add_trace ' ,
    line_color ='rgb'
))
fig.update_layout 
fig.show
All Points Only Whiskers Suspected OutliersWhiskers and Outliers05101520All Points
Only Whiskers
Suspected Outliers
Whiskers and OutliersBox Plot Styling Outliers
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 15/21
Grouped Box Plots
import plotly.graph_objects  as go
x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.add_trace )
fig.update_layout 
    ),
    boxmode='group' # group together boxes of the different traces for each value of x
)
fig.show
day 1 day 200.20.40.60.81 kale
radishes
carrotsnormalized moisture
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 16/21
Grouped Horizontal Box Plot
import plotly.graph_objects  as go
y = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.add_trace )
fig.update_layout , zeroline =False),
    boxmode='group'
)
fig.update_traces  # horizontal box plots
fig.show
0 0.2 0.4 0.6 0.8 1day 1day 2kale
radishes
carrots
normalized moisture
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 17/21
Rainbow Box Plots
import plotly.graph_objects  as go
import numpy as np
N = 30     # Number of boxes
# generate an array of rainbow colors by fixing the saturation and lightness of the HSL
# representation of colour and marching around the hue.
# Plotly accepts any CSS color format, see e.g. 
c = ['hsl+',50%'+',50%)' for h in np.linspace ]
# Each box is represented by a dict that contains the data, the type, and the colour.
# Use list comprehension to describe N boxes, each with a different colour and with different randomly generated data:
fig = go.Figure + i/N + ) * np.random.rand,
    marker_color =c[i]
    ) for i in range)])
# format the layout
fig.update_layout ,
    yaxis=dict,
    paper_bgcolor ='rgb' ,
    plot_bgcolor ='rgb' ,
)
fig.show
012345trace 0
trace 1
trace 2
trace 3
trace 4
trace 5
trace 6
trace 7
trace 8
trace 9
trace 10
trace 11
trace 12
trace 13
trace 14
trace 15
trace 16
trace 17
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 18/21
Fully Styled Box Plots
import plotly.graph_objects  as go
x_data = ['Carmelo Anthony' , 'Dwyane Wade' ,
          'Deron Williams' , 'Brook Lopez' ,
          'Damian Lillard' , 'David West' ,]
N = 50
y0 =  + 30).astype
y1 =  + 38).astype
y2 =  + 33).astype
y3 =  + 36).astype
y4 =  + 31).astype
y5 =  + 40).astype
y_data = [y0, y1, y2, y3, y4, y5]
colors = ['rgba' , 'rgba' , 'rgba' ,
          'rgba' , 'rgba' , 'rgba' ]
fig = go.Figure
for xd, yd, cls in zip:
        fig.add_trace 
        )
fig.update_layout ,
    yaxis=dict' ,
        gridwidth =1,
        zerolinecolor ='rgb' ,
        zerolinewidth =2,
    ),
    margin=dict,
    paper_bgcolor ='rgb' ,
    plot_bgcolor ='rgb' ,
    showlegend =False
)
fig.show
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 19/21
Box Plot With Only Points
ReferenceA  is like a box plot with points showing, and no box:
strip chart 
import plotly.express  as px
df = px.data.tips
fig = px.strip
fig.show
See  or 
 for more information and chart attribute options!
function reference for px.box , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
 21/21</description>
      </customization>
    </chart>
    <chart name="Continuous error bands" source_file="pyvy_2x3/Continuous error bands in Python.pdf">
      <description>Filling within a single trace &gt;  &gt;
Continuous Error Bands
Continuous Error Bands in Python
Add continuous error bands to charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Continuous error bands are a graphical representation of error or uncertainty as a shaded region around a main trace, rather than as discrete whisker-like error bars....</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objs  as go
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [1, 2, 7, 4, 5, 6, 7, 8, 9, 10]
y_upper = [2, 3, 8, 5, 6, 7, 8, 9, 10, 11]
y_lower = [0, 1, 5, 3, 4, 5, 6, 7, 8, 9]
fig = go.Figure([
    go.Scatter(
        x=x,
        y=y,
        line=dict(color='rgb(0,100,80)' ),
        mode='lines'
    ),
    go.Scatter(
        x=x+x[::-1], # x, then x reversed
        y=y_upper+y_lower[::-1], # upper, then lower reversed
        fill='toself' ,
        fillcolor ='rgba(0,100,80,0.2)' ,
        line=dict(color='rgba(255,255,255,0)' ),
        hoverinfo ="skip",
        showlegend =False
    )
])
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objs  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv' )
fig = go.Figure([
    go.Scatter(
        name='Measurement' ,
        x=df['Time'],
        y=df['10 Min Sampled Avg' ],
        mode='lines',
        line=dict(color='rgb(31, 119, 180)' ),
    ),
    go.Scatter(
        name='Upper Bound' ,
        x=df['Time'],
        y=df['10 Min Sampled Avg' ]+df['10 Min Std Dev' ],
        mode='lines',
        marker=dict(color="#444"),
        line=dict(width=0),
        showlegend =False
    ),
    go.Scatter(
        name='Lower Bound' ,
        x=df['Time'],
        y=df['10 Min Sampled Avg' ]-df['10 Min Std Dev' ],
        marker=dict(color="#444"),
        line=dict(width=0),
        mode='lines',
        fillcolor ='rgba(68, 68, 68, 0.3)' ,
        fill='tonexty' ,
        showlegend =False
    )
])
fig.update_layout (
    yaxis=dict(title=dict(text='Wind speed (m/s)' )),
    title=dict(text='Continuous, variable value error bars' ),
    hovermode ="x"
)
fig.show()
12:00</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure([
    go.Scatter(
        x=x,
        y=y,
        line=dict(color='rgb(0,100,80)' ),
        mode='lines'
    ),
    go.Scatter(
        x=x+x[::-1], # x, then x reversed
        y=y_upper+y_lower[::-1], # upper, then lower reversed
        fill='toself' ,
        fillcolor ='rgba(0,100,80,0.2)' ,
        line=dict(color='rgba(255,255,255,0)' ),
        hoverinfo ="skip",
        showlegend =False
    )
])
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Distplots" source_file="pyvy_2x3/Distplots in Python.pdf">
      <description>Combined statistical representations with px.histogram &gt;  &gt;
Distplots
Distplots in Python
How to make interactive Distplots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
Several representations of statistical distributions are available in plotly, such as , 
,  . It is also
possible to combine several representations in the same plot.
his...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", marginal ="rug",
                   hover_data =df.columns)
fig.show()
10 20 30 40 50020406080sex</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex",
                   marginal ="box", # or violin, rug
                   hover_data =df.columns)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Analysis of the restaurant's revenue"),
    html.P("Select Distribution:"),
    dcc.RadioItems(
        id='distribution',
        options=['box', 'violin', 'rug'],
        value='box', inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("distribution", "value"))
def display_graph(distribution):
    df = px.data.tips() # replace with your own data source
    fig = px.histogram(
        df, x="total_bill", y="tip", color="sex",
        marginal=distribution, range_x=[-5, 60],
 h dtdf l )DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
x = np.random.randn(1000)
hist_data  = [x]
group_labels  = ['distplot' ] # name of the dataset
fig = ff.create_distplot (hist_data , group_labels )
fig.show()
00.10.20.30.4
−3 −2 −1 0 1 2 3 4distplot
ns with
ns in
ns with</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
      </examples>
    </chart>
    <chart name="Empirical cumulative distribution plots" source_file="pyvy_2x3/Empirical cumulative distribution plots in Python.pdf">
      <description>Overview
Simple ECDF Plots &gt;  &gt; Empirical
Cumulative Distribution Plots
Empirical Cumulative Distribution Plots in Python
How to add empirical cumulative distribution function  plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to
this page
Sign up for early access now. 
 are a way to visualize the distribution of a variable, and
Plotly Express has a built-in function, px.ecdf to generate such plots.  ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x=["total_bill" , "tip"])
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex")
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", ecdfnorm =None)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , y="tip", color="sex", ecdfnorm =None)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter1020304050102030405000.20.40.60.81sex
Female
Male
total_bill total_billprobabilityday=Sun day=Sat day=Thur day=Fritime=Lunch time=Dinner
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
 8/9
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
 9/9</description>
      </customization>
    </chart>
    <chart name="Statistical charts" source_file="pyvy_2x3/Statistical charts in Python.pdf">
      <description>Empirical Cumulative
Distribution Plots
Dash 
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:33 Statistical charts in Python
 1/3

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import numpy as np
app = Dash
app.layout = html.Div,
    dcc.Graph,
    html.P,
    dcc.Slider,
    html.P,
    dcc.Slider,
])
@app.callback,
    Input,
    Input)
def display_color:
    data = np.random.normal # replace with your own data sour...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
import numpy as np
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive normal distribution'),
    dcc.Graph(id="graph"),
    html.P("Mean:"),
    dcc.Slider(id="mean", min=-3, max=3, value=0,
               marks={-3: '-3', 3: '3'}),
    html.P("Standard Deviation:"),
    dcc.Slider(id="std", min=1, max=3, value=1,
               marks={1: '1', 3: '3'}),
])
@app.callback(
    Output("graph", "figure"),
    Input("mean", "value"),
    Input("std", "value"))
def display_color(mean, std):
    data = np.random.normal(mean, std, size=500) # replace with your own data source
 fi hit (dt [1010])DOWNLOAD</code>
        </example>
      </examples>
    </chart>
    <chart name="Styling plotly express figures" source_file="pyvy_2x3/Styling plotly express figures in Python.pdf">
      <description>Styling Figures made with Plotly Express
1. Control common parameters like width &amp; height, titles, labeling and colors using built-in Plotly Express function arguments
2. Updating the figure attributes using 
3. Using Plotly's  via the template argument to every Plotly Express function
4. Setting default values for common parameters using px.defaults
Built-in Plotly Express Styling Arguments
title to set the figure title
width and height to set the figure dimensions
template to  
labels to overr...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week" ,
            width=600, height=400,
            labels={ # replaces default labels by column name
                "sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts"
            },
            category_orders ={ # replaces default order by column name
                "day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]
            },
            color_discrete_map ={ # replaces default color mapping by value
                "Male": "RebeccaPurple" , "Female" : "MediumPurple"
            },
            template ="simple_white"
            )
fig.show()Sun Sat Thur Fri020040060080010001200140016001800 sex</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week vs Target" ,
            width=600, height=400,
            labels={"sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts" },
            category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]},
            color_discrete_map ={"Male": "RebeccaPurple" , "Female" : "MediumPurple" },
            template ="simple_white"
            )
fig.update_yaxes ( # the y-axis is in dollars
    tickprefix ="$", showgrid =True
)
fig.update_layout ( # customize font and legend orientation &amp; position
    font_family ="Rockwell" ,
    legend=dict(
        title=None, orientation ="h", y=1, yanchor="bottom" , x=0.5, xanchor="center"
    )
)
fig.add_shape ( # add a horizontal "target" line
    type="line", line_color ="salmon" , line_width =3, opacity=1, line_dash ="dot",
    x0=0, x1=1, xref="paper", y0=950, y1=950, yref="y"
)
fig.add_annotation ( # add a text callout with arrow
    text="below target!" , x="Fri", y=400, arrowhead =1, showarrow =True
)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , template ="seaborn" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import plotly.io  as pio
pio.templates .default = "simple_white"
px.defaults .template  = "ggplot2"
px.defaults .color_continuous_scale  = px.colors.sequential .Blackbody
px.defaults .width = 600
px.defaults .height = 400
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , width=400)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>the plotly.graph_objects.Figure object 
customize axes 
legends</description>
      </customization>
    </chart>
    <chart name="Violin plots" source_file="pyvy_2x3/Violin plots in Python.pdf">
      <description>Violin Plot with Plotly Express
Basic Violin Plot with Plotly Express &gt;  &gt; Violin
Plots
Violin Plots in Python
How to make violin plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a statistical representation of numerical data. It is similar to a ,
with the addition of a rotated  plot on each side.
violin plot 
operates on a varie...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="total_bill" )
fig.show()
01020304050total_bill
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 1/12</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="total_bill" , box=True, # draw box plot inside the violin
                points='all', # can be 'outliers', or False
               )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="tip", x="smoker" , color="sex", box=True, points="all",
          hover_data =df.columns)
fig.show()01020304050total_bill</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="tip", color="sex",
                violinmode ='overlay' , # draw violins on top of each other
                # default violinmode is 'group' as in example above
                hover_data =df.columns)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
fig = go.Figure(data=go.Violin(y=df['total_bill' ], box_visible =True, line_color ='black',
                               meanline_visible =True, fillcolor ='lightseagreen' , opacity=0.6,
                               x0='Total Bill' ))
fig.update_layout (yaxis_zeroline =False)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
fig = go.Figure()
days = ['Thur', 'Fri', 'Sat', 'Sun']
for day in days:
    fig.add_trace (go.Violin(x=df['day'][df['day'] == day],
                            y=df['total_bill' ][df['day'] == day],
                            name=day,
                            box_visible =True,
                            meanline_visible =True))
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Heatmaps" source_file="pyvy_2x5/Heatmaps in Python.pdf">
      <description>1. Matrix Heatmaps accept a 2-dimensional matrix or array of data and visualizes it directly. This type of heatmap is the subject of this page.
2. Density Heatmaps accept data as a list and visualizes aggregated quantities like counts or sums of this data. Please refer to the 
 for this kind of figure.
Heatmaps with Plotly Express &gt;  &gt;
Heatmaps
Heatmaps in Python
How to make Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.imshow([[1, 20, 30],
                 [20, 1, 60],
                 [30, 60, 1]])
fig.show()
import plotly.express  as px
df = px.data.medals_wide (indexed=True)
fig = px.imshow(df)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Olympic medals won by countries'),
    dcc.Graph(id="graph"),
    html.P("Medals included:"),
    dcc.Checklist(
        id='medals',
        options=["gold", "silver", "bronze"],
        value=["gold", "silver"],
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("medals", "value"))
def filter_heatmap(cols):
    df = px.data.medals_wide(indexed=True) # replace with your own data source
    fig = px.imshow(df[cols])
    return figDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True, aspect="auto")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="Day of Week" , y="Time of Day" , color="Productivity" ),
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes (side="top")
fig.show()
 are labeled arrays (with labeled axes and coordinates). If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays (http://xarray.pydata.org/en/stable/)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.imshow, each value of the input array or data frame is represented as a heatmap pixel.
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
The px.imshow function can be used to display heatmaps . It accepts both array-like objects like lists of lists and
numpy or xarray arrays, as well as supported .
DataFrame objects 
For more examples using px.imshow, including examples of faceting and animations, as well as full-color image display, see the 
.
the imshow documentation
page 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 1/13
Displaying Text on Heatmapsimport plotly.express  as px
fig = px.imshow
fig.show
import plotly.express  as px
df = px.data.medals_wide 
fig = px.imshow
fig.show
New in v5.5
You can add the values to the figure as text using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting
string will control the output format.
0 1 22.521.510.50−0.5
102030405060
gold silver bronzeCanadaChinaSouth Korea
81012141618202224
medalnation
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 2/13
Heatmaps in Dashimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash  produces heatmaps with square tiles, but setting the aspect argument to "auto" will instead fill the plotting area with the heatmap, using non-
square tiles.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash
app.layout = html.Div,
    dcc.Graph,
    html.P,
    dcc.Checklist,
])
@app.callback,
    Input)
def filter_heatmap:
    df = px.data.medals_wide # replace with your own data source
    fig = px.imshow
    return figDOWNLOAD
Olympic medals won by countries
Medals included:
gold
silver
bronze
gold silverCanadaChinaSouth Korea
1012141618202224
medalnation
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 4/13
Customizing the axes and labels on a heatmapimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow
fig.show
You can use the x, y and labels arguments to customize the display of a heatmap, and use .update_xaxes to move the x axis tick labels to the top:
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 5/13
Display an xarray image with px.imshowimport plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow,
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes 
fig.show
 are labeled arrays . If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays .air.sel
fig = px.imshow
fig.show
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Heatmap class from plotly.graph_objects 
import plotly.graph_objects  as go
fig = go.Figure)
fig.show
Jan 2013Apr 2013Jul 2013Oct 2013Jan 2014Apr 2014Jul 2014Oct 2014203040506070
2402602803004xDaily Air temperature at
sigma level 995 [degK]
timelat
−0.5 0 0.5 1 1.5 2 2.5−0.500.511.522.5
102030405060
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 7/13
Heatmap with Categorical Axis Labels
In this example we also show how to ignore  when we have missing values in the data by setting the
 to False.
hovertext )
fig.show
Monday Tuesday Wednesday Thursday FridayMorningAfternoonEvening
−1001020304050607080
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 8/13
Heatmap with Unequal Block Sizes
import plotly.graph_objects  as go
import numpy as np
# Build the rectangles as a heatmap
# specify the edges of the heatmap squares
phi =  )/2. # golden ratio
xe = [0, 1, 1+), 1+), phi]
ye = [0, 1/, 1/phi**3+1/phi**4, 1/, 1]
z = [ [13,3,3,5],
      [13,2,1,5],
      [13,10,11,12],
      [13,8,8,8]
    ]
fig = go.Figure,
          y = np.sort,
          z = z,
          type = 'heatmap' ,
          colorscale  = 'Viridis' ))
# Add spiral line plot
def spiral:
    a = 1.120529
    b = 0.306349
    r = a*np.exp
    return , r*np.sin)
theta = np.linspace ; # angle
 = spiral
fig.add_trace ))
axis_template  = dict
fig.update_layout ,
    xaxis = axis_template ,
    yaxis = axis_template ,
    showlegend  = False,
    width = 700, height = 700,
    autosize  = False )
fig.show
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 9/13
24681012
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 10/13
Heatmap with Datetime Axis
Text on Heatmap Pointsimport plotly.graph_objects  as go
import datetime
import numpy as np
np.random.seed
programmers  = ['Alex','Nicole' ,'Sara','Etienne' ,'Chelsea' ,'Jody','Marianne' ]
base = datetime .datetime .today
dates = base - np.arange * datetime .timedelta 
z = np.random.poisson, len))
fig = go.Figure)
fig.update_layout ,
    xaxis_nticks =36)
fig.show
In this example we add text to heatmap points using texttemplate. We use the values from the text attribute for the text. We also adjust the font size using textfont.
Jan 12
2025Jan 19Jan 26Feb 2Feb 9Feb 16Feb 23Mar 2Mar 9Mar 16Mar 23Mar 30Apr 6Apr 13Apr 20Apr 27May 4May 11May 18May 25Jun 1Jun 8Jun 15Jun 22Jun 29Jul 6AlexNicoleSaraEtienneChelseaJodyMarianne
012345GitHub commits per day
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 11/13
Heatmap and datashader
Referenceimport plotly.graph_objects  as go
fig = go.Figure)
fig.show
Arrays of rasterized values build by datashader can be visualized using plotly's heatmaps, as shown in the .
plotly and datashader tutorial 
See  or 
 for more information and chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
 13/13</description>
      </customization>
    </chart>
    <chart name="Imshow" source_file="pyvy_2x5/Imshow in Python.pdf">
      <description>Displaying RGB image data with px.imshow
Read image arrays from image files &gt;  &gt;
Imshow
Imshow in Python
How to display image data in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
This tutorial shows how to display and explore image data. If you would like instead a logo or static image, use go.layout.Image as explained .
here 
px.imshow disp...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
img_rgb = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                    [[0, 255, 0], [0, 0, 255], [255, 0, 0]]
                   ], dtype=np.uint8)
fig = px.imshow(img_rgb)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
from skimage import io
img = io.imread('https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Crab_Nebula.jpg/240px-Crab_Nebula.jpg' )
fig = px.imshow(img)
fig.show()
import plotly.express  as px
from skimage import data
img = data.astronaut ()
fig = px.imshow(img, binary_format ="jpeg", binary_compression_level =0)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
img = np.arange(15**2).reshape((15, 15))
fig = px.imshow(img)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
img = np.arange(100).reshape((10, 10))
fig = px.imshow(img, binary_string =True)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
img = np.arange(100).reshape((10, 10))
fig = px.imshow(img, color_continuous_scale ='gray')
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
 1/20
Display single-channel 2D data as a heatmapimport plotly.express  as px
from skimage import io
img = io.imread
fig = px.imshow
fig.show
import plotly.express  as px
from skimage import data
img = data.astronaut 
fig = px.imshow
fig.show
For a 2D image, px.imshow uses a colorscale to map scalar data to colors. The default colorscale is the one of the active template .
the tutorial on templates</description>
      </customization>
    </chart>
    <chart name="Plotly express arguments" source_file="pyvy_2x9/Plotly express arguments in Python.pdf">
      <description>Data for the Examples
carshare - Each row represents the availability of car-sharing services near the centroid of a zone in Montreal over a month-long period.
election - Each row represents voting results for an electoral district in the 2013 Montreal mayoral election.
iris - Each row represents a flower. &gt;  &gt; Plotly
Express Arguments
Plotly Express Arguments in Python
Input data arguments accepted by Plotly Express functions
Plotly Studio: Transform any dataset into an interactive data applica...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
df.head()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
long_df
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input, relabelled" ,
            labels={"value": "count", "variable" : "medal"})
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
px provides native support for dataframe types other than pandas, including Polars:
import plotly.express  as px
df = px.data.iris(return_type ='polars' )
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 5/12</code>
        </example>
      </examples>
    </chart>
    <chart name="Styling plotly express figures" source_file="pyvy_2x9/Styling plotly express figures in Python.pdf">
      <description>Styling Figures made with Plotly Express
1. Control common parameters like width &amp; height, titles, labeling and colors using built-in Plotly Express function arguments
2. Updating the figure attributes using 
3. Using Plotly's  via the template argument to every Plotly Express function
4. Setting default values for common parameters using px.defaults
Built-in Plotly Express Styling Arguments
title to set the figure title
width and height to set the figure dimensions
template to  
labels to overr...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week" ,
            width=600, height=400,
            labels={ # replaces default labels by column name
                "sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts"
            },
            category_orders ={ # replaces default order by column name
                "day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]
            },
            color_discrete_map ={ # replaces default color mapping by value
                "Male": "RebeccaPurple" , "Female" : "MediumPurple"
            },
            template ="simple_white"
            )
fig.show()Sun Sat Thur Fri020040060080010001200140016001800 sex</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week vs Target" ,
            width=600, height=400,
            labels={"sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts" },
            category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]},
            color_discrete_map ={"Male": "RebeccaPurple" , "Female" : "MediumPurple" },
            template ="simple_white"
            )
fig.update_yaxes ( # the y-axis is in dollars
    tickprefix ="$", showgrid =True
)
fig.update_layout ( # customize font and legend orientation &amp; position
    font_family ="Rockwell" ,
    legend=dict(
        title=None, orientation ="h", y=1, yanchor="bottom" , x=0.5, xanchor="center"
    )
)
fig.add_shape ( # add a horizontal "target" line
    type="line", line_color ="salmon" , line_width =3, opacity=1, line_dash ="dot",
    x0=0, x1=1, xref="paper", y0=950, y1=950, yref="y"
)
fig.add_annotation ( # add a text callout with arrow
    text="below target!" , x="Fri", y=400, arrowhead =1, showarrow =True
)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , template ="seaborn" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import plotly.io  as pio
pio.templates .default = "simple_white"
px.defaults .template  = "ggplot2"
px.defaults .color_continuous_scale  = px.colors.sequential .Blackbody
px.defaults .width = 600
px.defaults .height = 400
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , width=400)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>the plotly.graph_objects.Figure object 
customize axes 
legends</description>
      </customization>
    </chart>
    <chart name="Subplots" source_file="pyvy_2x9/Subplots in Python.pdf">
      <description>Subplots and Plotly Express
Simple Subplot &gt;  &gt;
Subplots
Subplots in Python
How to make subplots in with Plotly's Python graphing library. Examples of stacked, custom-sized, gridded, and annotated subplots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Side By Side Subplots" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=3, cols=1)
fig.add_trace (go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
), row=1, col=1)
fig.add_trace (go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
), row=2, col=1)
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
), row=3, col=1)
fig.update_layout (height=600, width=600, title_text ="Stacked Subplots" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, start_cell ="bottom-left" )
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    subplot_titles =("Plot 1" , "Plot 2" , "Plot 3" , "Plot 4" ))
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.update_layout (height=500, width=700,
                  title_text ="Multiple Subplots with Titles" )
fig.show()
11.522.5344.555.56
20253035405055606570
300350400450500600650700750800
4000450050005500600070007500800085009000trace 0
trace 1
trace 2
trace 3Multiple Subplots with Titles</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[4, 5, 6],
        mode="markers+text" ,
        text=["Text A" , "Text B" , "Text C" ],
        textposition ="bottom center"
    ),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(
        x=[20, 30, 40],
        y=[50, 60, 70],
        mode="markers+text" ,
        text=["Text D" , "Text E" , "Text F" ],
        textposition ="bottom center"
    ),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Subplots with Annotations" )
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>specs examples
and Row
Titles
el API)
xis  which will be used to determine the appropriate subplot type for that trace.By default, the make_subplots function assumes that the traces that will be added to all subplots are 2-dimensional cartesian traces . Traces with other subplot types  are supported by specifying the type subplot option in the specs argument
to make_subplots.
Here are the possible values for the type option:
Here is an example that creates and populates a 2 x 2 subplot grid containing 4 different subplot types.
and Row
Titles
el API)
xis 
fig.add_trace ,
              row=1, col=1)
fig.add_trace ,
              row=1, col=2)
fig.add_trace ,
              row=2, col=1)
fig.add_trace ,
              row=2, col=2)
fig.update_layout 
fig.show
As an alternative to providing the name of a subplot type , the type option may also be set to a string containing the name of
a trace type , which will be used to determine the subplot type that is compatible with that trace.
Here is the example above, modified to specify the subplot types using trace type names.0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots 
fig.add_trace ,
              row=1, col=1)
fig.add_trace ,
              row=1, col=2)
fig.add_trace ,
              row=2, col=1)
fig.add_trace ,
              row=2, col=2)
fig.update_layout 
fig.show
0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis import plotly.graph_objects  as go
trace1 = go.Scatter
trace2 = go.Scatter
data = [trace1, trace2]
layout = go.Layout,
    xaxis2=dict,
    yaxis2=dict
)
fig = go.Figure
fig.show
1 1.5 2 2.5 344.555.56
20253035405055606570trace 0
trace 1
and Row
Titles
el API)
xis 
trace2 = go.Scatter
trace3 = go.Scatter
trace4 = go.Scatter
data = [trace1, trace2, trace3, trace4]
layout = go.Layout,
    yaxis=dict,
    xaxis2=dict,
    xaxis4=dict,
    yaxis3=dict,
    yaxis4=dict
)
fig = go.Figure
fig.show
1 2 3 42345600650700750800
20 25 30 35 404000 4500 5000 5500 600070007500800085009000 trace 0
trace 1
trace 2
trace 3
and Row
Titles
el API)
xis 
Setting Subplots on a Figure Directlyimport plotly.graph_objects  as go
trace1 = go.Scatter
trace2 = go.Scatter
trace3 = go.Scatter
data = [trace1, trace2, trace3]
layout = go.Layout,
    legend=dict,
    yaxis2=dict,
    yaxis3=dict
)
fig = go.Figure
fig.show
new in 4.13
Subplots can be added to an already existing figure, provided it doesn't already have subplots. go.Figure.set_subplots accepts all the same arguments as
plotly.subplots.make_subplots.
import plotly.graph_objects  as go
fig = go.Figure.set_subplots 0 1 2 3 4 51010.51111.51210010511011512010001050110011501200trace 2
trace 1
trace 0
and Row
Titles
el API)
xis 
All of the x-axis properties are found here:  All of the y-axis
properties are found here:</description>
      </customization>
    </chart>
    <chart name="pyvy_2xA" source_file="pyvy_main/pyvy_2xA.md">
      <description>&lt;web_content&gt;
  &lt;title&gt;EVALUATION ONLY - Labeling Instructions&lt;/title&gt;
  &lt;author&gt;Alignerr&lt;/author&gt;
  &lt;publication_date&gt;2025-07-12&lt;/publication_date&gt;
  &lt;license&gt;Internal Evaluation Use Only&lt;/license&gt;
  &lt;section&gt;
    &lt;title&gt;Objective&lt;/title&gt;
    &lt;paragraph&gt;
      This is a Python evaluation focused on data visualization and storytelling. The main task is to recreate a visual similar to a reference image, telling the same story using a dummy dataset. This involves creating Python scripts for data g...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">importantes relacionados a voos de passageiros nos EUA[cite: 227].&lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express as px
      fig = px.scatter(x=range(10), y=range(10))
      fig.write_html("path/to/file.html")
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Incorporando Saída da Plotly em HTML com Jinja2&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]É possível inserir a saída da Plotly em templates HTML usando Jinja2[cite: 439]. [cite_start]Para isso, use o método `.to_html(full_html=False)` para gerar apenas o HTML do gráfico, sem a estrutura completa da página, e passe-o para o template[cite: 441, 442]. [cite_start]Primeiro, crie um arquivo de template HTML com um marcador de posição Jinja como `{{ fig }}`[cite: 444, 445].
    &lt;/paragraph&gt;
    &lt;code&gt;
      &amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset="utf-8" /&amp;gt;
          &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;h1&amp;gt;Here's a Plotly graph!&amp;lt;/h1&amp;gt;
          {{ fig }}
          &amp;lt;p&amp;gt;And here's some text after the graph.&amp;lt;/p&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    &lt;/code&gt;
    &lt;paragraph&gt;
      [cite_start]Em seguida, use um script Python para ler o template, renderizar o gráfico dentro dele e salvar o resultado em um novo arquivo HTML[cite: 478].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      from jinja2 import Template</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html
      import plotly.express as px
      from base64 import b64encode
      import io</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">importância da cor para a narrativa e acessibilidade, apresenta ferramentas como Viz Palette e Color Brewer para testes, explica as propriedades das cores (matiz, saturação, luminosidade) e fornece um processo passo a passo e exemplos concretos de esquemas de cores profissionais.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Por Que a Cor é Importante: Narrativa e Acessibilidade&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]A cor é um elemento crucial no design de gráficos e visualizações de dados, pois é uma ferramenta poderosa para contar histórias[cite: 1207]. [cite_start]A escolha certa das cores melhora a compreensão do público e torna o trabalho acessível a pessoas com Deficiência de Visão de Cores (CVD), também conhecida como daltonismo[cite: 1206]. [cite_start]A CVD é uma ocorrência comum, afetando aproximadamente 1 em cada 12 homens e 1 em cada 200 mulheres[cite: 1216].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Princípios para a Seleção Eficaz de Cores&lt;/title&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Contraste&lt;/b&gt;: Você pode usar qualquer combinação de cores, desde que sejam altamente contrastantes[cite: 1227]. [cite_start]O contraste pode ser criado ajustando as três principais características da cor: matiz, saturação e luminosidade[cite: 1228]. [cite_start]Ao usar escala de cinza, é fundamental garantir que haja uma diferença de saturação de aproximadamente 15-30% entre as cores[cite: 1497].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Cores Opostas&lt;/b&gt;: Escolher cores de lados opostos do círculo cromático é uma das melhores maneiras de criar combinações de cores que são acessíveis para pessoas com daltonismo e outras dificuldades de percepção de cores[cite: 1221, 1222].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Códigos de Cores&lt;/b&gt;: Para garantir consistência entre diferentes plataformas e ferramentas (como Adobe Illustrator, Excel, PowerPoint, etc.), é importante usar códigos de cores[cite: 1241]. [cite_start]O código "HEX" é um código de seis dígitos que pode ser usado para identificar as cores exatas que você deseja manter consistentes[cite: 1241].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Um Fluxo de Trabalho Prático para Escolher Paletas&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O processo a seguir pode ser usado para criar sua própria paleta de cores científica[cite: 1508]:
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 1&lt;/b&gt;: Escolha uma paleta de cores que pareça boa para você e que melhor represente sua história de dados[cite: 1510].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 2&lt;/b&gt;: Teste as cores em uma ferramenta como o **Viz Palette** para ver como elas afetarão um público com deficiência de visão de cores[cite: 1511, 1248]. [cite_start]O **Color Brewer** é outra ferramenta excelente para testar paletas de cores, especialmente para mapas e dados cartográficos[cite: 1450, 1451, 1452].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 3&lt;/b&gt;: Ajuste a cor, matiz e saturação no Viz Palette até que não haja conflitos de cores[cite: 1512].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 4&lt;/b&gt;: Aplique as cores finais à sua plataforma de visualização de dados, destacando o ponto principal de seus dados[cite: 1513].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Exemplos de Paletas e Casos de Uso&lt;/title&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Paletas de Sistemas Padrão&lt;/b&gt;: Alguns sistemas de design, como o PatternFly, fornecem um ciclo de cores padrão para gráficos. [cite_start]Por exemplo, quando há mais de 6 grupos, o PatternFly usa automaticamente um ciclo de cores que inclui azul, verde, azul-petróleo, roxo e amarelo[cite: 503].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Sequenciais&lt;/b&gt;: Ideal para dados que têm uma progressão (por exemplo, de baixo para alto). [cite_start]Um exemplo é uma combinação de azul claro, médio e escuro[cite: 1279, 1303].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Qualitativas/Categóricas&lt;/b&gt;: Usadas para categorias distintas sem uma ordem inerente. [cite_start]Um exemplo inclui uma combinação de Azul, Laranja e Cinza[cite: 1299, 1300].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Paletas Divergentes&lt;/b&gt;: Adequadas para dados com um ponto médio neutro, como destacar desvios[cite: 1325].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Escala de Cinza&lt;/b&gt;: Uma ótima opção padrão quando usada com contraste suficiente[cite: 1495, 1496]. [cite_start]Exemplos de códigos HEX para uma paleta de cinza são `#b8b8b8` (cinza claro) e `#707070` (cinza escuro)[cite: 1276].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;link url="https://projects.susielu.com/viz-palette" type="external"&gt;Viz Palette Tool&lt;/link&gt;
  &lt;link url="https://colorbrewer2.org/" type="external"&gt;Color Brewer Tool&lt;/link&gt;
&lt;/web_content&gt;</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = px.scatter(x=range(10), y=range(10))
      fig.write_html("path/to/file.html")
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Incorporando Saída da Plotly em HTML com Jinja2&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]É possível inserir a saída da Plotly em templates HTML usando Jinja2[cite: 439]. [cite_start]Para isso, use o método `.to_html(full_html=False)` para gerar apenas o HTML do gráfico, sem a estrutura completa da página, e passe-o para o template[cite: 441, 442]. [cite_start]Primeiro, crie um arquivo de template HTML com um marcador de posição Jinja como `{{ fig }}`[cite: 444, 445].
    &lt;/paragraph&gt;
    &lt;code&gt;
      &amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset="utf-8" /&amp;gt;
          &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;h1&amp;gt;Here's a Plotly graph!&amp;lt;/h1&amp;gt;
          {{ fig }}
          &amp;lt;p&amp;gt;And here's some text after the graph.&amp;lt;/p&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    &lt;/code&gt;
    &lt;paragraph&gt;
      [cite_start]Em seguida, use um script Python para ler o template, renderizar o gráfico dentro dele e salvar o resultado em um novo arquivo HTML[cite: 478].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      from jinja2 import Template</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>&lt;web_content&gt;
  &lt;title&gt;Data Visualization &amp;amp; Dashboards&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Showcase of Examples&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento apresenta uma galeria de aplicações e painéis interativos construídos com o Plotly Dash[cite: 5]. [cite_start]Os exemplos abrangem uma ampla gama de setores e casos de uso, incluindo a análise de custos de planos de saúde [cite: 13, 14][cite_start], disparidade salarial de gênero [cite: 17, 24][cite_start], análise de dados de filmes do IMDb [cite: 39, 40][cite_start], dados geoespaciais de corridas da Uber [cite: 88, 89][cite_start], visualização de dados climáticos [cite: 92, 93][cite_start], métricas de plataformas de streaming [cite: 207, 208] e muito mais, demonstrando a versatilidade da ferramenta para criar visualizações de dados interativas.
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Medical Provider Charges Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os custos de provedores de saúde em diferentes estados[cite: 14].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Gender Pay Gap Report&lt;/title&gt;
      &lt;author&gt;Ann Marie&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Analisa a diferença entre a média e mediana do pagamento por hora entre homens e mulheres[cite: 24].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IMDb Analysis for Movies &amp;amp; Series&lt;/title&gt;
      &lt;author&gt;TFI&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza e analisa dados do IMDb para os principais filmes e séries e obtém recomendações[cite: 40].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IOT Rainfall App&lt;/title&gt;
      &lt;author&gt;Tanima&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora dados de precipitação neste painel Python IOT[cite: 53].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Clinical Patient Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora o volume de pacientes da clínica por hora do dia, tempo de espera e pontuação de cuidado[cite: 64].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Retail Demand Transference&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Prevê a demanda de produtos de consumo para varejistas em diferentes localidades de lojas[cite: 81].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Uber Rides Geospatial Data&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os locais de embarque de milhões de corridas da Uber em NYC[cite: 89].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;CBE Climate Visualization App&lt;/title&gt;
      &lt;author&gt;Center for the Built Environment &lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados climáticos com séries temporais, mapas de calor, mapas, rosas dos ventos e mais[cite: 93].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;HERA Radio Telescope &amp;amp; Weather App&lt;/title&gt;
      &lt;author&gt;HERA Reionization Team&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados científicos e geoespaciais em tempo real do conjunto de radiotelescópios HERA[cite: 142].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;World Atlas&lt;/title&gt;
      &lt;author&gt;Dan Baker&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza centenas de indicadores entre países nesta aplicação de múltiplas páginas[cite: 150].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Dash Molstar for SARS-COV-2&lt;/title&gt;
      &lt;author&gt;Simon Sun&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Exemplo de uso do Dash-Molstar para visualizar estruturas moleculares e dados em aplicações web[cite: 169].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Repair Cafe Dashboard&lt;/title&gt;
      &lt;author&gt;Natalia&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza os dados do Repair Café para rastrear e explorar os resultados de reparos de dispositivos[cite: 217].&lt;/visualization&gt;
    &lt;/dashboard&gt;
     &lt;dashboard&gt;
      &lt;title&gt;An Analytics App on USA Flights Data&lt;/title&gt;
      &lt;author&gt;Unknown&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explore esta aplicação web para descobrir dados importantes relacionados a voos de passageiros nos EUA[cite: 227].&lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;</description>
      </customization>
    </chart>
    <chart name="pyvy_2xA" source_file="pyvy_main/pyvy_2xA.txt">
      <description>&lt;web_content&gt;
  &lt;title&gt;EVALUATION ONLY - Labeling Instructions&lt;/title&gt;
  &lt;author&gt;Alignerr&lt;/author&gt;
  &lt;publication_date&gt;2025-07-12&lt;/publication_date&gt;
  &lt;license&gt;Internal Evaluation Use Only&lt;/license&gt;
  &lt;section&gt;
    &lt;title&gt;Objective&lt;/title&gt;
    &lt;paragraph&gt;
      This is a Python evaluation focused on data visualization and storytelling. The main task is to recreate a visual similar to a reference image, telling the same story using a dummy dataset. This involves creating Python scripts for data g...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">importantes relacionados a voos de passageiros nos EUA[cite: 227].&lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express as px
      fig = px.scatter(x=range(10), y=range(10))
      fig.write_html("path/to/file.html")
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Incorporando Saída da Plotly em HTML com Jinja2&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]É possível inserir a saída da Plotly em templates HTML usando Jinja2[cite: 439]. [cite_start]Para isso, use o método `.to_html(full_html=False)` para gerar apenas o HTML do gráfico, sem a estrutura completa da página, e passe-o para o template[cite: 441, 442]. [cite_start]Primeiro, crie um arquivo de template HTML com um marcador de posição Jinja como `{{ fig }}`[cite: 444, 445].
    &lt;/paragraph&gt;
    &lt;code&gt;
      &amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset="utf-8" /&amp;gt;
          &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;h1&amp;gt;Here's a Plotly graph!&amp;lt;/h1&amp;gt;
          {{ fig }}
          &amp;lt;p&amp;gt;And here's some text after the graph.&amp;lt;/p&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    &lt;/code&gt;
    &lt;paragraph&gt;
      [cite_start]Em seguida, use um script Python para ler o template, renderizar o gráfico dentro dele e salvar o resultado em um novo arquivo HTML[cite: 478].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      from jinja2 import Template</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html
      import plotly.express as px
      from base64 import b64encode
      import io</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">importância da cor para a narrativa e acessibilidade, apresenta ferramentas como Viz Palette e Color Brewer para testes, explica as propriedades das cores (matiz, saturação, luminosidade) e fornece um processo passo a passo e exemplos concretos de esquemas de cores profissionais.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Por Que a Cor é Importante: Narrativa e Acessibilidade&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]A cor é um elemento crucial no design de gráficos e visualizações de dados, pois é uma ferramenta poderosa para contar histórias[cite: 1207]. [cite_start]A escolha certa das cores melhora a compreensão do público e torna o trabalho acessível a pessoas com Deficiência de Visão de Cores (CVD), também conhecida como daltonismo[cite: 1206]. [cite_start]A CVD é uma ocorrência comum, afetando aproximadamente 1 em cada 12 homens e 1 em cada 200 mulheres[cite: 1216].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Princípios para a Seleção Eficaz de Cores&lt;/title&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Contraste&lt;/b&gt;: Você pode usar qualquer combinação de cores, desde que sejam altamente contrastantes[cite: 1227]. [cite_start]O contraste pode ser criado ajustando as três principais características da cor: matiz, saturação e luminosidade[cite: 1228]. [cite_start]Ao usar escala de cinza, é fundamental garantir que haja uma diferença de saturação de aproximadamente 15-30% entre as cores[cite: 1497].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Cores Opostas&lt;/b&gt;: Escolher cores de lados opostos do círculo cromático é uma das melhores maneiras de criar combinações de cores que são acessíveis para pessoas com daltonismo e outras dificuldades de percepção de cores[cite: 1221, 1222].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Códigos de Cores&lt;/b&gt;: Para garantir consistência entre diferentes plataformas e ferramentas (como Adobe Illustrator, Excel, PowerPoint, etc.), é importante usar códigos de cores[cite: 1241]. [cite_start]O código "HEX" é um código de seis dígitos que pode ser usado para identificar as cores exatas que você deseja manter consistentes[cite: 1241].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Um Fluxo de Trabalho Prático para Escolher Paletas&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O processo a seguir pode ser usado para criar sua própria paleta de cores científica[cite: 1508]:
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 1&lt;/b&gt;: Escolha uma paleta de cores que pareça boa para você e que melhor represente sua história de dados[cite: 1510].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 2&lt;/b&gt;: Teste as cores em uma ferramenta como o **Viz Palette** para ver como elas afetarão um público com deficiência de visão de cores[cite: 1511, 1248]. [cite_start]O **Color Brewer** é outra ferramenta excelente para testar paletas de cores, especialmente para mapas e dados cartográficos[cite: 1450, 1451, 1452].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 3&lt;/b&gt;: Ajuste a cor, matiz e saturação no Viz Palette até que não haja conflitos de cores[cite: 1512].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 4&lt;/b&gt;: Aplique as cores finais à sua plataforma de visualização de dados, destacando o ponto principal de seus dados[cite: 1513].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Exemplos de Paletas e Casos de Uso&lt;/title&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Paletas de Sistemas Padrão&lt;/b&gt;: Alguns sistemas de design, como o PatternFly, fornecem um ciclo de cores padrão para gráficos. [cite_start]Por exemplo, quando há mais de 6 grupos, o PatternFly usa automaticamente um ciclo de cores que inclui azul, verde, azul-petróleo, roxo e amarelo[cite: 503].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Sequenciais&lt;/b&gt;: Ideal para dados que têm uma progressão (por exemplo, de baixo para alto). [cite_start]Um exemplo é uma combinação de azul claro, médio e escuro[cite: 1279, 1303].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Qualitativas/Categóricas&lt;/b&gt;: Usadas para categorias distintas sem uma ordem inerente. [cite_start]Um exemplo inclui uma combinação de Azul, Laranja e Cinza[cite: 1299, 1300].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Paletas Divergentes&lt;/b&gt;: Adequadas para dados com um ponto médio neutro, como destacar desvios[cite: 1325].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Escala de Cinza&lt;/b&gt;: Uma ótima opção padrão quando usada com contraste suficiente[cite: 1495, 1496]. [cite_start]Exemplos de códigos HEX para uma paleta de cinza são `#b8b8b8` (cinza claro) e `#707070` (cinza escuro)[cite: 1276].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;link url="https://projects.susielu.com/viz-palette" type="external"&gt;Viz Palette Tool&lt;/link&gt;
  &lt;link url="https://colorbrewer2.org/" type="external"&gt;Color Brewer Tool&lt;/link&gt;
&lt;/web_content&gt;</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = px.scatter(x=range(10), y=range(10))
      fig.write_html("path/to/file.html")
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Incorporando Saída da Plotly em HTML com Jinja2&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]É possível inserir a saída da Plotly em templates HTML usando Jinja2[cite: 439]. [cite_start]Para isso, use o método `.to_html(full_html=False)` para gerar apenas o HTML do gráfico, sem a estrutura completa da página, e passe-o para o template[cite: 441, 442]. [cite_start]Primeiro, crie um arquivo de template HTML com um marcador de posição Jinja como `{{ fig }}`[cite: 444, 445].
    &lt;/paragraph&gt;
    &lt;code&gt;
      &amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset="utf-8" /&amp;gt;
          &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;h1&amp;gt;Here's a Plotly graph!&amp;lt;/h1&amp;gt;
          {{ fig }}
          &amp;lt;p&amp;gt;And here's some text after the graph.&amp;lt;/p&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    &lt;/code&gt;
    &lt;paragraph&gt;
      [cite_start]Em seguida, use um script Python para ler o template, renderizar o gráfico dentro dele e salvar o resultado em um novo arquivo HTML[cite: 478].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      from jinja2 import Template</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>&lt;web_content&gt;
  &lt;title&gt;Data Visualization &amp;amp; Dashboards&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Showcase of Examples&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento apresenta uma galeria de aplicações e painéis interativos construídos com o Plotly Dash[cite: 5]. [cite_start]Os exemplos abrangem uma ampla gama de setores e casos de uso, incluindo a análise de custos de planos de saúde [cite: 13, 14][cite_start], disparidade salarial de gênero [cite: 17, 24][cite_start], análise de dados de filmes do IMDb [cite: 39, 40][cite_start], dados geoespaciais de corridas da Uber [cite: 88, 89][cite_start], visualização de dados climáticos [cite: 92, 93][cite_start], métricas de plataformas de streaming [cite: 207, 208] e muito mais, demonstrando a versatilidade da ferramenta para criar visualizações de dados interativas.
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Medical Provider Charges Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os custos de provedores de saúde em diferentes estados[cite: 14].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Gender Pay Gap Report&lt;/title&gt;
      &lt;author&gt;Ann Marie&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Analisa a diferença entre a média e mediana do pagamento por hora entre homens e mulheres[cite: 24].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IMDb Analysis for Movies &amp;amp; Series&lt;/title&gt;
      &lt;author&gt;TFI&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza e analisa dados do IMDb para os principais filmes e séries e obtém recomendações[cite: 40].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IOT Rainfall App&lt;/title&gt;
      &lt;author&gt;Tanima&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora dados de precipitação neste painel Python IOT[cite: 53].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Clinical Patient Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora o volume de pacientes da clínica por hora do dia, tempo de espera e pontuação de cuidado[cite: 64].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Retail Demand Transference&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Prevê a demanda de produtos de consumo para varejistas em diferentes localidades de lojas[cite: 81].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Uber Rides Geospatial Data&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os locais de embarque de milhões de corridas da Uber em NYC[cite: 89].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;CBE Climate Visualization App&lt;/title&gt;
      &lt;author&gt;Center for the Built Environment &lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados climáticos com séries temporais, mapas de calor, mapas, rosas dos ventos e mais[cite: 93].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;HERA Radio Telescope &amp;amp; Weather App&lt;/title&gt;
      &lt;author&gt;HERA Reionization Team&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados científicos e geoespaciais em tempo real do conjunto de radiotelescópios HERA[cite: 142].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;World Atlas&lt;/title&gt;
      &lt;author&gt;Dan Baker&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza centenas de indicadores entre países nesta aplicação de múltiplas páginas[cite: 150].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Dash Molstar for SARS-COV-2&lt;/title&gt;
      &lt;author&gt;Simon Sun&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Exemplo de uso do Dash-Molstar para visualizar estruturas moleculares e dados em aplicações web[cite: 169].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Repair Cafe Dashboard&lt;/title&gt;
      &lt;author&gt;Natalia&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza os dados do Repair Café para rastrear e explorar os resultados de reparos de dispositivos[cite: 217].&lt;/visualization&gt;
    &lt;/dashboard&gt;
     &lt;dashboard&gt;
      &lt;title&gt;An Analytics App on USA Flights Data&lt;/title&gt;
      &lt;author&gt;Unknown&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explore esta aplicação web para descobrir dados importantes relacionados a voos de passageiros nos EUA[cite: 227].&lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;</description>
      </customization>
    </chart>
  </category>
  <category id="scientific_charts" name="Gráficos Científicos">
    <chart name="Smoothing" source_file="pyvy_2x/Smoothing in Python.pdf">
      <description>Imports
Savitzky-Golay Filter &gt;  &gt; Smoothing
Smoothing in Python
Learn how to perform smoothing using various methods in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
import pandas as pd
import scipy
from scipy import signal</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
import pandas as pd
import scipy
from scipy import signal
np.random.seed(1)
x = np.linspace (0, 10, 100)
y = np.sin(x)
noise = 2 * np.random.random(len(x)) - 1 # uniformly distributed between -1 and 1
y_noise = y + noise
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x,
    y=y,
    mode='markers' ,
    marker=dict(size=2, color='black'),
    name='Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=y_noise,
    mode='markers' ,
    marker=dict(
        size=6,
        color='royalblue' ,
        symbol='circle-open'
    ),
    name='Noisy Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=signal.savgol_filter (y_noise,
                           53, # window size used for filtering
                           3), # order of fitted polynomial
    mode='markers' ,
    marker=dict(
        size=6,
        color='mediumpurple' ,
        symbol='triangle-up'
    ),
    name='Savitzky-Golay'
))
fig.show()
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 2/5</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x,
    y=y,
    mode='markers' ,
    marker=dict(size=2, color='black'),
    name='Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=y_noise,
    mode='markers' ,
    marker=dict(
        size=6,
        color='royalblue' ,
        symbol='circle-open'
    ),
    name='Noisy Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=signal.savgol_filter (y_noise,
                           53, # window size used for filtering
                           3), # order of fitted polynomial
    mode='markers' ,
    marker=dict(
        size=6,
        color='mediumpurple' ,
        symbol='triangle-up'
    ),
    name='Savitzky-Golay'
))
fig.show()
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 2/5</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
The tutorial below imports , ,  and
.
NumPy 
16/07/2025, 06:17 Smoothing in Python
 1/5
import plotly.graph_objects  as go
import numpy as np
import pandas as pd
import scipy
from scipy import signal
np.random.seed
x = np.linspace 
y = np.sin
noise = 2 * np.random.random) - 1 # uniformly distributed between -1 and 1
y_noise = y + noise
fig = go.Figure
fig.add_trace ,
    name='Sine'
))
fig.add_trace ,
    name='Noisy Sine'
))
fig.add_trace , # order of fitted polynomial
    mode='markers' ,
    marker=dict,
    name='Savitzky-Golay'
))
fig.show
16/07/2025, 06:17 Smoothing in Python
 2/5
Triangular Moving Average
Another method for smoothing is a moving average. There are various forms of this, but the idea is to take a window of points in your dataset, compute an average of
the points, then shift the window over by one point and repeat. This will generate a bunch of points which will result in the smoothed data.
Let us look at the common Simple Moving Average first. In the 1D case we have a data set of $N$ points with y-values $y_1, y_2, ..., y_N$. Setting our window size to $n
&lt; N$, the new $i^{th}$ y-value after smoothing is computed as:
SMAi=yi+...+yi+n
n
In the Triangular Moving Average, two simple moving averages are computed on top of each other, in order to give more weight to closer  points. This
means that our $SMA_i$ are computed then a Triangular Moving Average $TMA_i$ is computed as:
TMAi=SMAi+...+SMAi+n
n0 2 4 6 8 10−2−1.5−1−0.500.511.52Sine
Noisy Sine
Savitzky-Golay
16/07/2025, 06:17 Smoothing in Python
 3/5
def smoothTriangle :
    triangle =np.concatenate , np.arange[::-1])) # up then down
    smoothed =[]
    for i in range - degree * 2):
        point=data[i:i + len] * triangle
        smoothed .append/np.sum)
    # Handle boundaries
    smoothed =[smoothed [0]]*int + smoothed
    while len &lt; len:
        smoothed .append
    return smoothed
fig = go.Figure
fig.add_trace ' ,
    ),
    name='Sine'
))
fig.add_trace ,
    name='Noisy Sine'
))
fig.add_trace ,  # setting degree to 10
    mode='markers' ,
    marker=dict,
    name='Moving Triangle - Degree 10'
))
fig.show
0 2 4 6 8 10−2−1.5−1−0.500.511.52Sine
Noisy Sine
Moving Triangle - Degree 10
16/07/2025, 06:17 Smoothing in Python
 4/5
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:17 Smoothing in Python
 5/5</description>
      </customization>
    </chart>
    <chart name="Annotated heatmaps" source_file="pyvy_2x1/Annotated heatmaps in Python.pdf">
      <description>Annotated Heatmaps with Plotly Express
Basic Annotated Heatmap for z-annotations &gt;  &gt;
Annotated Heatmaps
Annotated Heatmaps in Python
How to make Annotated Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
New in v5.5
As of version 5.5.0 of plotly, the recommended way to  rather than the now-deprecated
create_annotated_heatmap figure ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 1/9</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = ff.create_annotated_heatmap (z)
fig.show()
set annotation_text to a matrix with the same dimensions as z</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game Three' , 'Game Two' , 'Game One' ]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = ff.create_annotated_heatmap (z, x=x, y=y, annotation_text =z_text, colorscale ='Viridis' )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game One' , 'Game Two' , 'Game Three' ]
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = px.imshow(z, x=x, y=y, color_continuous_scale ='Viridis' , aspect="auto")
fig.update_traces (text=z_text, texttemplate ="%{text}")
fig.update_xaxes (side="top")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
z = np.random.randn(20, 20)
z_text = np.around(z, decimals =2) # Only show rounded value (full value on hover)
fig = ff.create_annotated_heatmap (z, annotation_text =z_text, colorscale ='Greys',
                                  hoverinfo ='z')</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>full function reference 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
 9/9</description>
      </customization>
    </chart>
    <chart name="Changes in version 6" source_file="pyvy_2x1/Changes in version 6 in Python.pdf">
      <description>now uses . Install anywidget with:
go.FigureWidget 
Plotly Express now uses  to natively support pandas, Polars, and PyArrow. With this change, the 
 of using Polars or PyArrow with Plotly Express is significantly improved.
Narwhals 
    ],
    layout=dict
        )
      ),
    # Previously the title font could be set like this:
    # titlefont=dict
)
fig.show
  1
Widget
vertible
leoffset16/07/2025, 06:04 Changes in version 6 in Python
 2/4
Removed Traces
heatmapgl
pointcloud
Other Removed Feat...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[
      go.Bar(
        x=["A", "B", "C", "D"],
        y=[10, 15, 13, 17]
        )
    ],
    layout=dict(
      title=dict(
        text="Chart Title" ,
        font=dict(
          size=40
          )
        )
      ),
    # Previously the title font could be set like this:
    # titlefont=dict(size=40)
)
fig.show()
  1</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure(
    data=[
      go.Bar(
        x=["A", "B", "C", "D"],
        y=[10, 15, 13, 17]
        )
    ],
    layout=dict(
      title=dict(
        text="Chart Title" ,
        font=dict(
          size=40
          )
        )
      ),
    # Previously the title font could be set like this:
    # titlefont=dict(size=40)
)
fig.show()
  1</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Choropleth maps" source_file="pyvy_2x1/Choropleth maps in Python.pdf">
      <description>Base Map Configuration
Introduction: main parameters for choropleth outline maps
1. Geometry information:
A. This can either be a supplied GeoJSON file where each feature has either an id field or some identifying value in properties; or
B. one of the built-in geometries within plotly: US states and world countries 
2. A list of values indexed by feature identifier.
Choropleth Map with plotly.express
GeoJSON with feature.id &gt;  &gt; Choropleth
Maps
Choropleth Maps in Python
How to make choropleth ma...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
counties ["features" ][0]</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
df.head()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.express  as px
fig = px.choropleth (df, geojson=counties , locations ='fips', color='unemp',
                           color_continuous_scale ="Viridis" ,
                           range_color =(0, 12),
                           scope="usa",
                           labels={'unemp':'unemployment rate' }
                          )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
print(df["district" ][2])
print(geojson["features" ][0]["properties" ])</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="Bergeron" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>ometries
th16/07/2025, 06:00 Choropleth maps in Python
 10/13
County Choropleth Figure Factoryimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
fig = go.Figure' ],
    text = df['COUNTRY' ],
    colorscale  = 'Blues',
    autocolorscale =False,
    reversescale =True,
    marker_line_color ='darkgray' ,
    marker_line_width =0.5,
    colorbar_tickprefix  = '$',
    colorbar_title  = 'GDP&lt;br&gt;Billions US$' ,
))
fig.update_layout ,
    annotations  = [dict]
)
fig.show
Plotly also includes a .
legacy "figure factory" for creating US county-level choropleth maps $0$5k$10k$15kGDP
Billions US$2014 Global GDP
Source: 
            CIA World Factbook
ometries
th16/07/2025, 06:00 Choropleth maps in Python
 11/13
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv 
df_sample ['State FIPS Code' ] = df_sample ['State FIPS Code' ].apply.zfill)
df_sample ['County FIPS Code' ] = df_sample ['County FIPS Code' ].apply.zfill)
df_sample ['FIPS'] = df_sample ['State FIPS Code' ] + df_sample ['County FIPS Code' ]
colorscale  = ["#f7fbff" , "#ebf3fb" , "#deebf7" , "#d2e3f3" , "#c6dbef" , "#b3d2e9" , "#9ecae1" ,
    "#85bcdb" , "#6baed6" , "#57a0ce" , "#4292c6" , "#3082be" , "#2171b5" , "#1361a9" ,
    "#08519c" , "#0b4083" , "#08306b"
]
endpts = list - 1))
fips = df_sample ['FIPS'].tolist
values = df_sample ['Unemployment Rate ' ].tolist
fig = ff.create_choropleth 
fig.layout.template  = None
fig.show
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
&gt; 12.0
11.27 - 12.0
10.53 - 11.27
9.8 - 10.53
9.07 - 9.8
8.33 - 9.07
7.6 - 8.33
6.87 - 7.6
6.13 - 6.87
5.4 - 6.13
4.67 - 5.4
3.93 - 4.67
3.2 - 3.93
2.47 - 3.2
1.73 - 2.47
1.0 - 1.73USA by Unemployment %
% unemployed
ometries
th16/07/2025, 06:00 Choropleth maps in Python
 12/13
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
ometries
th16/07/2025, 06:00 Choropleth maps in Python
 13/13</description>
      </customization>
    </chart>
    <chart name="Configuration" source_file="pyvy_2x1/Configuration in Python.pdf">
      <description>Configuration Options
Enabling Scroll Zoom &gt;  &gt;
Configuration
Configuration in Python
How to set the configuration options of figures using the Plotly Python graphing library.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
The .show method that you use to display your figures also accepts a config parameter.
You can set the configuration options for your figure by pas...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
config = {'scrollZoom' : True}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
1 1.5 2 2.5 311.522.53
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
config = {'responsive' : False}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
1 1.5 2 2.5 311.522.53</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
config = {'staticPlot' : True}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
config = {'displayModeBar' : True}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
config = {'displayModeBar' : False}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
1 1.5 2 2.5 311.522.53</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>config = {'scrollZoom' : True}
fig.add_trace )
fig.show
1 1.5 2 2.5 311.522.53
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 1/14
Turning Off Responsiveness
By default, figures you create with the plotly.py package are . Responsive figures automatically
change their height and width when the size of the window they are displayed in changes. This is true for figures which are displayed in web browsers on desktops
and mobile, Jupyter Notebooks, and other  environments.
responsive 
config = {'responsive' : False}
fig.add_trace )
fig.show
1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 2/14
Making A Static Chart
Forcing The Modebar to Always Be Visibleimport plotly.graph_objects  as go
fig = go.Figure
config = {'staticPlot' : True}
fig.add_trace )
fig.show
When users hover over a figure generated with plotly.py, a modebar appears in the top-right of the figure. This presents users with several options for interacting
with the figure.
By default, the modebar is only visible while the user is hovering over the chart. If you would like the modebar to always be visible regardless of whether or not the
user is currently hovering over the figure, set the displayModeBar attribute in the configuration of your figure to true.1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 3/14
Preventing the Modebar from Appearingimport plotly.graph_objects  as go
fig = go.Figure
config = {'displayModeBar' : True}
fig.add_trace )
fig.show
When users hover over a figure generated with plotly.py, a modebar appears in the top-right of the figure. This presents users with several options for interacting with
the figure.
By default, the modebar is only visible while the user is hovering over the chart. If you would like the modebar to never be visible, then set the displayModeBar
attribute in the config of your figure to false.1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 4/14
import plotly.graph_objects  as go
fig = go.Figure
config = {'displayModeBar' : False}
fig.add_trace )
fig.show
1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 5/14
Hiding the Plotly Logo on the Modebar
Customizing Modebar "Download Plot" Buttonimport plotly.graph_objects  as go
fig = go.Figure
config = {'displaylogo' : False}
fig.add_trace )
fig.show
The camera icon on the modebar causes a static version of the figure to be downloaded via the user's browser. The default behaviour is to download a PNG of size
700 by 450 pixels.
This behavior can be controlled via the toImageButtonOptions configuration key.1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 6/14
import plotly.express  as px
config = {
  'toImageButtonOptions' : {
    'format' : 'svg', # one of png, svg, jpeg, webp
    'filename' : 'custom_image' ,
    'height' : 500,
    'width': 700,
    'scale': 1 # Multiply title/legend/axis/canvas sizes by this factor
  }
}
fig = px.bar
fig.show
Figures can be set to download at the currently-rendered size by setting height and width to None:0.5 1 1.5 2 2.5 3 3.500.511.522.53
xy
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 7/14
Removing Modebar Buttons
High-level: zoom, pan, select, zoomIn, zoomOut, autoScale, resetScale
2D: zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d, v1hovermode
2D Shape Drawing: drawline, drawopenpath, drawclosedpath, drawcircle, drawrect, eraseshape
3D: zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d
Cartesian: hoverClosestCartesian, hoverCompareCartesian
Geo: zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo
Other: hoverClosestGl2d, hoverClosestPie, toggleHover, resetViews, toImage, sendDataToCloud, toggleSpikelines, resetViewMapboximport plotly.express  as px
config = {
  'toImageButtonOptions' : { 'height' : None, 'width': None, }
}
fig = px.bar
fig.show
To delete buttons from the modebar, pass an array of strings containing the names of the buttons you want to remove to the modeBarButtonsToRemove attribute in
the figure's configuration dictionary. Note that different chart types have different default modebars. The following is a list of all the modebar buttons and the chart
types they are associated with:0.5 1 1.5 2 2.5 3 3.500.511.522.53
xy
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 8/14
import plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
fig.show
New in v5.0
The layout.modebar.remove attribute can be used instead of the approach used above:1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 9/14
Add optional shape-drawing buttons to modebarimport plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
fig.update_layout 
fig.show
New in v4.7
Some modebar buttons of Cartesian plots are optional and have to be added explicitly, using the modeBarButtonsToAdd config attribute. These buttons are used for
drawing or erasing shapes. See  for more details.
the tutorial on shapes and shape drawing 1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 10/14
import plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_layout 
fig.show
New in v5.0
The layout.modebar.add attribute can be used instead of the approach used above:0 0.5 1 1.5 2 2.54.555.566.577.58 species
setosa
versicolor
virginicaDraw a path to separate versicolor and virginica
petal_widthsepal_length
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 11/14
Double-Click Delayimport plotly.express  as px
df = px.data.iris
fig = px.scatter
fig.update_layout 
fig.show
Sets the maximum delay between two consecutive clicks to be interpreted as a double-click in milliseconds. This is the time interval between first mousedown and
second mouseup. The default timing is 300 ms . This setting propagates to all on-subplot double clicks .0 0.5 1 1.5 2 2.54.555.566.577.58 species
setosa
versicolor
virginicaDraw a path to separate versicolor and virginica
petal_widthsepal_length
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 12/14
Configuring Figures in Dash Apps
Referenceimport plotly.graph_objects  as go
config = {'doubleClickDelay' : 1000}
fig = go.Figure)
fig.update_layout 
fig.show
The same configuration dictionary that you pass to the config parameter of the show method can also be passed to the 
.
config property of a dcc.Graph component
, you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
 14/14</description>
      </customization>
    </chart>
    <chart name="Dendrograms" source_file="pyvy_2x1/Dendrograms in Python.pdf">
      <description>Basic Dendrogram
Set Color Threshold &gt;  &gt;
Dendrograms
Dendrograms in Python
How to make a dendrogram in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a diagram representing a tree. The  called create_dendrogram
performs  on data and represents the resulting tree. Values on the tree depth axis
correspond to distances between clusters.
de...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial.distance  import pdist, squareform</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Graph objects" source_file="pyvy_2x1/Graph objects in Python.pdf">
      <description>px.bar 
Graph Objects functions 
go.Bar 
The data in this example is in "long form" but  and the line-count savings from Plotly Express over
graph objects are comparable. More complex figures such as , , 
 or  require many more lines of figure-specific graph objects code, whereas switching from one
representation to another with Plotly Express usually involves changing just a few characters.
Plotly Express also accepts data in "wide form" 
sunbursts 
parallel coordinates 
facet
plots 
animations...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">imported as go) contains an 
 which represent non-leaf nodes in this figure schema. The term "graph objects" refers to instances of
these classes.
represented by tree-like data structures (/python/figure-structure/)
machine-readable form (https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json)
automatically-generated hierarchy of Python classes (https://plotly.com/python-api-
reference/plotly.graph_objects.html#graph-objects)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
df = pd.DataFrame ({
  "Fruit": ["Apples" , "Oranges" , "Bananas" , "Apples" , "Oranges" , "Bananas" ],
  "Contestant" : ["Alex", "Alex", "Alex", "Jordan" , "Jordan" , "Jordan" ],
  "Number Eaten" : [2, 1, 3, 1, 3, 2],
})</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.bar(df, x="Fruit", y="Number Eaten" , color="Contestant" , barmode="group")
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
for contestant , group in df.groupby("Contestant" ):
    fig.add_trace (go.Bar(x=group["Fruit"], y=group["Number Eaten" ], name=contestant ,
      hovertemplate ="Contestant= %s&lt;br&gt;Fruit= %%{x}&lt;br&gt;Number Eaten= %%{y}&lt;extra&gt;&lt;/extra&gt;" % contestant ))
fig.update_layout (legend_title_text  = "Contestant" )
fig.update_xaxes (title_text ="Fruit")
fig.update_yaxes (title_text ="Number Eaten" )
fig.show()
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 4/6
 Apples Oranges Bananas00.511.522.53Contestant</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Hexbin mapbox" source_file="pyvy_2x1/Hexbin mapbox in Python.pdf">
      <description>Simple Count Hexbin
Count Hexbin with Minimum Count and Opacity &gt;  &gt; Hexbin
Mapbox
Hexbin Mapbox in Python
How to make a map with Hexagonal Binning of data in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
This page details the use of a . For more examples with Choropleth maps, see .
figure factory 
this page 
In order to use mapbox styles that require a m...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Point Count" },
)
fig.update_layout (margin=dict(b=0, t=0, l=0, r=0))
fig.show()
05101520Point Count
(https://www.mapbox.com/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 1/7</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1,
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 2/7</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1, color_continuous_scale ="Viridis" ,
    show_original_data =True,
    original_data_marker =dict(size=4, opacity=0.6, color="deeppink" )
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 3/7</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Average Peak Hour" },
    color="peak_hour" , agg_func =np.mean, color_continuous_scale ="Icefire" , range_color =[0,23]
)
fig.show()
05101520Average Peak Hour
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 4/7</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Summed Car.Hours" },
    color="car_hours" , agg_func =np.sum, color_continuous_scale ="Magma"
)
fig.show()
5k10k15kSummed Car.Hours
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 5/7</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
 1/7
Display the Underlying Dataimport plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token .read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
fig.show
5101520Point Count
.read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
)
fig.show
5101520Point Count
.read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
fig.show
05101520Average Peak Hour
.read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
fig.show
5k10k15kSummed Car.Hours
.read)
np.random.seed
N = 500
n_frames  = 12
lat = np.concatenate  * 0.5 + np.cos + 10
    for i in range
])
lon = np.concatenate  * 0.5 + np.sin
    for i in range
])
frame = np.concatenate  * i for i in range
])
fig = ff.create_hexbin_mapbox 
)
fig.update_layout )
fig.layout.sliders[0].pad.t=20
fig.layout.updatemenus [0].pad.t=40
fig.show
For more info on Plotly maps, see: .
For more info on using colorscales with Plotly see: 
For more info on ff.create_annotated_heatmap, see the</description>
      </customization>
    </chart>
    <chart name="Ipython vs python" source_file="pyvy_2x1/Ipython vs python in Python.pdf">
      <description>What is the difference between IPython and Python?
Jupyter Notebook &gt;  &gt;
IPython vs Python
IPython vs Python in Python
Discussion of key differences between IPython and Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
While these two names are quite similar, they refer to entirely different things.
 is a general-purpose programming language. It was created in the...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
hon and16/07/2025, 06:08 Ipython vs python in Python
https://plotly.com/python/ipython-vs-python/ 2/3
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Pandas plotting backend" source_file="pyvy_2x1/Pandas plotting backend in Python.pdf">
      <description>Introduction &gt;  &gt; Pandas
Plotting Backend
Pandas Plotting Backend in Python
Plotly Express can be used as a Pandas .plot backend.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
The popular  data analysis and manipulation tool provides 
, which have historically produced matplotlib plots. Since version 0.25, Pandas has
provided a mechanism to use different backends, an...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot()
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot(title="Pandas Backend Example" , template ="simple_white" ,
              labels=dict(index="time", value="money", variable ="option" ))
fig.update_yaxes (tickprefix ="$")
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>mixed</library>
          <code language="python">import Plotly Express directly. Plotly Express, as of version 4.8 with  in addition to its robust long-form data
support, implements behaviour for the x and y keywords that are very similar to the matplotlib backend.</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig2 = px.bar(df)
fig2.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Faceting 0 0.5 1 1.5 211.522.53variable
a
b
indexvalue
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
st and16/07/2025, 06:09 Pandas plotting backend in Python
 1/10
A Note on API Compatibilityimport pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
fig = df.plot)
fig.update_yaxes 
fig.show
The Plotly plotting backend for Pandas is not intended to be a drop-in replacement for the default; it does not implement all or even most of the same
keyword arguments, such as subplots=True etc.
The Plotly plotting backend for Pandas is a more convenient way to invoke certain  functions by chaining a .plot call without
having to import Plotly Express directly. Plotly Express, as of version 4.8 with  in addition to its robust long-form data
support, implements behaviour for the x and y keywords that are very similar to the matplotlib backend.
Plotly Express 
wide-form data support 
In practice, this means that the following two ways of making a chart are identical and support the same additional arguments, because they call the same underlying
code:0 0.5 1 1.5 2$1$1.5$2$2.5$3 option
a
bPandas Backend Example
timemoney
st and16/07/2025, 06:09 Pandas plotting backend in Python
 2/10
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
# using Plotly Express via the Pandas backend
fig1 = df.plot.bar
fig1.show
# using Plotly Express directly
import plotly.express  as px
fig2 = px.bar
fig2.show
To achieve a similar effect to subplots=True, for example, the  can be used, the same was as they
work when directly calling :
Plotly Express facet_row and facet_col options 
Plotly Express with wide-form data 0 1 2012345variable
a
b
indexvalue
0 1 2012345variable
a
b
indexvalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
 3/10
Supported Methodsimport pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
fig = df.plot.bar
fig.show
The Plotly backend supports the following kinds of Pandas plots: scatter, line, area, bar, barh, hist and box, via the call pattern df.plot or df.plot.scatter.
These delegate to the corresponding Plotly Express functions. In addition, the following are valid options to the kind argument of df.plot: violin, strip, funnel,
density_heatmap, density_contour and imshow, even though the call pattern df.plot.violin is not supported for these kinds of charts, per the Pandas API.−0.5 0 0.5 1 1.5 2 2.501230123variable
a
b
indexvalue valuevariable=b variable=a
st and16/07/2025, 06:09 Pandas plotting backend in Python
 4/10
import pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed
df = pd.DataFrame ,
    b=np.random.normal
))
fig = df.plot.scatter
fig.show
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
fig = df.plot.line
fig.show−4 −2 0 2 401234
ab
0 0.5 1 1.5 211.522.53variable
a
b
indexvalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
 5/10
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
fig = df.plot.area
fig.show
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
fig = df.plot.bar
fig.show0 0.5 1 1.5 2012345variable
a
b
indexvalue
0 1 2012345variable
a
b
indexvalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
 6/10
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame )
fig = df.plot.barh
fig.show
import pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed
df = pd.DataFrame ,
    b=np.random.normal
))
fig = df.plot.hist
fig.show0 1 2 3 4 5012variable
a
b
valueindex
−4−3−2−1012345051015202530variable
a
b
valuecount
st and16/07/2025, 06:09 Pandas plotting backend in Python
 7/10
Series and DataFrame functions: hist and boxplotimport pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed
df = pd.DataFrame ,
    b=np.random.normal
))
fig = df.plot.box
fig.show
The Pandas plotting API also exposes .hist on DataFrames and Series objects, and .boxplot on DataFrames, which can also be used with the Plotly backend.a b−4−3−2−1012345
variablevalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
 8/10
What about Cufflinks?
What About Dash?import pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed
df = pd.DataFrame ,
    b=np.random.normal
))
fig = df.boxplot
fig.show
There also exists an independent third-party wrapper library around Plotly called , which provides similar
functionality  by adding a .iplot method to Pandas dataframes, as it was developed before Pandas
supported configurable backends. Issues and questions regarding Cufflinks should be 
.
Cufflinks , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupytera b−4−3−2−1012345
variablevalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
 9/10
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
st and16/07/2025, 06:09 Pandas plotting backend in Python
 10/10</description>
      </customization>
    </chart>
    <chart name="Quiver plots" source_file="pyvy_2x1/Quiver plots in Python.pdf">
      <description>Basic Quiver Plot
Quiver Plot with Points &gt;  &gt;
Quiver Plots
Quiver Plots in Python
How to make a quiver plot in Python. A quiver plot displays velocity vectors a arrows.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
Quiver plots can be made using a  as detailed in this page.
figure factory 
import plotly.figure_factory  as ff
import numpy as np
x,y = np.meshgrid...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
x,y = np.meshgrid (np.arange(0, 2, .2), np.arange(0, 2, .2))
u = np.cos(x)*y
v = np.sin(x)*y
fig = ff.create_quiver (x, y, u, v)
fig.show()
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 1/3</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
x,y = np.meshgrid (np.arange(-2, 2, .2),
                  np.arange(-2, 2, .25))
z = x*np.exp(-x**2 - y**2)
v, u = np.gradient (z, .2, .2)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">fig = ff.create_quiver (x, y, u, v)
fig.show()
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 1/3</code>
        </example>
      </examples>
    </chart>
    <chart name="Shapes" source_file="pyvy_2x1/Shapes in Python.pdf">
      <description>Adding Lines and Polygons to Figures
1. Trace types in the scatter family  can be drawn with mode="lines" and optionally support a fill="self" attribute, and so can
be used to draw open or closed shapes on figures.
2. Standalone lines, ellipses and rectangles can be added to figures using fig.add_shape, and they can be positioned absolutely within the figure, or they can be
positioned relative to the axes of 2d cartesian subplots i.e. in data coordinates.
Traces can optionally support hover labe...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(x=[0,1,2,0], y=[0,2,0,0], fill="toself" ))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(x=[0,1,2,0,None,3,3,5,5,3], y=[0,2,0,0,None,0.5,1.5,1.5,0.5,0.5], fill="toself" ))
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live data control'),
    dcc.Graph(id="graph"),
    html.P("Change the position of the right-most data point:"),
    html.Button("Move Up", n_clicks=0,
                id='btn-up'),
    html.Button("Move Down", n_clicks=0,
                id='btn-down'),
])
@app.callback(
    Output("graph", "figure"),
    Input("btn-up", "n_clicks"),
    Input("btn-down", "n_clicks"))
def make_shape_taller(n_up, n_down):
    n = n_up-n_down
    fig = go.Figure(go.Scatter(
        x=[1, 0, 2, 1], y=[2, 0, n, 2], # replace with your own data source
        fill="toself"
 ))DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 1/33
Shapes in Dashimport plotly.graph_objects  as go
fig = go.Figure)
fig.show
You can have more shapes either by adding  or interrupting the series with None.
more traces )
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
app.layout = html.Div,
    dcc.Graph,
    html.P,
    html.Button,
    html.Button,
])
@app.callback,
    Input,
    Input)
def make_shape_taller:
    n = n_up-n_down
    fig = go.Figure)DOWNLOAD
Live data control
Change the position of the right-most data point:
MOVE UP MOVE DOWN0 0.5 1 1.5 200.511.52
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 3/33
Lines Positioned Relative to the Plot &amp; to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure
# Create scatter trace of text labels
fig.add_trace )
# Set axes ranges
fig.update_xaxes 
fig.update_yaxes 
# Add shapes
fig.add_shape 
)
fig.add_shape 
)
fig.add_shape 
)
fig.update_shapes )
fig.show
Vertical LineHorizontal Dashed Line
Diagonal dotted Line
0 1 2 3 4 5 6 700.511.522.5
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 4/33
Rectangles Positioned Relative to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure
# Create scatter trace of text labels
fig.add_trace )
# Set axes ranges
fig.update_xaxes 
fig.update_yaxes 
fig.add_shape ,
)
fig.add_shape ,
)
fig.show
Line positioned relative to the plot Line positioned relative to the axes
0 1 2 3 4 5 6 7 800.511.52
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 5/33
Rectangle Positioned Relative to the Plot &amp; to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure
fig.add_trace )
# Set axes properties
fig.update_xaxes 
fig.update_yaxes 
# Add shapes
fig.add_shape ,
)
fig.add_shape ,
    fillcolor ="LightSkyBlue" ,
)
fig.update_shapes )
fig.show
Unfilled Rectangle Filled Rectangle
0 1 2 3 4 5 6 700.511.522.533.5
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 6/33
A Rectangle Placed Relative to the Axis Position and Lengthimport plotly.graph_objects  as go
fig = go.Figure
# Create scatter trace of text labels
fig.add_trace )
# Set axes properties
fig.update_xaxes 
fig.update_yaxes 
# Add shapes
fig.add_shape ,
    fillcolor ="LightSkyBlue" ,
)
fig.add_shape ,
    fillcolor ="PaleTurquoise" ,
)
fig.show
A shape can be placed relative to an axis's position on the plot by adding the string ' domain' to the axis reference in the xref or yref attributes for shapes. The
following code places a rectangle that starts at 60% and ends at 70% along the x-axis, starting from the left, and starts at 80% and ends at 90% along the y-axis,
starting from the bottom.Rectangle reference to the plot Rectangle reference to the axes
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 7/33
Highlighting Time Series Regions with Rectangle Shapesimport plotly.graph_objects  as go
import plotly.express  as px
df = px.data.wind
fig = px.scatter
fig.update_layout , yaxis=dict)
# Add a shape whose x and y coordinates refer to the domains of the x and y axes
fig.add_shape 
fig.show
Note: there are 
 that are fixed to data coordinates in one axis and absolutely positioned in another.
special methods add_hline, add_vline, add_hrect and add_vrect for the common cases of wanting to draw horizontal or vertical lines or rectangles
0 50 100012
indexfrequency
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 8/33
Circles Positioned Relative to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure
# Add scatter trace for line
fig.add_trace )
# Add shape regions
fig.add_vrect ,
fig.add_vrect 
fig.show
Feb 3
2015Feb 6 Feb 9 Feb 12 Feb 15 Feb 18 Feb 21 Feb 24 Feb 27−18−16−14−12−10−8−6−4
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 9/33
Highlighting Clusters of Scatter Points with Circle Shapesimport plotly.graph_objects  as go
fig = go.Figure
# Create scatter trace of text labels
fig.add_trace )
# Set axes properties
fig.update_xaxes 
fig.update_yaxes 
# Add circles
fig.add_shape 
fig.add_shape 
# Set figure size
fig.update_layout 
fig.show
Unfilled CircleFilled Circle
0 1 2 3 400.511.522.533.544.5
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 10/33
Venn Diagram with Circle Shapesimport plotly.graph_objects  as go
import numpy as np
np.random.seed
# Generate data
x0 = np.random.normal
y0 = np.random.normal
x1 = np.random.normal
y1 = np.random.normal
# Create figure
fig = go.Figure
# Add scatter traces
fig.add_trace )
fig.add_trace )
# Add shapes
fig.add_shape , y0=min,
    x1=max, y1=max,
    opacity=0.2,
    fillcolor ="blue",
    line_color ="blue",
)
fig.add_shape , y0=min,
    x1=max, y1=max,
    opacity=0.2,
    fillcolor ="orange" ,
    line_color ="orange" ,
)
# Hide legend
fig.update_layout 
fig.show
1 2 3 4 5 6 71234567
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 11/33
import plotly.graph_objects  as go
fig = go.Figure
# Create scatter trace of text labels
fig.add_trace 
))
# Update axes properties
fig.update_xaxes 
fig.update_yaxes 
# Add circles
fig.add_shape 
fig.add_shape 
fig.update_shapes 
fig.update_layout ,
    height=600, width=800,
    plot_bgcolor ="white"
)
fig.show
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 12/33
Adding Shapes to Subplots
Adding the Same Shapes to Multiple SubplotsHere we use the different axes  created by make_subplots as reference in order to draw shapes in figure subplots.
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
# Create Subplots
fig = make_subplots 
fig.add_trace , row=1, col=1)
fig.add_trace , row=1, col=2)
fig.add_trace , row=2, col=1)
fig.add_trace , row=2, col=2)
# Add shapes
fig.update_layout ,
        dict,
        dict,
        dict])
fig.show
The same shape can be added to multiple facets by using the 'all' keyword in the row and col arguments. For example2 3 4 5 60.60.81
1 2 3 4 50246
10 15 2020304050
5 10 1505101520trace 0
trace 1
trace 2
trace 3
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 13/33
SVG Pathsimport plotly.express  as px
df = px.data.tips
fig = px.scatter
# Adds a rectangle to all facets
fig.add_shape ,
    row="all",
    col="all",
)
# Adds a line to all the rows of the second column
fig.add_shape , row="all", col=2
)
# Adds a circle to all the columns of the first row
fig.add_shape , row=1, col="all", line_color ="green"
)
fig.show
0 10 20 30 40 50246810
0 10 20 30 40 50246810
total_bill total_billtip tipsex=Female sex=Malesmoker=Yes smoker=No
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 14/33
import plotly.graph_objects  as go
fig = go.Figure
# Create scatter trace of text labels
fig.add_trace )
# Update axes properties
fig.update_xaxes 
fig.update_yaxes 
# Add shapes
fig.update_layout ,
        # Cubic Bezier Curves
        dict,
        # filled Triangle
        dict,
        # filled Polygon
        dict,
    ]
)
fig.show
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 15/33
Shifting Shapes on Categorical Axes
Shifts x0 half way between the center of category "Germany" and the center of the previous category by setting x0shift=-0.5
Shifts x1half way between the center of category "Germany" and the center of the next category by setting x1shift=0.5
Shifts x0 back to the center of the previous category by setting x0shift=-1
Shifts x1forward to the center of the next category by setting x1shift=1New in 5.23
When drawing shapes where xref or yref reference axes of type category or multicategory, you can shift x0, x1, y0, and y1 away from the center of the category using
x0shift, x1shift, y0shift, and y1shift by specifying a value between -1 and 1.
-1 is the center of the previous category, 0 is the center of the referenced category, and 1 is the center of the next category.
In the following example, the x0 and x1 values for both shapes reference category values on the x-axis.
In this example, the first shape:
The second shape:Filled TriangleFilled Polygon
Quadratic Bezier CurvesCubic Bezier Curves
0 1 2 3 4 5 6 7 8 90246810
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 16/33
import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder .query
fig = go.Figure,
    layout=dict,
            ),
            dict,
            ),
        ]
    ),
)
fig.update_layout "
    ),
    xaxis=dict
    ),
    yaxis=dict
    ),
)
fig.show
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 17/33
Drawing shapes with a Mouse on Cartesian plots
drag and resize it for lines, rectangles and circles/ellipses
drag and move individual vertices for closed paths
move individual vertices for open paths.introduced in plotly 4.7
You can create layout shapes programmatically, but you can also draw shapes manually by setting the dragmode to one of the shape-drawing modes:
'drawline','drawopenpath', 'drawclosedpath', 'drawcircle', or 'drawrect'. If you need to switch between different shape-drawing or other dragmodes ,  in the config to select the
dragmode. If you switch to a different dragmode such as pan or zoom, you will need to select the drawing tool in the modebar to go back to shape drawing.
modebar buttons can be added 
This shape-drawing feature is particularly interesting for annotating graphs, in particular  or .
image traces 
layout images 
Once you have drawn shapes, you can select and modify an existing shape by clicking on its boundary . Its fillcolor turns to pink to highlight
the activated shape and then you can
An activated shape is deleted by clicking on the eraseshape button.
Drawing or modifying a shape triggers a relayout event, which .
can be captured by a callback inside a Dash application 
CountryGDP per Capita
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 18/33
Style of user-drawn shapesimport plotly.graph_objects  as go
fig = go.Figure
text="Click and drag here &lt;br&gt; to draw a rectangle &lt;br&gt;&lt;br&gt; or select another shape &lt;br&gt;in the modebar"
fig.add_annotation 
# shape defined programatically
fig.add_shape 
# define dragmode and add modebar buttons
fig.update_layout 
fig.show
The layout newshape attribute controls the visual appearance of new shapes drawn by the user. newshape attributes have the same names as layout shapes.
Note on shape opacity: having a new shape's opacity &gt; 0.5 makes it possible to activate a shape by clicking inside the shape , but you cannot start a new shape within an existing shape .−1 0 1 2 3 4 5 6−101234
Click and drag here 
 to draw a rectangle 
 or select another shape 
in the modebar
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 19/33
Adding Text Labels to Shapesimport plotly.graph_objects  as go
fig = go.Figure
text="Click and drag&lt;br&gt; to draw a rectangle &lt;br&gt;&lt;br&gt; or select another shape &lt;br&gt;in the modebar"
fig.add_annotation 
# shape defined programatically
fig.add_shape 
fig.update_layout )
fig.show
New in 5.14
Add a text label to a shape by adding a label property to a shape with text. In this example, we add a rect and line shape and add a text label to both.−1 0 1 2 3 4 5 6−101234
Click and drag
 to draw a rectangle 
 or select another shape 
in the modebar
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 20/33
Styling Text Labelsimport plotly.graph_objects  as go
fig = go.Figure
fig.add_shape 
)
fig.add_shape 
)
fig.show
Use the font property to configure the color, size, and family of the label font. In this example, we change the label color of the first rectangle to "DarkOrange", set the
size of the text above the line to 20, and change the font family and set the font size on the second rectangle.−1 0 1 2 3 4 5 6−101234
Text in rectangle
Text above line
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 21/33
Setting Label Positionimport plotly.graph_objects  as go
fig = go.Figure
fig.add_shape ),
)
fig.add_shape ),
)
fig.add_shape 
    ),
)
fig.show
Set a label's position relative to the shape by setting textposition. The default position for lines is middle. The default position for other shapes is middle center.−1 0 1 2 3 4 5 6−101234
Text in rectangle
Text above lineText in rectangle 2
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 22/33
import plotly.graph_objects  as go
fig = go.Figure
fig.add_shape ,
)
fig.add_shape ,
)
fig.add_shape ,
)
fig.add_shape ,
)
fig.show
−1 0 1 2 3 4 5 6−101234
Text at middle centerText at top leftText at start Text at middle
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 23/33
Setting Label Angle
Setting Label PaddingUse textangle to rotate a label by setting a value between -180 and 180. The default angle for a label on a line is the angle of the line. The default angle for a label on
other shapes is 0. In this example, in the first shape, the label is at 45 degrees, and in the second, the label is at -45 degrees.
import plotly.graph_objects  as go
fig = go.Figure
fig.add_shape ,
)
fig.add_shape ,
)
fig.show
padding adds padding between the label and shape. This example shows one line with padding of 30px and another with the default padding, which is 3px.−1 0 1 2 3 4 5 6−101234
Text at 45Text at -45
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 24/33
Setting Label Anchorsimport plotly.graph_objects  as go
fig = go.Figure
fig.add_shape ,
)
fig.add_shape ,
)
fig.show
xanchor sets a label's horizontal positional anchor and yanchor sets its vertical position anchor. Use xanchor to bind the textposition to the "left", "center" or "right" of
the label text and yanchor to bind textposition to the "top", "middle" or "bottom" of the label text.
In this example, yanchoris set to "top", instead of the default of "bottom" for lines, meaning the text displays below the line.−1 0 1 2 3 4 5 6−101234
Label padding of 30px
Default label padding of 3px
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 25/33
import plotly.express  as px
df = px.data.stocks
fig = px.line
fig.add_shape ),
    fillcolor ="green",
    opacity=0.25,
)
fig.add_shape ,
    y0=1,
    x1=max,
    y1=1,
    line_width =3,
    line_dash ="dot",
    label=dict,
        yanchor="top",
    ),
)
fig.show
Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 201900.511.522.53
Decline
Jan 1 2018 Baselinecompany
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 26/33
Variables in Shape Label Text
xcenter:  / 2
ycenter:  / 2
dx: x1 - x0
dy: y1 - y0
width: abs
height: abs
length : sqrt
slope:  / New in 5.15
Use texttemplate to add text with variables to shapes. You have access to raw variables , which use raw data values from the shape definition, and the
following calculated variables:
texttemplate supports d3 number and date formatting.
Add a variable with "%{variable}". This example adds the raw variables x0 and y0 to a rectangle and shows the calculated variables height, slope, length, and width on
three other shapes.
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 27/33
import plotly.graph_objects  as go
fig = go.Figure
fig.add_shape 
    ),
)
fig.add_shape ),
)
fig.add_shape ,
    ),
)
fig.add_shape ,
    ),
)
fig.show
−1 0 1 2 3 4 5 6−101234
x0 is -0.500, y0 is -0.500Height: 1.250
Slope of 0.500 and length of 2.236Width: 2.500
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 28/33
Variables in Shape Label Text for New Shapes
New in 5.15
You can also use texttemplate to add text with variables to new shapes drawn on the graph.
In this example, we enable drawing lines on the figure by adding drawline to modeBarButtonsToAdd in config. We then define a texttemplate for shapes that shows
the calculated variable dy. Select Draw line in the modebar to try it out.
import plotly.graph_objects  as go
from plotly import data
df = data.stocks
fig = go.Figure,
    layout=go.Layout),
        newshape =dict
        ),
        title=dict,
    ),
)
fig.show
Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.90.9511.051.11.151.2Google Share Price 2018/2019Price in USD
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 29/33
Shapes in the Legend
New in 5.16
You can add a shape to the legend by setting showlegend=True on the shape. In this example, we add the second shape to the legend. The name that appears for the
shape in the legend is the shape's name if it is provided. If no name is provided, the shape label's text is used. If neither is provided, the legend item appears as "shape
\". For example, "shape 1".
import plotly.express  as px
df = px.data.stocks
fig = px.line
fig.add_shape ),
    fillcolor ="green",
    opacity=0.25,
)
fig.add_shape ,
    y0=1,
    x1=max,
    y1=1,
    line_width =3,
    line_dash ="dot",
    label=dict,
        yanchor="top",
    ),
)
fig.show
newshape also supports showlegend. In this example, each new line drawn on the graph appears in the legend.Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 201900.511.522.53
Decline
Jan 1 2018 Baselinecompany
GOOG
AAPL
AMZN
FB
NFLX
MSFT
Jan 1 2018 Baseline
datevalue
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 30/33
Shape Layerimport plotly.graph_objects  as go
from plotly import data
df = data.stocks
fig = go.Figure,
    layout=go.Layout,
            ),
        newshape =dict
        ),
        title=dict,
    ),
)
fig.show
By default, shapes are drawn above traces. You can also configure them to be drawn between traces and gridlines with layer="between" , or below
gridlines with layer="below".Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.911.11.21.31.41.51.61.7Apple Share Price 2018/2019Price in USD
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 31/33
import plotly.express  as px
df = px.data.stocks
fig = px.line
fig.add_shape ),
    fillcolor ="LightGreen" ,
    opacity=0.80,
)
fig.add_shape ),
    fillcolor ="LightGreen" ,
    opacity=0.80,
)
fig.add_shape ),
    fillcolor ="LightGreen" ,
    opacity=0.80,
)
fig.show
Below
 Between
Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 201900.511.522.53
Above company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 32/33
Reference
What About Dash?See  for more information and chart attribute options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
 33/33</description>
      </customization>
    </chart>
    <chart name="Streamline plots" source_file="pyvy_2x1/Streamline plots in Python.pdf">
      <description>uniformly spaced ranges of x and y values 
2-D velocity values u and v defined on the cross-product ) of x and y.
Basic Streamline Plot &gt;  &gt;
Streamline Plots
Streamline Plots in Python
How to make a streamline plot in Python. A streamline plot displays vector field data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A Streamline plot is a representation based on...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
x = np.linspace (-3, 3, 100)
y = np.linspace (-3, 3, 100)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">fig = ff.create_streamline (x, y, u, v, arrow_scale =.1)
fig.show()
−3 −2 −1 0 1 2−3−2−10123
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 1/3</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Velocity values are interpolated when determining the streamlines. Streamlines are initialized on the boundary of the x-y domain.
Streamline plots can be made with a  as detailed in this page.
figure factory 
import plotly.figure_factory  as ff
import numpy as np
x = np.linspace 
y = np.linspace 
Y, X = np.meshgrid 
u = -1 - X**2 + Y
v = 1 + X - Y**2
# Create streamline figure
fig = ff.create_streamline 
fig.show
−3 −2 −1 0 1 2−3−2−10123
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Streamline plots in Python
 1/3
Streamline and Source Point Plot
See also
Referenceimport plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
N = 50
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace 
y = np.linspace 
X, Y = np.meshgrid 
source_strength  = 5.0
x_source , y_source  = -1.0, 0.0
# Compute the velocity field on the mesh grid
u =  *
     /**2 + **2))
v =  *
     /**2 + **2))
# Create streamline figure
fig = ff.create_streamline 
# Add source point
fig.add_trace )
fig.show
For a 3D version of streamlines, use the trace go.Streamtube documented .
here 
For representing the 2-D vector field as arrows, see the .
quiver plot tutorial 
For more info on ff.create_streamline, see the 
full function reference −2 −1.5 −1 −0.5 0 0.5 1 1.5−1−0.500.51 streamline
source point
16/07/2025, 05:59 Streamline plots in Python
 2/3
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 05:59 Streamline plots in Python
 3/3</description>
      </customization>
    </chart>
    <chart name="Ternary contours" source_file="pyvy_2x1/Ternary contours in Python.pdf">
      <description>Ternary contour plots
Simple ternary contour plot with plotly &gt;  &gt;
Ternary contours
Ternary contours in Python
How to make Ternary Contour Plots in Python with plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A ternary contour plots represents isovalue lines of a quantity defined inside a , i.e. as a function of three
variables which sum is constant. Coordin...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Trisurf plots" source_file="pyvy_2x1/Trisurf plots in Python.pdf">
      <description>Torus &gt;  &gt; Trisurf Plots
Trisurf Plots in Python
How to make tri-surf plots in Python with Plotly. Trisurfs are formed by replacing the boundaries of a compact surface by touching triangles.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this page
Trisurf plots can be made using a  as detailed in this page.
figure factory 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Trisurf plo...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 20)
v = np.linspace (0, 2*np.pi, 20)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
x = (3 + (np.cos(v)))*np.cos(u)
y = (3 + (np.cos(v)))*np.sin(u)
z = np.sin(v)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         simplices =simplices ,
                         title=dict(text="Torus"), aspectratio =dict(x=1, y=1, z=0.3))
fig.show()
−0.8−0.6−0.4−0.200.20.40.60.8Torus
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 2/5</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 24)
v = np.linspace (-1, 1, 8)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
tp = 1 + 0.5*v*np.cos(u/2.)
x = tp*np.cos(u)
y = tp*np.sin(u)
z = 0.5*v*np.sin(u/2.)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap ="Portland" ,
                         simplices =simplices ,
                         title=dict(text="Mobius Band" ))
fig.show()
−0.4−0.3−0.2−0.100.10.20.30.4Mobius Band
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 3/5</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u=np.linspace (-np.pi/2, np.pi/2, 60)
v=np.linspace (0, np.pi, 60)
u,v=np.meshgrid (u,v)
u=u.flatten()
v=v.flatten()
x = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.cos(2*u) + np.cos(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
y = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.sin(2*u) - np.sin(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
z = (3*(np.cos(v)*np.cos(v)))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
points2D  = np.vstack([u, v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap =['rgb(50, 0, 75)' , 'rgb(200, 0, 200)' , '#c8dcc8' ],
                         show_colorbar =True,
                         simplices =simplices ,
                         title=dict(text="Boy's Surface" ))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
    </chart>
    <chart name="Usa county choropleth maps" source_file="pyvy_2x1/Usa county choropleth maps in Python.pdf">
      <description>Deprecation warning
Required Packages
conda install plotly conda install geopandas
FIPS and Values &gt;  &gt; USA County
Choropleth Maps
USA County Choropleth Maps in Python
How to create colormaped representations of USA counties by FIPS values in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
This page describes a  for creating map-like figures using . This is no
longer t...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
fips = ['06021', '06023', '06027',
        '06029', '06033', '06059',
        '06047', '06049', '06051',
        '06055', '06061']
values = range(len(fips))
fig = ff.create_choropleth (fips=fips, values=values)
fig.layout.template  = None
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'California' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = [
    'rgb(193, 193, 193)' ,
    'rgb(239,239,239)' ,
    'rgb(195, 196, 222)' ,
    'rgb(144,148,194)' ,
    'rgb(101,104,168)' ,
    'rgb(65, 53, 132)'
]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada' , 'Oregon' , ' Idaho' ],
    binning_endpoints =[14348, 63983, 134827, 426762, 2081313], colorscale =colorscale ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5}, round_legend_values =True,
    legend=dict(
      title=dict(
        text='Population by County'
      )
    ),
    title=dict(
      text='California and Nearby States'
    )
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 3/11</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'Florida' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
endpts = list(np.mgrid[min(values):max(values):4j])
colorscale  = ["#030512" ,"#1d1d3b" ,"#323268" ,"#3d4b94" ,"#3e6ab0" ,
              "#4989bc" ,"#60a7c7" ,"#85c5d3" ,"#b7e0e4" ,"#eafcfd" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['Florida' ], show_state_data =True,
    colorscale =colorscale , binning_endpoints =endpts, round_legend_values =True,
    plot_bgcolor ='rgb(229,229,229)' ,
    paper_bgcolor ='rgb(229,229,229)' ,
    legend_title ='Population by County' ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5},
    exponent_format =True,
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd
scope = ['Oregon' ]
df_sample  = pd.read_csv (
    'https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv'
)
df_sample_r  = df_sample [df_sample ['STNAME' ].isin(scope)]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = ["#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=scope,
    colorscale =colorscale , round_legend_values =True,
    simplify_county =0, simplify_state =0,
    county_outline ={'color': 'rgb(15, 15, 55)' , 'width': 0.5},
    state_outline ={'width': 1},
    legend_title ='pop. per county' ,
    title='Oregon'
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 8/11</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>codes. There
are state codes and county codes: the 2016 state and county FIPS codes can be found at the 
.
US Census Website 
Combine a state FIPS code  with a county FIPS code of the state  and this new state-county FIPS code  uniquely
refers to the specified state and county.
ff.create_choropleth only needs a list of FIPS codes and a list of values. Each FIPS code points to one county and each corresponding value in values determines the
color of the county.Collecting plotly-geo==1.0.0
Downloading plotly_geo-1.0.0-py3-none-any.whl.metadata 
Downloading plotly_geo-1.0.0-py3-none-any.whl 
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 23.7/23.7 MB156.9 MB/s eta 0:00:00
Installing collected packages: plotly-geo
Successfully installed plotly-geo-1.0.0
Collecting geopandas==0.8.1
Downloading geopandas-0.8.1-py2.py3-none-any.whl.metadata 
Collecting pandas&gt;=0.23.0 
Downloading pandas-2.3.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata 
Collecting shapely 
Downloading shapely-2.0.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata 
Collectingfiona
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:00 Usa county choropleth maps in Python
 1/11
Simple Example
Change the ScopeA simple example of this is a choropleth a few counties in California:
import plotly.figure_factory  as ff
fips = ['06021', '06023', '06027',
        '06029', '06033', '06059',
        '06047', '06049', '06051',
        '06055', '06061']
values = range)
fig = ff.create_choropleth 
fig.layout.template  = None
fig.show
Even if your FIPS values belong to a single state, the scope defaults to the entire United States as displayed in the example above. Changing the scope of the
choropleth shifts the zoom and position of the USA map. You can define the scope with a list of state names and the zoom will automatically adjust to include the
state outlines of the selected states.
By default scope is set to ['USA'] which the API treats as identical to passing a list of all 50 state names:
['AK', 'AL', 'CA', ...]
State abbreviations  or the proper names  as strings are accepted. If the state name is not recognized, the API will throw a Warning and indicate
which FIPS values were ignored.
Another param used in the example below is binning_endpoints. If your values is a list of numbers, you can bin your values into half-open intervals on the real line./home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
10
9
8
7
6
5
4
3
2
1
0
16/07/2025, 06:00 Usa county choropleth maps in Python
 2/11
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv 
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'California' ]
values = df_sample_r ['TOT_POP' ].tolist
fips = df_sample_r ['FIPS'].tolist
colorscale  = [
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb'
]
fig = ff.create_choropleth ' , 'width': 0.5}, round_legend_values =True,
    legend=dict
    ),
    title=dict
)
fig.layout.template  = None
fig.show
16/07/2025, 06:00 Usa county choropleth maps in Python
 3/11
Single State/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
Population by County
&lt; 14,348
14,348 - 63,983
63,983 - 134,827
134,827 - 426,762
426,762 - 2,081,313
&gt; 2,081,313California and Nearby States
16/07/2025, 06:00 Usa county choropleth maps in Python
 4/11
Multiple Statesimport plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv 
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'Florida' ]
values = df_sample_r ['TOT_POP' ].tolist
fips = df_sample_r ['FIPS'].tolist
endpts = list:max:4j])
colorscale  = ["#030512" ,"#1d1d3b" ,"#323268" ,"#3d4b94" ,"#3e6ab0" ,
              "#4989bc" ,"#60a7c7" ,"#85c5d3" ,"#b7e0e4" ,"#eafcfd" ]
fig = ff.create_choropleth ' ,
    paper_bgcolor ='rgb' ,
    legend_title ='Population by County' ,
    county_outline ={'color': 'rgb' , 'width': 0.5},
    exponent_format =True,
)
fig.layout.template  = None
fig.show
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1.73M - 2.59M
869.20K - 1.73M
8.28K - 869.20K
&lt; 8.28KPopulation by County
16/07/2025, 06:00 Usa county choropleth maps in Python
 5/11
import plotly.figure_factory  as ff
import pandas as pd
NE_states  = ['Connecticut' , 'Maine', 'Massachusetts' , 'New Hampshire' , 'Rhode Island' , 'Vermont' ]
df_sample  = pd.read_csv 
df_sample_r  = df_sample [df_sample ['STNAME' ].isin]
values = df_sample_r ['TOT_POP' ].tolist
fips = df_sample_r ['FIPS'].tolist
colorscale  = [
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb'
]
fig = ff.create_choropleth ' , 'width': 0.5},
    legend_title ='Population per county'
)
fig.update_layout 
fig.layout.template  = None
fig.show
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1537215
933835
897259
862813
806163
755618
744426
681845
628323
551082
499759
465923
402922
297820
283921
274170
215423
199005
187530
165602Population per county
16/07/2025, 06:00 Usa county choropleth maps in Python
 6/11
Simplify County, State Lines
simplify_county determines the simplification factor for the counties. The larger the number, the fewer vertices and edges each polygon has. See
 for more information.
simplify_state simplifies the state outline polygon. See the  for more information.
Default for both simplify_county and simplify_state is 0.02Below is a choropleth that uses several other parameters. For a full list of all available params call help</description>
      </customization>
    </chart>
    <chart name="Custom buttons" source_file="pyvy_2x10/Custom buttons in Python.pdf">
      <description>Methods
"restyle": modify data or data attributes
"relayout": modify layout attributes
"update": modify data and layout attributes; combination of "restyle" and "relayout"
"animate": start or pause an )
Restyle Button &gt;  &gt; Custom
Buttons
Custom Buttons in Python
How to add custom buttons to update Plotly chart attributes in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Custom Controls 
Suggest an edit to this
page
Sign up for early...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import numpy as np
np.random.seed(1)
x0 = np.random.normal(2, 0.4, 400)
y0 = np.random.normal(2, 0.4, 400)
x1 = np.random.normal(3, 0.6, 600)
y1 = np.random.normal(6, 0.4, 400)
x2 = np.random.normal(4, 0.2, 200)
y2 = np.random.normal(4, 0.4, 200)</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
      </examples>
    </chart>
    <chart name="Plotly figurewidget overview" source_file="pyvy_2x10/Plotly figurewidget overview in Python.pdf">
      <description>Create a Simple FigureWidget &gt;  &gt; Plotly
FigureWidget Overview
Plotly FigureWidget Overview in Python
Introduction to the new Plotly FigureWidget
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Chart Events 
Suggest an edit to this
page
Sign up for early access now. 
Create an empty FigureWidget and then view it.
import plotly.graph_objects  as go
f = go.FigureWidget 
f
Add traces or update the layout and then watch the output above update i...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
f = go.FigureWidget ()
f</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
trace = go.Heatmap(z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
                   x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                   y=['Morning' , 'Afternoon' , 'Evening' ])
data=[trace]
layout = go.Layout(title=dict(text='Activity Heatmap' ))
figure = go.Figure(data=data, layout=layout)
f2 = go.FigureWidget (figure)
f2</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Help on class FigureWidget in module plotly.graph_objs._figurewidget:
class FigureWidget(plotly.basewidget.BaseFigureWidget)
|  FigureWidget(data=None, layout=None, frames=None, skip_invalid=False, **kwargs)
|  
|  Method resolution order:
|      FigureWidget
|      plotly.basewidget.BaseFigureWidget
|      plotly.basedatatypes.BaseFigure
|      anywidget.widget.AnyWidget
|      ipywidgets.widgets.domwidget.DOMWidget
|      ipywidgets.widgets.widget.Widget
|ipywidgetswidgetswidgetLoggingHasTraits</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Choropleth maps" source_file="pyvy_2x4/Choropleth maps in Python.pdf">
      <description>Base Map Configuration
Introduction: main parameters for choropleth outline maps
1. Geometry information:
A. This can either be a supplied GeoJSON file where each feature has either an id field or some identifying value in properties; or
B. one of the built-in geometries within plotly: US states and world countries 
2. A list of values indexed by feature identifier.
Choropleth Map with plotly.express
GeoJSON with feature.id &gt;  &gt; Choropleth
Maps
Choropleth Maps in Python
How to make choropleth ma...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
counties ["features" ][0]</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
df.head()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.express  as px
fig = px.choropleth (df, geojson=counties , locations ='fips', color='unemp',
                           color_continuous_scale ="Viridis" ,
                           range_color =(0, 12),
                           scope="usa",
                           labels={'unemp':'unemployment rate' }
                          )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
print(df["district" ][2])
print(geojson["features" ][0]["properties" ])</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="Bergeron" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>ometries
th16/07/2025, 06:37 Choropleth maps in Python
 10/13
County Choropleth Figure Factoryimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
fig = go.Figure' ],
    text = df['COUNTRY' ],
    colorscale  = 'Blues',
    autocolorscale =False,
    reversescale =True,
    marker_line_color ='darkgray' ,
    marker_line_width =0.5,
    colorbar_tickprefix  = '$',
    colorbar_title  = 'GDP&lt;br&gt;Billions US$' ,
))
fig.update_layout ,
    annotations  = [dict]
)
fig.show
Plotly also includes a .
legacy "figure factory" for creating US county-level choropleth maps $0$5k$10k$15kGDP
Billions US$2014 Global GDP
Source: 
            CIA World Factbook
ometries
th16/07/2025, 06:37 Choropleth maps in Python
 11/13
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv 
df_sample ['State FIPS Code' ] = df_sample ['State FIPS Code' ].apply.zfill)
df_sample ['County FIPS Code' ] = df_sample ['County FIPS Code' ].apply.zfill)
df_sample ['FIPS'] = df_sample ['State FIPS Code' ] + df_sample ['County FIPS Code' ]
colorscale  = ["#f7fbff" , "#ebf3fb" , "#deebf7" , "#d2e3f3" , "#c6dbef" , "#b3d2e9" , "#9ecae1" ,
    "#85bcdb" , "#6baed6" , "#57a0ce" , "#4292c6" , "#3082be" , "#2171b5" , "#1361a9" ,
    "#08519c" , "#0b4083" , "#08306b"
]
endpts = list - 1))
fips = df_sample ['FIPS'].tolist
values = df_sample ['Unemployment Rate ' ].tolist
fig = ff.create_choropleth 
fig.layout.template  = None
fig.show
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
&gt; 12.0
11.27 - 12.0
10.53 - 11.27
9.8 - 10.53
9.07 - 9.8
8.33 - 9.07
7.6 - 8.33
6.87 - 7.6
6.13 - 6.87
5.4 - 6.13
4.67 - 5.4
3.93 - 4.67
3.2 - 3.93
2.47 - 3.2
1.73 - 2.47
1.0 - 1.73USA by Unemployment %
% unemployed
ometries
th16/07/2025, 06:37 Choropleth maps in Python
 12/13
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
ometries
th16/07/2025, 06:37 Choropleth maps in Python
 13/13</description>
      </customization>
    </chart>
    <chart name="Density heatmap" source_file="pyvy_2x4/Density heatmap in Python.pdf">
      <description>Density map with plotly.express
Density map with plotly.graph_objects &gt;  &gt; Density
Heatmap
Density Heatmap in Python
How to make a density heatmap in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
With px...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.express  as px
fig = px.density_map (df, lat='Latitude' , lon='Longitude' , z='Magnitude' , radius=10,
                        center=dict(lat=0, lon=180), zoom=0,
                        map_style ="open-street-map" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import pandas as pd
quakes = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.graph_objects  as go
fig = go.Figure(go.Densitymap (lat=quakes.Latitude , lon=quakes.Longitude , z=quakes.Magnitude ,
                                 radius=10))
fig.update_layout (map_style ="open-street-map" , map_center_lon =180)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.express  as px
fig = px.density_mapbox (df, lat='Latitude' , lon='Longitude' , z='Magnitude' , radius=10,
                        center=dict(lat=0, lon=180), zoom=0,
                        mapbox_style ="open-street-map" )
fig.show()
5.566.577.588.59
ts
pbox
 y16/07/2025, 06:36 Density heatmap in Python
https://plotly.com/python/density-heatmaps/ 2/4</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
token = open(".mapbox_token" ).read() # you will need your own token
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
fig = px.density_mapbox (df, lat='Latitude' , lon='Longitude' , z='Magnitude' , radius=10,
                        center=dict(lat=0, lon=180), zoom=0,
                        map_style ="stamen-terrain" )
fig.update_layout (mapbox_accesstoken =token)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Hexbin mapbox" source_file="pyvy_2x4/Hexbin mapbox in Python.pdf">
      <description>Simple Count Hexbin
Count Hexbin with Minimum Count and Opacity &gt;  &gt; Hexbin
Mapbox
Hexbin Mapbox in Python
How to make a map with Hexagonal Binning of data in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
This page details the use of a . For more examples with Choropleth maps, see .
figure factory 
this page 
In order to use mapbox styles that require a m...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Point Count" },
)
fig.update_layout (margin=dict(b=0, t=0, l=0, r=0))
fig.show()
05101520Point Count
(https://www.mapbox.com/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 1/7</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1,
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 2/7</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1, color_continuous_scale ="Viridis" ,
    show_original_data =True,
    original_data_marker =dict(size=4, opacity=0.6, color="deeppink" )
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 3/7</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Average Peak Hour" },
    color="peak_hour" , agg_func =np.mean, color_continuous_scale ="Icefire" , range_color =[0,23]
)
fig.show()
05101520Average Peak Hour
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 4/7</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Summed Car.Hours" },
    color="car_hours" , agg_func =np.sum, color_continuous_scale ="Magma"
)
fig.show()
5k10k15kSummed Car.Hours
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 5/7</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
 1/7
Display the Underlying Dataimport plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token .read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
fig.show
5101520Point Count
.read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
)
fig.show
5101520Point Count
.read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
fig.show
05101520Average Peak Hour
.read)
df = px.data.carshare 
fig = ff.create_hexbin_mapbox 
fig.show
5k10k15kSummed Car.Hours
.read)
np.random.seed
N = 500
n_frames  = 12
lat = np.concatenate  * 0.5 + np.cos + 10
    for i in range
])
lon = np.concatenate  * 0.5 + np.sin
    for i in range
])
frame = np.concatenate  * i for i in range
])
fig = ff.create_hexbin_mapbox 
)
fig.update_layout )
fig.layout.sliders[0].pad.t=20
fig.layout.updatemenus [0].pad.t=40
fig.show
For more info on Plotly maps, see: .
For more info on using colorscales with Plotly see: 
For more info on ff.create_annotated_heatmap, see the</description>
      </customization>
    </chart>
    <chart name="Lines on maps" source_file="pyvy_2x4/Lines on maps in Python.pdf">
      <description>Base Map Configuration
Lines on Maps with Plotly Express
Lines on Maps from GeoPandas &gt;  &gt; Lines on Maps
Lines on Maps in Python
How to draw lines, great circles, and contours on maps in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this page
Below we show how to create geographical line plots using either Plotly Express with px.line_geo function or the lower-level go.Scattergeo object.
Plotly figures made ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.line_geo (df, locations ="iso_alpha" ,
                  color="continent" , # "continent" is one of the columns of gapminder
                  projection ="orthographic" )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import geopandas  as gpd
import shapely.geometry
import numpy as np
import wget</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df_airports  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df_airports .head()
df_flight_paths  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv' )
df_flight_paths .head()
fig = go.Figure()
fig.add_trace (go.Scattergeo (
    locationmode  = 'USA-states' ,
    lon = df_airports ['long'],
    lat = df_airports ['lat'],
    hoverinfo  = 'text',
    text = df_airports ['airport' ],
    mode = 'markers' ,
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)' ,
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))
flight_paths  = []
for i in range(len(df_flight_paths )):
    fig.add_trace (
        go.Scattergeo (
            locationmode  = 'USA-states' ,
            lon = [df_flight_paths ['start_lon' ][i], df_flight_paths ['end_lon' ][i]],
            lat = [df_flight_paths ['start_lat' ][i], df_flight_paths ['end_lat' ][i]],
            mode = 'lines',
            line = dict(width = 1,color = 'red'),
            opacity = float(df_flight_paths ['cnt'][i]) / float(df_flight_paths ['cnt'].max()),
        )
    )
fig.update_layout (
    title_text  = 'Feb. 2011 American Airline flight paths&lt;br&gt;(Hover for airport names)' ,
    showlegend  = False,
    geo = dict(
        scope = 'north america' ,
        projection_type  = 'azimuthal equal area' ,
        showland  = True,
        landcolor  = 'rgb(243, 243, 243)' ,
        countrycolor  = 'rgb(204, 204, 204)' ,
    ),
)
fig.show()
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 3/10</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df_airports  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df_airports .head()
df_flight_paths  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv' )
df_flight_paths .head()
fig = go.Figure()
fig.add_trace (go.Scattergeo (
    locationmode  = 'USA-states' ,
    lon = df_airports ['long'],
    lat = df_airports ['lat'],
    hoverinfo  = 'text',
    text = df_airports ['airport' ],
    mode = 'markers' ,
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)' ,
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))
lons = []
lats = []
import numpy as np
lons = np.empty(3 * len(df_flight_paths ))
lons[::3] = df_flight_paths ['start_lon' ]
lons[1::3] = df_flight_paths ['end_lon' ]
lons[2::3] = None
lats = np.empty(3 * len(df_flight_paths ))
lats[::3] = df_flight_paths ['start_lat' ]
lats[1::3] = df_flight_paths ['end_lat' ]
lats[2::3] = None
fig.add_trace (
    go.Scattergeo (
        locationmode  = 'USA-states' ,
        lon = lons,
        lat = lats,
        mode = 'lines',
        line = dict(width = 1,color = 'red'),
        opacity = 0.5
    )
)
fig.update_layout (
    title_text  = 'Feb. 2011 American Airline flight paths&lt;br&gt;(Hover for airport names)' ,
    showlegend  = False,
    geo = go.layout.Geo(
        scope = 'north america' ,
        projection_type  = 'azimuthal equal area' ,
        showland  = True,
        landcolor  = 'rgb(243, 243, 243)' ,
        countrycolor  = 'rgb(204, 204, 204)' ,
    ),
    height=700,
)
fig.show()
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 5/10</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Scattergeo (
    lat = [40.7127, 51.5072],
    lon = [-74.0059, 0.1275],
    mode = 'lines',
    line = dict(width = 2, color = 'blue'),
))
fig.update_layout (
    title_text  = 'London to NYC Great Circle' ,
    showlegend  = False,
    geo = dict(
        resolution  = 50,
        showland  = True,
        showlakes  = True,
        landcolor  = 'rgb(204, 204, 204)' ,
        countrycolor  = 'rgb(204, 204, 204)' ,
        lakecolor  = 'rgb(255, 255, 255)' ,
        projection_type  = "equirectangular" ,
        coastlinewidth  = 2,
        lataxis = dict(
            range = [20, 60],
            showgrid  = True,
            dtick = 10
        ),
        lonaxis = dict(
            range = [-100, 20],
            showgrid  = True,
            dtick = 20
        ),
    )
)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>ects
ny lines16/07/2025, 06:36 Lines on maps in Python
 4/10
import plotly.graph_objects  as go
import pandas as pd
df_airports  = pd.read_csv 
df_airports .head
df_flight_paths  = pd.read_csv 
df_flight_paths .head
fig = go.Figure
fig.add_trace ' ,
        line = dict'
        )
    )))
lons = []
lats = []
import numpy as np
lons = np.empty)
lons[::3] = df_flight_paths ['start_lon' ]
lons[1::3] = df_flight_paths ['end_lon' ]
lons[2::3] = None
lats = np.empty)
lats[::3] = df_flight_paths ['start_lat' ]
lats[1::3] = df_flight_paths ['end_lat' ]
lats[2::3] = None
fig.add_trace ,
        opacity = 0.5
    )
)
fig.update_layout ' ,
    showlegend  = False,
    geo = go.layout.Geo' ,
        countrycolor  = 'rgb' ,
    ),
    height=700,
)
fig.show
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
 5/10
Feb. 2011 American Airline flight paths</description>
      </customization>
    </chart>
    <chart name="Map configuration and styling on geo maps" source_file="pyvy_2x4/Map configuration and styling on geo maps in Python.pdf">
      <description>Tile Maps vs Outline Maps
Outline-based maps
Physical Base Maps &gt;  &gt; Map Configuration and
Styling on Geo Maps
Map Configuration and Styling on Geo Maps in Python
How to configure and style base maps for outline-based Geo Maps.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
Plotly supports two different kinds of maps:
Tile-based maps 
Note: Plotly Express cannot create empty ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ng
ub-Units</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    resolution =50,
    showcoastlines =True, coastlinecolor ="RebeccaPurple" ,
    showland =True, landcolor ="LightGreen" ,
    showocean =True, oceancolor ="LightBlue" ,
    showlakes =True, lakecolor ="Blue",
    showrivers =True, rivercolor ="Blue"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    visible=False,
    resolution =50,
    showlakes =True, lakecolor ="Blue",
    showrivers =True, rivercolor ="Blue"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
ng
ub-Units</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    visible=False, resolution =50,
    showcountries =True, countrycolor ="RebeccaPurple"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (projection_type ="orthographic" )
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
ng
ub-Units</code>
        </example>
      </examples>
    </chart>
    <chart name="Usa county choropleth maps" source_file="pyvy_2x4/Usa county choropleth maps in Python.pdf">
      <description>Deprecation warning
Required Packages
conda install plotly conda install geopandas
FIPS and Values &gt;  &gt; USA County
Choropleth Maps
USA County Choropleth Maps in Python
How to create colormaped representations of USA counties by FIPS values in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
This page describes a  for creating map-like figures using . This is no
longer t...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
fips = ['06021', '06023', '06027',
        '06029', '06033', '06059',
        '06047', '06049', '06051',
        '06055', '06061']
values = range(len(fips))
fig = ff.create_choropleth (fips=fips, values=values)
fig.layout.template  = None
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'California' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = [
    'rgb(193, 193, 193)' ,
    'rgb(239,239,239)' ,
    'rgb(195, 196, 222)' ,
    'rgb(144,148,194)' ,
    'rgb(101,104,168)' ,
    'rgb(65, 53, 132)'
]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada' , 'Oregon' , ' Idaho' ],
    binning_endpoints =[14348, 63983, 134827, 426762, 2081313], colorscale =colorscale ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5}, round_legend_values =True,
    legend=dict(
      title=dict(
        text='Population by County'
      )
    ),
    title=dict(
      text='California and Nearby States'
    )
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 3/11</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'Florida' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
endpts = list(np.mgrid[min(values):max(values):4j])
colorscale  = ["#030512" ,"#1d1d3b" ,"#323268" ,"#3d4b94" ,"#3e6ab0" ,
              "#4989bc" ,"#60a7c7" ,"#85c5d3" ,"#b7e0e4" ,"#eafcfd" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['Florida' ], show_state_data =True,
    colorscale =colorscale , binning_endpoints =endpts, round_legend_values =True,
    plot_bgcolor ='rgb(229,229,229)' ,
    paper_bgcolor ='rgb(229,229,229)' ,
    legend_title ='Population by County' ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5},
    exponent_format =True,
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import pandas as pd
scope = ['Oregon' ]
df_sample  = pd.read_csv (
    'https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv'
)
df_sample_r  = df_sample [df_sample ['STNAME' ].isin(scope)]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = ["#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=scope,
    colorscale =colorscale , round_legend_values =True,
    simplify_county =0, simplify_state =0,
    county_outline ={'color': 'rgb(15, 15, 55)' , 'width': 0.5},
    state_outline ={'width': 1},
    legend_title ='pop. per county' ,
    title='Oregon'
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 8/11</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>codes. There
are state codes and county codes: the 2016 state and county FIPS codes can be found at the 
.
US Census Website 
Combine a state FIPS code  with a county FIPS code of the state  and this new state-county FIPS code  uniquely
refers to the specified state and county.
ff.create_choropleth only needs a list of FIPS codes and a list of values. Each FIPS code points to one county and each corresponding value in values determines the
color of the county.Collecting plotly-geo==1.0.0
Downloading plotly_geo-1.0.0-py3-none-any.whl.metadata 
Downloading plotly_geo-1.0.0-py3-none-any.whl 
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 23.7/23.7 MB156.9 MB/s eta 0:00:00
Installing collected packages: plotly-geo
Successfully installed plotly-geo-1.0.0
Collecting geopandas==0.8.1
Downloading geopandas-0.8.1-py2.py3-none-any.whl.metadata 
Collecting pandas&gt;=0.23.0 
Downloading pandas-2.3.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata 
Collecting shapely 
Downloading shapely-2.0.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata 
Collectingfiona
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:37 Usa county choropleth maps in Python
 1/11
Simple Example
Change the ScopeA simple example of this is a choropleth a few counties in California:
import plotly.figure_factory  as ff
fips = ['06021', '06023', '06027',
        '06029', '06033', '06059',
        '06047', '06049', '06051',
        '06055', '06061']
values = range)
fig = ff.create_choropleth 
fig.layout.template  = None
fig.show
Even if your FIPS values belong to a single state, the scope defaults to the entire United States as displayed in the example above. Changing the scope of the
choropleth shifts the zoom and position of the USA map. You can define the scope with a list of state names and the zoom will automatically adjust to include the
state outlines of the selected states.
By default scope is set to ['USA'] which the API treats as identical to passing a list of all 50 state names:
['AK', 'AL', 'CA', ...]
State abbreviations  or the proper names  as strings are accepted. If the state name is not recognized, the API will throw a Warning and indicate
which FIPS values were ignored.
Another param used in the example below is binning_endpoints. If your values is a list of numbers, you can bin your values into half-open intervals on the real line./home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
10
9
8
7
6
5
4
3
2
1
0
16/07/2025, 06:37 Usa county choropleth maps in Python
 2/11
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv 
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'California' ]
values = df_sample_r ['TOT_POP' ].tolist
fips = df_sample_r ['FIPS'].tolist
colorscale  = [
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb'
]
fig = ff.create_choropleth ' , 'width': 0.5}, round_legend_values =True,
    legend=dict
    ),
    title=dict
)
fig.layout.template  = None
fig.show
16/07/2025, 06:37 Usa county choropleth maps in Python
 3/11
Single State/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
Population by County
&lt; 14,348
14,348 - 63,983
63,983 - 134,827
134,827 - 426,762
426,762 - 2,081,313
&gt; 2,081,313California and Nearby States
16/07/2025, 06:37 Usa county choropleth maps in Python
 4/11
Multiple Statesimport plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv 
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'Florida' ]
values = df_sample_r ['TOT_POP' ].tolist
fips = df_sample_r ['FIPS'].tolist
endpts = list:max:4j])
colorscale  = ["#030512" ,"#1d1d3b" ,"#323268" ,"#3d4b94" ,"#3e6ab0" ,
              "#4989bc" ,"#60a7c7" ,"#85c5d3" ,"#b7e0e4" ,"#eafcfd" ]
fig = ff.create_choropleth ' ,
    paper_bgcolor ='rgb' ,
    legend_title ='Population by County' ,
    county_outline ={'color': 'rgb' , 'width': 0.5},
    exponent_format =True,
)
fig.layout.template  = None
fig.show
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1.73M - 2.59M
869.20K - 1.73M
8.28K - 869.20K
&lt; 8.28KPopulation by County
16/07/2025, 06:37 Usa county choropleth maps in Python
 5/11
import plotly.figure_factory  as ff
import pandas as pd
NE_states  = ['Connecticut' , 'Maine', 'Massachusetts' , 'New Hampshire' , 'Rhode Island' , 'Vermont' ]
df_sample  = pd.read_csv 
df_sample_r  = df_sample [df_sample ['STNAME' ].isin]
values = df_sample_r ['TOT_POP' ].tolist
fips = df_sample_r ['FIPS'].tolist
colorscale  = [
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb' ,
    'rgb'
]
fig = ff.create_choropleth ' , 'width': 0.5},
    legend_title ='Population per county'
)
fig.update_layout 
fig.layout.template  = None
fig.show
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1537215
933835
897259
862813
806163
755618
744426
681845
628323
551082
499759
465923
402922
297820
283921
274170
215423
199005
187530
165602Population per county
16/07/2025, 06:37 Usa county choropleth maps in Python
 6/11
Simplify County, State Lines
simplify_county determines the simplification factor for the counties. The larger the number, the fewer vertices and edges each polygon has. See
 for more information.
simplify_state simplifies the state outline polygon. See the  for more information.
Default for both simplify_county and simplify_state is 0.02Below is a choropleth that uses several other parameters. For a full list of all available params call help</description>
      </customization>
    </chart>
    <chart name="Annotated heatmaps" source_file="pyvy_2x5/Annotated heatmaps in Python.pdf">
      <description>Annotated Heatmaps with Plotly Express
Basic Annotated Heatmap for z-annotations &gt;  &gt;
Annotated Heatmaps
Annotated Heatmaps in Python
How to make Annotated Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
New in v5.5
As of version 5.5.0 of plotly, the recommended way to  rather than the now-deprecated
create_annotated_heatmap figure ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 1/9</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = ff.create_annotated_heatmap (z)
fig.show()
set annotation_text to a matrix with the same dimensions as z</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game Three' , 'Game Two' , 'Game One' ]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = ff.create_annotated_heatmap (z, x=x, y=y, annotation_text =z_text, colorscale ='Viridis' )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game One' , 'Game Two' , 'Game Three' ]
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = px.imshow(z, x=x, y=y, color_continuous_scale ='Viridis' , aspect="auto")
fig.update_traces (text=z_text, texttemplate ="%{text}")
fig.update_xaxes (side="top")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
z = np.random.randn(20, 20)
z_text = np.around(z, decimals =2) # Only show rounded value (full value on hover)
fig = ff.create_annotated_heatmap (z, annotation_text =z_text, colorscale ='Greys',
                                  hoverinfo ='z')</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>full function reference 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
 9/9</description>
      </customization>
    </chart>
    <chart name="Carpet contour plot" source_file="pyvy_2x5/Carpet contour plot in Python.pdf">
      <description>Basic Carpet Plot &gt;  &gt; Carpet
Contour Plot
Carpet Contour Plot in Python
How to make carpet contour plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
Set the x and y coordinates, using x and y attributes. If x coordinate values are omitted a cheater plot will be created. To save parameter values use a and b attributes.
To make changes to...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis = dict(
        tickprefix  = 'a = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    ),
    baxis = dict(
        tickprefix  = 'b = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    )
))
fig.show()
a = 0a = 1 a = 2a = 3
b = 4b = 5b = 6
1 2 3 4 50.511.522.533.54
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 1/6</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Contourcarpet (
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    z = [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],
    autocontour  = False,
    contours  = dict(
        start = 1,
        end = 14,
        size = 1
    ),
    line = dict(
        width = 2,
        smoothing  = 0
    ),
    colorbar  = dict(
       len = 0.4,
        y = 0.25
    )
))
fig.add_trace (go.Carpet(
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis = dict(
        tickprefix  = 'a = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    ),
    baxis = dict(
        tickprefix  = 'b = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    )
))
fig.show()
a = 0a = 1 a = 2a = 3
b = 4b = 5b = 6
1 2 3 4 50.511.522.533.54
510
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 2/6</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import json
from urllib.request  import urlopen
url = "https://raw.githubusercontent.com/bcdunbar/datasets/master/airfoil_data.json"
data = json.load(urlopen(url))
fig=go.Figure()
fig.add_trace (go.Carpet(
    a = data[0]['a'],
    b = data[0]['b'],
    x = data[0]['x'],
    y = data[0]['y'],
    baxis = dict(
      startline  = False,
      endline = False,
      showticklabels  = "none",
      smoothing  = 0,
      showgrid  = False
    ),
    aaxis = dict(
      startlinewidth  = 2,
      startline  = True,
      showticklabels  = "none",
      endline = True,
      showgrid  = False,
      endlinewidth  = 2,
      smoothing  = 0
    )
))
fig.add_trace (go.Contourcarpet (
    z = data[1]['z'],
    autocolorscale  = False,
    zmax = 1,
    name = "Pressure" ,
    colorscale  = "Viridis" ,
    zmin = -8,
    colorbar  = dict(
      y = 0,
      yanchor = "bottom" ,
      len = 0.75,
      title = dict(
        text="Pressure coefficient, c&lt;sub&gt;p&lt;/sub&gt;" ,
        side="right")
    ),
    contours  = dict(
      start = -1,
      size = 0.025,
      end = 1.000,
      showlines  = False
    ),
    line = dict(
      smoothing  = 0
    ),
    autocontour  = False,
    zauto = False
))
fig.add_trace (go.Contourcarpet (
    z = data[2]['z'],
    opacity = 0.300,
    showlegend  = True,
    name = "Streamlines" ,
    autocontour  = True,
    ncontours  = 50,
    contours  = dict(
      coloring  = "none"
    ),
    line = dict(
      color = "white",
      width = 1
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 3/6
    )
))
fig.add_trace (go.Contourcarpet (
    z = data[3]['z'],
    showlegend  = True,
    name = "Pressure&lt;br&gt;contours" ,
    autocontour  = False,
    line = dict(
        color = "rgba(0, 0, 0, 0.5)" ,
        smoothing  = 1
    ),
    contours  = dict(
        size = 0.250,
        start = -4,
        coloring  = "none",
        end = 1.000,
        showlines  = True
      )
))
fig.add_trace (go.Scatter(
    x = data[4]['x'],
    y = data[4]['y'],
    legendgroup  = "g1",
    name = "Surface&lt;br&gt;pressure" ,
    mode = "lines",
    hoverinfo  = "skip",
    line = dict(
      color = "rgba(255, 0, 0, 0.5)" ,
      width = 1,
      shape = "spline" ,
      smoothing  = 1
    ),
    fill = "toself" ,
    fillcolor  = "rgba(255, 0, 0, 0.2)"
))
fig.add_trace (go.Scatter(
    x = data[5]['x'],
    y = data[5]['y'],
    showlegend  = False,
    legendgroup  = "g1",
    mode = "lines",
    hoverinfo  = "skip",
    line = dict(
      color = "rgba(255, 0, 0, 0.3)" ,
      width = 1
    )
))
fig.add_trace (go.Scatter(
    x = data[6]['x'],
    y = data[6]['y'],
    showlegend  = False,
    legendgroup  = "g1",
    name = "cp",
    text = data[6]['text'],
    hoverinfo  = "text",
    mode = "lines",
    line = dict(
      color = "rgba(255, 0, 0, 0.2)" ,
      width = 0
    )
))
fig.update_layout (
    yaxis = dict(
      zeroline  = False,
      range = [-1.800,1.800],
      showgrid  = False
    ),
    dragmode  = "pan",
    height = 700,
    xaxis = dict(
      zeroline  = False,
      scaleratio  = 1,
      scaleanchor  = 'y',
      range = [-3.800,3.800],
      showgrid  = False
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 4/6</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
    </chart>
    <chart name="Contour plots" source_file="pyvy_2x5/Contour plots in Python.pdf">
      <description>Basic Contour Plot &gt;  &gt;
Contour Plots
Contour Plots in Python
How to make Contour plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A 2D contour plot shows the  of a 2D numerical array z, i.e. interpolated lines of isovalues of z.
contour lines )
fig.show
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ta-
 &amp;utm_campaign=studio_clou...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]]
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ntour
ntour
d Y Axis
alues in</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        x=[-9, -6, -5 , -3, -1], # horizontal axis
        y=[0, 1, 4, 5, 7] # vertical axis
    ))
fig.show()
−9 −8 −7 −6 −5 −4 −3 −2 −101234567
048121620
ntour
ntour
d Y Axis
alues in</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data =
     go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale ='Electric' ,
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale ='Hot',
        contours =dict(
            start=0,
            end=8,
            size=2,
        ),
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
02468
ntour
ntour
d Y Axis
alues in</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z= [[10, 10.625, 12.5, 15.625, 20],
              [5.625, 6.25, 8.125, 11.25, 15.625],
              [2.5, 3.125, 5., 8.125, 12.5],
              [0.625, 1.25, 3.125, 6.25, 10.625],
              [0, 0.625, 2.5, 5.625, 10]],
        dx=10,
        x0=5,
        dy=10,
        y0=10,
    )
)
fig.show()
5 10 15 20 25 30 35 40 45101520253035404550
048121620
ntour
ntour
d Y Axis
alues in</code>
        </example>
      </examples>
    </chart>
    <chart name="Dendrograms" source_file="pyvy_2x5/Dendrograms in Python.pdf">
      <description>Basic Dendrogram
Set Color Threshold &gt;  &gt;
Dendrograms
Dendrograms in Python
How to make a dendrogram in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A  is a diagram representing a tree. The  called create_dendrogram
performs  on data and represents the resulting tree. Values on the tree depth axis
correspond to distances between clusters.
de...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial.distance  import pdist, squareform</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Log plots" source_file="pyvy_2x5/Log plots in Python.pdf">
      <description>Logarithmic Axes with Plotly Express &gt;  &gt; Log
Plots
Log Plots in Python
How to make Log plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
This page shows examples of how to configure  to follow a logarithmic
rather than linear progression.  on logarithmic axes is done the same was as with 
.
2-dimensional Cartesian axes 
Configuring grid...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , hover_name ="country" , log_x=True)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , hover_name ="country" ,
                 log_x=True, range_x=[1,100000], range_y=[0,100])
fig.show()
new in 5.8</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , hover_name ="country" ,
                 log_x=True, range_x=[1,100000], range_y=[0,100])
fig.update_xaxes (minor=dict(ticks="inside" , ticklen=6, showgrid =True))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = go.Figure()
fig.add_trace (go.Scatter(mode="markers" , x=df["gdpPercap" ], y=df["lifeExp" ] ))
fig.update_xaxes (type="log")
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = go.Figure()
fig.add_trace (go.Scatter(mode="markers" , x=df["gdpPercap" ], y=df["lifeExp" ] ))
fig.update_xaxes (type="log", range=[0,5]) # log range: 10^0=1, 10^5=100000
fig.update_yaxes (range=[0,100]) # linear range
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
All of Plotly Express' 2-D Cartesian functions include the log_x and log_y keyword arguments, which can be set to True to set the corresponding axis to a logarithmic
scale:
import plotly.express  as px
df = px.data.gapminder .query
fig = px.scatter
fig.show
Setting the range of a logarithmic axis with Plotly Express works the same was as with linear axes: using the range_x and range_y keywords. Note that you cannot set
the range to include 0 or less.345678910002 345678910k2 345640455055606570758085
gdpPercaplifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
ts16/07/2025, 06:42 Log plots in Python
 1/6
Adding minor ticksimport plotly.express  as px
df = px.data.gapminder .query
fig = px.scatter
fig.show
new in 5.8
You can position and style minor ticks using minor. This takes a dict of properties to apply to minor ticks. See the 
 for full details on the accepted keys in this dict.
figure reference
.query
fig = px.scatter
fig.update_xaxes )
fig.show
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Figure class from plotly.graph_objects 12 5102 51002 510002 510k2 5100k020406080100
gdpPercaplifeExp
s
ts16/07/2025, 06:42 Log plots in Python
 3/6
import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder .query
fig = go.Figure
fig.add_trace )
fig.update_xaxes 
fig.show
Setting the range of a logarithmic axis with plotly.graph_objects is very different than setting the range of linear axes: the range is set using the exponent rather than
the actual value:345678910002 345678910k2 34564050607080
s
ts16/07/2025, 06:42 Log plots in Python
 4/6
Reference
What About Dash?import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder .query
fig = go.Figure
fig.add_trace )
fig.update_xaxes  # log range: 10^0=1, 10^5=100000
fig.update_yaxes  # linear range
fig.show
See  or
 for more information and
chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter12 5102 51002 510002 510k2 5100k020406080100
s
ts16/07/2025, 06:42 Log plots in Python
 5/6
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
s
ts16/07/2025, 06:42 Log plots in Python
 6/6</description>
      </customization>
    </chart>
    <chart name="Network graphs" source_file="pyvy_2x5/Network graphs in Python.pdf">
      <description>Create random graph
Create Edges &gt;  &gt;
Network Graphs
Network Graphs in Python
How to make Network Graphs in Python with Plotly. One examples of a network graph with NetworkX
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
In this example we show how to visualize a network graph created using networkx.
Install the Python library networkx with pip install networkx.
...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import networkx  as nx</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import Dash, html
import dash_cytoscape as cyto
app = Dash(__name__)
app.layout = html.Div([
    html.P("Dash Cytoscape:"),
    cyto.Cytoscape(
        id='cytoscape',
        elements=[
            {'data': {'id': 'ca', 'label': 'Canada'}},
            {'data': {'id': 'on', 'label': 'Ontario'}},
            {'data': {'id': 'qc', 'label': 'Quebec'}},
            {'data': {'source': 'ca', 'target': 'on'}},
            {'data': {'source': 'ca', 'target': 'qc'}}
        ],
        layout={'name': 'breadthfirst'},
        style={'width': '400px', 'height': '500px'}
    )
])
app.run(debug=True)DOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure(data=[edge_trace , node_trace ],
             layout=go.Layout(
                title=dict(
                    text="&lt;br&gt;Network graph made with Python" ,
                    font=dict(
                        size=16
                    )
                ),
                showlegend =False,
                hovermode ='closest' ,
                margin=dict(b=20,l=5,r=5,t=40),
                annotations =[ dict(
                    text="Python code: &lt;a href='https://plotly.com/python/network-graphs/'&gt; https://plotly.com/python/network-graphs/&lt;/a&gt;" ,
                    showarrow =False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=dict(showgrid =False, zeroline =False, showticklabels =False),
                yaxis=dict(showgrid =False, zeroline =False, showticklabels =False))
                )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash dash-cytoscape, click
"Download" to get the code and run python app.py.</code>
        </example>
      </examples>
    </chart>
    <chart name="Parallel coordinates plot" source_file="pyvy_2x5/Parallel coordinates plot in Python.pdf">
      <description>Parallel Coordinates plot with Plotly Express &gt;  &gt; Parallel
Coordinates Plot
Parallel Coordinates Plot in Python
How to make parallel coordinates plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to
this page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces . In a parallel coordinates plot with px.parallel_coordinates, each ro...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, color="species_id" , labels={"species_id" : "Species" ,
                "sepal_width" : "Sepal Width" , "sepal_length" : "Sepal Length" ,
                "petal_width" : "Petal Width" , "petal_length" : "Petal Length" , },
                             color_continuous_scale =px.colors.diverging .Tealrose ,
                             color_continuous_midpoint =2)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, color="species_id" ,
                              dimensions =['sepal_width' , 'sepal_length' , 'petal_width' ,
                                          'petal_length' ],
                              color_continuous_scale =px.colors.diverging .Tealrose ,
                              color_continuous_midpoint =2)
fig.show()
11.522.53species_id
22.533.54sepal_width
4.4
24.555.566.577.5sepal_length
7.9
4.30.511.522.5petal_width
2.5
0.1123456petal_length
6.9
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 2/8</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Parcoords (
        line_color ='blue',
        dimensions  = list([
            dict(range = [1,5],
                 constraintrange  = [1,2], # change this range by dragging the pink line
                 label = 'A', values = [1,4]),
            dict(range = [1.5,5],
                 tickvals  = [1.5,3,4.5],
                 label = 'B', values = [3,1.5]),
            dict(range = [1,5],
                 tickvals  = [1,2,4,5],
                 label = 'C', values = [2,4],
                 ticktext  = ['text 1' , 'text 2' , 'text 3' , 'text 4' ]),
            dict(range = [1,5],
                 label = 'D', values = [4,2])
        ])
    )
)
fig.show()
11.522.533.544.55A
5
11.534.5B
text 1text 2text 3text 4C
11.522.533.544.55D
5
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 3/8</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv" )
fig = go.Figure(data=
    go.Parcoords (
        line = dict(color = df['species_id' ],
                   colorscale  = [[0,'purple' ],[0.5,'lightseagreen' ],[1,'gold']]),
        dimensions  = list([
            dict(range = [0,8],
                constraintrange  = [4,8],
                label = 'Sepal Length' , values = df['sepal_length' ]),
            dict(range = [0,8],
                label = 'Sepal Width' , values = df['sepal_width' ]),
            dict(range = [0,8],
                label = 'Petal Length' , values = df['petal_length' ]),
            dict(range = [0,8],
                label = 'Petal Width' , values = df['petal_width' ])
        ])
    )
)
fig.update_layout (
    plot_bgcolor  = 'white',
    paper_bgcolor  = 'white'
)
fig.show()
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 4/8
012345678Sepal Length
8
0012345678Sepal Width
8
0012345678Petal Length
8
0012345678Petal Width
8
0
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 5/8</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv" )
fig = go.Figure(data=
    go.Parcoords (
        line = dict(color = df['colorVal' ],
                   colorscale  = 'Electric' ,
                   showscale  = True,
                   cmin = -4000,
                   cmax = -100),
        dimensions  = list([
            dict(range = [32000,227900],
                 constraintrange  = [100000,150000],
                 label = "Block Height" , values = df['blockHeight' ]),
            dict(range = [0,700000],
                 label = 'Block Width' , values = df['blockWidth' ]),
            dict(tickvals  = [0,0.5,1,2,3],
                 ticktext  = ['A','AB','B','Y','Z'],
                 label = 'Cyclinder Material' , values = df['cycMaterial' ]),
            dict(range = [-1,4],
                 tickvals  = [0,1,2,3],
                 label = 'Block Material' , values = df['blockMaterial' ]),
            dict(range = [134,3154],
                 visible = True,
                 label = 'Total Weight' , values = df['totalWeight' ]),
            dict(range = [9,19984],
                 label = 'Assembly Penalty Wt' , values = df['assemblyPW' ]),
            dict(range = [49000,568000],
                 label = 'Height st Width' , values = df['HstW'])])
    )
)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>radar charts 
scatterplot matrix  
import plotly.express  as px
df = px.data.iris
fig = px.parallel_coordinates 
fig.show
Parallel coordinates are richly interactive by default. Drag the lines along the axes to filter regions.
Select the columns to be represented with the dimensions parameter.
11.522.53Species
4.555.566.577.5Sepal Length
7.9
4.322.533.54Sepal Width
4.4
2123456Petal Length
6.9
10.511.522.5Petal Width
2.5
0.111.21.41.61.822.22.42.62.83Species
3
1
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 1/8
import plotly.express  as px
df = px.data.iris
fig = px.parallel_coordinates 
fig.show
11.522.53species_id
22.533.54sepal_width
4.4
24.555.566.577.5sepal_length
7.9
4.30.511.522.5petal_width
2.5
0.1123456petal_length
6.9
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 2/8
Parallel Coordinates Chart with go.Parcoords
import plotly.graph_objects  as go
fig = go.Figure,
            dict,
            dict,
            dict
        ])
    )
)
fig.show
11.522.533.544.55A
5
11.534.5B
text 1text 2text 3text 4C
11.522.533.544.55D
5
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 3/8
Basic Parallel Coordinates PlotParallel coordinates are richly interactive by default. Drag the lines along the axes to filter regions and drag the axis names across the plot to rearrange variables.
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
fig = go.Figure,
        dimensions  = list,
            dict,
            dict,
            dict
        ])
    )
)
fig.update_layout 
fig.show
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 4/8
012345678Sepal Length
8
0012345678Sepal Width
8
0012345678Petal Length
8
0012345678Petal Width
8
0
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 5/8
Advanced Parallel Coordinates Plot
Unselected Line Color and Opacityimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
fig = go.Figure,
        dimensions  = list,
            dict,
            dict,
            dict,
            dict,
            dict,
            dict])
    )
)
fig.show
New in 5.10
The color and opacity of unselected lines can be set with unselected. By setting opacity=0, you can hide the unselected lines. Here, we set the color to lightgray and
the opacity to 0.5.
−4000−3500−3000−2500−2000−1500−1000−500
40k60k80k100k120k140k160k180k200k220kBlock Height
227.9k
32k0100k200k300k400k500k600k700kBlock Width
700k
0AABBYZCyclinder Material
0123Block Material
50010001500200025003000Total Weight
3154
1345k10k15kAssembly Penalty Wt
19.984k
0.009k100k200k300k400k500kHeight st Width
568k
49k
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 6/8
Referenceimport plotly.graph_objects  as go
fig = go.Figure,
            dict,
            dict,
            dict
        ]),
        unselected  = dict)
    )
)
fig.show
See  or
 for more information and chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
 8/8</description>
      </customization>
    </chart>
    <chart name="Quiver plots" source_file="pyvy_2x5/Quiver plots in Python.pdf">
      <description>Basic Quiver Plot
Quiver Plot with Points &gt;  &gt;
Quiver Plots
Quiver Plots in Python
How to make a quiver plot in Python. A quiver plot displays velocity vectors a arrows.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
Quiver plots can be made using a  as detailed in this page.
figure factory 
import plotly.figure_factory  as ff
import numpy as np
x,y = np.meshgrid...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
x,y = np.meshgrid (np.arange(0, 2, .2), np.arange(0, 2, .2))
u = np.cos(x)*y
v = np.sin(x)*y
fig = ff.create_quiver (x, y, u, v)
fig.show()
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 1/3</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
x,y = np.meshgrid (np.arange(-2, 2, .2),
                  np.arange(-2, 2, .25))
z = x*np.exp(-x**2 - y**2)
v, u = np.gradient (z, .2, .2)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">fig = ff.create_quiver (x, y, u, v)
fig.show()
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 1/3</code>
        </example>
      </examples>
    </chart>
    <chart name="Radar charts" source_file="pyvy_2x5/Radar charts in Python.pdf">
      <description>Radar Chart with Plotly Express &gt;  &gt; Radar
Charts
Radar Charts in Python
How to make radar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A   displays multivariate data in the form of a two-dimensional chart of
quantitative variables represented on axes originating from the center. The relative position and angle of the axes is typic...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    r=[1, 5, 2, 2, 3],
    theta=['processing cost' ,'mechanical properties' ,'chemical stability' ,
           'thermal stability' , 'device integration' ]))
fig = px.line_polar (df, r='r', theta='theta', line_close =True)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    r=[1, 5, 2, 2, 3],
    theta=['processing cost' ,'mechanical properties' ,'chemical stability' ,
           'thermal stability' , 'device integration' ]))
fig = px.line_polar (df, r='r', theta='theta', line_close =True)
fig.update_traces (fill='toself' )
fig.show()
processing cost
mechanical properties
chemical stability thermal stabilitydevice integration
012345
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 2/5</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Scatterpolar (
  r=[1, 5, 2, 2, 3],
  theta=['processing cost' ,'mechanical properties' ,'chemical stability' , 'thermal stability' ,
           'device integration' ],
  fill='toself'
))
fig.update_layout (
  polar=dict(
    radialaxis =dict(
      visible=True
    ),
  ),
  showlegend =False
)
fig.show()
processing costmechanical properties
chemical stability
thermal stability
device integration012345
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 3/5</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
categories  = ['processing cost' ,'mechanical properties' ,'chemical stability' ,
              'thermal stability' , 'device integration' ]
fig = go.Figure()
fig.add_trace (go.Scatterpolar (
      r=[1, 5, 2, 2, 3],
      theta=categories ,
      fill='toself' ,
      name='Product A'
))
fig.add_trace (go.Scatterpolar (
      r=[4, 3, 2.5, 1, 2],
      theta=categories ,
      fill='toself' ,
      name='Product B'
))
fig.update_layout (
  polar=dict(
    radialaxis =dict(
      visible=True,
      range=[0, 5]
    )),
  showlegend =False
)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Smith charts" source_file="pyvy_2x5/Smith charts in Python.pdf">
      <description>Smith Charts with Plotly Graph Objects &gt;  &gt; Smith
Charts
Smith Charts in Python
How to make Smith Charts with plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
New in v5.4
A  is a specialized chart for visualizing :
numbers with both a real and imaginary part.
Smith Chart )
fig.show
∞
−5
−2
−1−0.5−0.200.20.51
2
5
0.20.5125
ta-
 &amp;utm_campaign=studio_cloud_lau...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattersmith (imag=[0.5, 1, 2, 3], real=[0.5, 1, 2, 3]))
fig.show()
∞
−5
−2
−1−0.5−0.200.20.51
2
5
0.20.5125
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ects16/07/2025, 06:45 Smith charts in Python
https://plotly.com/python/smith-charts/ 1/3</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scattersmith (
    imag=[1],
    real=[1],
    marker_symbol ='x',
    marker_size =30,
    marker_color ="green",
    subplot="smith1"
))
fig.add_trace (go.Scattersmith (
    imag=[1],
    real=[1],
    marker_symbol ='x',
    marker_size =30,
    marker_color ="pink",
    subplot="smith2"
))
fig.update_layout (
    smith=dict(
        realaxis_gridcolor ='red',
        imaginaryaxis_gridcolor ='blue',
        domain=dict(x=[0,0.45])
    ),
    smith2=dict(
        realaxis_gridcolor ='blue',
        imaginaryaxis_gridcolor ='red',
        domain=dict(x=[0.55,1])
    )
)
fig.update_smiths (bgcolor="lightgrey" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure(go.Scattersmith (imag=[0.5, 1, 2, 3], real=[0.5, 1, 2, 3]))
fig.show()
∞
−5
−2
−1−0.5−0.200.20.51
2
5
0.20.5125
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ects16/07/2025, 06:45 Smith charts in Python
https://plotly.com/python/smith-charts/ 1/3</code>
        </example>
      </examples>
    </chart>
    <chart name="Streamline plots" source_file="pyvy_2x5/Streamline plots in Python.pdf">
      <description>uniformly spaced ranges of x and y values 
2-D velocity values u and v defined on the cross-product ) of x and y.
Basic Streamline Plot &gt;  &gt;
Streamline Plots
Streamline Plots in Python
How to make a streamline plot in Python. A streamline plot displays vector field data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A Streamline plot is a representation based on...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
x = np.linspace (-3, 3, 100)
y = np.linspace (-3, 3, 100)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">fig = ff.create_streamline (x, y, u, v, arrow_scale =.1)
fig.show()
−3 −2 −1 0 1 2−3−2−10123
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 1/3</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Velocity values are interpolated when determining the streamlines. Streamlines are initialized on the boundary of the x-y domain.
Streamline plots can be made with a  as detailed in this page.
figure factory 
import plotly.figure_factory  as ff
import numpy as np
x = np.linspace 
y = np.linspace 
Y, X = np.meshgrid 
u = -1 - X**2 + Y
v = 1 + X - Y**2
# Create streamline figure
fig = ff.create_streamline 
fig.show
−3 −2 −1 0 1 2−3−2−10123
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Streamline plots in Python
 1/3
Streamline and Source Point Plot
See also
Referenceimport plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
N = 50
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace 
y = np.linspace 
X, Y = np.meshgrid 
source_strength  = 5.0
x_source , y_source  = -1.0, 0.0
# Compute the velocity field on the mesh grid
u =  *
     /**2 + **2))
v =  *
     /**2 + **2))
# Create streamline figure
fig = ff.create_streamline 
# Add source point
fig.add_trace )
fig.show
For a 3D version of streamlines, use the trace go.Streamtube documented .
here 
For representing the 2-D vector field as arrows, see the .
quiver plot tutorial 
For more info on ff.create_streamline, see the 
full function reference −2 −1.5 −1 −0.5 0 0.5 1 1.5−1−0.500.51 streamline
source point
16/07/2025, 06:44 Streamline plots in Python
 2/3
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:44 Streamline plots in Python
 3/3</description>
      </customization>
    </chart>
    <chart name="Ternary contours" source_file="pyvy_2x5/Ternary contours in Python.pdf">
      <description>Ternary contour plots
Simple ternary contour plot with plotly &gt;  &gt;
Ternary contours
Ternary contours in Python
How to make Ternary Contour Plots in Python with plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Scientific Charts 
Suggest an edit to this
page
Sign up for early access now. 
A ternary contour plots represents isovalue lines of a quantity defined inside a , i.e. as a function of three
variables which sum is constant. Coordin...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Indicators" source_file="pyvy_2x6/Indicators in Python.pdf">
      <description>Overview
1. value: the value to visualize
2. mode: which visual elements to draw
3. align: how to align number and delta 
4. domain: the extent of the figure
1. number is simply a representation of the number in text. It has attributes:
2. valueformat: to format the number
3. prefix: a string before the number
4. suffix: a string after the number
5. font.: to control the font
"delta" simply displays the difference between the value with respect to a reference. It has attributes:
1. reference: th...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Indicator (
    value = 200,
    delta = {'reference' : 160},
    gauge = {
        'axis': {'visible' : False}},
    domain = {'row': 0, 'column' : 0}))
fig.add_trace (go.Indicator (
    value = 120,
    gauge = {
        'shape': "bullet" ,
        'axis' : {'visible' : False}},
    domain = {'x': [0.05, 0.5], 'y': [0.15, 0.35]}))
fig.add_trace (go.Indicator (
    mode = "number+delta" ,
    value = 300,
    domain = {'row': 0, 'column' : 1}))
fig.add_trace (go.Indicator (
    mode = "delta",
    value = 40,
    domain = {'row': 1, 'column' : 1}))
fig.update_layout (
    grid = {'rows': 2, 'columns' : 2, 'pattern' : "independent" },
    template  = {'data' : {'indicator' : [{
        'title': {'text': "Speed"},
        'mode' : "number+delta+gauge" ,
        'delta' : {'reference' : 90}}]
                         }})
200
▲40Speed
120
▲30Speed300
▲210Speed
▼−50Speed
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 2/9</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "gauge+number" ,
    value = 450,
    title = {'text': "Speed"},
    domain = {'x': [0, 1], 'y': [0, 1]}
))
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" ,
    gauge = {'shape': "bullet" },
    delta = {'reference' : 300},
    value = 220,
    domain = {'x': [0.1, 1], 'y': [0.2, 0.9]},
    title = {'text': "Avg order size" }))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+delta" ,
    value = 492,
    delta = {"reference" : 512, "valueformat" : ".0f"},
    title = {"text": "Users online" },
    domain = {'y': [0, 1], 'x': [0.25, 0.75]}))
fig.add_trace (go.Scatter(
    y = [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 45
0, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 
480, 499, 497, 480, 502, 512, 492]))
fig.update_layout (xaxis = {'range': [0, 62]})
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+delta" ,
    value = 400,
    number = {'prefix' : "$"},
    delta = {'position' : "top", 'reference' : 320},
    domain = {'x': [0, 1], 'y': [0, 1]}))
fig.update_layout (paper_bgcolor  = "lightgray" )
fig.show()
$400▲80
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 6/9</code>
        </example>
      </examples>
    </chart>
    <chart name="3d axes" source_file="pyvy_2x7/3d axes in Python.pdf">
      <description>Range of axes &gt;  &gt; 3D Axes
3D Axes in Python
How to format axes of 3d plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this page
3D figures have an attribute in layout called scene, which contains attributes such as xaxis, yaxis and zaxis parameters, in order to set the range, title, ticks, color etc.
of the axes.
For creating 3D charts, see .
this page 
16/07/2025, 06:49 3d axes in P...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure(data=[go.Mesh3d(x=(70*np.random.randn(N)),
                   y=(55*np.random.randn(N)),
                   z=(40*np.random.randn(N)),
                   opacity=0.5,
                   color='rgba(244,22,100,0.6)'
                  )])
fig.update_layout (
    scene = dict(
        xaxis = dict(nticks=4, range=[-100,100],),
                     yaxis = dict(nticks=4, range=[-50,100],),
                     zaxis = dict(nticks=4, range=[-100,100],),),
    width=700,
    margin=dict(r=20, l=10, b=10, t=10))
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="3d bubble charts" source_file="pyvy_2x7/3d bubble charts in Python.pdf">
      <description>3d Bubble chart with Plotly Express
Simple Bubble Chart &gt;  &gt; 3D Bubble
Charts
3D Bubble Charts in Python
How to make 3D Bubble Charts in Python with Plotly. Three examples of 3D Bubble Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
import plotly.express  as px
import numpy as np
df = px.data.gapminder 
fig = px.scatter_3d 
fig.update_layout 
fig.show
304050607080...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import numpy as np
df = px.data.gapminder ()
fig = px.scatter_3d (df, x='year', y='continent' , z='pop', size='gdpPercap' , color='lifeExp' ,
                    hover_data =['country' ])
fig.update_layout (scene_zaxis_type ="log")
fig.show()
304050607080lifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 1/7</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
planets = ['Mercury' , 'Venus', 'Earth', 'Mars', 'Jupiter' , 'Saturn' , 'Uranus' , 'Neptune' , 'Pluto']
planet_colors  = ['rgb(135, 135, 125)' , 'rgb(210, 50, 0)' , 'rgb(50, 90, 255)' ,
                 'rgb(178, 0, 0)' , 'rgb(235, 235, 210)' , 'rgb(235, 205, 130)' ,
                 'rgb(55, 255, 217)' , 'rgb(38, 0, 171)' , 'rgb(255, 255, 255)' ]
distance_from_sun  = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]
density = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]
gravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]
planet_diameter  = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
planets = ['Mercury' , 'Venus', 'Earth', 'Mars', 'Jupiter' , 'Saturn' , 'Uranus' , 'Neptune' , 'Pluto']
temperatures  = [167, 464, 15, -20, -65, -110, -140, -195, -200, -225]
distance_from_sun  = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]
density = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]
gravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]
planet_diameter  = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="3d camera controls" source_file="pyvy_2x7/3d camera controls in Python.pdf">
      <description>How camera controls work &gt;  &gt; 3D Camera
Controls
3D Camera Controls in Python
How to Control the Camera in your 3D Charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
The camera position and direction is determined by three vectors: up, center, eye. Their coordinates refer to the 3-d domain, i.e.,  is always the center of the
domain, no matter da...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
      </examples>
    </chart>
    <chart name="3d cone plots" source_file="pyvy_2x7/3d cone plots in Python.pdf">
      <description>Basic 3D Cone &gt;  &gt; 3D Cone
Plots
3D Cone Plots in Python
How to make 3D Cone plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
A cone plot is the 3D equivalent of a 2D , i.e., it represents a 3D vector field using cones to represent the direction and norm of the
vectors. 3-D coordinates are given by x, y and z, and the coordinates of the vector ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Cone(x=[1], y=[1], z=[1], u=[1], v=[1], w=[0]))
fig.update_layout (scene_camera_eye =dict(x=-0.76, y=1.8, z=0.92))
fig.show()
11.21.41.61.8
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 1/6</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Cone(
    x=[1, 2, 3],
    y=[1, 2, 3],
    z=[1, 2, 3],
    u=[1, 0, 0],
    v=[0, 3, 0],
    w=[0, 0, 2],
    sizemode ="absolute" ,
    sizeref=2,
    anchor="tip"))
fig.update_layout (
      scene=dict(domain_x =[0, 1],
                 camera_eye =dict(x=-1.57, y=1.36, z=0.58)))
fig.show()
11.522.53
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 2/6
3D Cone Lighting
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Cone(x=[1,] * 3, name="base"))
fig.add_trace (go.Cone(x=[2,] * 3, opacity=0.3, name="opacity:0.3" ))
fig.add_trace (go.Cone(x=[3,] * 3, lighting_ambient =0.3, name="lighting.ambient:0.3" ))
fig.add_trace (go.Cone(x=[4,] * 3, lighting_diffuse =0.3, name="lighting.diffuse:0.3" ))
fig.add_trace (go.Cone(x=[5,] * 3, lighting_specular =2, name="lighting.specular:2" ))
fig.add_trace (go.Cone(x=[6,] * 3, lighting_roughness =1, name="lighting.roughness:1" ))
fig.add_trace (go.Cone(x=[7,] * 3, lighting_fresnel =2, name="lighting.fresnel:2" ))
fig.add_trace (go.Cone(x=[8,] * 3, lightposition =dict(x=0, y=0, z=1e5),
                                  name="lighting.position x:0,y:0,z:1e5" ))
fig.update_traces (y=[1, 2, 3], z=[1, 1, 1],
                  u=[1, 2, 3], v=[1, 1, 2], w=[4, 4, 1],
                  hoverinfo ="u+v+w+name" ,
                  showscale =False)
fig.update_layout (scene=dict(aspectmode ="data",
                             camera_eye =dict(x=0.05, y=-2.6, z=2)),
                  margin=dict(t=0, b=0, l=0, r=0))
fig.show()
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 3/6
3D Cone Vortex</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/vortex.csv" )
fig = go.Figure(data = go.Cone(
    x=df['x'],
    y=df['y'],
    z=df['z'],
    u=df['u'],
    v=df['v'],
    w=df['w'],
    colorscale ='Blues',
    sizemode ="absolute" ,
    sizeref=40))
fig.update_layout (scene=dict(aspectratio =dict(x=1, y=1, z=0.8),
                             camera_eye =dict(x=1.2, y=1.2, z=0.6)))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/cone_plot_data.csv"
)
fig = go.Figure(
    data=go.Cone(
        x=df["x"],
        y=df["y"],
        z=df["z"],
        u=df["u"],
        v=df["v"],
        w=df["w"],
        sizemode ="raw",
        sizeref=0.1,
        colorscale ="Portland" ,
        cmin=0,
        cmax=80,
        hoverinfo ="u+v+w+text" ,
        text="-&gt; wind &lt;-" ,
    ),
    layout=dict(
        width=900, height=600, scene=dict(camera=dict(eye=dict(x=1.2, y=0, z=0.6)))
    ),
)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="3d isosurface plots" source_file="pyvy_2x7/3d isosurface plots in Python.pdf">
      <description>Basic Isosurface
Removing caps when visualizing isosurfaces &gt;  &gt; 3D
Isosurface Plots
3D Isosurface Plots in Python
How to make 3D Isosurface Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
With go.Isosurface, you can plot  of a scalar field value, which is defined on x, y and z coordinates.
isosurface contours  are colored. Please rotate the f...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig= go.Figure(data=go.Isosurface (
    x=[0,0,0,0,1,1,1,1],
    y=[1,0,1,0,1,0,1,0],
    z=[1,1,0,0,1,1,0,0],
    value=[1,2,3,4,5,6,7,8],
    isomin=2,
    isomax=6,
))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
      </examples>
    </chart>
    <chart name="3d line plots" source_file="pyvy_2x7/3d line plots in Python.pdf">
      <description>3D Line plot with Plotly Express &gt;  &gt; 3D Line
Plots
3D Line Plots in Python
How to make 3D Line Plots
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
import plotly.express  as px
df = px.data.gapminder .query
fig = px.line_3d
fig.show
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d line plots in Python
 1/5
3D Line Plot of Brownian Motioni...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("country=='Brazil'" )
fig = px.line_3d(df, x="gdpPercap" , y="pop", z="year")
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 1/5
3D Line Plot of Brownian Motionimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Europe'" )
fig = px.line_3d(df, x="gdpPercap" , y="pop", z="year", color='country' )
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
import numpy as np
rs = np.random.RandomState ()
rs.seed(0)
def brownian_motion (T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):
    dt = float(T)/N
    t = np.linspace (0, T, N)
    W = rs.standard_normal (size = N)
    W = np.cumsum(W)*np.sqrt(dt) # standard brownian motion
    X = (mu-0.5*sigma**2)*t + sigma*W
    S = S0*np.exp(X) # geometric brownian motion
    return S
dates = pd.date_range ('2012-01-01' , '2013-02-22' )</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 4/5
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = px.line_3d(df, x="gdpPercap" , y="pop", z="year")
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 1/5
3D Line Plot of Brownian Motionimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Europe'" )
fig = px.line_3d(df, x="gdpPercap" , y="pop", z="year", color='country' )
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="3d mesh plots" source_file="pyvy_2x7/3d mesh plots in Python.pdf">
      <description>Simple 3D Mesh example
3D Mesh example with Alphahull &gt;  &gt; 3D Mesh
Plots
3D Mesh Plots in Python
How to make 3D Mesh Plots
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
go.Mesh3d draws a 3D set of triangles with vertices given by x, y and z. If only coordinates are given, an algorithm such as 
 is used to draw the triangles. Otherwise the triangles can be given using th...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
pts = np.loadtxt(np.DataSource ().open('https://raw.githubusercontent.com/plotly/datasets/master/mesh_dataset.txt' ))
x, y, z = pts.T
fig = go.Figure(data=[go.Mesh3d(x=x, y=y, z=z,
                   alphahull =5,
                   opacity=0.4,
                   color='cyan')])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
base_url = "https://raw.githubusercontent.com/plotly/datasets/master/ply/"
mesh_names = ['sandal', 'scissors', 'shark', 'walkman']
dataframes = {
    name: pd.read_csv(base_url + name + '-ply.csv')
    for name in mesh_names
}
app = Dash(__name__)
app.layout = html.Div([
    html.H4('PLY Object Explorer'),
    html.P("Choose an object:"),
    dcc.Dropdown(
        id='dropdown',
        options=mesh_names,
        value="sandal",
        clearable=False
    ),
    dcc.Graph(id="graph"),
])DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=[
    go.Mesh3d(
        x=[0, 1, 2, 0],
        y=[0, 0, 1, 2],
        z=[0, 2, 0, 1],
        colorbar =dict(title=dict(text='z')),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity =[0, 0.33, 0.66, 1],
        # i, j and k give the vertices of triangles
        # here we represent the 4 triangles of the tetrahedron surface
        i=[0, 0, 0, 1],
        j=[1, 2, 3, 2],
        k=[2, 3, 1, 3],
        name='y',
        showscale =True
    )
])
fig.show()
00.20.40.60.81z
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 4/7</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
fig = go.Figure(data=[
    go.Mesh3d(
        # 8 vertices of a cube
        x=[0, 0, 1, 1, 0, 0, 1, 1],
        y=[0, 1, 1, 0, 0, 1, 1, 0],
        z=[0, 0, 0, 0, 1, 1, 1, 1],
        colorbar =dict(title=dict(text='z')),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity  = np.linspace (0, 1, 8, endpoint =True),
        # i, j and k give the vertices of triangles
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale =True
    )
])
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>or cells16/07/2025, 06:51 3d mesh plots in Python
 1/7
3D Mesh in Dashimport plotly.graph_objects  as go
import numpy as np
pts = np.loadtxt.open)
x, y, z = pts.T
fig = go.Figure])
fig.show
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
    for name in mesh_names
}
app = Dash
app.layout = html.Div,
    html.P,
    dcc.Dropdown,
    dcc.Graph,
])DOWNLOAD
PLY Object Explorer
Choose an object:
sandal
or cells16/07/2025, 06:51 3d mesh plots in Python
 3/7
import plotly.graph_objects  as go
fig = go.Figure),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity =[0, 0.33, 0.66, 1],
        # i, j and k give the vertices of triangles
        # here we represent the 4 triangles of the tetrahedron surface
        i=[0, 0, 0, 1],
        j=[1, 2, 3, 2],
        k=[2, 3, 1, 3],
        name='y',
        showscale =True
    )
])
fig.show
00.20.40.60.81z
or cells16/07/2025, 06:51 3d mesh plots in Python
 4/7
Mesh Cube
Intensity values defined on vertices or cellsimport plotly.graph_objects  as go
import numpy as np
fig = go.Figure),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity  = np.linspace ,
        # i, j and k give the vertices of triangles
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale =True
    )
])
fig.show
The intensitymode attribute of go.Mesh3d can be set to vertex , or
to cell . Note that the intensity parameter should have the same length as the number of vertices or cells, depending on the
intensitymode.
Whereas the previous example used the default intensitymode='vertex', we plot here the same mesh with intensitymode='cell'.
00.20.40.60.81z
or cells16/07/2025, 06:51 3d mesh plots in Python
 5/7
Referenceimport plotly.graph_objects  as go
fig = go.Figure),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity  = np.linspace ,
        intensitymode ='cell',
        # i, j and k give the vertices of triangles
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale =True
    )
])
fig.show
See  for more information and chart attribute options!
 , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
or cells16/07/2025, 06:51 3d mesh plots in Python
 7/7</description>
      </customization>
    </chart>
    <chart name="3d streamtube plots" source_file="pyvy_2x7/3d streamtube plots in Python.pdf">
      <description>Introduction
Basic Streamtube Plot
Starting Position and Segments &gt;  &gt; 3D
Streamtube Plots
3D Streamtube Plots in Python
How to make 3D streamtube plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
In streamtube plots, attributes include x, y, and z, which set the coordinates of the vector field, and u, v, and w, which set the x, y, and z compone...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(data=go.Streamtube (x=[0, 0, 0], y=[0, 1, 2], z=[0, 0, 0],
                                   u=[0, 0, 0], v=[1, 1, 1], w=[0, 0, 0]))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv' ).drop(['Unnamed: 0' ],axis=1)
fig = go.Figure(data=go.Streamtube (
    x = df['x'],
    y = df['y'],
    z = df['z'],
    u = df['u'],
    v = df['v'],
    w = df['w'],
    starts = dict(
        x = [80] * 16,
        y = [20,30,40,50] * 4,
        z = [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]
    ),
    sizeref = 0.3,
    colorscale  = 'Portland' ,
    showscale  = False,
    maxdisplayed  = 3000
))
fig.update_layout (
    scene = dict(
        aspectratio  = dict(
            x = 2,
            y = 1,
            z = 0.3
        )
    ),
    margin = dict(
        t = 20,
        b = 20,
        l = 20,
        r = 20
    )
)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
x, y, z = np.mgrid[0:10, 0:10, 0:10]
x = x.flatten()
y = y.flatten()
z = z.flatten()
u = np.zeros_like (x)
v = np.zeros_like (y)
w = z**2
fig = make_subplots (rows=1, cols=3, specs=[[{'is_3d': True}, {'is_3d': True}, {'is_3d':True}]])
fig.add_trace (go.Streamtube (x=x, y=y, z=z, u=u, v=v, w=w), 1, 1)
fig.add_trace (go.Streamtube (x=x, y=y, z=z, u=w, v=v, w=u), 1, 2)
fig.add_trace (go.Streamtube (x=x, y=y, z=z, u=u, v=w, w=v), 1, 3)
fig.update_layout (scene_camera_eye =dict(x=2, y=2, z=2),
                  scene2_camera_eye =dict(x=2, y=2, z=2),
                  scene3_camera_eye =dict(x=2, y=2, z=2))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
    </chart>
    <chart name="3d subplots" source_file="pyvy_2x7/3d subplots in Python.pdf">
      <description>3D Surface Subplots &gt;  &gt; 3D
Subplots
3D Subplots in Python
3D Subplots in Plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d subplots in Python
 1/4
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
# Initialize figure with 4 3D subplots
fig ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
3D subplots with different colorscales
16/07/2025, 06:50 3d subplots in Python
https://plotly.com/python/3d-subplots/ 3/4
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">fig = make_subplots (
    rows=2, cols=2,
    specs=[[{'type': 'surface' }, {'type': 'surface' }],
           [{'type': 'surface' }, {'type': 'surface' }]])</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="3d surface plots" source_file="pyvy_2x7/3d surface plots in Python.pdf">
      <description>Topographical 3D Surface Plot &gt;  &gt; 3D Surface
Plots
3D Surface Plots in Python
How to make 3D-surface plots in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
Plot
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d surface plots in Python
 1/8
Passing x and y data to 3D Surface Plotimport plotly.graph_objects  as go
import pandas as pd...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Surface(
    contours  = {
        "x": {"show": True, "start": 1.5, "end": 2, "size": 0.04, "color":"white"},
        "z": {"show": True, "start": 0.5, "end": 0.8, "size": 0.05}
    },
    x = [1,2,3,4,5],
    y = [1,2,3,4,5],
    z = [
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0]
    ]))
fig.update_layout (
        scene = {
            "xaxis": {"nticks" : 20},
            "zaxis": {"nticks" : 4},
            'camera_eye' : {"x": 0, "y": -1, "z": 0.5},
            "aspectratio" : {"x": 1, "y": 1, "z": 0.2}
        })
fig.show()
00.20.40.60.81
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 5/8</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
z1 = np.array([
    [8.83,8.89,8.81,8.87,8.9,8.87],
    [8.89,8.94,8.85,8.94,8.96,8.92],
    [8.84,8.9,8.82,8.92,8.93,8.91],
    [8.79,8.85,8.79,8.9,8.94,8.92],
    [8.79,8.88,8.81,8.9,8.95,8.92],
    [8.8,8.82,8.78,8.91,8.94,8.92],
    [8.75,8.78,8.77,8.91,8.95,8.92],
    [8.8,8.8,8.77,8.91,8.95,8.94],
    [8.74,8.81,8.76,8.93,8.98,8.99],
    [8.89,8.99,8.92,9.1,9.13,9.11],
    [8.97,8.97,8.91,9.09,9.11,9.11],
    [9.04,9.08,9.05,9.25,9.28,9.27],
    [9,9.01,9,9.2,9.23,9.2],
    [8.99,8.99,8.98,9.18,9.2,9.19],
    [8.93,8.97,8.97,9.18,9.2,9.18]
])
z2 = z1 + 1
z3 = z1 - 1
fig = go.Figure(data=[
    go.Surface(z=z1),
    go.Surface(z=z2, showscale =False, opacity=0.9),
    go.Surface(z=z3, showscale =False, opacity=0.9)
])
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="3d volume plots" source_file="pyvy_2x7/3d volume plots in Python.pdf">
      <description>Simple volume plot with go.Volume &gt;  &gt; 3D Volume
Plots
3D Volume Plots in Python
How to make 3D Volume Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this
page
Sign up for early access now. 
A volume plot with go.Volume shows several partially transparent isosurfaces for volume rendering. The API of go.Volume is close to the one of go.Isosurface.
However, whereas  show all surfaces ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import numpy as np
import plotly.graph_objects  as go</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.graph_objects</library>
          <code language="python">import ndimage
vol = ndimage.gaussian_filter (vol, 4)
vol /= vol.max()
fig = go.Figure(data=go.Volume(
    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),
    value=vol.flatten(),
    isomin=0.2,
    isomax=0.7,
    opacity=0.1,
    surface_count =25,
    ))
fig.update_layout (scene_xaxis_showticklabels =False,
                  scene_yaxis_showticklabels =False,
                  scene_zaxis_showticklabels =False)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{'type': 'volume' }, {'type': 'volume' }],
           [{'type': 'volume' }, {'type': 'volume' }]])
import numpy as np</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>0.20.30.40.50.60.7
e plots16/07/2025, 06:51 3d volume plots in Python
 8/9
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
e plots16/07/2025, 06:51 3d volume plots in Python
 9/9</description>
      </customization>
    </chart>
    <chart name="Trisurf plots" source_file="pyvy_2x7/Trisurf plots in Python.pdf">
      <description>Torus &gt;  &gt; Trisurf Plots
Trisurf Plots in Python
How to make tri-surf plots in Python with Plotly. Trisurfs are formed by replacing the boundaries of a compact surface by touching triangles.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
3D Charts 
Suggest an edit to this page
Trisurf plots can be made using a  as detailed in this page.
figure factory 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:51 Trisurf plo...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 20)
v = np.linspace (0, 2*np.pi, 20)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
x = (3 + (np.cos(v)))*np.cos(u)
y = (3 + (np.cos(v)))*np.sin(u)
z = np.sin(v)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         simplices =simplices ,
                         title=dict(text="Torus"), aspectratio =dict(x=1, y=1, z=0.3))
fig.show()
−0.8−0.6−0.4−0.200.20.40.60.8Torus
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 2/5</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 24)
v = np.linspace (-1, 1, 8)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
tp = 1 + 0.5*v*np.cos(u/2.)
x = tp*np.cos(u)
y = tp*np.sin(u)
z = 0.5*v*np.sin(u/2.)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap ="Portland" ,
                         simplices =simplices ,
                         title=dict(text="Mobius Band" ))
fig.show()
−0.4−0.3−0.2−0.100.10.20.30.4Mobius Band
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 3/5</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u=np.linspace (-np.pi/2, np.pi/2, 60)
v=np.linspace (0, np.pi, 60)
u,v=np.meshgrid (u,v)
u=u.flatten()
v=v.flatten()
x = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.cos(2*u) + np.cos(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
y = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.sin(2*u) - np.sin(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
z = (3*(np.cos(v)*np.cos(v)))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
points2D  = np.vstack([u, v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap =['rgb(50, 0, 75)' , 'rgb(200, 0, 200)' , '#c8dcc8' ],
                         show_colorbar =True,
                         simplices =simplices ,
                         title=dict(text="Boy's Surface" ))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
    </chart>
    <chart name="Clustergram" source_file="pyvy_2x8/Clustergram in Python.pdf">
      <description>Default Clustergram &gt;  &gt; Clustergram
Clustergram in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv' )
dash_bio .Clustergram (
    data=df,
    column_labels =list(df.columns.values),
    row_labels =list(df.index),
    height=800,
    width=700
)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv' )
dash_bio .Clustergram (
    data=df,
    column_labels =list(df.columns.values),
    row_labels =list(df.index),
    height=800,
    width=700,
    color_list ={
        'row': ['#636EFA' , '#00CC96' , '#19D3F3' ],
        'col': ['#AB63FA' , '#EF553B' ],
        'bg': '#506784'
    },
    line_width =2
)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv' )
dash_bio .Clustergram (
    data=df,
    column_labels =list(df.columns.values),
    row_labels =list(df.index),
    height=800,
    width=700,
    display_ratio =[0.1, 0.7]
)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
app = Dash(__name__)
df = pd.read_csv('https://git.io/clustergram_brain_cancer.csv').set_index('ID_REF')
columns = list(df.columns.values)
rows = list(df.index)
app.layout = html.Div([
    "Rows to display",
    dcc.Dropdown(
        id='dropdown',
        options=[
            {'label': row, 'value': row} for row in list(df.index)
        ],
        value=rows[:10],
        multi=True
    ),
    html.Div(id='graph')
])
@ llbk(DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
A clustergram is a combination heatmap-dendrogram that is commonly used in gene expression data. The hierarchical clustering that is represented by the
dendrograms can be used to identify groups of genes with related expression levels. The Dash Bio Clustergram component is a Python-based component that uses
plotly.py to generate a figure. It takes as input a two-dimensional numpy array of floating-point values. Imputation of missing data and computation of hierarchical
clustering both occur within the component itself. Clusters that meet or exceed a user-defined threshold of similarity comprise single traces in the corresponding
dendrogram, and can be highlighted with annotations. The user can specify additional parameters to customize the metrics and methods used to compute parts of
the clustering, such as the pairwise distance between observations and the linkage matrix.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
dths16/07/2025, 06:53 Clustergram in Python
 1/6
Dendrogram Cluster Colors/Line Widthsimport pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .Clustergram ,
    row_labels =list,
    height=800,
    width=700
)
Change the colors of the dendrogram traces that are used to represent clusters, and configure their line widths.
Brain_CG_1Brain_CG_12Brain_CG_14Brain_CG_13Brain_CG_2Brain_NG_12Brain_CG_10Brain_CG_8Brain_CG_7Brain_CG_4Brain_NG_10Brain_NG_11ID_REFBrain_NG_5Brain_NG_13Brain_CG_9Brain_NG_14Brain_CG_3Brain_NG_2Brain_NG_8Brain_CG_5Brain_NG_1Brain_NG_4Brain_NG_7Brain_NG_3Brain_NG_6Brain_CG_11Brain_CG_675291204817212111926161822251527281323624141012039
020040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
 2/6
Relative Dendrogram Sizeimport pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .Clustergram ,
    row_labels =list,
    height=800,
    width=700,
    color_list ={
        'row': ['#636EFA' , '#00CC96' , '#19D3F3' ],
        'col': ['#AB63FA' , '#EF553B' ],
        'bg': '#506784'
    },
    line_width =2
)
Change the relative width and height of, respectively, the row and column dendrograms compared to the width and height of the heatmap.
Brain_CG_1Brain_CG_12Brain_CG_14Brain_CG_13Brain_CG_2Brain_NG_12Brain_CG_10Brain_CG_8Brain_CG_7Brain_CG_4Brain_NG_10Brain_NG_11ID_REFBrain_NG_5Brain_NG_13Brain_CG_9Brain_NG_14Brain_CG_3Brain_NG_2Brain_NG_8Brain_CG_5Brain_NG_1Brain_NG_4Brain_NG_7Brain_NG_3Brain_NG_6Brain_CG_11Brain_CG_675291204817212111926161822251527281323624141012039
020040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
 3/6
import pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .Clustergram ,
    row_labels =list,
    height=800,
    width=700,
    display_ratio =[0.1, 0.7]
)
Brain_CG_1Brain_CG_12Brain_CG_14Brain_CG_13Brain_CG_2Brain_NG_12Brain_CG_10Brain_CG_8Brain_CG_7Brain_CG_4Brain_NG_10Brain_NG_11ID_REFBrain_NG_5Brain_NG_13Brain_CG_9Brain_NG_14Brain_CG_3Brain_NG_2Brain_NG_8Brain_CG_5Brain_NG_1Brain_NG_4Brain_NG_7Brain_NG_3Brain_NG_6Brain_CG_11Brain_CG_675291204817212111926161822251527281323624141012039
020040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
 4/6
Clustergram with Dash

from dash import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
app = Dash
df = pd.read_csv
rows = list
app.layout = html.Div
        ],
        value=rows[:10],
        multi=True
    ),
    html.Div
])
@ llbk, you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
dths16/07/2025, 06:53 Clustergram in Python
 6/6</description>
      </customization>
    </chart>
    <chart name="Graph objects" source_file="pyvy_2x9/Graph objects in Python.pdf">
      <description>px.bar 
Graph Objects functions 
go.Bar 
The data in this example is in "long form" but  and the line-count savings from Plotly Express over
graph objects are comparable. More complex figures such as , , 
 or  require many more lines of figure-specific graph objects code, whereas switching from one
representation to another with Plotly Express usually involves changing just a few characters.
Plotly Express also accepts data in "wide form" 
sunbursts 
parallel coordinates 
facet
plots 
animations...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">imported as go) contains an 
 which represent non-leaf nodes in this figure schema. The term "graph objects" refers to instances of
these classes.
represented by tree-like data structures (/python/figure-structure/)
machine-readable form (https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json)
automatically-generated hierarchy of Python classes (https://plotly.com/python-api-
reference/plotly.graph_objects.html#graph-objects)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
df = pd.DataFrame ({
  "Fruit": ["Apples" , "Oranges" , "Bananas" , "Apples" , "Oranges" , "Bananas" ],
  "Contestant" : ["Alex", "Alex", "Alex", "Jordan" , "Jordan" , "Jordan" ],
  "Number Eaten" : [2, 1, 3, 1, 3, 2],
})</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.bar(df, x="Fruit", y="Number Eaten" , color="Contestant" , barmode="group")
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
for contestant , group in df.groupby("Contestant" ):
    fig.add_trace (go.Bar(x=group["Fruit"], y=group["Number Eaten" ], name=contestant ,
      hovertemplate ="Contestant= %s&lt;br&gt;Fruit= %%{x}&lt;br&gt;Number Eaten= %%{y}&lt;extra&gt;&lt;/extra&gt;" % contestant ))
fig.update_layout (legend_title_text  = "Contestant" )
fig.update_xaxes (title_text ="Fruit")
fig.update_yaxes (title_text ="Number Eaten" )
fig.show()
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 4/6
 Apples Oranges Bananas00.511.522.53Contestant</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
  </category>
  <category id="financial_charts" name="Gráficos Financeiros">
    <chart name="Plot csv data" source_file="pyvy_2x/Plot csv data in Python.pdf">
      <description>Plot from CSV with Plotly Express &gt;  &gt; Plot CSV Data
Plot CSV Data in Python
How to create charts from csv files with Plotly and Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import csv data from an external source (a url), and plot it using Plotly and pandas.</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import the data and look at it.
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv' )
df.head()
import pandas as pd
import plotly.express  as px
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv' )
fig = px.line(df, x = 'AAPL_x' , y = 'AAPL_y' , title='Apple Share Prices over time (2014)' )
fig.show()AAPL_xAAPL_y
02014-01-0277.445395
12014-01-0377.045575
22014-01-0674.896972
32014-01-0775.856461
42014-01-0875.091947</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
import pandas as pd
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Simple stock plot with adjustable axis'),
    html.Button("Switch Axis", n_clicks=0,
                id='button'),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("button", "n_clicks"))
def display_graph(n_clicks):
    df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv') # replace with your own data source
    if n_clicks % 2 == 0:
        x, y = 'AAPL_x', 'AAPL_y'
    else:
        x, y = 'AAPL_y', 'AAPL_x'
 fi li(df )DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import pandas as pd
import plotly.graph_objects  as go
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv' )
fig = go.Figure(go.Scatter(x = df['AAPL_x' ], y = df['AAPL_y' ],
                  name='Share Prices (in USD)' ))
fig.update_layout (title=dict(text='Apple Share Prices over time (2014)' ),
                   plot_bgcolor ='rgb(230, 230,230)' ,
                   showlegend =True)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
CSV or comma-delimited-values is a very popular format for storing structured data. In this tutorial, we will see how to plot beautiful graphs using csv data, and
Pandas. We will learn how to import csv data from an external source , and plot it using Plotly and pandas.
First we import the data and look at it.
import pandas as pd
df = pd.read_csv 
df.head
import pandas as pd
import plotly.express  as px
df = pd.read_csv 
fig = px.line' )
fig.showAAPL_xAAPL_y
02014-01-0277.445395
12014-01-0377.045575
22014-01-0674.896972
32014-01-0775.856461
42014-01-0875.091947
Mar 2014 May 2014 Jul 2014 Sep 2014 Nov 2014708090100110120Apple Share Prices over time 
AAPL_xAAPL_y
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:16 Plot csv data in Python
 1/4
Plot from CSV in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
app.layout = html.Div,
    html.Button,
    dcc.Graph,
])
@app.callback,
    Input)
def display_graph:
    df = pd.read_csvDOWNLOAD
Simple stock plot with adjustable axis
SWITCH AXIS
Mar 2014 May 2014 Jul 2014 Sep 2014 Nov 2014708090100110120
AAPL_xAAPL_y
16/07/2025, 06:16 Plot csv data in Python
 2/4
Plot from CSV with graph_objects
Referenceimport pandas as pd
import plotly.graph_objects  as go
df = pd.read_csv 
fig = go.Figure' ))
fig.update_layout ' ),
                   plot_bgcolor ='rgb' ,
                   showlegend =True)
fig.show
See  for more information about Plotly's Python API!
 Apple Share Prices over time 
16/07/2025, 06:16 Plot csv data in Python
 3/4
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:16 Plot csv data in Python
 4/4</description>
      </customization>
    </chart>
    <chart name="Horizontal and vertical lines and rectangles" source_file="pyvy_2x1/Horizontal and vertical lines and rectangles in Python.pdf">
      <description>Horizontal and Vertical Lines and Rectangles &gt;  &gt; Horizontal
and Vertical Lines and Rectangles
Horizontal and Vertical Lines and Rectangles in Python
How to add annotated horizontal and vertical lines in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
introduced in plotly 4.12
Horizontal and vertical lines and rectangles that span an entire plot can be added vi...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="petal_length" , y="petal_width" )
fig.add_hline (y=0.9)
fig.add_vrect (x0=0.9, x1=2)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="petal_length" , y="petal_width" )
fig.add_vline (x=2.5, line_width =3, line_dash ="dash", line_color ="green")
fig.add_hrect (y0=0.9, y1=2.6, line_width =0, fillcolor ="red", opacity=0.2)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Iris plot an interactive horizontal line'),
    html.P("↓↓↓ try downloading the plot ↓↓↓ ", style={"text-align": "right", "font-weight": "bold"}),
    dcc.Graph(id="graph"),
    html.P("Position of hline"),
    dcc.Slider(
        id='slider-position',
        min=1, max=7, value=2.5, step=0.1,
        marks={1: '1', 7: '7'}
    )
])
@app.callback(
    Output("graph", "figure"),
    Input("slider-position", "value"))
def display_graph(pos_x):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter(
 df "tll th" "tlidth")DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_hline (y=1, line_dash ="dot",
              annotation_text ="Jan 1, 2018 baseline" , 
              annotation_position ="bottom right" )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , 
              annotation_text ="decline" , annotation_position ="top left" ,
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_hline (y=1, line_dash ="dot",
              annotation_text ="Jan 1, 2018 baseline" , 
              annotation_position ="bottom right" ,
              annotation_font_size =20,
              annotation_font_color ="blue"
             )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , 
              annotation_text ="decline" , annotation_position ="top left" ,
              annotation =dict(font_size =20, font_family ="Times New Roman" ),
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="GDP per capita _ Gapminder" source_file="pyvy_2x10/GDP per capita _ Gapminder.pdf" />
    <chart name="Linear and non-linear trendlines" source_file="pyvy_2x3/Linear and non-linear trendlines in Python.pdf">
      <description>Linear fit trendlines with Plotly Express
Fitting multiple lines and retrieving the model parameters &gt;  &gt; Linear and Non-
Linear Trendlines
Linear and Non-Linear Trendlines in Python
Add linear Ordinary Least Squares  regression trendlines or non-linear Locally Weighted Scatterplot Smoothing  trendlines to scatterplots in Python.
Options for moving averages  as well as exponentially-weighted and expanding functions.
Plotly Studio: Transform any dataset into an interactive data application in min...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", trendline ="ols")
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_col ="smoker" , color="sex", trendline ="ols")
fig.show()
results = px.get_trendline_results (fig)
print(results)
results.query("sex == 'Male' and smoker == 'Yes'" ).px_fit_results .iloc[0].summary()
new in v5.2</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", symbol="smoker" , color="sex", trendline ="ols", trendline_scope ="overall" )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_col ="smoker" , color="sex", 
                 trendline ="ols", trendline_scope ="overall" , trendline_color_override ="black")
fig.show()
new in v5.2</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , 
                 trendline ="ols", trendline_options =dict(log_x=True),
                 title="Log-transformed fit on linear axes" )
fig.show()
import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , log_x=True, 
                 trendline ="ols", trendline_options =dict(log_x=True),
                 title="Log-scaled X axis and log-transformed fit" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="lowess" )
fig.show()
new in v5.2</code>
        </example>
      </examples>
    </chart>
    <chart name="Candlestick charts" source_file="pyvy_2x6/Candlestick charts in Python.pdf">
      <description>Simple Candlestick with Pandas
Candlestick without Rangeslider &gt;  &gt;
Candlestick Charts
Candlestick Charts in Python
How to make interactive candlestick charts in Python with Plotly. Six examples of candlestick charts with Pandas, time series, and yahoo finance data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
The  is a style of financial chart describing open, ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
from datetime  import datetime
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ])])
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (x=df['Date'],
                open=df['AAPL.Open' ], high=df['AAPL.High' ],
                low=df['AAPL.Low' ], close=df['AAPL.Close' ])
                     ])
fig.update_layout (xaxis_rangeslider_visible =False)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Apple stock candlestick chart'),
    dcc.Checklist(
        id='toggle-rangeslider',
        options=[{'label': 'Include Rangeslider',
                  'value': 'slider'}],
        value=['slider']
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("toggle-rangeslider", "value"))
def display_candlestick(value):
    df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv') # replace with your own data source
    fig = go.Figure(go.Candlestick(
 df['Dt']DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (x=df['Date'],
                open=df['AAPL.Open' ], high=df['AAPL.High' ],
                low=df['AAPL.Low' ], close=df['AAPL.Close' ])
                      ])
fig.update_layout (
    title=dict(text='The Great Recession' ),
    yaxis=dict(
      title=dict(
        text='AAPL Stock'
        )
    ),
    shapes = [dict(
        x0='2016-12-09' , x1='2016-12-09' , y0=0, y1=1, xref='x', yref='paper',
        line_width =2)],
    annotations =[dict(
        x='2016-12-09' , y=0.05, xref='x', yref='paper',
        showarrow =False, xanchor='left', text='Increase Period Begins' )]
)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (
    x=df['Date'],
    open=df['AAPL.Open' ], high=df['AAPL.High' ],
    low=df['AAPL.Low' ], close=df['AAPL.Close' ],
    increasing_line_color = 'cyan', decreasing_line_color = 'gray'
)])
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Financial charts" source_file="pyvy_2x6/Financial charts in Python.pdf" />
    <chart name="Funnel chart" source_file="pyvy_2x6/Funnel chart in Python.pdf">
      <description>Introduction
Basic Funnel Plot with plotly.express &gt;  &gt;
Funnel Chart
Funnel Chart in Python
How to make funnel-chart plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
Funnel charts are often used to represent data in different stages of a business process. It’s an important mechanism in Business Intelligence to identify potential
problem ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">important mechanism in Business Intelligence to identify potential
problem areas of a process. For example, it’s used to observe the revenue or loss in a sales process for each stage, and displays values that are decreasing
progressively. Each stage is illustrated as a percentage of the total of all values.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
data = dict(
    number=[39, 27.4, 20.6, 11, 2],
    stage=["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ])
fig = px.funnel(data, x='number' , y='stage')
fig.show()
39
27.4
20.6
11
2 invoice sentRequested pricePotential customersDownloadsWebsite visitstage
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 1/10</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import pandas as pd
stages = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ]
df_mtl = pd.DataFrame (dict(number=[39, 27.4, 20.6, 11, 3], stage=stages))
df_mtl['office' ] = 'Montreal'
df_toronto  = pd.DataFrame (dict(number=[52, 36, 18, 14, 5], stage=stages))
df_toronto ['office' ] = 'Toronto'
df = pd.concat([df_mtl, df_toronto ], axis=0)
fig = px.funnel(df, x='number' , y='stage', color='office' )
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import graph_objects  as go
fig = go.Figure(go.Funnel(
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ],
    x = [39, 27.4, 20.6, 11, 2]))
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import graph_objects  as go
fig = go.Figure(go.Funnel(
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "Finalized" ],
    x = [39, 27.4, 20.6, 11, 2],
    textposition  = "inside" ,
    textinfo  = "value+percent initial" ,
    opacity = 0.65, marker = {"color": ["deepskyblue" , "lightsalmon" , "tan", "teal", "silver" ],
    "line": {"width": [4, 2, 2, 3, 1, 1], "color": ["wheat", "wheat", "blue", "wheat", "wheat"]}},
    connector  = {"line": {"color": "royalblue" , "dash": "dot", "width": 3}})
    )
fig.show()
39
100%
27.4
70%
20.6
53%
11
28%
2
5%</code>
        </example>
      </examples>
    </chart>
    <chart name="Gauge charts" source_file="pyvy_2x6/Gauge charts in Python.pdf">
      <description>Basic Gauge
Add Steps, Threshold, and Delta &gt;  &gt;
Gauge Charts
Gauge Charts in Python
How to make gauge meter charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
A radial gauge chart has a circular arc, which displays a single value to estimate progress toward a goal. The bar shows the target value, and the shading represents
the progress t...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "gauge+number" ,
    value = 270,
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Speed"}))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    domain = {'x': [0, 1], 'y': [0, 1]},
    value = 450,
    mode = "gauge+number+delta" ,
    title = {'text': "Speed"},
    delta = {'reference' : 380},
    gauge = {'axis': {'range': [None, 500]},
             'steps' : [
                 {'range': [0, 250], 'color': "lightgray" },
                 {'range': [250, 400], 'color': "gray"}],
             'threshold'  : {'line': {'color': "red", 'width': 4}, 'thickness' : 0.75, 'value': 490}}))
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "gauge+number+delta" ,
    value = 420,
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Speed", 'font': {'size': 24}},
    delta = {'reference' : 400, 'increasing' : {'color': "RebeccaPurple" }},
    gauge = {
        'axis': {'range': [None, 500], 'tickwidth' : 1, 'tickcolor' : "darkblue" },
        'bar': {'color': "darkblue" },
        'bgcolor' : "white",
        'borderwidth' : 2,
        'bordercolor' : "gray",
        'steps': [
            {'range': [0, 250], 'color': 'cyan'},
            {'range': [250, 400], 'color': 'royalblue' }],
        'threshold' : {
            'line': {'color': "red", 'width': 4},
            'thickness' : 0.75,
            'value': 490}}))
fig.update_layout (paper_bgcolor  = "lavender" , font = {'color': "darkblue" , 'family' : "Arial"})
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
    </chart>
    <chart name="Ohlc charts" source_file="pyvy_2x6/Ohlc charts in Python.pdf">
      <description>Simple OHLC Chart with Pandas
OHLC Chart without Rangeslider &gt;  &gt; OHLC
Charts
OHLC Charts in Python
How to make interactive OHLC charts in Python with Plotly. Six examples of OHLC charts with Pandas, time series, and yahoo finance data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
The  chart  is a style of financial chart describing open, high, low and
close val...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                    open=df['AAPL.Open' ],
                    high=df['AAPL.High' ],
                    low=df['AAPL.Low' ],
                    close=df['AAPL.Close' ]))
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ]))
fig.update(layout_xaxis_rangeslider_visible =False)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ]))
fig.update_layout (
    title=dict(text='The Great Recession' ),
    yaxis=dict(title=dict(text='AAPL Stock' )),
    shapes = [dict(
        x0='2016-12-09' , x1='2016-12-09' , y0=0, y1=1, xref='x', yref='paper',
        line_width =2)],
    annotations =[dict(
        x='2016-12-09' , y=0.05, xref='x', yref='paper',
        showarrow =False, xanchor='left', text='Increase Period Begins' )]
)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Ohlc(
    x=df['Date'],
    open=df['AAPL.Open' ], high=df['AAPL.High' ],
    low=df['AAPL.Low' ], close=df['AAPL.Close' ],
    increasing_line_color = 'cyan', decreasing_line_color = 'gray'
)])
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from datetime  import datetime
open_data  = [33.0, 33.3, 33.5, 33.0, 34.1]
high_data  = [33.1, 33.3, 33.6, 33.2, 34.8]
low_data  = [32.7, 32.7, 32.8, 32.6, 32.8]
close_data  = [33.0, 32.9, 33.3, 33.1, 33.1]
dates = [datetime (year=2013, month=10, day=10),
         datetime (year=2013, month=11, day=10),
         datetime (year=2013, month=12, day=10),
         datetime (year=2014, month=1, day=10),
         datetime (year=2014, month=2, day=10)]
fig = go.Figure(data=[go.Ohlc(x=dates,
                          open=open_data , high=high_data ,
                          low=low_data , close=close_data )])
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Waterfall charts" source_file="pyvy_2x6/Waterfall charts in Python.pdf">
      <description>Simple Waterfall Chart
Multi Category Waterfall Chart &gt;  &gt;
Waterfall Charts
Waterfall Charts in Python
How to make waterfall plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Financial Charts 
Suggest an edit to this
page
Sign up for early access now. 
import plotly.graph_objects  as go
fig = go.Figure" }},
))
fig.update_layout 
fig.show
This example uses the , which sets a gap between bars.
waterfallgroupgap attri...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Waterfall (
    name = "20", orientation  = "v",
    measure = ["relative" , "relative" , "total", "relative" , "relative" , "total"],
    x = ["Sales", "Consulting" , "Net revenue" , "Purchases" , "Other expenses" , "Profit before tax" ],
    textposition  = "outside" ,
    text = ["+60", "+80", "", "-40", "-20", "Total"],
    y = [60, 80, 0, -40, -20, 0],
    connector  = {"line":{"color":"rgb(63, 63, 63)" }},
))
fig.update_layout (
        title = "Profit and loss statement 2018" ,
        showlegend  = True
)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Waterfall (
    x = [["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial" , "q1", "q2", "q3", "total", "q1", "q2", "q3", "total"]],
    measure = ["absolute" , "relative" , "relative" , "relative" , "total", "relative" , "relative" , "relative" , "total"],
    y = [1, 2, 3, -1, None, 1, 2, -4, None],
    base = 1000
))
fig.add_trace (go.Waterfall (
    x = [["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial" , "q1", "q2", "q3", "total", "q1", "q2", "q3", "total"]],
    measure = ["absolute" , "relative" , "relative" , "relative" , "total", "relative" , "relative" , "relative" , "total"],
    y = [1.1, 2.2, 3.3, -1.1, None, 1.1, 2.2, -4.4, None],
    base = 1000
))
fig.update_layout (
    waterfallgroupgap  = 0.5,
)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Waterfall (
    x = [["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
       ["initial" , "q1", "q2", "q3", "total", "q1", "q2", "q3", "total"]],
    measure = ["absolute" , "relative" , "relative" , "relative" , "total", "relative" , "relative" , "relative" , "total"],
    y = [10, 20, 30, -10, None, 10, 20, -40, None], base = 300,
    decreasing  = {"marker" :{"color":"Maroon" , "line":{"color":"red", "width":2}}},
    increasing  = {"marker" :{"color":"Teal"}},
    totals = {"marker" :{"color":"deep sky blue" , "line":{"color":"blue", "width":3}}}
))
fig.update_layout (title = "Profit and loss statement" , waterfallgap  = 0.3)
fig.show()
initial q1 q2 q3 total q1 q2 q3 total
2016 2017 2018300310320330340350360370380Profit and loss statement
16/07/2025, 06:47 Waterfall charts in Python
https://plotly.com/python/waterfall-charts/ 3/5</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Waterfall (
    name = "2018", orientation  = "h", measure = ["relative" , "relative" , "relative" , "relative" , "total", "relative" ,
                                              "relative" , "relative" , "relative" , "total", "relative" , "relative" , "total", "relative" , "total"],
    y = ["Sales", "Consulting" , "Maintenance" , "Other revenue" , "Net revenue" , "Purchases" , "Material expenses" ,
       "Personnel expenses" , "Other expenses" , "Operating profit" , "Investment income" , "Financial income" ,
       "Profit before tax" , "Income tax (15%)" , "Profit after tax" ],
    x = [375, 128, 78, 27, None, -327, -12, -78, -12, None, 32, 89, None, -45, None],
    connector  = {"mode":"between" , "line":{"width":4, "color":"rgb(0, 0, 0)" , "dash":"solid"}}
))
fig.update_layout (title = "Profit and loss statement 2018" )
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
  </category>
  <category id="maps" name="Mapas e Visualizações Geográficas">
    <chart name="Sunburst traces" source_file="Sunburst traces in Python.pdf" />
    <chart name="Introspecting figures" source_file="pyvy_2x1/Introspecting figures in Python.pdf">
      <description>The Figure Lifecycle
Introspecting Plotly Express Figures &gt;  &gt;
Introspecting Figures
Introspecting Figures in Python
How to dig into and learn more about the figure data structure.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
As explained in the , when building a figure object with Plotly.py, it is not necessary to populate every
possible attribute. At render-time, ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.scatter(x=[10, 20], y=[20, 10], height=400, width=400)
fig.show()
print(fig)</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scatter(
        mode="markers+text" ,
        x=[10,20],
        y=[20, 10],
        text=["Point A" , "Point B" ]
    )],
    layout=dict(height=400, width=400, template ="none")
)
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scattergeo (
        mode="markers+text" ,
        lat=[10, 20],
        lon=[20, 10],
        text=["Point A" , "Point B" ]
    )],
    layout=dict(height=400, width=400,
                margin=dict(l=0,r=0,b=0,t=0),
                template ="none")
)
fig.show()
full_fig  = fig.full_figure_for_development ()
print(full_fig )</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/io/_kaleido.py:747: UserWarning:
full_figure_for_development is not recommended or necessary for production use in most circumstances.</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>static image export 
By way of example, here is an extremely simple figure created with   where we have disabled the default template for maximum readability. Note how in this figure the text labels on the
markers are clipped, and sit on top of the markers.
Graph Objects 
Plotly Express
10 15 20101214161820
xy
Figure
aults16/07/2025, 06:10 Introspecting figures in Python
 2/8
import plotly.graph_objects  as go
fig = go.Figure],
    layout=dict
)
fig.show
Let's print this figure to see the very small JSON object that is passed to Plotly.js as input:
print
Now let's look at the "full" figure after Plotly.js has computed the default values for every necessary attribute.
Heads-up: the full figure is quite long and intimidating, and this page is meant to help demystify things so please read on!
Please also note that the .full_figure_for_development function is really meant for interactive learning and debugging, rather than production use, hence its name
and the warning it produces by default, which you can see below, and which can be suppressed with warn=False.Point A
Point B
10 15 20101214161820
Figure
aults16/07/2025, 06:10 Introspecting figures in Python
 3/8
Learning About Attributesfull_fig  = fig.full_figure_for_development 
print
As you can see, Plotly.js does a lot of work filling things in for us! Let's look at the examples described at the top of the page of static and dynamic defaults. If we look
just at layout.font and layout.xaxis.range we can see that the static default font size is 12 and that the dynamic default range is computed to be a bit beyond the data
range which was 10-20:
print
print
What else can we use this full_fig for? Let's start by looking at the first entry of the data
print
We see that this is an instance of go.Scatter  and that it has an attribute we've maybe never heard of called cliponaxis which by default
seems to be set to True in this case. Let's find out more about this attribute using the built-in Python help function/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/io/_kaleido.py:747: UserWarning:
full_figure_for_development is not recommended or necessary for production use in most circumstances. 
To suppress this warning, set warn=False
Figure
Scatter
Aha! This explains why in our original figure above, the text was cut off by the edge of the plotting area! Let's try forcing that to False, and let's also use the attribute
textposition which we see in the full figure is by default set to "middle center" to get our text off of our markers:
fig.update_traces 
fig.show
We can use this technique  to learn more about the range of possibilities that the figure schema makes available. We can drill down into layout attributes also:
helpHelp on property:
Determines whether or not markers and text nodes are clipped
about the subplot axes. To show markers and text nodes above
axis lines and tick labels, make sure to set `xaxis.layer` and
`yaxis.layer` to *below traces*.
The 'cliponaxis' property must be specified as a bool</description>
      </customization>
    </chart>
    <chart name="Multiple axes" source_file="pyvy_2x1/Multiple axes in Python.pdf">
      <description>Multiple Y Axes and Plotly Express
Two Y Axes &gt;  &gt;
Multiple Axes
Multiple Axes in Python
How to make a graph with multiple axes  in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of types of data 
easy-to-style figures 
Note: At this time, Plotly Ex...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import Dash, dcc, html, Input, Output
from plotly.subplots import make_subplots
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive data-scaling using the secondary axis'),
    html.P("Select red line's Y-axis:"),
    dcc.RadioItems(
        id='radio',
        options=['Primary', 'Secondary'],
        value='Secondary'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("radio", "value"))
def display_(radio_value):
    # Create figure with secondary y-axis
 fi k blt( [[{" d "T }]])DOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2,
                    specs=[[{"secondary_y" : True}, {"secondary_y" : True}],
                           [{"secondary_y" : True}, {"secondary_y" : True}]])</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6],
    name="yaxis1 data"
))
fig.add_trace (go.Scatter(
    x=[2, 3, 4],
    y=[40, 50, 60],
    name="yaxis2 data" ,
    yaxis="y2"
))
fig.add_trace (go.Scatter(
    x=[4, 5, 6],
    y=[40000, 50000, 60000],
    name="yaxis3 data" ,
    yaxis="y3"
))
fig.add_trace (go.Scatter(
    x=[5, 6, 7],
    y=[400000, 500000, 600000],
    name="yaxis4 data" ,
    yaxis="y4"
))</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6], name="yaxis data" ))
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[40, 50, 60], name="yaxis2 data" , yaxis="y2"))
fig.add_trace (
    go.Scatter(x=[4, 5, 6], y=[1000, 2000, 3000], name="yaxis3 data" , yaxis="y3")
)
fig.add_trace (
    go.Scatter(x=[3, 4, 5], y=[400, 500, 600], name="yaxis4 data" , yaxis="y4")
)
fig.update_layout (
    xaxis=dict(
        domain=[0.25, 0.75]
    ),
    yaxis=dict(
        title=dict(
            text="yaxis title"
        )
    ),
    yaxis2=dict(
        title=dict(
            text="yaxis2 title"
        ),
        overlaying ="y",
        side="right"
    ),
    yaxis3=dict(
        title=dict(
            text="yaxis3 title"
        ),
        anchor="free",
        overlaying ="y",
        autoshift =True
    ),
    yaxis4=dict(
        title=dict(
            text="yaxis4 title"
        ),
        anchor="free",
        overlaying ="y",
        autoshift =True
    ),
)
fig.update_layout (
    title_text ="Shifting y-axes with autoshift" ,
)
fig.show()</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
Pixels16/07/2025, 06:06 Multiple axes in Python
 13/13</description>
      </customization>
    </chart>
    <chart name="Static image generation changes in plotly.py 6.1" source_file="pyvy_2x1/Static image generation changes in plotly.py 6.1 in Python.pdf">
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.defaults .default_format  = "jpeg"</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Parallel categories diagram" source_file="pyvy_2x3/Parallel categories diagram in Python.pdf">
      <description>Parallel Categories Diagram
Basic Parallel Category Diagram with plotly.express &gt;  &gt;
Parallel Categories Diagram
Parallel Categories Diagram in Python
How to make parallel categories diagrams in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to
this page
Sign up for early access now. 
The parallel categories diagram  is a visualization of multi-dimensional categorical data sets. Each v...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.parallel_categories (df)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.parallel_categories (df, dimensions =['sex', 'smoker' , 'day'],
                color="size", color_continuous_scale =px.colors.sequential .Inferno,
                labels={'sex':'Payer sex' , 'smoker' :'Smokers at the table' , 'day':'Day of week' })
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Parcats(
    dimensions =[
        {'label': 'Hair',
         'values' : ['Black', 'Black', 'Black', 'Brown', 'Brown', 'Brown', 'Red', 'Brown']},
        {'label': 'Eye',
         'values' : ['Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Blue', 'Blue', 'Blue']},
        {'label': 'Sex',
         'values' : ['Female' , 'Female' , 'Female' , 'Male', 'Female' , 'Male', 'Male', 'Male']}]
))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Parcats(
    dimensions =[
        {'label': 'Hair',
         'values' : ['Black', 'Brown', 'Brown', 'Brown', 'Red']},
        {'label': 'Eye',
         'values' : ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},
        {'label': 'Sex',
         'values' : ['Female' , 'Male', 'Female' , 'Male', 'Male']}],
    counts=[6, 10, 40, 23, 7]
))
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
titanic_df  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv" )</code>
        </example>
      </examples>
    </chart>
    <chart name="Tree-plots" source_file="pyvy_2x3/Tree-plots in Python.pdf">
      <description>Set Up Tree with 
Create Plotly Traces &gt;  &gt;
Tree-plots
Tree-plots in Python
How to make interactive tree-plot in Python with Plotly. An examples of a tree-plot in Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Statistical Charts 
Suggest an edit to this
page
Sign up for early access now. 
igraph ))
G = Graph.Tree # 2 stands for children number
lay = G.layout
position  = {k: lay[k] for k in range}
Y = [lay[k][1] for k in range]
M = m...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import igraph
from igraph import Graph, EdgeSeq
nr_vertices  = 25
v_label = list(map(str, range(nr_vertices )))</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=Xe,
                   y=Ye,
                   mode='lines',
                   line=dict(color='rgb(210,210,210)' , width=1),
                   hoverinfo ='none'
                   ))
fig.add_trace (go.Scatter(x=Xn,
                  y=Yn,
                  mode='markers' ,
                  name='bla',
                  marker=dict(symbol='circle-dot' ,
                                size=18,
                                color='#6175c1' ,    #'#DB4551',
                                line=dict(color='rgb(50,50,50)' , width=1)
                                ),
                  text=labels,
                  hoverinfo ='text',
                  opacity=0.8
                  ))
def make_annotations (pos, text, font_size =10, font_color ='rgb(250,250,250)' ):
    L=len(pos)
    if len(text)!=L:
        raise ValueError ('The lists pos and text must have the same len' )
    annotations  = []
    for k in range(L):
        annotations .append(
            dict(
                text=labels[k], # or replace labels with a different list for the text within the circle
                x=pos[k][0], y=2*M-position [k][1],
                xref='x1', yref='y1',
                font=dict(color=font_color , size=font_size ),
                showarrow =False)
        )
    return annotations
−6 −4 −2 0 25678910trace 0
bla
notations
the16/07/2025, 06:32 Tree-plots in Python
https://plotly.com/python/tree-plots/ 2/4</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure()
fig.add_trace (go.Scatter(x=Xe,
                   y=Ye,
                   mode='lines',
                   line=dict(color='rgb(210,210,210)' , width=1),
                   hoverinfo ='none'
                   ))
fig.add_trace (go.Scatter(x=Xn,
                  y=Yn,
                  mode='markers' ,
                  name='bla',
                  marker=dict(symbol='circle-dot' ,
                                size=18,
                                color='#6175c1' ,    #'#DB4551',
                                line=dict(color='rgb(50,50,50)' , width=1)
                                ),
                  text=labels,
                  hoverinfo ='text',
                  opacity=0.8
                  ))
def make_annotations (pos, text, font_size =10, font_color ='rgb(250,250,250)' ):
    L=len(pos)
    if len(text)!=L:
        raise ValueError ('The lists pos and text must have the same len' )
    annotations  = []
    for k in range(L):
        annotations .append(
            dict(
                text=labels[k], # or replace labels with a different list for the text within the circle
                x=pos[k][0], y=2*M-position [k][1],
                xref='x1', yref='y1',
                font=dict(color=font_color , size=font_size ),
                showarrow =False)
        )
    return annotations
−6 −4 −2 0 25678910trace 0
bla
notations
the16/07/2025, 06:32 Tree-plots in Python
https://plotly.com/python/tree-plots/ 2/4</code>
        </example>
      </examples>
    </chart>
    <chart name="Bubble maps" source_file="pyvy_2x4/Bubble maps in Python.pdf">
      <description>Base Map Configuration
Bubble map with Plotly Express &gt;  &gt; Bubble Maps
Bubble Maps in Python
How to make bubble maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this page
Plotly figures made with px.scatter_geo, px.line_geo or px.choropleth functions or containing go.Choropleth or go.Scattergeo
 have a go.layout.Geo object which can be used to  onto
which data is plotted.
Plotly Express 
gr...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.scatter_geo (df, locations ="iso_alpha" , color="continent" ,
                     hover_name ="country" , size="pop",
                     projection ="natural earth" )
fig.show()
continent</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter_geo (df, locations ="iso_alpha" , color="continent" ,
                     hover_name ="country" , size="pop",
                     animation_frame ="year",
                     projection ="natural earth" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv' )
df.head()
df['text'] = df['name'] + '&lt;br&gt;Population '  + (df['pop']/1e6).astype(str)+' million'
limits = [(0,3),(3,11),(11,21),(21,50),(50,3000)]
colors = ["royalblue" ,"crimson" ,"lightseagreen" ,"orange" ,"lightgrey" ]
cities = []
scale = 5000
fig = go.Figure()
for i in range(len(limits)):
    lim = limits[i]
    df_sub = df[lim[0]:lim[1]]
    fig.add_trace (go.Scattergeo (
        locationmode  = 'USA-states' ,
        lon = df_sub['lon'],
        lat = df_sub['lat'],
        text = df_sub['text'],
        marker = dict(
            size = df_sub['pop']/scale,
            color = colors[i],
            line_color ='rgb(40,40,40)' ,
            line_width =0.5,
            sizemode  = 'area'
        ),
        name = '{0} - {1}'.format(lim[0],lim[1])))
fig.update_layout (
        title_text  = '2014 US city populations&lt;br&gt;(Click legend to toggle traces)' ,
        showlegend  = True,
        geo = dict(
            scope = 'usa',
            landcolor  = 'rgb(217, 217, 217)' ,
        )
    )
fig.show()
0 - 3
3 - 11
11 - 21
21 - 50
50 - 3000
2014 US city populations
(Click legend to toggle traces)
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 3/6
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv' )
df.head()
colors = ['rgb(239,243,255)' ,'rgb(189,215,231)' ,'rgb(107,174,214)' ,'rgb(33,113,181)' ]
months = {6:'June',7:'July',8:'Aug',9:'Sept'}
fig = go.Figure()
for i in range(6,10)[::-1]:
    df_month  = df.query('Month == %d' %i)
    fig.add_trace (go.Scattergeo (
            lon = df_month ['Lon'],
            lat = df_month ['Lat'],
            text = df_month ['Value'],
            name = months[i],
            marker = dict(
                size = df_month ['Value']/50,
                color = colors[i-6],
                line_width  = 0
            )))
df_sept = df.query('Month == 9' )
fig['data'][0].update(mode='markers+text' , textposition ='bottom center' ,
                      text=df_sept['Value'].map('{:.0f}'.format).astype(str)+' '+\
                      df_sept['Country' ])</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
1022 Guinea
3362 Liberia1940 Sierra Leone</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>16/07/2025, 06:36 Bubble maps in Python
 3/6
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv 
df.head
colors = ['rgb' ,'rgb' ,'rgb' ,'rgb' ]
months = {6:'June',7:'July',8:'Aug',9:'Sept'}
fig = go.Figure
for i in range[::-1]:
    df_month  = df.query
    fig.add_trace ))
df_sept = df.query
fig['data'][0].update.astype+' '+\
                      df_sept['Country' ])
# Inset
fig.add_trace ' ],[1,'rgb' ]],
        autocolorscale  = False,
        showscale  = False,
        geo = 'geo2'
    ))
fig.add_trace )
fig.update_layout ,
    geo = go.layout.Geo" ,
        countrycolor  = "white" ,
        coastlinecolor  = "white",
        projection_type  = 'mercator' ,
        lonaxis_range = [ -15.0, -5.0 ],
        lataxis_range = [ 0.0, 12.0 ],
        domain = dict
    ),
    geo2 = go.layout.Geo" ,
        showcountries  = False,
        domain = dict,
        bgcolor = 'rgba' ,
    ),
    legend_traceorder  = 'reversed'
)
16/07/2025, 06:36 Bubble maps in Python
 4/6
Reference
What About Dash?fig.show
See  or
 and 
 for more information and chart attribute options!
function reference for px. , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
1022 Guinea
3362 Liberia1940 Sierra Leone
AfricaJune
July
Aug
Sept
Ebola cases reported by month in West Africa 2014
 Source: 
HDX
16/07/2025, 06:36 Bubble maps in Python
 5/6
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:36 Bubble maps in Python
 6/6</description>
      </customization>
    </chart>
    <chart name="Filled area on tile maps" source_file="pyvy_2x4/Filled area on tile maps in Python.pdf">
      <description>Using a  trace and setting the fill attribute to 'toself'
Using a map layout  and adding a GeoJSON layer
Using the  trace type
Filled Scattermap Trace &gt;  &gt; Filled Area on Tile
Maps
Filled Area on Tile Maps in Python
How to make an area on tile-based maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
There are three different ways to show a filled area ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    fill = "toself" ,
    lon = [-74, -70, -70, -74], lat = [47, 47, 45, 45],
    marker = { 'size': 10, 'color': "orange"  }))
fig.update_layout (
    map = {
        'style': "open-street-map" ,
        'center' : {'lon': -73, 'lat': 46 },
        'zoom': 5},
    showlegend  = False)
fig.show()
©  contributors</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "lines", fill = "toself" ,
    lon = [-10, -10, 8, 8, -10, None, 30, 30, 50, 50, 30, None, 100, 100, 80, 80, 100],
    lat = [30, 6, 6, 30, 30,    None, 20, 30, 30, 20, 20, None, 40, 50, 50, 40, 40]))
fig.update_layout (
    map = {'style': "open-street-map" , 'center' : {'lon': 30, 'lat': 30}, 'zoom': 2},
    showlegend  = False,
    margin = {'l':0, 'r':0, 'b':0, 't':0})
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers" ,
    lon = [-73.605], lat = [45.51],
    marker = {'size': 20, 'color': ["cyan"]}))
fig.update_layout (
    map = {
        'style': "open-street-map" ,
        'center' : { 'lon': -73.6, 'lat': 45.5},
        'zoom': 12, 'layers' : [{
            'source' : {
                'type': "FeatureCollection" ,
                'features' : [{
                    'type': "Feature" ,
                    'geometry' : {
                        'type': "MultiPolygon" ,
                        'coordinates' : [[[
                            [-73.606352888 , 45.507489991 ], [-73.606133883 , 45.50687600 ],
                            [-73.605905904 , 45.506773980 ], [-73.603533905 , 45.505698946 ],
                            [-73.602475870 , 45.506856969 ], [-73.600031904 , 45.505696003 ],
                            [-73.599379992 , 45.505389066 ], [-73.599119902 , 45.505632008 ],
                            [-73.598896977 , 45.505514039 ], [-73.598783894 , 45.505617001 ],
                            [-73.591308727 , 45.516246185 ], [-73.591380782 , 45.516280145 ],
                            [-73.596778656 , 45.518690062 ], [-73.602796770 , 45.521348046 ],
                            [-73.612239983 , 45.525564037 ], [-73.612422919 , 45.525642061 ],
                            [-73.617229085 , 45.527751983 ], [-73.617279234 , 45.527774160 ],
                            [-73.617304713 , 45.527741334 ], [-73.617492052 , 45.527498362 ],
                            [-73.617533258 , 45.527512253 ], [-73.618074188 , 45.526759105 ],
                            [-73.618271651 , 45.526500673 ], [-73.618446320 , 45.526287943 ],
                            [-73.618968507 , 45.525698560 ], [-73.619388002 , 45.525216750 ],
                            [-73.619532966 , 45.525064183 ], [-73.619686662 , 45.524889290 ],
                            [-73.619787038 , 45.524770086 ], [-73.619925742 , 45.524584939 ],
                            [-73.619954486 , 45.524557690 ], [-73.620122362 , 45.524377961 ],
                            [-73.620201713 , 45.524298907 ], [-73.620775593 , 45.523650879 ]
                        ]]]
                    }
                }]
            },
            'type': "fill", 'below': "traces" , 'color': "royalblue" }]},
    margin = {'l':0, 'r':0, 'b':0, 't':0})
fig.show()
map16/07/2025, 06:36 Filled area on tile maps in Python
https://plotly.com/python/filled-area-tile-maps/ 3/5</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermapbox (
    fill = "toself" ,
    lon = [-74, -70, -70, -74], lat = [47, 47, 45, 45],
    marker = { 'size': 10, 'color': "orange"  }))
fig.update_layout (
    mapbox = {
        'style': "open-street-map" ,
        'center' : {'lon': -73, 'lat': 46 },
        'zoom': 5},
    showlegend  = False)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Lines on tile maps" source_file="pyvy_2x4/Lines on tile maps in Python.pdf">
      <description>Lines on tile maps using Plotly Express
Lines on maps from GeoPandas &gt;  &gt; Lines on Tile
Maps
Lines on Tile Maps in Python
How to draw a line on tile-based maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this
page
Sign up for early access now. 
To draw a line on a map, you either can use px.line_map in Plotly Express, or go.Scattermap in Plotly Graph Objects. Here's an example of drawing a ...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
us_cities  = us_cities .query("State in ['New York', 'Ohio']" )
import plotly.express  as px
fig = px.line_map (us_cities , lat="lat", lon="lon", color="State", zoom=3, height=300)
fig.update_layout (map_style ="open-street-map" , map_zoom =4, map_center_lat  = 41,
    margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
import geopandas  as gpd
import shapely.geometry
import numpy as np
import wget</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers+lines" ,
    lon = [10, 20, 30],
    lat = [10, 20,30],
    marker = {'size': 10}))
fig.add_trace (go.Scattermap (
    mode = "markers+lines" ,
    lon = [-50, -60,40],
    lat = [30, 10, -20],
    marker = {'size': 10}))
fig.update_layout (
    margin ={'l':0,'t':0,'b':0,'r':0},
    map = {
        'center' : {'lon': 10, 'lat': 10},
        'style': "open-street-map" ,
        'center' : {'lon': -20, 'lat': -20},
        'zoom': 1})
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scattermapbox (
    mode = "markers+lines" ,
    lon = [10, 20, 30],
    lat = [10, 20,30],
    marker = {'size': 10}))
fig.add_trace (go.Scattermapbox (
    mode = "markers+lines" ,
    lon = [-50, -60,40],
    lat = [30, 10, -20],
    marker = {'size': 10}))
fig.update_layout (
    margin ={'l':0,'t':0,'b':0,'r':0},
    mapbox = {
        'center' : {'lon': 10, 'lat': 10},
        'style': "open-street-map" ,
        'center' : {'lon': -20, 'lat': -20},
        'zoom': 1})
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Maplibre migration" source_file="pyvy_2x4/Maplibre migration in Python.pdf">
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.express</library>
          <code language="python">px.scatter_map
px.line_map
px.choropleth_map
px.density_map
go.Choroplethmap
go.Scattermap
go.Densitymap
1. Change trace names from *mapbox to *map. For any existing trace name ending in *mapbox, ensure you've removed the "box" suffix.
2. If in use, update layout.mapbox argument in your layout configuration to layout.map. The nested properties are identical in the new map traces, so no other
changes should be required.
3. If in use, update mapbox_style to map_style.
4. Verify your map_style settings. With mapbox traces, we bundle basic, streets, outdoors, light, dark, satellite, and satellite-streets styles, using Mapbox styling.</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">px.scatter_mapbox, px.line_mapbox, etc., but use  as the map renderer rather than</code>
        </example>
      </examples>
    </chart>
    <chart name="Tile choropleth maps" source_file="pyvy_2x4/Tile choropleth maps in Python.pdf">
      <description>Introduction: main parameters for choropleth tile maps
1. GeoJSON-formatted geometry information where each feature has either an id field or some identifying value in properties.
2. A list of values indexed by feature identifier.
GeoJSON with feature.id &gt;  &gt; Tile Choropleth
Maps
Tile Choropleth Maps in Python
How to make tile choropleth maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Maps 
Suggest an edit to this...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
counties ["features" ][0]
{'type': 'Feature',
'properties': {'GEO_ID': '0500000US01001',
'STATE': '01',
'COUNTY': '001',
'NAME': 'Autauga',
'LSAD': 'County',
'CENSUSAREA': 594.436},
'geometry': {'type': 'Polygon',
'coordinates': [[[-86.496774, 32.344437],
[-86.717897, 32.402814],
[-86.814912, 32.340803],
[-86.890581, 32.502974],
[-86.917595, 32.664169],
[-86.71339, 32.661732],
[-86.714219, 32.705694],
[-86.413116, 32.707386],
[-86.411172, 32.409937],
[-86.496774, 32.344437]]]},
'id': '01001'}
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 1/10</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
df.head()
 is the easy-to-use, high-level interface to Plotly, which  and
produces .</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.express  as px
fig = px.choropleth_map (df, geojson=counties , locations ='fips', color='unemp',
                           color_continuous_scale ="Viridis" ,
                           range_color =(0, 12),
                           map_style ="carto-positron" ,
                           zoom=3, center = {"lat": 37.0902, "lon": -95.7129},
                           opacity=0.5,
                           labels={'unemp':'unemployment rate' }
                          )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Polotical candidate voting pool analysis'),
    html.P("Select a candidate:"),
    dcc.RadioItems(
        id='candidate',
        options=["Joly", "Coderre", "Bergeron"],
        value="Coderre",
        inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("candidate", "value"))
def display_choropleth(candidate):
    df = px.data.election() # replace with your own data source
    geojson = px.data.election_geojson()DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
print(df["district" ][2])
print(geojson["features" ][0]["properties" ])</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>, you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
 10/10</description>
      </customization>
    </chart>
    <chart name="Tile map layers" source_file="pyvy_2x4/Tile map layers in Python.pdf">
      <description>, you'll need to register for a
Stadia Maps account and token.
Stadia Maps service 
import plotly.express  as px
fig = px.scatter_mapbox 
fig.update_layout 
fig.update_layout 
fig.show
If you have access to your own private tile servers, or wish to use a tile server not included in the list above, the recommended approach is to set layout.mapbox.style
to "white-bg" and to use layout.mapbox.layers with below to specify a custom base map.
If you omit the below attribute when using this approach, y...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (map_style ="open-street-map" )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (
    map_style ="white-bg" ,
    map_layers =[
        {
            "below": 'traces' ,
            "sourcetype" : "raster" ,
            "sourceattribution" : "United States Geological Survey" ,
            "source" : [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/ {z}/{y}/{x}"
            ]
        }
      ])
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (
    map_style ="white-bg" ,
    map_layers =[
        {
            "below": 'traces' ,
            "sourcetype" : "raster" ,
            "sourceattribution" : "United States Geological Survey" ,
            "source" : [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/ {z}/{y}/{x}"
            ]
        },
        {
            "sourcetype" : "raster" ,
            "sourceattribution" : "Government of Canada" ,
            "source" : ["https://geo.weather.gc.ca/geomet/?"
                       "SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX={bbox-epsg-3857}&amp;CRS=EPSG:3857"
                       "&amp;WIDTH=1000&amp;HEIGHT=1000&amp;LAYERS=RADAR_1KM_RDBR&amp;TILED=true&amp;FORMAT=image/png" ],
        }
      ])
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (map_style ="dark")
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
a Base
needed
rlay</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import pandas as pd
quakes = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.graph_objects  as go
fig = go.Figure(go.Densitymap (lat=quakes.Latitude , lon=quakes.Longitude , z=quakes.Magnitude ,
                                 radius=10))
fig.update_layout (map_style ="https://tiles.stadiamaps.com/styles/stamen_watercolor.json?api_key=YOUR-API-KEY" , map_center_lon =180)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Map subplots" source_file="pyvy_2x9/Map subplots in Python.pdf">
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv' )
df.head()
data = []
layout = dict(
    title = 'New Walmart Stores per year 1962-2006&lt;br&gt; \</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
1962
 1964
 1965
 1967
 1968
1969
 1970
 1971
 1972
 1973
1974
 1975
 1976
 1977
 1978
1979
 1980
 1981
 1982
 1983
1984
 1985
 1986
 1987
 1988
1989
 1990
 1991
 1992
 1993
1994
 1995
 1996
 1997
 1998
1999
 2000
 2001
 2002
 2003
2004
 2005
 2006</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure(data=data, layout=layout)
fig.update_layout (width=800)
fig.show()
16/07/2025, 06:58 Map subplots in Python
https://plotly.com/python/map-subplots-and-small-multiples/ 3/5</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Subplots and multiple axes" source_file="pyvy_2x9/Subplots and multiple axes in Python.pdf" />
  </category>
  <category id="advanced_features" name="Recursos Avançados">
    <chart name="Displaying figures" source_file="pyvy_2x1/Displaying figures in Python.pdf">
      <description>Displaying Figures
1. Using the renderers framework in the context of a script or notebook 
2. Using  in a web app context
3. Using a  in an 
4. By  and loading that file in a browser immediately or later
5. By  such as PNG, JPEG, SVG, PDF or EPS and loading the
resulting file in any viewer
Displaying Figures Using The renderers Framework &gt;  &gt;
Displaying Figures
Displaying Figures in Python
Displaying Figures using Plotly's Python graphing library
Plotly Studio: Transform any dataset into an int...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with fig.show()"
)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displaying Itself"
)
fig−0.5 0 0.5 1 1.5 2 2.500.511.522.53A Figure Displayed with fig.show()
−0.5 0 0.5 1 1.5 2 2.500.511.522.53A Figure Displaying Itself
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 2/11</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.renderers</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import plotly.io  as pio
pio.renderers .default = "browser"</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with the 'svg' Renderer"
)
fig.show(renderer ="svg")
−0.5 0 0.5 1 1.5 2 2.500.511.522.53A Figure Displayed with the 'svg' Renderer
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 4/11</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>using the Datashader library to do Python-side rendering 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers ( Support
Community Support (
rers16/07/2025, 06:03 Displaying figures in Python
 10/11
Resources (
Blog (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
rers16/07/2025, 06:03 Displaying figures in Python
 11/11</description>
      </customization>
    </chart>
    <chart name="Fundamentals" source_file="pyvy_2x1/Fundamentals in Python.pdf">
      <description>ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
 1/4
Plotly Express in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to get
the code and run python app.py.
Get started with 
and learn how to effortlessly  &amp;  apps like this with 
.
Shapes
IPython vs Python
Troubleshooting
Bu...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Analysis of Iris data using scatter matrix'),
    dcc.Dropdown(
        id="dropdown",
        options=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'],
        value=['sepal_length', 'sepal_width'],
        multi=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def update_bar_chart(dims):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter_matrix(
        df, dimensions=dims, color="species")
    return figDOWNLOAD</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>plotly.express</library>
          <code language="python">fig = px.scatter_matrix(
        df, dimensions=dims, color="species")
    return figDOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>plotly.express</library>
          <code language="python">px.data.iris() # replace with your own data source
    fig = px.scatter_matrix(
        df, dimensions=dims, color="species")
    return figDOWNLOAD</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Supported CSS Colors
Dash 
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
 2/4

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash
app.layout = html.Div,
    dcc.Dropdown,
    dcc.Graph,
])
@app.callback,
    Input)
def update_bar_chart:
    df = px.data.iris # replace with your own data source
    fig = px.scatter_matrix
    return figDOWNLOAD
Analysis of Iris data using scatter matrix
×sepal_length
×sepal_width ×
45678
4 5 6 7 8234
2 3 4
species
setosa
versicolor
virginica
sepal_length sepal_widthsepal_length sepal_width
 Products
Dash 
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
 3/4
About Us
Careers 
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
 4/4</description>
      </customization>
    </chart>
    <chart name="Setting graph size" source_file="pyvy_2x1/Setting graph size in Python.pdf">
      <description>Adjusting Height, Width, &amp; Margins with Plotly Express
Adjusting graph size with Dash &gt;  &gt;
Setting Graph Size
Setting Graph Size in Python
How to manipulate the graph size, margins and background color.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express 
operates on a variety of type...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_col ="sex",
                 width=800, height=400)
fig.update_layout (
    margin=dict(l=20, r=20, t=20, b=20),
    paper_bgcolor ="LightSteelBlue" ,
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live adjustable graph-size'),
    html.P("Change figure width:"),
    dcc.Slider(id='slider', min=200, max=500, step=25, value=300,
               marks={x: str(x) for x in [200, 300, 400, 500]}),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input('slider', 'value'))
def resize_figure(width):
    df = px.data.tips() # replace with your own data source
    fig = px.scatter(df, x="total_bill", y="tip",
                     facet_col="sex", height=400)
    fig.update_layout(
        margin=dict(l=20, r=20, t=20, b=20),
        paper_bgcolor="LightSteelBlue",)
    fig.update_layout(width=int(width))DOWNLOAD</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
))
fig.update_layout (
    autosize =False,
    width=500,
    height=500,
    margin=dict(
        l=50,
        r=50,
        b=100,
        t=100,
        pad=4
    ),
    paper_bgcolor ="LightSteelBlue" ,
)
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["Apples" , "Oranges" , "Watermelon" , "Pears"],
    y=[3, 2, 1, 4]
))
fig.update_layout (
    autosize =False,
    width=500,
    height=500,
    yaxis=dict(
        title=dict(
            text="Y-axis Title" ,
            font=dict(
                size=30
            )
        ),
        ticktext =["Very long label" , "long label" , "3", "label"],
        tickvals =[1, 2, 3, 4],
        tickmode ="array",
    )
)
fig.update_yaxes (automargin =True)
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["Apples" , "Oranges" , "Watermelon" , "Pears"],
    y=[3, 2, 1, 4]
))
fig.update_layout (
    autosize =False,
    width=500,
    height=500,
    yaxis=dict(
        title=dict(
            text="Y-axis Title" ,
            font=dict(
                size=30
            )
        ),
        ticktext =["Very long label" , "long label" , "3", "label"],
        tickvals =[1, 2, 3, 4],
        tickmode ="array",
    )
)
fig.update_yaxes (automargin ='left+top' )
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Click events" source_file="pyvy_2x10/Click events in Python.pdf">
      <description>Update Points Using a Click Callback &gt;  &gt; Click
Events
Click Events in Python
Click Events With FigureWidget
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Chart Events 
Suggest an edit to this
page
Sign up for early access now. 
import plotly.graph_objects  as go
import numpy as np
np.random.seed
x = np.random.rand
y = np.random.rand
f = go.FigureWidget ])
scatter = f.data[0]
colors = ['#a3a7e4' ] * 100
scatter.marker.color = colors
scatte...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
x = np.random.rand(100)
y = np.random.rand(100)
f = go.FigureWidget ([go.Scatter(x=x, y=y, mode='markers' )])
scatter = f.data[0]
colors = ['#a3a7e4' ] * 100
scatter.marker.color = colors
scatter.marker.size = [10] * 100
f.layout.hovermode  = 'closest'</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
f = go.FigureWidget ([go.Scatter()])
help(f.data[0].on_click )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterHelp on method on_click in module plotly.basedatatypes:
on_click(callback, append=False) method of plotly.graph_objs._scatter.Scatter instance</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Figurewidget docs" source_file="pyvy_2x10/Figurewidget docs in Python.pdf">
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>plotly.graph_objects</library>
          <code language="python">go.FigureWidget using Jupyter Widgets.</code>
        </example>
      </examples>
    </chart>
    <chart name="Jupyter lab with figurewidget" source_file="pyvy_2x10/Jupyter lab with figurewidget in Python.pdf">
      <description>Create a New View for Output
View Live Updates &gt;  &gt; Jupyter Lab with
FigureWidget
Jupyter Lab with FigureWidget in Python
Using Plotly FigureWidgets with Jupyter Lab
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Chart Events 
Suggest an edit to this
page
Sign up for early access now. 
Display a FigureWidget and then create a new window to display it in so that you can scroll through your code but still keep an eye on what you're doing.
Wit...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Range slider and selector" source_file="pyvy_2x10/Range slider and selector in Python.pdf">
      <description>Basic Range Slider and Range Selectors &gt;  &gt; Range Slider
and Selector
Range Slider and Selector in Python
Now you can implement range sliders and selectors in your Plotly graphs purely with python!
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Custom Controls 
Suggest an edit to this
page
Sign up for early access now. 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
tors16/07/2025, 07:04 Range slider and selector in Python
 1/8...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure()
fig.add_trace (
    go.Scatter(x=list(df.Date), y=list(df.High)))</code>
        </example>
      </examples>
    </chart>
    <chart name="Sliders" source_file="pyvy_2x10/Sliders in Python.pdf">
      <description>Simple Slider Control &gt;  &gt; Sliders
Sliders in Python
How to add slider controls to your plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Custom Controls 
Suggest an edit to this page
Sliders can be used in Plotly to change the data displayed or style of a plot.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:03 Sliders in Python
 1/4
import plotly.graph_objects  as go
import numpy as np
...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , animation_frame ="year", animation_group ="country" ,
           size="pop", color="continent" , hover_name ="country" ,
           log_x=True, size_max =55, range_x=[100,100000], range_y=[25,90])
fig["layout" ].pop("updatemenus" ) # optional, drop animation buttons
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , animation_frame ="year", animation_group ="country" ,
           size="pop", color="continent" , hover_name ="country" ,
           log_x=True, size_max =55, range_x=[100,100000], range_y=[25,90])
fig["layout" ].pop("updatemenus" ) # optional, drop animation buttons
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Figure factory subplots" source_file="pyvy_2x9/Figure factory subplots in Python.pdf">
      <description>Plotly's Figure Factory Module
Vertical Figure Factory Charts &gt;  &gt; Figure
Factory Subplots
Figure Factory Subplots in Python
Subplots with Plotly Figure Factory Charts
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Subplots 
Suggest an edit to this
page
Sign up for early access now. 
Plotly's Python API contains a  which includes many wrapper functions that create unique chart types that are not yet
included in , Plotly's open-source graphi...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.figure_factory  as ff
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['LA Kings' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
fig = ff.create_table (table_data , height_constant =60)
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'LA Kings' , 'Ottawa Senators' ]</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import plotly.figure_factory  as ff</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter</code>
        </example>
      </examples>
    </chart>
    <chart name="Table and chart subplots" source_file="pyvy_2x9/Table and chart subplots in Python.pdf">
      <description>Import CSV Data &gt;  &gt; Table and Chart
Subplots
Table and Chart Subplots in Python
How to create a subplot with tables and charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Subplots 
Suggest an edit to this
page
Sign up for early access now. 
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:58 Table and chart subplots in Python
 1/4
import plotly.graph_objects  as go
from plotly.subplots  i...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
import re
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv" )
for i, row in enumerate (df["Date"]):
    p = re.compile(" 00:00:00" )
    datetime  = p.split(df["Date"][i])[0]
    df.iloc[i, 1] = datetime
fig = make_subplots (
    rows=3, cols=1,
    shared_xaxes =True,
    vertical_spacing =0.03,
    specs=[[{"type": "table"}],
           [{"type": "scatter" }],
           [{"type": "scatter" }]]
)
fig.add_trace (
    go.Scatter(
        x=df["Date"],
        y=df["Mining-revenue-USD" ],
        mode="lines",
        name="mining revenue"
    ),
    row=3, col=1
)
fig.add_trace (
    go.Scatter(
        x=df["Date"],
        y=df["Hash-rate" ],
        mode="lines",
        name="hash-rate-TH/s"
    ),
    row=2, col=1
)
fig.add_trace (
    go.Table(
        header=dict(
            values=["Date", "Number&lt;br&gt;Transactions" , "Output&lt;br&gt;Volume (BTC)" ,
                    "Market&lt;br&gt;Price" , "Hash&lt;br&gt;Rate" , "Cost per&lt;br&gt;trans-USD" ,
                    "Mining&lt;br&gt;Revenue-USD" , "Trasaction&lt;br&gt;fees-BTC" ],
            font=dict(size=10),
            align="left"
        ),
        cells=dict(
            values=[df[k].tolist() for k in df.columns[1:]],
            align = "left")
    ),
    row=1, col=1
)
fig.update_layout (
    height=800,
    showlegend =False,
    title_text ="Bitcoin mining stats for 180 days" ,
)
fig.show()
16/07/2025, 06:58 Table and chart subplots in Python
https://plotly.com/python/table-subplots/ 2/4</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter4M6M8M10M12M</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.graph_objects</library>
          <code language="python">fig = make_subplots (
    rows=3, cols=1,
    shared_xaxes =True,
    vertical_spacing =0.03,
    specs=[[{"type": "table"}],
           [{"type": "scatter" }],
           [{"type": "scatter" }]]
)
fig.add_trace (
    go.Scatter(
        x=df["Date"],
        y=df["Mining-revenue-USD" ],
        mode="lines",
        name="mining revenue"
    ),
    row=3, col=1
)
fig.add_trace (
    go.Scatter(
        x=df["Date"],
        y=df["Hash-rate" ],
        mode="lines",
        name="hash-rate-TH/s"
    ),
    row=2, col=1
)
fig.add_trace (
    go.Table(
        header=dict(
            values=["Date", "Number&lt;br&gt;Transactions" , "Output&lt;br&gt;Volume (BTC)" ,
                    "Market&lt;br&gt;Price" , "Hash&lt;br&gt;Rate" , "Cost per&lt;br&gt;trans-USD" ,
                    "Mining&lt;br&gt;Revenue-USD" , "Trasaction&lt;br&gt;fees-BTC" ],
            font=dict(size=10),
            align="left"
        ),
        cells=dict(
            values=[df[k].tolist() for k in df.columns[1:]],
            align = "left")
    ),
    row=1, col=1
)
fig.update_layout (
    height=800,
    showlegend =False,
    title_text ="Bitcoin mining stats for 180 days" ,
)
fig.show()
16/07/2025, 06:58 Table and chart subplots in Python
https://plotly.com/python/table-subplots/ 2/4</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
  </category>
  <category id="customization" name="Personalização e Estilo">
    <chart name="Latex" source_file="pyvy_2x/Latex in Python.pdf">
      <description>LaTeX Typesetting &gt;  &gt; LaTeX
LaTeX in Python
How to add LaTeX to python graphs.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], title=r'$\alpha_ {1c} = 352 \pm 11 \text{ km s}^{-1}$' )
fig.update_layout (
    xaxis_title =r'$\sqrt{(n_\text {c}(t|{T_\text {early}}))}$',
    yaxis_title =r'$d, r \text{ (solar radius)}$'
)
fig.show()
1 1.5 2 2.5 3 3.5 4246810121416
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Latex in Python
https://plotly.com/python/LaTeX/ 1/3</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objs  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4],
    y=[1, 4, 9, 16],
    name=r'$\alpha_ {1c} = 352 \pm 11 \text{ km s}^{-1}$'
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4],
    y=[0.5, 2, 4.5, 8],
    name=r'$\beta_ {1c} = 25 \pm 11 \text{ km s}^{-1}$'
))
fig.update_layout (
    xaxis_title =r'$\sqrt{(n_\text {c}(t|{T_\text {early}}))}$',
    yaxis_title =r'$d, r \text{ (solar radius)}$'
)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter1 1.5 2 2.5 3 3.5 40246810121416
16/07/2025, 06:17 Latex in Python
https://plotly.com/python/LaTeX/ 2/3
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>plotly.express</library>
          <code language="python">fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], title=r'$\alpha_ {1c} = 352 \pm 11 \text{ km s}^{-1}$' )
fig.update_layout (
    xaxis_title =r'$\sqrt{(n_\text {c}(t|{T_\text {early}}))}$',
    yaxis_title =r'$d, r \text{ (solar radius)}$'
)
fig.show()
1 1.5 2 2.5 3 3.5 4246810121416
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Latex in Python
https://plotly.com/python/LaTeX/ 1/3</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
Figure titles, axis labels and annotations all accept LaTeX directives for rendering mathematical formulas and notation, when the entire label is surrounded by dollar
signs $...$. This rendering is handled by the , which must be loaded in the environment
where figures are being rendered. MathJax is included by default in Jupyter-like environments. When embedding Plotly figures in other contexts it may be required to
ensure that MathJax is separately loaded, for example via a &lt;script&gt; tag pointing to a content-delivery network . Versions 2 and 3 are supported.
MathJax library 
fig.update_layout )}$',
    yaxis_title =r'$d, r \text{ }$'
)
fig.show
1 1.5 2 2.5 3 3.5 4246810121416
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Latex in Python
 1/3
What About Dash?import plotly.graph_objs  as go
fig = go.Figure
fig.add_trace )
fig.add_trace )
fig.update_layout )}$',
    yaxis_title =r'$d, r \text{ }$'
)
fig.show
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter1 1.5 2 2.5 3 3.5 40246810121416
16/07/2025, 06:17 Latex in Python
 2/3
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:17 Latex in Python
 3/3</description>
      </customization>
    </chart>
    <chart name="Peak finding" source_file="pyvy_2x/Peak finding in Python.pdf">
      <description>Imports
Import Data &gt;  &gt; Peak Finding
Peak Finding in Python
Learn how to find peaks and valleys on datasets in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import pandas as pd
from scipy.signal  import find_peaks</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import some data on milk production by month:
import plotly.graph_objects  as go
import pandas as pd
milk_data  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv' )
time_series  = milk_data ['Monthly milk production (pounds per cow)' ]
fig = go.Figure(data=go.Scatter(
    y = time_series ,
    mode = 'lines'
))
fig.show()
0 20 40 60 80 100 120 140 160550600650700750800850900950
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Peak finding in Python
https://plotly.com/python/peak-finding/ 1/4</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
from scipy.signal  import find_peaks
milk_data  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv' )
time_series  = milk_data ['Monthly milk production (pounds per cow)' ]
indices = find_peaks (time_series )[0]
fig = go.Figure()
fig.add_trace (go.Scatter(
    y=time_series ,
    mode='lines+markers' ,
    name='Original Plot'
))
fig.add_trace (go.Scatter(
    x=indices,
    y=[time_series [j] for j in indices],
    mode='markers' ,
    marker=dict(
        size=8,
        color='red',
        symbol='cross'
    ),
    name='Detected Peaks'
))
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import numpy as np
import pandas as pd
from scipy.signal  import find_peaks
milk_data  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv' )
time_series  = milk_data ['Monthly milk production (pounds per cow)' ]
indices = find_peaks (time_series , threshold =20)[0]
fig = go.Figure()
fig.add_trace (go.Scatter(
    y=time_series ,
    mode='lines+markers' ,
    name='Original Plot'
))
fig.add_trace (go.Scatter(
    x=indices,
    y=[time_series [j] for j in indices],
    mode='markers' ,
    marker=dict(
        size=8,
        color='red',
        symbol='cross'
    ),
    name='Detected Peaks'
))
fig.show()
0 50 100 150550600650700750800850900950Original Plot</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
The tutorial below imports , and .
Pandas 
time_series  = milk_data ['Monthly milk production ' ]
fig = go.Figure)
fig.show
0 20 40 60 80 100 120 140 160550600650700750800850900950
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Peak finding in Python
 1/4
Peak Detection
Only Highest PeaksWe need to find the x-axis indices for the peaks in order to determine where the peaks are located.
import plotly.graph_objects  as go
import pandas as pd
from scipy.signal  import find_peaks
milk_data  = pd.read_csv 
time_series  = milk_data ['Monthly milk production ' ]
indices = find_peaks [0]
fig = go.Figure
fig.add_trace )
fig.add_trace ,
    name='Detected Peaks'
))
fig.show
We can attempt to set our threshold so that we identify as many of the highest peaks that we can.0 50 100 150550600650700750800850900950Original Plot
Detected Peaks
16/07/2025, 06:17 Peak finding in Python
 2/4
import plotly.graph_objects  as go
import numpy as np
import pandas as pd
from scipy.signal  import find_peaks
milk_data  = pd.read_csv 
time_series  = milk_data ['Monthly milk production ' ]
indices = find_peaks [0]
fig = go.Figure
fig.add_trace )
fig.add_trace ,
    name='Detected Peaks'
))
fig.show
0 50 100 150550600650700750800850900950Original Plot
Detected Peaks
16/07/2025, 06:17 Peak finding in Python
 3/4
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
16/07/2025, 06:17 Peak finding in Python
 4/4</description>
      </customization>
    </chart>
    <chart name="Built-in continuous color scales" source_file="pyvy_2x1/Built-in continuous color scales in Python.pdf">
      <description>Using Built-In Continuous Color Scales
Discrete Color Sequences
Named Built-In Continuous Color Scales &gt;  &gt; Built-in
Continuous Color Scales
Built-in Continuous Color Scales in Python
A reference for the built-in named continuous  color scales in Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
Many Plotly Express functions accept a color_continuous_scale argume...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
from textwrap  import wrap
named_colorscales  = px.colors.named_colorscales ()
print("\n".join(wrap("".join('{:&lt;12}'.format(c) for c in named_colorscales ), 96)))</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
print(px.colors.sequential .Plasma)
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.express as px
colorscales = px.colors.named_colorscales()
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive Plotly Express color scale selection'),
    html.P("Color Scale"),
    dcc.Dropdown(
        id='dropdown',
        options=colorscales,
        value='viridis'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def change_colorscale(scale):
    df = px.data.iris() # replace with your own data source
 fi tt(DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.colors.sequential .swatches_continuous ()
fig.show()
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 4/10
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 5/10
speedmatteralgaedensedeepgrayicesolarhalinethermalturbidYlOrRdYlOrBrYlGnBuYlGnRedsRdPuRdBuPurplesPuRdPuBuGnPuBuOrangesOrRdGreysGreensGnBuBuPuBuGnBluesRainbowJetHotElectricBlueredBlackbodyTurboPlasmaMagmaInfernoCividisViridisPlotly3plotly.colors.sequential
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 6/10</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.colors.diverging .swatches_continuous ()
fig.show()</code>
        </example>
      </examples>
    </chart>
    <chart name="Dash Testing _ Dash for Python Documentation _ Plotly" source_file="pyvy_2x1/Dash Testing _ Dash for Python Documentation _ Plotly.pdf">
      <description>S tar 23,446
Dash Python  &gt; Dash Testing
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. Sign up for early access
now.
 Dash Testing
dash.testing provides custom Dash pytest  fixtures and a set of testing APIs for unit and end-to-end testing.
This tutorial shows how to write and run tests for a Dash app.
Installing dash.testing
Install dash.testing with:
python -m pip install dash [testing]
In some shells , you may need to escape the opening bracket,...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import  Dash, callback, html, Input, Outp ut, ctx, callback
app = Dash()
app.layout = html.Div([
    html.Button( 'Button 1' , id='btn-1' ),
    html.Button( 'Button 2' , id='btn-2' ),
    html.Button( 'Button 3' , id='btn-3' ),
    html.Div( id='container' ),
    html.Div( id='container-no-ctx' )
])
@callback(
    Output( 'container-no-ctx' , 'children' ),
    Input( 'btn-1' , 'n_clicks' ),
    Input( 'btn-2' , 'n_clicks' ))
def update (btn1, btn2 ):
    return  f'button 1: {btn1}  &amp; button 2: {btn2} '16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 1/10</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import the callback functions to test, with from app import
display, update.</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">imports:@callback( Output( 'container' ,'children' ),
              Input( 'btn-1' , 'n_clicks' ),
              Input( 'btn-2' , 'n_clicks' ),
              Input( 'btn-3' , 'n_clicks' ))
def display (btn1, btn2, btn3 ):
    button_clicked = ctx.triggered _id
    return  f'You last clicked button with ID {button_clicked} '
if __name__ == '__main__' :
    app.run(debug= True )
from  contextvars import  copy_context
from  dash._callback_context import  context_value
from  dash._utils import  AttributeDict</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>mixed</library>
          <code language="python">import  display, update
def test_update_callback ():
    output = update( 1, 0)
    assert  output == 'button 1: 1 &amp; button 2: 0'
def test_display_callback ():
    def run_callback ():
        context_value. set(AttributeDict(**{ "triggered_inputs" : [{ "prop_id" : "btn-1-ctx-example.
        return  display( 1, 0, 0)
    ctx = copy_context()
    output = ctx.run(run_callback)
    assert  output == f'You last clicked button with ID btn-1-ctx-example'16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 2/10
from  contextvars import  copy_context
from  dash._callback_context import  context_value
from  dash._utils import  AttributeDict</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">imports of your dash app
import  dash
from  dash import  html</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>pytest --remote -k 001
 is the default value. To add an different remote, use the --remote-url flag:
pytest --webdriver Firefox --remot e-url 
Note: If you set --remote-url, and the value is different to the default value,
 you don't need to include the --remote flag.
Caveats
We can't guarantee that the above examples work with every Selenium Grid. There may be limitations because of
how your network is configured. For example, because of:
A different hosting OS
How docker-compose is configured
If you encounter issues, it may be because you need to do some auxiliary WebDriver options tuning to run the
tests. Here are some things to try:16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
 5/10
Change the default logging level with --log-cli-level DEBUG.
Customize your browser options. There is a back door for browser option customization by a
pytest_setup_options hook defined in plugin.py. The example below is to use the headless mode
with Chrome WebDriver in Windows. There is a workaround by adding --disable-gpu in the options.
from  selenium.webdriver.chrome. options import Options
def pytest_setup_options :
options  = Options
options.add_argument
return  options
Fixtures
To avoid accidental name collision with other pytest plugins, all Dash test fixtures start with the prefix dash.
dash_br A standalone WebDriver wrapped with high-level Dash testing APIs. This is suitable for testing a
Dash App in a deployed environment , i.e. when your Dash App is accessible from a
URL.
dash_duo The default fixture for Dash Python integration tests, it contains a thread_server and a
WebDriver wrapped with high-level Dash testing APIs.
dash_thread_server Start your Dash App locally in a Python threading.Thread, which is lighter and
faster than a process.
dash_process_server This is close to your production/deployed environment. Start your Dash App with
waitress in a Python subprocess. You can control the
process runner with two supplemental arguments. To run the application with alternative deployment
options, use the raw_command argument; to extend the timeout if your application needs more than the
default three seconds to launch, use the start_timeout argument. Note: You need to configur e your
PYTHONPATH so that the Dash app sour ce file is dir ectly importable .
APIs
Selenium Overview
Both dash_duo and dash_br expose the Selenium WebDriver via the property driver, e.g.
dash_duo.driver, which gives you full access to the Python Selenium API .  One of the core
components of Selenium testing is finding the web element  with a locator, and performing some actions like
click or send_keys on it, and waiting to verify if the expected state is met after those actions. The check is
considered as an acceptance criterion, for which you can write in a standard Python assert statement.
Element Locators
There are several strategies to locate elements ; CSS selector and XPATH are the two most versatile ways. We
recommend using the CSS Selector  in most cases due to its better performance and robustness  across
browsers. If you are new to using CSS Selectors, these SauceLab tips  are a great start. Also, remember that
Chrome Dev Tools Console  is always your good friend and playground.
Waits
This link  covers this topic nicely. For impatient readers, a quick take away is quoted as follows: The Selenium
WebDriver provides two types of waits:
explicit wait  Makes WebDriver wait for a certain condition to occur before proceeding further with
execution. All our APIs with wait_for_* falls into this category.
implicit wait  Makes WebDriver poll the DOM for a certain amount of time when trying to locate an element.
We set a global two-second timeout at the driver level. Note  all custom wait conditions ar e defined in
dash.testing.wait and ther e are two e xtra APIs until and until_not which ar e similar to the e xplicit wait16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
 6/10
with W ebDriver, but the y are not binding to W ebDriver conte xt, i.e. the y abstr act a mor e generic mechanism to poll
and wait for certain condition to happen
Browser APIs
This section lists a minimal set of browser testing APIs. They are convenient shortcuts to Selenium APIs and have
been approved in our daily integration tests. The following table might grow as we start migrating more legacy
tests in the near future. But we have no intention to build a comprehensive list, the goal is to make writing Dash
tests concise and error-free. Please feel free to submit a community PR to add any missing ingredient, we would
be happy to accept that if it's adequate for Dash testing.
API Description
find_elementreturn the first found element by the CSS selector,
shortcut to
driver.find_element_by_css_selector. note
that this API will r aise e xceptions if not found, the
find_elements API r eturns an empty list instead
find_elementsreturn a list of all elements matching by the CSS
selector, shortcut to
driver.find_elements_by_css_selector
multiple_clickfind the element with the CSS selector and clicks it
with number of clicks
wait_for_elementshortcut to wait_for_element_by_css_selector
the long version is kept for back compatibility.
timeout if not set, equals to the fixture's
wait_timeout
wait_for_element_by_css_selectorexplicit wait until the element is present, shortcut to
WebDriverWait with
EC.presence_of_element_located
wait_for_element_by_idexplicit wait until the element is present, shortcut to
WebDriverWait with
EC.presence_of_element_located
wait_for_style_to_equalexplicit wait until the element's style has expected
value. shortcut to WebDriverWait with custom wait
condition style_to_equal. timeout if not set,
equals to the fixture's wait_timeout
wait_for_text_to_equalexplicit wait until the element's text equals the
expected text. shortcut to WebDriverWait with
custom wait condition text_to_equal. timeout if
not set, equals to the fixture's wait_timeout
wait_for_contains_textexplicit wait until the element's text contains the
expected text. shortcut to WebDriverWait with
custom wait condition contains_text condition.
timeout if not set, equals to the fixture's
wait_timeout
wait_for_class_to_equalexplicit wait until the element's class has expected
value. timeout if not set, equals to the fixture's
wait_timeout. shortcut to WebDriverWait with
custom class_to_equal condition.
wait_for_contains_classexplicit wait until the element's classes contains the
expected classname. timeout if not set, equals to the
fixture's wait_timeout. shortcut to WebDriverWait
with custom contains_class condition.
wait_for_page navigate to the url in webdriver and wait until the
dash renderer is loaded in browser. use server_url16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
 7/10
API Description
if url is None
toggle_windowswitch between the current working window and the
newly opened one.
switch_windowswitch to window by window index. shortcut to
driver.switch_to.window. raise BrowserError if
no second window present in browser
open_new_tabopen a new tab in browser with window name new
window. url if not set, equals to server_url
percy_snapshotvisual test API shortcut to percy_runner.snapshot.
it also combines the snapshot name with the actual
python versions. The wait_for_callbacks
parameter controls whether the snapshot is taken
only after all callbacks have fired; the default is False.
visit_and_snapshotThis method automates a common task during dash-
docs testing: the URL described by resource_path is
visited, and completion of page loading is assured by
waiting until the element described by hook_id is
fetched. Once hook_id is available,
visit_and_snapshot acquires a snapshot of the
page and returns to the main page.
wait_for_callbacks controls if the snapshot is
taken until all dash callbacks are fired, default True.
assert_check is a switch to enable/disable an
assertion that there is no devtools error alert icon.
take_snapshothook method to take a snapshot while Selenium test
fails. the snapshot is placed under
/tmp/dash_artifacts in Linux or %TEMP in windows
with a filename combining test case name and the
running Selenium session id
zoom_in_graph_by_ratiozoom out a graph  with a zoom box fraction
of component dimension, default start at middle with
a rectangle of 1/5 of the dimension use compare to
control if we check the SVG get changed
click_at_coord_fractionsUse ActionChains to click a Selenium WebElement at
a location a given fraction of the way fx between its
left  and right  edges, and fy between its top 
and bottom  edges.
get_logsreturn a list of SEVERE level logs after last reset time
stamps  simulate key press to clear the input
driverproperty exposes the Selenium WebDriver as fixture
property
session_idproperty returns the Selenium session_id, shortcut to
driver.session_id
server_urlset the server_url as setter so the Selenium is aware of
the local server port, it also implicitly calls
wait_for_page. return the server_url as property
download_pathproperty returns the download_path, note that dash
fixtures are initialized with a temporary path from
pytest tmpdir16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
 8/10
Dash APIs
This section enumerates a full list of Dash App related properties and APIs apart from the previous browser ones.
API Description
devtools_error_count_locatorproperty returns the selector of the error count number
in the devtool UI
dash_entry_locatorproperty returns the selector of react entry point, it can
be used to verify if an Dash app is loaded
dash_outerhtml_domproperty returns the BeautifulSoup parsed Dash DOM
from outerHTML
dash_innerhtml_domproperty returns the BeautifulSoup parsed Dash DOM
from innerHTML
redux_state_pathsproperty returns the
window.store.getState.paths
redux_state_rqsproperty returns
window.store.getState.requestQueue
window_store property returns window.store
get_local_storageget the value of local storage item by the id, default is
local
get_session_storageget the value of session storage item by the id, default is
session
clear_local_storage shortcut to window.localStorage.clear
clear_session_storage shortcut to window.sessionStorage.clear
clear_storage clears both local and session storages
Debugging
Verify Your Test Environment
If you run the integration in a virtual environment, make sure you are getting the latest commit in the master
branch from each component, and that the installed pip versions are correct. Note: We have some enhancement
initiatives tr acking in this issue
Run the CI Job Locally
The CircleCI Local CLI  is a handy tool to execute some jobs locally. It gives you an earlier warning before even
pushing your commits to remote. For example, it's always recommended to pass lint and unit tests job first on
your local machine. So we can make sure there are no simple mistakes in the commit.
# install the cli 
$ curl -fLSs  |  bash &amp;&amp; circleci version
# run at least the lint &amp; unit test  job on both python 2 and 3
# note: the current config requires all tests pass on python 2.7, 3.6 and 3.7.
$ circleci local  execute --job lint-unit-27 &amp;&amp; $ c ircleci local  execute --job lint-unit-37
Increase the Verbosity of pytest Logging Level
pytest --log-cli-level DEBUG -k bsly00116/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
 9/10
Products
Dash
Consulting and TrainingPricing
Enterprise PricingAbout Us
Careers
Resources
BlogSupport
Community Support
Graphing DocumentationJoin our mailing
list
Sign up to stay in the loop with
all things Plotly — from Dash
Club to product updates,
webinars, and more!
SUBSCRIBE
Copyright © 2025 Plotly. All rights reserved. Terms of Service Privacy PolicyYou can get more logging information from Selenium WebDriver, Flask server, and our test APIs.
14:05:41 | DEBUG | selenium.webdri ver.remote.remote_connection:388 | DELETE 
14:05:41 | DEBUG | urllib3.connect ionpool:393 |  "DELETE /session/87b6f1e
14:05:41 | DEBUG | selenium.webdri ver.remote.remote_connection:440 | Finished Request
14:05:41 | INFO | dash.testing.app lication_runners:80 | killing the app runner
14:05:41 | DEBUG | urllib3.connect ionpool:205 | Starting new HTTP connection : localhost:805
14:05:41 | DEBUG | urllib3.connect ionpool:393 |  "GET /_stop-3ef0e64e86884
Selenium Snapshots
If you run your tests with CircleCI dockers . Inside a
docker run or VM instance where there is no direct access to the video card, there is a known limitation that you
cannot see anything from the Selenium browser on your screen. Automation developers use Xvfb  as a
workaround to solve this issue. It enables you to run graphical applications without a display  while also having the ability to take screenshots. We implemented an automatic hook at the test
report stage, it checks if a test case failed with a Selenium test fixture. Before tearing down every instance, it will
take a snapshot at the moment where your assertion is False or having a runtime error. refer to Browser
APIs  Note: you can also check the snapshot dir ectly in Cir cleCI web page under Artifacts Tab
Percy Snapshots
There are two customized pytest arguments to tune Percy runner: 1. --nopercyfinalize disables the Percy
finalize in dash fixtures. This is required if you run your tests in parallel, then you add an extra percy finalize
--all step at the end. For more details, please visit Percy Documents . 2. --percy-assets lets Percy know
where to collect additional assets such as CSS files.
Dash Python  &gt; Dash Testing16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
 10/10</description>
      </customization>
    </chart>
    <chart name="Formatting ticks" source_file="pyvy_2x1/Formatting ticks in Python.pdf">
      <description>Tickmode - Linear
Tickmode - Array &gt;  &gt;
Formatting Ticks
Formatting Ticks in Python
How to format axes ticks in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
If "linear", the placement of the ticks is determined by a starting position tick0 and a tick step dtick
import plotly.graph_objects  as go
fig = go.Figure)
fig.update_layout 
)
fig.show
If "...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
))
fig.update_layout (
    xaxis = dict(
        tickmode  = 'linear' ,
        tick0 = 0.5,
        dtick = 0.75
    )
)
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
))
fig.update_layout (
    xaxis = dict(
        tickmode  = 'array',
        tickvals  = [1, 3, 5, 7, 9, 11],
        ticktext  = ['One', 'Three', 'Five', 'Seven', 'Nine', 'Eleven' ]
    )
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live tick formatting'),
    dcc.Checklist(
        id='tick',
        options=[{'label': 'Enable linear ticks',
                  'value': 'linear'}],
        value=['linear']
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("tick", "value"))
def display_figure(tick_mode):
    fig = go.Figure(go.Scatter( # replace with your own data source
        x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5,
             77.8, 74.1, 62.6, 45.3, 39.9]
 ))DOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
))
fig.update_layout (yaxis_tickformat  = '%')
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(go.Scatter(
    x = df['Date'],
    y = df['AAPL.High' ],
))
fig.update_layout (
    title = 'Time Series with Custom Date-Time Format' ,
    xaxis_tickformat  = '%d %B (%a)&lt;br&gt;%Y'
)
fig.show()
01 April (Wed)
201501 July (Wed)
201501 October (Thu)
201501 January (Fri)
201601 April (Fri)
201601 July (Fri)
201601 October (Sat)
201601 January (Sun)
201790100110120130Time Series with Custom Date-Time Format
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 5/9</code>
        </example>
      </examples>
    </chart>
    <chart name="Interactive html export" source_file="pyvy_2x1/Interactive html export in Python.pdf">
      <description>Interactive vs Static Export
Saving to an HTML file
Controlling the size of the HTML file
Inserting Plotly Output into HTML using a Jinja2 Template &gt;  &gt;
Interactive HTML Export
Interactive HTML Export in Python
Plotly allows you to save interactive HTML versions of your figures to your local disk.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
Plotly figures are inter...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
fig = px.scatter(x=range(10), y=range(10))
fig.write_html ("path/to/file.html" )</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
from jinja2 import Template
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
output_html_path =r"/path/to/output.html"
input_template_path  = r"/path/to/template.html"
plotly_jinja_data  = {"fig":fig.to_html(full_html =False)}</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html
import plotly.express as px
from base64 import b64encode
import io
app = Dash(__name__)
buffer = io.StringIO()
df = px.data.iris() # replace with your own data source
fig = px.scatter(
    df, x="sepal_width", y="sepal_length",
    color="species")
fig.write_html(buffer)
html_bytes = buffer.getvalue().encode()
encoded = b64encode(html_bytes).decode()
app.layout = html.Div([
    html.H4('Simple plot export options'),
    html.P("↓↓↓ try downloading the plot as PNG ↓↓↓ ", style={"text-align": "right", "font-weight": "bold"}),
    dcc.Graph(id="graph", figure=fig),
    html.A(
        html.Button("Download as HTML"),
        id="download",
 hf"dttt/htlb 64" ddDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
help(go.Figure.write_html )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Then use the following Python to replace {{ fig }} in the template with HTML that will display the Plotly figure "fig":
import plotly.express  as px
from jinja2 import Template
data_canada  = px.data.gapminder .query
fig = px.bar
output_html_path =r"/path/to/output.html"
input_template_path  = r"/path/to/template.html"
plotly_jinja_data  = {"fig":fig.to_html}
#consider also defining the include_plotlyjs parameter to point to an external Plotly.js as described above
with open as output_file :
    with open as template_file :
        j2_template  = Template )
        output_file .write)
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash 
buffer = io.StringIO
df = px.data.iris # replace with your own data source
fig = px.scatter
fig.write_html
html_bytes = buffer.getvalue.encode
encoded = b64encode.decode
app.layout = html.Div,
    html.P,
    dcc.Graph,
    html.A,
        id="download",
 hf"dttt/htlb 64" ddDOWNLOAD
Simple plot export options
↓↓↓ try downloading the plot as PNG ↓↓↓
DOWNLOAD AS HTML2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
sing a16/07/2025, 06:09 Interactive html export in Python
 3/5
Full Parameter Documentation
What About Dash?import plotly.graph_objects  as go
help
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter</description>
      </customization>
    </chart>
    <chart name="Setting the font, title, legend entries, and axis titles" source_file="pyvy_2x1/Setting the font, title, legend entries, and axis titles in Python.pdf">
      <description>Automatic Labelling with Plotly Express &gt;  &gt; Setting the Font, Title,
Legend Entries, and Axis Titles
Setting the Font, Title, Legend Entries, and Axis Titles in Python
How to set the global font, title, legend-entries, and axis-titles in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to
this page
Sign up for early access now. 
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
P...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" ,
                title="Automatic Labels Based on Data Frame Column Names" )
fig.show()
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5species
setosa
versicolor
virginicaAutomatic Labels Based on Data Frame Column Names
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ress
ts</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" ,
                 labels={
                     "sepal_length" : "Sepal Length (cm)" ,
                     "sepal_width" : "Sepal Width (cm)" ,
                     "species" : "Species of Iris"
                 },
                title="Manually Specified Labels" )
fig.show()</code>
        </example>
        <example id="example_3" title="Exemplo 3 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" ,
                title="Playing with Fonts" )
fig.update_layout (
    font_family ="Courier New" ,
    font_color ="blue",
    title_font_family ="Times New Roman" ,
    title_font_color ="red",
    legend_title_font_color ="green"
)
fig.update_xaxes (title_font_family ="Arial")
fig.show()</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x="year", y="gdpPercap" , color="country" )
fig.update_layout (
    title=dict(text="GDP-per-capita" , font=dict(size=50), automargin =True, yref='paper')
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash dash-daq, click
"Download" to get the code and run python app.py.</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import plotly.express as px
import dash_daq as daq
app = Dash(__name__)
picker_style = {'float': 'left', 'margin': 'auto'}
app.layout = html.Div([
    html.H4('Interactive color picker with Dash'),
    dcc.Graph(id="graph"),
    daq.ColorPicker(
        id='font', label='Font Color', size=150,
        style=picker_style, value=dict(hex='#119DFF')),
    daq.ColorPicker(
        id='title', label='Title Color', size=150,
        style=picker_style, value=dict(hex='#F71016')),
])
@app.callback(
    Output("graph", 'figure'),
    Input("font", 'value'),
    Input("title", 'value'))
dfdtb ht(ft l titl l)DOWNLOAD</code>
        </example>
      </examples>
    </chart>
    <chart name="Supported css colors" source_file="pyvy_2x1/Supported css colors in Python.pdf">
      <description>Supported CSS Colors &gt;  &gt;
Supported CSS Colors
Supported CSS Colors in Python
A list of supported named CSS Colors
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
Many properties in Plotly.py for configuring colors support named CSS colors. For example, marker colors:
import plotly.graph_objects  as go
fig = go.Figure
])
fig.show
These colors are supported in Plotly.py...</description>
      <examples>
        <example id="example_1" title="Exemplo 1 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import plotly.graph_objects  as go
fig = go.Figure([
    go.Bar(
        x=['Jan', 'Feb', 'Mar', 'Apr'],
        y=[20, 14, 25, 16],
        name='Primary Product' ,
        # Named CSS color
        marker_color ='royalblue'
    )
])
fig.show()</code>
        </example>
        <example id="example_2" title="Exemplo 2 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
        <example id="example_4" title="Exemplo 4">
          <library>plotly.graph_objects</library>
          <code language="python">fig = go.Figure([
    go.Bar(
        x=['Jan', 'Feb', 'Mar', 'Apr'],
        y=[20, 14, 25, 16],
        name='Primary Product' ,
        # Named CSS color
        marker_color ='royalblue'
    )
])
fig.show()</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
    </chart>
    <chart name="Troubleshooting" source_file="pyvy_2x1/Troubleshooting in Python.pdf">
      <description>Version Problems
Import Problems
Dash Problems &gt;  &gt;
Troubleshooting
Troubleshooting in Python
How to troubleshoot import and rendering problems in Plotly with Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python 
Fundamentals 
Suggest an edit to this
page
Sign up for early access now. 
In order to follow the examples in this documentation site, you should have the latest version of plotly installed , as detailed in the 
 guide. This docume...</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import and rendering problems in Plotly with Python.</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">important that you not have a file named plotly.py in the same directory as the Python script you're running, and this includes not naming the script itself
plotly.py, otherwise importing plotly can fail with mysterious error messages.</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import problems or AttributeErrors can be traced back to having multiple versions of plotly installed, for example once with conda and once with
pip. It's often worthwhile to uninstall with both methods before following the  instructions from scratch with one or the other.</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Graph Objects)">
          <library>plotly.graph_objects</library>
          <code language="python">import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import numpy as np
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive plot with custom data source'),
    dcc.Graph(id="graph"),
    html.P("Number of bars:"),
    dcc.Slider(id="slider", min=2, max=10, value=4, step=1),
])
@app.callback(
    Output("graph", "figure"),
    Input("slider", "value"))
def update_bar_chart(size):
    data = np.random.normal(3, 2, size=size) # replace with your own data source
    fig = go.Figure(
        data=[go.Bar(y=data)],
        layout_title_text="Native Plotly rendering in Dash"
    )
    return fig
 (db T )DOWNLOAD</code>
        </example>
        <example id="example_5" title="Exemplo 5 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>$ conda uninstall  plotly
$ pip uninstall  plotly
Problems can also arise if you have a file named plotly.py in the same directory as the code you are executing.
If you are encountering problems using plotly with  please first ensure that you have upgraded dash to the latest version, which will
automatically upgrade dash-core-components to the latest version, ensuring that Dash is using an up-to-date version of the Plotly.js rendering engine for plotly. If this
does not resolve your issue, please visit our  and we will be glad to help you out.
Dash 
amlit16/07/2025, 06:08 Troubleshooting in Python
 1/4
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now 
app.layout = html.Div,
    dcc.Graph,
    html.P,
    dcc.Slider,
])
@app.callback,
    Input)
def update_bar_chart:
    data = np.random.normal # replace with your own data source
    fig = go.Figure],
        layout_title_text="Native Plotly rendering in Dash"
    )
    return fig
 DOWNLOAD
Interactive plot with custom data source
Number of bars:−0.5 0 0.5 1 1.5 2 2.5 3 3.50123456Native Plotly rendering in Dash
2 3 4 5 6 7 8 9 10
amlit16/07/2025, 06:08 Troubleshooting in Python
 2/4
VSCode Notebook, Nteract and Streamlit Problems
Orca Problems
What About Dash?Plotly figures render in VSCode using a Plotly.js version bundled with the , and
unfortunately it's often a little out of date compared to the latest version of the plotly module, so the very latest features may not work until the following release of
the vscode-python extension. In any case, regularly upgrading your vscode-python extension to the latest version will ensure you have access to the greatest number
of recent features.
vscode-python extension 
If you get an error message stating that the orca executable that was found is not valid, this may be because another executable with the same name was found on
your system. Please specify the complete path to the Plotly-Orca binary that you downloaded  with the following command:
plotly.io.orca.config.executable = '/home/your_name/miniconda3/bin/orca'
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter</description>
      </customization>
    </chart>
    <chart name="Layout.updatemenus" source_file="pyvy_2x10/Layout.updatemenus in Python.pdf" />
    <chart name="Reference index" source_file="pyvy_2x10/Reference index in Python.pdf">
      <description>update methods and "magic underscores" 
the layout.template key is present  
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
 Products
Dash 
16/07/2025, 07:04 Reference index in Python
 1/1</description>
    </chart>
    <chart name="Manhattan plot" source_file="pyvy_2x8/Manhattan plot in Python.pdf">
      <description>Manhattan Plot
Highlighted points color, and colors of the suggestive line and the genome-wide line &gt;  &gt; Manhattan Plot
Manhattan Plot in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python</description>
      <examples>
        <example id="example_1" title="Exemplo 1">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/manhattan_data.csv' )
dash_bio .ManhattanPlot (
    dataframe =df,
)</code>
        </example>
        <example id="example_2" title="Exemplo 2">
          <library>mixed</library>
          <code language="python">import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/manhattan_data.csv' )
dash_bio .ManhattanPlot (
    dataframe =df,
    highlight_color ='#00FFAA' ,
    suggestiveline_color ='#AA00AA' ,
    genomewideline_color ='#AA5500'
)
1 3 5 7 9 11 13151719212302468</code>
        </example>
        <example id="example_3" title="Exemplo 3">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
app = Dash(__name__)
df = pd.read_csv('https://git.io/manhattan_data.csv')
app.layout = html.Div([
    'Threshold value',
    dcc.Slider(
        id='slider',
        min=1,
        max=10,
        marks={
            i: {'label': str(i)} for i in range(10)
        },
        value=6
    ),
    html.Br(),
    html.Div(
        dcc.Graph(
            id='graph',
            figure=dashbio.ManhattanPlot(
 dtf dfDOWNLOAD</code>
        </example>
        <example id="example_4" title="Exemplo 4 (Plotly Express)">
          <library>plotly.express</library>
          <code language="python">import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)</code>
        </example>
        <example id="example_5" title="Exemplo 5">
          <library>mixed</library>
          <code language="python">import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)</code>
        </example>
      </examples>
      <customization section="Opções de Estilo">
        <description>Suggest an edit to this page
ManhattanPlot allows you to visualize genome-wide association studies  efficiently. Using WebGL under the hood, you can interactively explore overviews of
massive datasets comprising hundreds of thousands of points at once, or take a closer look at a small subset of your data. Hover data and click data are accessible
from within the Dash app.
import pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .ManhattanPlot 
Change the color of the points that are considered significant.1 3 5 7 9 11 13151719212302468
Point of interest
Chr1
Chr2
Chr3
Chr4
Chr5
Chr6
Chr7
Chr8
Chr9
Chr10
Chr11
Chr12
Chr13
Chr14
Chr15
Chr16
Chr17Manhattan Plot
Chromosome-log10
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
 1/4
import pandas as pd
import dash_bio
df = pd.read_csv 
dash_bio .ManhattanPlot 
1 3 5 7 9 11 13151719212302468
Point of interest
Chr1
Chr2
Chr3
Chr4
Chr5
Chr6
Chr7
Chr8
Chr9
Chr10
Chr11
Chr12
Chr13
Chr14
Chr15
Chr16
Chr17Manhattan Plot
Chromosome-log10
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
 2/4
ManhattanPlot with Dash

from dash import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
app = Dash
df = pd.read_csv} for i in range
        },
        value=6
    ),
    html.Br,
    html.Div of interest
Chr1
Chr2
Chr3
Chr4
Chr5
Chr6
Chr7
Chr8
Chr9
Chr10
Chr11
Chr12
Chr13Manhattan Plot
Chromosome-log10
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
 3/4
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash , you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
 # or any Plotly Express function e.g. px.bar
# fig.add_trace
# fig.update_layout
from dash import Dash, dcc, html
app = Dash
app.layout = html.Div
])
app.run  # Turn off reloader if inside Jupyter
 Products
Dash (
Consulting and Training
( Pricing
Enterprise Pricing (
About Us
Careers (
Resources (
Blog ( Support
Community Support (
Documentation (
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (
Privacy Policy (
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
 4/4</description>
      </customization>
    </chart>
    <chart name="Dash Documentation &amp; User Guide _ Plotly" source_file="pyvy_2x9/Dash Documentation &amp; User Guide _ Plotly.pdf">
      <description>S tar 23,449
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. Sign up for early access
now.
Dash Python User Guide
Dash is the original low-code framework for rapidly building data apps in Python.
Quickstart
Installation
A Minimal Dash App
Dash in 20 Minutes Tutorial
Dash Fundamentals
Layout
Basic Callbacks
Interactive Graphing and Crossfiltering
Sharing Data Between Callbacks
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
 1/6
Dash Callba...</description>
    </chart>
  </category>
  <category id="interactivity" name="Interatividade e Widgets" />
</plotly_guide>