<?xml version='1.0' encoding='utf-8'?>
<plotly_python_guide generated_on="2025-07-18 08:51:06" description="Guia completo de Plotly para Python gerado automaticamente">
  <metadata>
    <title>Guia Completo Plotly Python</title>
    <description>Documentação e exemplos completos para visualização de dados com Plotly em Python</description>
  </metadata>
  <content>
    <file name="Bar charts in Python.pdf" path="Bar charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Bar chart with Plotly Express
Bar charts with Long Format Data &gt;  &gt; Bar
Charts
Bar Charts in Python
How to make Bar Charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bar-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.bar, each row of the DataFrame is represented as a rectangular mark. To aggregate multiple data points into the same rectangular mark, please refer to
the .
histogram documentation (/python/histograms)
In the example below, there is only a single row of data per year, so a single bar is displayed per year.
import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
fig.show()
Long-form data has one row per observation, and one column per variable. This is suitable for storing and displaying multivariate data i.e. with dimension greater
than 2. This format is sometimes called "tidy".
To learn more about how to provide a specific form of column-oriented data to 2D-Cartesian Plotly Express functions such as px.bar, see the 
.
Plotly Express Wide-Form
Support in Python documentation (https://plotly.com/python/wide-form/)
For detailed column-input-format documentation, see the .
Plotly Express Arguments documentation (https://plotly.com/python/px-arguments/)1950 1960 1970 1980 1990 200005M10M15M20M25M30M35M
yearpop
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 1/34

--- Página 2 ---
Bar charts with Wide Format Dataimport plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
long_df
Wide-form data has one row per value of one of the first variable, and one column per value of the second variable. This is suitable for storing and displaying 2-
dimensional data.South Korea China Canada01020304050medal
gold
silver
bronzeLong-Form Input
nationcount
nationmedalcount
0South Koreagold24
1China gold10
2Canadagold9
3South Koreasilver13
4China silver15
5Canadasilver12
6South Koreabronze11
7China bronze8
8Canadabronze12
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 2/34

--- Página 3 ---
Bar charts in Dashimport plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()
wide_df
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)South Korea China Canada01020304050variable
gold
silver
bronzeWide-Form Input
nationvalue
nationgoldsilverbronze
0South Korea241311
1China 10158
2Canada91212
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 3/34

--- Página 4 ---
Colored BarsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
The bar plot can be customized using keyword arguments, for example to use , as below, or 
, as above.
continuous color (https://plotly.com/python/colorscales/)
discrete color
(/python/discrete-color/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Restaurant tips by day of week'),
    dcc.Dropdown(
        id="dropdown",
        options=["Fri", "Sat", "Sun"],
        value="Fri",
        clearable=False,
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def update_bar_chart(day):
    df = px.data.tips() # replace with your own data source
    mask = df["day"] == day
    fig = px.bar(df[mask], x="sex", y="total_bill",
 l " k"b d" ")DOWNLOAD
Restaurant tips by day of week
Fri
Male Female020406080100120140160smoker
Yes
No
sextotal_bill
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 4/34

--- Página 5 ---
Stacked vs Grouped Barsimport plotly.express  as px
df = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(df, x='year', y='pop',
             hover_data =['lifeExp' , 'gdpPercap' ], color='lifeExp' ,
             labels={'pop':'population of Canada' }, height=400)
fig.show()
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.bar(df, x='year', y='pop',
             hover_data =['lifeExp' , 'gdpPercap' ], color='country' ,
             labels={'pop':'population of Oceania' }, height=400)
fig.show()
When several rows share the same value of x (here Female or Male), the rectangles are stacked on top of one another by default.1950 1960 1970 1980 1990 200005M10M15M20M25M30M35M
707274767880lifeExp
yearpopulation of Canada
1950 1960 1970 1980 1990 200005M10M15M20M25Mcountry
Australia
New Zealand
yearpopulation of Oceania
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 5/34

--- Página 6 ---
Aggregating into Single Colored Barsimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="sex", y="total_bill" , color='time')
fig.show()
The default stacked bar chart behavior can be changed to grouped (also known as clustered) using the barmode argument:
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="sex", y="total_bill" ,
             color='smoker' , barmode='group',
             height=400)
fig.show()
As noted above px.bar() will result in one rectangle drawn per row of input. This can sometimes result in a striped look as in the examples above. To combine these
rectangles into one per color per position, you can use px.histogram(), which has .
its own detailed documentation page (/python/histogram)
px.bar and px.histogram are designed to be nearly interchangeable in their call signatures, so as to be able to switch between aggregated and
disaggregated bar representations.Female Male050010001500200025003000time
Dinner
Lunch
sextotal_bill
Female Male0500100015002000
smoker
No
Yes
sextotal_bill
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 6/34

--- Página 7 ---
Bar Charts with Textimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="total_bill" ,
             color='smoker' , barmode='group',
             height=400)
fig.show()
px.histogram() will aggregate y values by summing them by default, but the histfunc argument can be used to set this to avg to create what is sometimes called a
"barplot" which summarizes the central tendency of a dataset, rather than visually representing the totality of the dataset.
Warning: when using histfuncs other than "sum" or "count" it can be very misleading to use a barmode other than "group", as stacked bars in effect
represent the sum of the bar heights, and summing averages is rarely a reasonable thing to visualize.
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="total_bill" ,
             color='smoker' , barmode='group',
             histfunc ='avg',
             height=400)
fig.show()
New in v5.5
You can add text to bars using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting string will control
the output format.Female Male0500100015002000
smoker
No
Yes
sexsum of total_bill
Female Male05101520smoker
No
Yes
sexavg of total_bill
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 7/34

--- Página 8 ---
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" , text_auto =True)
fig.show()
The text argument can be used to display arbitrary text on the bars:
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" , text="nation" )
fig.show()
By default, Plotly will scale and rotate text labels to maximize the number of visible labels, which can result in a variety of text angles and sizes and positions in the
same figure. The textfont, textposition and textangle trace attributes can be used to control these.
Here is an example of the default behavior:24
13
1110
15
89
12
12
gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
South Korea
South Korea
South KoreaChina
China
ChinaCanada
Canada
Canada
gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 8/34

--- Página 9 ---
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Europe' and year == 2007 and pop &gt; 2.e6" )
fig = px.bar(df, y='pop', x='country' , text_auto ='.2s',
            title="Default: various text sizes, positions and angles" )
fig.show()
Here is the same data with less variation in text formatting. Note that textfont_size will set the maximum size. The layout.uniformtext attribute can be used to
guarantee that all text labels are the same size. See the  for details.
documentation on text and annotations (/python/text-and-annotations/)
The cliponaxis attribute is set to False in the example below to ensure that the outside text on the tallest bar is allowed to render outside of the plotting area.
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Europe' and year == 2007 and pop &gt; 2.e6" )
fig = px.bar(df, y='pop', x='country' , text_auto ='.2s',
            title="Controlled text sizes, positions and angles" )
fig.update_traces (textfont_size =12, textangle =0, textposition ="outside" , cliponaxis =False)
fig.show()3.6M8.2M10M
4.6M7.3M4.5M10M
5.5M5.2M61M82M11M10M4.1M58M17M
4.6M39M11M22M10M
5.4M2.0M40M9.0M7.6M71M61M
AlbaniaAustriaBelgiumBosnia and HerzegovinaBulgariaCroatiaCzech RepublicDenmarkFinlandFranceGermanyGreeceHungaryIrelandItalyNetherlandsNorwayPolandPortugalRomaniaSerbiaSlovak RepublicSloveniaSpainSwedenSwitzerlandTurkeyUnited Kingdom020M40M60M80MDefault: various text sizes, positions and angles
countrypop
3.6M8.2M10M
4.6M7.3M
4.5M10M
5.5M5.2M61M82M
11M10M
4.1M58M
17M
4.6M39M
11M22M
10M
5.4M
2.0M40M
9.0M7.6M71M
61M
AlbaniaAustriaBelgiumBosnia and HerzegovinaBulgariaCroatiaCzech RepublicDenmarkFinlandFranceGermanyGreeceHungaryIrelandItalyNetherlandsNorwayPolandPortugalRomaniaSerbiaSlovak RepublicSloveniaSpainSwedenSwitzerlandTurkeyUnited Kingdom020M40M60M80MControlled text sizes, positions and angles
countrypop
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 9/34

--- Página 10 ---
Pattern Fills
Facetted subplotsNew in v5.0
Bar charts afford the use of  in addition to color:
patterns (also known as hatching or texture) (/python/pattern-hatching-texture/)
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"])
fig.show()
Use the keyword arguments facet_row (resp. facet_col) to create facetted subplots, where different rows (resp. columns) correspond to different values of the
dataframe column specified in facet_row.gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 10/34

--- Página 11 ---
Basic Bar Charts with plotly.graph_objectsimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="sex", y="total_bill" , color="smoker" , barmode="group",
             facet_row ="time", facet_col ="day",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "time": ["Lunch", "Dinner" ]})
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Bar class from plotly.graph_objects (/python/graph-objects/)
import plotly.graph_objects  as go
animals=['giraffes' , 'orangutans' , 'monkeys' ]
fig = go.Figure([go.Bar(x=animals, y=[20, 14, 23])])
fig.show()Male Female0200400600800
Male Female Male Female Male Female0200400600800smoker
No
Yes
sex sex sex sextotal_bill total_billday=Thur day=Fri day=Sat day=Suntime=Dinner time=Lunch
giraffes orangutans monkeys05101520
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 11/34

--- Página 12 ---
Grouped Bar Chart
Customize the figure using fig.update.
import plotly.graph_objects  as go
animals=['giraffes' , 'orangutans' , 'monkeys' ]
fig = go.Figure(data=[
    go.Bar(name='SF Zoo' , x=animals, y=[20, 14, 23]),
    go.Bar(name='LA Zoo' , x=animals, y=[12, 18, 29])
])
# Change the bar mode
fig.update_layout (barmode='group')
fig.show()
giraffes orangutans monkeys051015202530SF Zoo
LA Zoo
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 12/34

--- Página 13 ---
Stacked Bar Chart
Bar Chart with Relative Barmodeimport plotly.graph_objects  as go
animals=['giraffes' , 'orangutans' , 'monkeys' ]
fig = go.Figure(data=[
    go.Bar(name='SF Zoo' , x=animals, y=[20, 14, 23]),
    go.Bar(name='LA Zoo' , x=animals, y=[12, 18, 29])
])
# Change the bar mode
fig.update_layout (barmode='stack')
fig.show()
With "relative" barmode, the bars are stacked on top of one another, with negative values below the axis and positive values above.giraffes orangutans monkeys01020304050LA Zoo
SF Zoo
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 13/34

--- Página 14 ---
Grouped Stacked Bar Chartimport plotly.graph_objects  as go
x = [1, 2, 3, 4]
fig = go.Figure()
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16]))
fig.add_trace (go.Bar(x=x, y=[6, -8, -4.5, 8]))
fig.add_trace (go.Bar(x=x, y=[-15, -3, 4.5, -8]))
fig.add_trace (go.Bar(x=x, y=[-1, 3, -3, -4]))
fig.update_layout (barmode='relative' , title_text ='Relative Barmode' )
fig.show()
Supported in Plotly.py 6.0.0 and later
Use the offsetgroup property with barmode="stacked" or barmode="relative" to create grouped stacked bar charts. Bars that have the same offsetgroup will share the
same position on the axis. Bars with no offsetgroup set will also share the same position on the axis. In the following example, for each quarter, the value for cities
that belong to the same offsetgroup are stacked together.1 2 3 4−15−10−50510152025trace 0
trace 1
trace 2
trace 3Relative Barmode
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 14/34

--- Página 15 ---
import plotly.graph_objects  as go
data = [
    go.Bar(
        x=['Q1', 'Q2', 'Q3', 'Q4'],
        y=[150, 200, 250, 300],
        name='New York' ,
        offsetgroup ="USA"
    ),
    go.Bar(
        x=['Q1', 'Q2', 'Q3', 'Q4'],
        y=[180, 220, 270, 320],
        name='Boston' ,
        offsetgroup ="USA"
    ),
    go.Bar(
        x=['Q1', 'Q2', 'Q3', 'Q4'],
        y=[130, 170, 210, 260],
        name='Montreal' ,
        offsetgroup ="Canada"
    ),
    go.Bar(
        x=['Q1', 'Q2', 'Q3', 'Q4'],
        y=[160, 210, 260, 310],
        name='Toronto' ,
        offsetgroup ="Canada"
    )
]
layout = go.Layout(
    title={
        'text': 'Quarterly Sales by City, Grouped by Country'
    },
    xaxis={
        'title': {
            'text': 'Quarter'
        }
    },
    yaxis={
        'title': {
            'text': 'Sales'
        }
    },
    barmode='stack'
)
fig = go.Figure(data=data, layout=layout)
fig.show()
Q1 Q2 Q3 Q40100200300400500600Toronto
Montreal
Boston
New YorkQuarterly Sales by City, Grouped by Country
QuarterSales
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 15/34

--- Página 16 ---
Stacked Bar Chart From Aggregating a DataFrame
Stacked bar charts are a powerful way to present results summarizing categories generated using the Pandas aggregate commands. pandas.DataFrame.agg produces
a wide data set format incompatible with px.bar. Transposing and updating the indexes to achieve px.bar compatibility is a somewhat involved option. Here is one
straightforward alternative, which presents the aggregated data as a stacked bar using plotly.graph_objects.
from plotly import graph_objects  as go
import pandas as pd
# Get one year of gapminder data
url = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'
df = pd.read_csv (url)
df = df[df['year']==2007]
df["gdp"]=df["pop"]*df['gdpPercap' ]
# Build the summary of interest
df_summarized  = df.groupby("continent" , observed =True).agg("sum").reset_index ()
df_summarized ["percent of world population" ]=100*df_summarized ["pop"]/df_summarized ["pop"].sum()
df_summarized ["percent of world GDP" ]=100*df_summarized ["gdp"]/df_summarized ["gdp"].sum()
df = df_summarized [["continent" ,
"percent of world population" ,
"percent of world GDP" ,
]]
# We now have a wide data frame, but it's in the opposite orientation from the one that px is designed to deal with.
# Transposing it and rebuilding the indexes is an option, but iterating through the DF using graph objects is more succinct.
fig=go.Figure()
for category  in df_summarized ["continent" ].values:
    fig.add_trace (go.Bar(
            x=df.columns[1:],
            # We need to get a pandas series that contains just the values to graph;
            # We do so by selecting the right row, selecting the right columns
            # and then transposing and using iloc to convert to a series
            # Here, we assume that the bar element category variable is in column 0
            y=list(df.loc[df["continent" ]==category ][list(df.columns[1:])].transpose ().iloc[:,0]),
            name=str(category )
        )
)
fig.update_layout (barmode="stack")
fig.show()
percent of world population percent of world GDP020406080100 Oceania
Europe
Asia
Americas
Africa
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 16/34

--- Página 17 ---
Bar Chart with Hover Text
import plotly.graph_objects  as go
x = ['Product A' , 'Product B' , 'Product C' ]
y = [20, 14, 23]
# Use the hovertext kw argument for hover text
fig = go.Figure(data=[go.Bar(x=x, y=y,
            hovertext =['27% market share' , '24% market share' , '19% market share' ])])
# Customize aspect
fig.update_traces (marker_color ='rgb(158,202,225)' , marker_line_color ='rgb(8,48,107)' ,
                  marker_line_width =1.5, opacity=0.6)
fig.update_layout (title_text ='January 2013 Sales Report' )
fig.show()
Product A Product B Product C05101520January 2013 Sales Report
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 17/34

--- Página 18 ---
Bar Chart with Direct Labels
Controlling text fontsize with uniformtextimport plotly.graph_objects  as go
x = ['Product A' , 'Product B' , 'Product C' ]
y = [20, 14, 23]
# Use textposition='auto' for direct text
fig = go.Figure(data=[go.Bar(
            x=x, y=y,
            text=y,
            textposition ='auto',
        )])
fig.show()
If you want all the text labels to have the same size, you can use the uniformtext layout parameter. The minsize attribute sets the font size, and the mode attribute
sets what happens for labels which cannot fit with the desired fontsize: either hide them or show them with overflow. In the example below we also force the text to
be outside of bars with textposition.20
1423
Product A Product B Product C05101520
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 18/34

--- Página 19 ---
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Europe' and year == 2007 and pop &gt; 2.e6" )
fig = px.bar(df, y='pop', x='country' , text='pop')
fig.update_traces (texttemplate ='%{text:.2s} ', textposition ='outside' )
fig.update_layout (uniformtext_minsize =8, uniformtext_mode ='hide')
fig.show()
3.6M8.2M10M
4.6M7.3M
4.5M10M
5.5M5.2M61M82M
11M10M
4.1M58M
17M
4.6M39M
11M22M
10M
5.4M
2.0M40M
9.0M7.6M71M
61M
AlbaniaAustriaBelgiumBosnia and HerzegovinaBulgariaCroatiaCzech RepublicDenmarkFinlandFranceGermanyGreeceHungaryIrelandItalyNetherlandsNorwayPolandPortugalRomaniaSerbiaSlovak RepublicSloveniaSpainSwedenSwitzerlandTurkeyUnited Kingdom010M20M30M40M50M60M70M80M
countrypop
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 19/34

--- Página 20 ---
Rotated Bar Chart Labels
import plotly.graph_objects  as go
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
fig = go.Figure()
fig.add_trace (go.Bar(
    x=months,
    y=[20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],
    name='Primary Product' ,
    marker_color ='indianred'
))
fig.add_trace (go.Bar(
    x=months,
    y=[19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],
    name='Secondary Product' ,
    marker_color ='lightsalmon'
))
# Here we modify the tickangle of the xaxis, resulting in rotated labels.
fig.update_layout (barmode='group', xaxis_tickangle =-45)
fig.show()
JanFeb
Mar
Apr
MayJunJul
Aug
SepOct
Nov
Dec0510152025 Primary Product
Secondary Product
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 20/34

--- Página 21 ---
Customizing Individual Bar Colors
import plotly.graph_objects  as go
colors = ['lightslategray' ,] * 5
colors[1] = 'crimson'
fig = go.Figure(data=[go.Bar(
    x=['Feature A' , 'Feature B' , 'Feature C' ,
       'Feature D' , 'Feature E' ],
    y=[20, 14, 23, 25, 22],
    marker_color =colors # marker color can be a single color value or an iterable
)])
fig.update_layout (title_text ='Least Used Feature' )
Feature A Feature B Feature C Feature D Feature E0510152025Least Used Feature
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 21/34

--- Página 22 ---
Customizing Individual Bar Widths
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Bar(
    x=[1, 2, 3, 5.5, 10],
    y=[10, 8, 6, 4, 2],
    width=[0.8, 0.8, 0.8, 3.5, 4] # customize width here
)])
fig.show()
Bar charts with custom widths can be used to make mekko charts (also known as marimekko charts, mosaic plots, or variwide charts).2 4 6 8 10 120246810
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 22/34

--- Página 23 ---
import plotly.graph_objects  as go
import numpy as np
labels = ["apples" ,"oranges" ,"pears","bananas" ]
widths = np.array([10,20,20,50])
data = {
    "South": [50,80,60,70],
    "North": [50,20,40,30]
}
fig = go.Figure()
for key in data:
    fig.add_trace (go.Bar(
        name=key,
        y=data[key],
        x=np.cumsum(widths)-widths,
        width=widths,
        offset=0,
        customdata =np.transpose ([labels, widths*data[key]]),
        texttemplate ="%{y} x %{width} =&lt;br&gt;%{customdata[1]} ",
        textposition ="inside" ,
        textangle =0,
        textfont_color ="white",
        hovertemplate ="&lt;br&gt;".join([
            "label: % {customdata[0]} ",
            "width: % {width}",
            "height: % {y}",
            "area: % {customdata[1]} ",
        ])
    ))
fig.update_xaxes (
    tickvals =np.cumsum(widths)-widths/2,
    ticktext = ["%s&lt;br&gt;%d" % (l, w) for l, w in zip(labels, widths)]
)
fig.update_xaxes (range=[0,100])
fig.update_yaxes (range=[0,100])
fig.update_layout (
    title_text ="Marimekko Chart" ,
    barmode="stack",
    uniformtext =dict(mode="hide", minsize=10),
)
50 x 10 =
50080 x 20 =
1600
60 x 20 =
120070 x 50 =
350050 x 10 =
50020 x 20 =
40040 x 20 =
80030 x 50 =
1500
apples
10oranges
20pears
20bananas
50020406080100
North
SouthMarimekko Chart
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 23/34

--- Página 24 ---
Using a scatterplot to wrap long bars into multiple columns
This bar-style pictogram allows readers to focus on the relative sizes of smaller entities by wrapping the bar for largest entries into multiple columns. You could make
it even more of a pictogram by using fontawesome to replace the square markers we use below with icons like mortar boards for students.
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 24/34

--- Página 25 ---
import plotly.graph_objects  as go
import pandas as pd
def pictogram_bar (data, title, icon_size , max_icons_per_column =10, units_per_icon =1, unit_description ="", inter_group_spacing =.8,icon_vertical_spac
ing=0.005):
   
    fig = go.Figure()
    x_start = 1
    tick_locations  = []
    #loop through each group and create a trace with its icons 
    for i, (category , value) in enumerate (data.items()):
        # compute the number of icons to use to represent this category.  Depending on your use case, you might replace round with floor or ceiling.
        icon_count  = round(value / units_per_icon )
        # compute the number of columns in which to arrange the icons for this category
        # using a double negative sign to convert a floor(division) operation into a ceiling(division) operation
        num_columns  = -(-icon_count  // max_icons_per_column )
        
        #create and populate lists of icon coordinates
        x_coordinates , y_coordinates  = [], []
        for col in range(num_columns ):
            # the number of icons in this column is the lesser of the column height or
            # the number of icons remaining to place
            column_icons  = min(max_icons_per_column , icon_count  - col * max_icons_per_column )
            
            # Create a one item list containing the x-coordinate of this column.
            # Then add column_icons copies of that coordinate to the list of icon x coordinates using list multiplication.
            # Normalizing the width of each within-category column to 1 simplifies the code.
            # We can adjust the visible space between columns by adjusting the total width below.
            x_coordinates .extend([x_start + col] * column_icons )
            # Create a list of sequentially increasing y-coordinates for icons.
            y_coordinates .extend([y + icon_vertical_spacing  * y for y in range(1, column_icons  + 1)])
        # Add scatter plot for the category
        fig.add_trace (go.Scatter(
            x=x_coordinates ,
            y=y_coordinates ,
            mode='markers' ,
            marker=dict(size=icon_size , symbol="square" , color= i),
            name=category ,
            # Suppress the x and y coordinates in the hover text, since they are irrelevant implementation details.
            hoverinfo ="text",
            text=[f"{category }: {value}" for _ in range(len(x_coordinates ))]
        ))
        
        # Add an annotation above the center of each category showing its value
        fig.add_trace (go.Scatter(
            x=[x_start + (num_columns  - 1) / 2],  # Compute the location of the center
            y=[max_icons_per_column * (1+icon_vertical_spacing ) + 1.15],
            mode="text",
            text=[f"{value}"],
            textfont =dict(size=14, color="black"),
            showlegend =False
        ))
        # Track locations where we will put the text labeling each category
        tick_locations .append(x_start + (num_columns  - 1) / 2)
        #compute the left edge of the next category
        x_start += num_columns  + inter_group_spacing
    fig.update_layout (
        title=title,
        xaxis=dict(
            tickvals =tick_locations ,
            # Label ecah category
            ticktext =list(data.keys()),
            tickangle =-45,
            showgrid =False,
            title="Categories"
        ),
        yaxis=dict(
            title=f"Each icon represents {units_per_icon :,g} {unit_description }",
            # The y-axis goes above the top icon to make room for the annotations.  
            # We set tick values so the axis labeling does not go above the top icon.
            # If you choose a value of max_icons_per_column that is not a multiple of 5, consider changing this.
            tickvals =list(range(0,max_icons_per_column +1,5)),
            showgrid =False,
            zeroline =False,
        ),
        # We have already got all the labeling we need so we suppress the legend.
        showlegend =False,  
        height=700,
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 25/34

--- Página 26 ---
        # The x-coordinates scale to fill available space, so adjusting the width of the image is a good way to adjust spacing between columns.
        width=(len(data) * 150 + 50)  
    )
    fig.show()
df = pd.DataFrame ({
    'School' : ["Haverford College" , "University of Mary Washington" , "Brown University" , "Arizona State University" ],
    'Enrollment' : [1421, 3611, 7226, 65174]
})
pictogram_bar (
    data={row['School' ]: row['Enrollment' ] for _, row in df.iterrows ()},
    title="Undergraduate Enrollment at Participating Schools" ,
    units_per_icon =1000,
    unit_description  = "students" ,
    icon_size =27,
    icon_vertical_spacing =0.05
)
142136117226 65174
Haverford College
University of Mary Washington
Brown University
Arizona State University0510Undergraduate Enrollment at Participating Schools
CategoriesEach icon represents 1,000 students
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 26/34

--- Página 27 ---
Customizing Individual Bar Base
Rounded Barsimport plotly.graph_objects  as go
years = ['2016','2017','2018']
fig = go.Figure()
fig.add_trace (go.Bar(x=years, y=[500, 600, 700],
                base=[-500,-600,-700],
                marker_color ='crimson' ,
                name='expenses' ))
fig.add_trace (go.Bar(x=years, y=[300, 400, 700],
                base=0,
                marker_color ='lightslategrey' ,
                name='revenue'
                ))
fig.show()
New in 5.19
You can round the corners on all bar traces in a figure by setting barcornerradius on the figure's layout. barcornerradius can be a number of pixels or a percentage of
the bar width (using a string ending in %, for example "20%").
In this example, we set all bars to have a radius of 15 pixels.2016 2017 2018−600−400−2000200400600expenses
revenue
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 27/34

--- Página 28 ---
import plotly.graph_objects  as go
from plotly import data
df = data.medals_wide ()
fig = go.Figure(
    data=[
        go.Bar(x=df.nation, y=df.gold, name="Gold"),
        go.Bar(x=df.nation, y=df.silver, name="Silver" ),
        go.Bar(x=df.nation, y=df.bronze, name="Bronze" ),
    ],
    layout=dict(
        barcornerradius =15,
    ),
)
fig.show()
When you don't want all bar traces in a figure to have the same rounded corners, you can instead configure rounded corners on each trace using
marker.cornerradius. In this example, which uses subplots, the first trace has a corner radius of 30 pixels, the second trace has a bar corner radius of 30% of the bar
width, and the third trace has no rounded corners set.South Korea China Canada0510152025
Gold
Silver
Bronze
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 28/34

--- Página 29 ---
Colored and Styled Bar Chartimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
from plotly import data
df = data.medals_wide ()
fig = make_subplots (rows=1, cols=3, shared_yaxes =True)
fig.add_trace (
    go.Bar(x=df.nation, y=df.gold, name="Gold", marker=dict(cornerradius =30)), 1, 1
)
fig.add_trace (
    go.Bar(x=df.nation, y=df.silver, name="Silver" , marker=dict(cornerradius ="30%")),
    1,
    2,
)
fig.add_trace (
    go.Bar(x=df.nation, y=df.bronze, name="Bronze" ),
    1,
    3,
)
fig.show()
In this example several parameters of the layout as customized, hence it is convenient to use directly the go.Layout(...) constructor instead of calling fig.update.South KoreaChinaCanada0510152025
South KoreaChinaCanada South KoreaChinaCanadaGold
Silver
Bronze
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 29/34

--- Página 30 ---
import plotly.graph_objects  as go
years = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
         2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]
fig = go.Figure()
fig.add_trace (go.Bar(x=years,
                y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263,
                   350, 430, 474, 526, 488, 537, 500, 439],
                name='Rest of world' ,
                marker_color ='rgb(55, 83, 109)'
                ))
fig.add_trace (go.Bar(x=years,
                y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,
                   299, 340, 403, 549, 499],
                name='China',
                marker_color ='rgb(26, 118, 255)'
                ))
fig.update_layout (
    title=dict(text='US Export of Plastic Scrap' ),
    xaxis_tickfont_size =14,
    yaxis=dict(
        title=dict(
            text="USD (millions)" ,
            font=dict(
                size=16
            )
        ),
    ),
    legend=dict(
        x=0,
        y=1.0,
        bgcolor='rgba(255, 255, 255, 0)' ,
        bordercolor ='rgba(255, 255, 255, 0)'
    ),
    barmode='group',
    bargap=0.15, # gap between bars of adjacent location coordinates.
    bargroupgap =0.1 # gap between bars of the same location coordinate.
)
fig.show()
1996 1998 2000 2002 2004 2006 2008 2010 20120100200300400500Rest of world
ChinaUS Export of Plastic ScrapUSD (millions)
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 30/34

--- Página 31 ---
Bar Chart with Sorted or Ordered Categories
Set categoryorder to "category ascending" or "category descending" for the alphanumerical order of the category names or "total ascending" or "total descending" for
numerical order of values.  for more information. Note that sorting the
bars by a particular trace isn't possible right now - it's only possible to sort by the total values. Of course, you can always sort your data before plotting it if you need
more customization.
categoryorder (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-categoryorder)
This example orders the bar chart alphabetically with categoryorder: 'category ascending'
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack', xaxis={'categoryorder' :'category ascending' })
fig.show()
This example shows how to customise sort ordering by defining categoryorder to "array" to derive the ordering from the attribute categoryarray.a b c d051015202530Toronto
Ottawa
Montreal
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 31/34

--- Página 32 ---
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack', xaxis={'categoryorder' :'array', 'categoryarray' :['d','a','c','b']})
fig.show()
This example orders the bar chart by descending value with categoryorder: 'total descending'
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack', xaxis={'categoryorder' :'total descending' })
fig.show()d a c b051015202530Toronto
Ottawa
Montreal
d a c b051015202530Toronto
Ottawa
Montreal
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 32/34

--- Página 33 ---
Horizontal Bar Charts
Bar Charts With Multicategory Axis Type
ReferenceSee examples of horizontal bar charts .
here (https://plotly.com/python/horizontal-bar-charts/)
If your traces have arrays for x or y, then the axis type is automatically inferred to be multicategory.
import plotly.graph_objects  as go
x = [
    ["BB+", "BB+", "BB+", "BB", "BB", "BB"],
    [16, 17, 18, 16, 17, 18,]
]
fig = go.Figure()
fig.add_bar(x=x,y=[1,2,3,4,5,6])
fig.add_bar(x=x,y=[6,5,4,3,2,1])
fig.update_layout (barmode="relative" )
fig.show()
See  or 
 for more information and chart attribute options!
function reference for px.bar() (https://plotly.com/python-api-reference/generated/plotly.express.bar)
https://plotly.com/python/reference/bar/
(https://plotly.com/python/reference/bar/)16 17 18 16 17 18
BB+ BB01234567 trace 0
trace 1
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 33/34

--- Página 34 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
bjects
g a
mtext
rs into
Type16/07/2025, 06:20 Bar charts in Python
https://plotly.com/python/bar-charts/ 34/34</content>
    </file>
    <file name="Basic charts in Python.pdf" path="Basic charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
Basic Charts (/python/basic-charts)
Plotly Python Open Source Graphing Library Basic Charts
Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make basic charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/line-and-
scatter/)
Scatter Plots
(/python/line-charts/)
Line Charts
(/python/bar-charts/)
Bar Charts
(/python/pie-charts/)
Pie Charts
(/python/bubble-charts/)
Bubble Charts
(/python/dot-plots/)
Dot Plots
(/python/filled-area-
plots/)
Filled Area Plots
(/python/horizontal-bar-
charts/)
Horizontal Bar Charts
(/python/gantt/)
Gantt Charts
(/python/sunburst-
charts/)
Sunburst Charts
(/python/table/)
Tables
(/python/sankey-
diagram/)
Sankey Diagram
(/python/treemaps/)
Treemap Charts
(/python/performance/)
High Performance
Visualization
(/python/figure-factory-
table/)
Figure Factory Tables
(/python/categorical-
axes/)
Categorical Axes
(/python/icicle-charts/)
Icicle Charts
(/python/pattern-
hatching-texture/)
Patterns, Hatching,
Texture
(/python/dumbbell-
plots/)
Dumbbell Plots
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:28 Basic charts in Python
https://plotly.com/python/basic-charts/ 1/2

--- Página 2 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:28 Basic charts in Python
https://plotly.com/python/basic-charts/ 2/2</content>
    </file>
    <file name="Bubble charts in Python.pdf" path="Bubble charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Bubble chart with plotly.express &gt;  &gt; Bubble
Charts
Bubble Charts in Python
How to make bubble charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bubble-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a scatter plot in which a third dimension of the data is shown through the size of markers. For other
types of scatter plot, see the .
bubble chart (https://en.wikipedia.org/wiki/Bubble_chart)
scatter plot documentation (https://plotly.com/python/line-and-scatter/)
We first show a bubble chart example using Plotly Express.  is the easy-to-use, high-level interface to Plotly, which 
 and produces . The size of markers is set from the dataframe
column given as the size parameter.
Plotly Express (/python/plotly-express/)
operates on
a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df.query("year==2007" ), x="gdpPercap" , y="lifeExp" ,
         size="pop", color="continent" ,
                 hover_name ="country" , log_x=True, size_max =60)
fig.show()
2 345678910002 345678910k2 345674050607080continent
Asia
Europe
Africa
Americas
Oceania
gdpPercaplifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 1/9

--- Página 2 ---
Bubble Chart with plotly.graph_objects
Simple Bubble ChartIf Plotly Express does not provide a good starting point, it is also possible to use ,
and define the size of markers to create a bubble chart. All of the available options are described in the scatter section of the reference page:
.
the more generic go.Scatter class from plotly.graph_objects (/python/graph-objects/)
https://plotly.com/python/reference#scatter (https://plotly.com/python/reference#scatter)
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4], y=[10, 11, 12, 13],
    mode='markers' ,
    marker_size =[40, 60, 80, 100])
])
fig.show()
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 2/9

--- Página 3 ---
Setting Marker Size and Color
Scaling the Size of Bubble Chartsimport plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4], y=[10, 11, 12, 13],
    mode='markers' ,
    marker=dict(
        color=['rgb(93, 164, 214)' , 'rgb(255, 144, 14)' ,
               'rgb(44, 160, 101)' , 'rgb(255, 65, 54)' ],
        opacity=[1, 0.8, 0.6, 0.4],
        size=[40, 60, 80, 100],
    )
)])
fig.show()
To scale the bubble size, use the attribute sizeref. We recommend using the following formula to calculate a sizeref value:
sizeref = 2. * max(array of size values) / (desired maximum marker size ** 2)
Note that setting 'sizeref' to a value greater than 1, decreases the rendered marker sizes, while setting 'sizeref' to less than 1, increases the rendered marker sizes. See
 for more information.
Additionally, we recommend setting the sizemode attribute: 
 to area.
https://plotly.com/python/reference/scatter/#scatter-marker-sizeref (https://plotly.com/python/reference/scatter/#scatter-marker-sizeref)
https://plotly.com/python/reference/scatter/#scatter-marker-sizemode
(https://plotly.com/python/reference/scatter/#scatter-marker-sizemode)
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 3/9

--- Página 4 ---
import plotly.graph_objects  as go
size = [20, 40, 60, 80, 100, 80, 60, 40, 20, 40]
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    y=[11, 12, 10, 11, 12, 11, 12, 13, 12, 11],
    mode='markers' ,
    marker=dict(
        size=size,
        sizemode ='area',
        sizeref=2.*max(size)/(40.**2),
        sizemin=4
    )
)])
fig.show()
2 4 6 8 101010.51111.51212.513
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 4/9

--- Página 5 ---
Hover Text with Bubble Charts
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 2, 3, 4], y=[10, 11, 12, 13],
    text=['A&lt;br&gt;size: 40' , 'B&lt;br&gt;size: 60' , 'C&lt;br&gt;size: 80' , 'D&lt;br&gt;size: 100' ],
    mode='markers' ,
    marker=dict(
        color=['rgb(93, 164, 214)' , 'rgb(255, 144, 14)' ,  'rgb(44, 160, 101)' , 'rgb(255, 65, 54)' ],
        size=[40, 60, 80, 100],
    )
)])
fig.show()
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 5/9

--- Página 6 ---
Bubble Charts with Colorscale
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Scatter(
    x=[1, 3.2, 5.4, 7.6, 9.8, 12.5],
    y=[1, 3.2, 5.4, 7.6, 9.8, 12.5],
    mode='markers' ,
    marker=dict(
        color=[120, 125, 130, 135, 140, 145],
        size=[15, 30, 55, 70, 90, 110],
        showscale =True
        )
)])
fig.show()
2 4 6 8 10 12 140246810121416
120125130135140145
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 6/9

--- Página 7 ---
Categorical Bubble Charts
import plotly.graph_objects  as go
import plotly.express  as px
import pandas as pd
import math
# Load data, define hover text and bubble size
data = px.data.gapminder ()
df_2007 = data[data['year']==2007]
df_2007 = df_2007.sort_values (['continent' , 'country' ])
hover_text  = []
bubble_size  = []
for index, row in df_2007.iterrows ():
    hover_text .append(('Country: {country} &lt;br&gt;'+
                      'Life Expectancy: {lifeExp} &lt;br&gt;'+
                      'GDP per capita: {gdp}&lt;br&gt;'+
                      'Population: {pop}&lt;br&gt;'+
                      'Year: {year}').format(country=row['country' ],
                                            lifeExp=row['lifeExp' ],
                                            gdp=row['gdpPercap' ],
                                            pop=row['pop'],
                                            year=row['year']))
    bubble_size .append(math.sqrt(row['pop']))
df_2007['text'] = hover_text
df_2007['size'] = bubble_size
sizeref = 2.*max(df_2007['size'])/(100**2)
# Dictionary with dataframes for each continent
continent_names  = ['Africa' , 'Americas' , 'Asia', 'Europe' , 'Oceania' ]
continent_data  = {continent :df_2007.query("continent == ' %s'" %continent )
                              for continent  in continent_names }
# Create figure
fig = go.Figure()
for continent_name , continent  in continent_data .items():
    fig.add_trace (go.Scatter(
        x=continent ['gdpPercap' ], y=continent ['lifeExp' ],
        name=continent_name , text=continent ['text'],
        marker_size =continent ['size'],
        ))
# Tune marker appearance and layout
fig.update_traces (mode='markers' , marker=dict(sizemode ='area',
                                              sizeref=sizeref, line_width =2))
fig.update_layout (
    title=dict(text='Life Expectancy v. Per Capita GDP, 2007' ),
    xaxis=dict(
        title=dict(text='GDP per capita (2000 dollars)' ),
        gridcolor ='white',
        type='log',
        gridwidth =2,
    ),
    yaxis=dict(
        title=dict(text='Life Expectancy (years)' ),
        gridcolor ='white',
        gridwidth =2,
    ),
    paper_bgcolor ='rgb(243, 243, 243)' ,
    plot_bgcolor ='rgb(243, 243, 243)' ,
)
fig.show()
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 7/9

--- Página 8 ---
Reference
What About Dash?See  for more information and chart attribute options!
https://plotly.com/python/reference/scatter/ (https://plotly.com/python/reference/scatter/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
2 345678910002 345678910k2 345678405060708090
Africa
Americas
Asia
Europe
Oceania
Life Expectancy v. Per Capita GDP, 2007
GDP per capita (2000 dollars)Life Expectancy (years)
JOIN OUR MAILING LIST Products Pricing
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 8/9

--- Página 9 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION)
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/)
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
cts16/07/2025, 06:21 Bubble charts in Python
https://plotly.com/python/bubble-charts/ 9/9</content>
    </file>
    <file name="Categorical axes in Python.pdf" path="Categorical axes in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)2-D Cartesian Axis Type and Auto-Detection
'linear' (see the )
'log' (see the )
'date' (see the )
'category' see below
'multicategory' see below
First check for multicategory, then date, then category, else default to linear (log is never automatically selected)
multicategory is just a shape test: is the array nested?
date and category: require more than twice as many distinct date or category strings as distinct numbers in order to choose that axis type.
Both of these test an evenly-spaced sample of at most 1000 values
Forcing an axis to be categorical &gt;  &gt;
Categorical Axes
Categorical Axes in Python
How to use categorical axes in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/categorical-
axes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page shows examples of how to configure  to visualize categorical
(i.e. qualitative, nominal or ordinal data as opposed to continuous numerical data). Such axes are a natural fit for bar charts, waterfall charts, funnel charts, heatmaps,
violin charts and box plots, but can also be used with scatter plots and line charts.  on logarithmic
axes is done the same was as with .
2-dimensional Cartesian axes (/python/figure-structure/#2d-cartesian-trace-types-and-subplots)
Configuring gridlines, ticks, tick labels and axis titles (/python/axes/)
linear axes (/python/axes/)
The different types of Cartesian axes are configured via the xaxis.type or yaxis.type attribute, which can take on the following values:
linear axes tutorial (/python/axes/)
log plot tutorial (/python/log-plot/)
tutorial on timeseries (/python/time-series/)
The axis type is auto-detected by looking at data from the first  linked to this axis:
trace (/python/figure-structure/)
It is possible to force the axis type by setting explicitly xaxis_type. In the example below the automatic X axis type would be linear (because there are not more than
twice as many unique strings as unique numbers) but we force it to be category.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 1/9

--- Página 2 ---
Categorical Axes and Trace Typesimport plotly.express  as px
fig = px.bar(x=["a", "a", "b", 3], y = [1,2,3,4])
fig.update_xaxes (type='category' )
fig.show()
Every cartesian trace type is compatible with categorical axes, not just bar.
Scatter plots where one axis is categorical are often known as .
dot plots (https://plotly.com/python/dot-plots/)
import plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="nation" , x="count", color="medal", symbol="medal")
fig.update_traces (marker_size =10)
fig.show()
 and  are often shown with one categorical and one continuous axis.
Box plots ()
violin plots ()a b 300.511.522.533.54
xy
8 10 12 14 16 18 20 22 24South KoreaChinaCanadamedal
gold
silver
bronze
countnation
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 2/9

--- Página 3 ---
Controlling the Category Order with Plotly Expressimport plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="sex", y="total_bill" , color="smoker" )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, x="sex", y="total_bill" , color="smoker" )
fig.show()
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
By default, Plotly Express lays out categorical data in the order in which it appears in the underlying data. Every 2-d cartesian Plotly Express function also includes a
category_orders keyword argument which can be used to control the order in which categorical axes are drawn, but beyond that can also control 
, and .
the order in which
discrete colors appear in the legend (/python/discrete-color/)
the order in which facets are laid out (/python/facet-plots/)Female Male1020304050smoker
No
Yes
sextotal_bill
Female Male0102030405060smoker
No
Yes
sextotal_bill
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 3/9

--- Página 4 ---
Automatically Sorting Categories by Name or Total Valueimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="group", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.show()
Whether using Plotly Express or not, categories can be sorted alphabetically or by value using the categoryorder attribute:
Set categoryorder to "category ascending" or "category descending" for the alphanumerical order of the category names or "total ascending" or "total descending" for
numerical order of values.  for more information. Note that sorting the
bars by a particular trace isn't possible right now - it's only possible to sort by the total values. Of course, you can always sort your data before plotting it if you need
more customization.
categoryorder (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-categoryorder)
This example orders the categories alphabetically with categoryorder: 'category ascending'Thur Fri Sat Sun0100200300400500600700800900
Thur Fri Sat Sunsmoker
Yes
No
day daytotal_billsex=Male sex=Female
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 4/9

--- Página 5 ---
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack')
fig.update_xaxes (categoryorder ='category ascending' )
fig.show()
This example orders the categories by total value with categoryorder: 'total descending'
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack')
fig.update_xaxes (categoryorder ='total ascending' )
fig.show()a b c d051015202530Toronto
Ottawa
Montreal
b c a d051015202530Toronto
Ottawa
Montreal
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 5/9

--- Página 6 ---
Gridlines, Ticks and Tick LabelsThis example shows how to control category order when using plotly.graph_objects by defining categoryorder to "array" to derive the ordering from the attribute
categoryarray.
import plotly.graph_objects  as go
x=['b', 'a', 'c', 'd']
fig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal' ))
fig.add_trace (go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa' ))
fig.add_trace (go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto' ))
fig.update_layout (barmode='stack')
fig.update_xaxes (categoryorder ='array', categoryarray = ['d','a','c','b'])
fig.show()
By default, gridlines and ticks are not shown on categorical axes but they can be activated:d a c b051015202530Toronto
Ottawa
Montreal
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 6/9

--- Página 7 ---
import plotly.express  as px
fig = px.bar(x=["A","B","C"], y=[1,3,2])
fig.update_xaxes (showgrid =True, ticks="outside" )
fig.show()
By default, ticks and gridlines appear on the categories but the tickson attribute can be used to move them to the category boundaries:
import plotly.express  as px
fig = px.bar(x=["A","B","C"], y=[1,3,2])
fig.update_xaxes (showgrid =True, ticks="outside" , tickson="boundaries" )
fig.show()A B C00.511.522.53
xy
A B C00.511.522.53
xy
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 7/9

--- Página 8 ---
Multi-categorical Axes
ReferenceA two-level categorical axis (also known as grouped or hierarchical categories, or sub-categories) can be created by specifying a trace's x or y property as a 2-
dimensional lists. The first sublist represents the outer categorical value while the second sublist represents the inner categorical value. This is only possible with
plotly.graph_objects at the moment, and not Plotly Express.
Passing in a two-dimensional list as the x or y value of a trace causes  to be set to multicategory.
the type of the corresponding axis (/python/axes/)
Here is an example that creates a figure with 2 bar traces with a 2-level categorical x-axis.
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
  x = [['First', 'First', 'Second' , 'Second' ],
       ["A", "B", "A", "B"]],
  y = [2, 3, 1, 5],
  name = "Adults" ,
))
fig.add_trace (go.Bar(
  x = [['First', 'First', 'Second' , 'Second' ],
       ["A", "B", "A", "B"]],
  y = [8, 3, 6, 5],
  name = "Children" ,
))
fig.update_layout (title_text ="Multi-category axis" )
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/layout/xaxis/ (https://plotly.com/python/reference/layout/xaxis/)A B A B
First Second012345678 Adults
ChildrenMulti-category axis
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 8/9

--- Página 9 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
etection
h Plotly
Name16/07/2025, 06:26 Categorical axes in Python
https://plotly.com/python/categorical-axes/ 9/9</content>
    </file>
    <file name="Dot plots in Python.pdf" path="Dot plots in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Dot Plot &gt;  &gt; Dot
Plots
Dot Plots in Python
How to make dot plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/dot-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Dot plots (also known as ) are  with one
categorical axis and one continuous axis. They can be used to show changes between two (or more) points in time or between two (or more) conditions. Compared to
a , dot plots can be less cluttered and allow for an easier comparison between conditions.
Cleveland dot plots (https://en.wikipedia.org/wiki/Dot_plot_(statistics))
scatter plots (https://plotly.com/python/line-and-scatter/)
bar chart (/python/bar-charts/)
For the same data, we show below how to create a dot plot using either px.scatter or go.Scatter.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="nation" , x="count", color="medal", symbol="medal")
fig.update_traces (marker_size =10)
fig.show()
8 10 12 14 16 18 20 22 24South KoreaChinaCanadamedal
gold
silver
bronze
countnation
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 1/6

--- Página 2 ---
import plotly.express  as px
import pandas as pd
schools = ["Brown", "NYU", "Notre Dame" , "Cornell" , "Tufts", "Yale",
           "Dartmouth" , "Chicago" , "Columbia" , "Duke", "Georgetown" ,
           "Princeton" , "U.Penn" , "Stanford" , "MIT", "Harvard" ]
n_schools  = len(schools)
women_salary  = [72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112]
men_salary  = [92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165]
df = pd.DataFrame (dict(school=schools*2, salary=men_salary  + women_salary ,
                       gender=["Men"]*n_schools  + ["Women"]*n_schools ))
# Use column names of df for the different parameters x, y, color, ...
fig = px.scatter(df, x="salary" , y="school" , color="gender" ,
                 title="Gender Earnings Disparity" ,
                 labels={"salary" :"Annual Salary (in thousands)" } # customize axis label
                )
fig.show()
80 100 120 140 160BrownNYUNotre DameCornellTuftsYaleDartmouthChicagoColumbiaDukeGeorgetownPrincetonU.PennStanfordMITHarvardgender
Men
WomenGender Earnings Disparity
Annual Salary (in thousands)school
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 2/6

--- Página 3 ---
Styled Categorical Dot Plotimport plotly.graph_objects  as go
schools = ["Brown", "NYU", "Notre Dame" , "Cornell" , "Tufts", "Yale",
           "Dartmouth" , "Chicago" , "Columbia" , "Duke", "Georgetown" ,
           "Princeton" , "U.Penn" , "Stanford" , "MIT", "Harvard" ]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112],
    y=schools,
    marker=dict(color="crimson" , size=12),
    mode="markers" ,
    name="Women",
))
fig.add_trace (go.Scatter(
    x=[92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165],
    y=schools,
    marker=dict(color="gold", size=12),
    mode="markers" ,
    name="Men",
))
fig.update_layout (
    title=dict(
        text="Gender Earnings Disparity"
    ),
    xaxis=dict(
        title=dict(
            text="Annual Salary (in thousands)"
        )
    ),
    yaxis=dict(
        title=dict(
            text="School"
        )
    ),
)
fig.show()
80 100 120 140 160BrownNYUNotre DameCornellTuftsYaleDartmouthChicagoColumbiaDukeGeorgetownPrincetonU.PennStanfordMITHarvardWomen
MenGender Earnings Disparity
Annual Salary (in thousands)School
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
country = ['Switzerland (2011)' , 'Chile (2013)' , 'Japan (2014)' ,
           'United States (2012)' , 'Slovenia (2014)' , 'Canada (2011)' ,
           'Poland (2010)' , 'Estonia (2015)' , 'Luxembourg (2013)' , 'Portugal (2011)' ]
voting_pop  = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]
reg_voters  = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=voting_pop ,
    y=country,
    name='Percent of estimated voting age population' ,
    marker=dict(
        color='rgba(156, 165, 196, 0.95)' ,
        line_color ='rgba(156, 165, 196, 1.0)' ,
    )
))
fig.add_trace (go.Scatter(
    x=reg_voters , y=country,
    name='Percent of estimated registered voters' ,
    marker=dict(
        color='rgba(204, 204, 204, 0.95)' ,
        line_color ='rgba(217, 217, 217, 1.0)'
    )
))
fig.update_traces (mode='markers' , marker=dict(line_width =1, symbol='circle' , size=16))
fig.update_layout (
    title=dict(text="Votes cast for ten lowest voting age population in OECD countries" ),
    xaxis=dict(
        showgrid =False,
        showline =True,
        linecolor ='rgb(102, 102, 102)' ,
        tickfont_color ='rgb(102, 102, 102)' ,
        showticklabels =True,
        dtick=10,
        ticks='outside' ,
        tickcolor ='rgb(102, 102, 102)' ,
    ),
    margin=dict(l=140, r=40, b=50, t=80),
    legend=dict(
        font_size =10,
        yanchor='middle' ,
        xanchor='right',
    ),
    width=800,
    height=600,
    paper_bgcolor ='white',
    plot_bgcolor ='white',
    hovermode ='closest' ,
)
fig.show()
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 4/6

--- Página 5 ---
Reference
What About Dash?See  for more information and chart attribute options!
https://plotly.com/python/reference/scatter/ (https://plotly.com/python/reference/scatter/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)40 50 60 70 80 90Switzerland (2011)Chile (2013)Japan (2014)United States (2012)Slovenia (2014)Canada (2011)Poland (2010)Estonia (2015)Luxembourg (2013)Portugal (2011)Percent of estimated voting age population
Percent of estimated registered votersVotes cast for ten lowest voting age population in OECD countries
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 5/6

--- Página 6 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:21 Dot plots in Python
https://plotly.com/python/dot-plots/ 6/6</content>
    </file>
    <file name="Dumbbell plots in Python.pdf" path="Dumbbell plots in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Dumbbell Plot &gt;  &gt; Dumbbell
Plots
Dumbbell Plots in Python
How to create dumbbell plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/dumbbell-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Dumbbell plots are useful for demonstrating change between two sets of data points, for example, the population change for a selection of countries for two different
years.
In this example, we compare life expectancy in 1952 with life expectancy in 2002 for countries in Europe.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 1/6

--- Página 2 ---
import plotly.graph_objects  as go
from plotly import data
import pandas as pd
df = data.gapminder ()
df = df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([1952, 2002]))]
countries  = (
    df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([2002]))]
    .sort_values (by=["lifeExp" ], ascending =True)["country" ]
    .unique()
)
data = {"line_x" : [], "line_y" : [], "1952": [], "2002": [], "colors" : [], "years": [], "countries" : []}
for country in countries :
    data["1952"].extend([df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["2002"].extend([df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["line_x" ].extend(
        [
            df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0],
            df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0],
            None,
        ]
    )
    data["line_y" ].extend([country, country, None]),
fig = go.Figure(
    data=[
        go.Scatter(
            x=data["line_x" ],
            y=data["line_y" ],
            mode="lines",
            showlegend =False,
            marker=dict(
                color="grey"
            )
        ),
        go.Scatter(
            x=data["1952"],
            y=countries ,
            mode="markers" ,
            name="1952",
            marker=dict(
                color="green",
                size=10
            )
        ),
        go.Scatter(
            x=data["2002"],
            y=countries ,
            mode="markers" ,
            name="2002",
            marker=dict(
                color="blue",
                size=10
            )
        ),
    ]
)
fig.update_layout (
    title=dict(text="Life Expectancy in Europe: 1952 and 2002" ),
    height=1000,
    legend_itemclick =False
)
fig.show()
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 2/6

--- Página 3 ---
Dumbbell Plot with Arrow Markers
Note: The arrow, angleref, and standoff properties used on the marker in this example are new in 5.11
In this example, we add arrow markers to the plot. The first trace adds the lines connecting the data points and arrow markers. The second trace adds circle markers.
On the first trace, we use standoff=8 to position the arrow marker back from the data point. For the arrow marker to point directly at the circle marker, this value
should be half the circle marker size, which is hardcoded to 16 here.45 50 55 60 65 70 75 80TurkeyRomaniaBulgariaHungarySerbiaSlovak RepublicMontenegroBosnia and HerzegovinaPolandCroatiaCzech RepublicAlbaniaSloveniaDenmarkPortugalIrelandGreeceBelgiumFinlandUnited KingdomNetherlandsGermanyAustriaNorwayFranceSpainSwedenItalyIcelandSwitzerland1952
2002Life Expectancy in Europe: 1952 and 2002
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 3/6

--- Página 4 ---
import pandas as pd
import plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
df = df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([1952, 2002]))]
countries  = (
    df.loc[(df.continent  == "Europe" ) &amp; (df.year.isin([2002]))]
    .sort_values (by=["lifeExp" ], ascending =True)["country" ]
    .unique()
)
data = {"line_x" : [], "line_y" : [], "1952": [], "2002": [], "colors" : [], "years": [], "countries" : []}
for country in countries :
    data["1952"].extend([df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["2002"].extend([df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0]])
    data["line_x" ].extend(
        [
            df.loc[(df.year == 1952) &amp; (df.country == country)]["lifeExp" ].values[0],
            df.loc[(df.year == 2002) &amp; (df.country == country)]["lifeExp" ].values[0],
            None,
        ]
    )
    data["line_y" ].extend([country, country, None]),
fig = go.Figure(
    data=[
        go.Scatter(
            x=data["line_x" ],
            y=data["line_y" ],
            mode="markers+lines" ,
            showlegend =False,
            marker=dict(
                symbol="arrow",
                color="black",
                size=16,
                angleref ="previous" ,
                standoff =8
            )
        ),
        go.Scatter(
            x=data["1952"],
            y=countries ,
            name="1952",
            mode="markers" ,
            marker=dict(
                color="silver" ,
                size=16,
            )
        ),
        go.Scatter(
            x=data["2002"],
            y=countries ,
            name="2002",
            mode="markers" ,
            marker=dict(
                color="lightskyblue" ,
                size=16,
            ),
        ),
    ]
)
fig.update_layout (
    title=dict(text="Life Expectancy in Europe: 1952 and 2002" ),
    height=1000,
    legend_itemclick =False
)
fig.show()
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 4/6

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter45 50 55 60 65 70 75 80TurkeyRomaniaBulgariaHungarySerbiaSlovak RepublicMontenegroBosnia and HerzegovinaPolandCroatiaCzech RepublicAlbaniaSloveniaDenmarkPortugalIrelandGreeceBelgiumFinlandUnited KingdomNetherlandsGermanyAustriaNorwayFranceSpainSwedenItalyIcelandSwitzerland1952
2002Life Expectancy in Europe: 1952 and 2002
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 5/6

--- Página 6 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:27 Dumbbell plots in Python
https://plotly.com/python/dumbbell-plots/ 6/6</content>
    </file>
    <file name="Figure factory tables in Python.pdf" path="Figure factory tables in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Table
Add Links &gt;  &gt; Figure
Factory Tables
Figure Factory Tables in Python
How to make tables in Python with Plotly's Figure Factory.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/figure-
factory-table.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Tables can be created using a , or by using a  as detailed in this page.
table trace type (/python/table/)
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig = ff.create_table (data_matrix )
fig.show()
Country Year Population
United States 2000 282200000
Canada 2000 27790000
United States 2005 295500000
Canada 2005 32310000
United States 2010 309000000
Canada 2010 34000000
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 1/8

--- Página 2 ---
Use LaTeXimport plotly.figure_factory  as ff
data_matrix  = [['User', 'Language' , 'Chart Type' , '# of Views' ],
               ['&lt;a href="https://plotly.com/~empet/folder/home"&gt;empet&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/python/"&gt;Python&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~empet/8614/"&gt;Network Graph&lt;/a&gt;' ,
                298],
               ['&lt;a href="https://plotly.com/~Grondo/folder/home"&gt;Grondo&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/matlab/"&gt;Matlab&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Grondo/42/"&gt;Subplots&lt;/a&gt;' ,
                356],
               ['&lt;a href="https://plotly.com/~Dreamshot/folder/home"&gt;Dreamshot&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/"&gt;Bubble Map&lt;/a&gt;' ,
                262],
               ['&lt;a href="https://plotly.com/~FiveThirtyEight/folder/home"&gt;FiveThirtyEight&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~FiveThirtyEight/30/"&gt;Scatter&lt;/a&gt;' ,
                692],
               ['&lt;a href="https://plotly.com/~cpsievert/folder/home"&gt;cpsievert&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/r/"&gt;R&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~cpsievert/1130/"&gt;Surface&lt;/a&gt;' ,
                302]]
fig = ff.create_table (data_matrix )
fig.show()
import plotly.figure_factory  as ff
data_matrix  = [['Name', 'Equation' ],
               ['Pythagorean Theorem' , '$a^{2}+b^{2}=c^{2}$'],
               ['Euler\'s Formula' , '$F-E+V=2$' ],
               ['The Origin of Complex Numbers' , '$i^{2}=-1$'],
               ['Einstein \'s Theory of Relativity' , '$E=m c^ {2}$']]
fig =  ff.create_table (data_matrix )
fig.show()
User Language Chart Type # of Views
empet
Python
Network Graph
298
Grondo
Matlab
Subplots
356
Dreamshot
Web App
Bubble Map
262
FiveThirtyEight
Web App
Scatter
692
cpsievert
R
Surface
302
Name Equation
Pythagorean Theorem
Euler's Formula
The Origin of Complex Numbers
Einstein's Theory of Relativity
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 2/8

--- Página 3 ---
Use a Pandas Dataframe
Modify Row Heightimport plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[100:120]
fig =  ff.create_table (df_sample )
fig.show()
The default row height is 30 pixels. Set height_constant if you'd like to change the height of each row.
import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig =  ff.create_table (data_matrix , height_constant =20)
fig.show()
country year pop continent lifeExp gdpPercap
Bangladesh 1972 70759295.0 Asia 45.252 630.2336265
Bangladesh 1977 80428306.0 Asia 46.923 659.8772322
Bangladesh 1982 93074406.0 Asia 50.009 676.9818656
Bangladesh 1987 103764241.0 Asia 52.819 751.9794035
Bangladesh 1992 113704579.0 Asia 56.018 837.8101643
Bangladesh 1997 123315288.0 Asia 59.412 972.7700352
Bangladesh 2002 135656790.0 Asia 62.013 1136.39043
Bangladesh 2007 150448339.0 Asia 64.062 1391.253792
Belgium 1952 8730405.0 Europe 68.0 8343.105127
Belgium 1957 8989111.0 Europe 69.24 9714.960623
Belgium 1962 9218400.0 Europe 70.25 10991.20676
Belgium 1967 9556500.0 Europe 70.94 13149.04119
Belgium 1972 9709100.0 Europe 71.44 16672.14356
Belgium 1977 9821800.0 Europe 72.8 19117.97448
Belgium 1982 9856303.0 Europe 73.93 20979.84589
Belgium 1987 9870200.0 Europe 75.35 22525.56308
Belgium 1992 10045622.0 Europe 76.46 25575.57069
Belgium 1997 10199787.0 Europe 77.53 27561.19663
Belgium 2002 10311970.0 Europe 78.32 30485.88375
Belgium 2007 10392226.0 Europe 79.441 33692.60508
Country Year Population
United States 2000 282200000
Canada 2000 27790000
United States 2005 295500000
Canada 2005 32310000
United States 2010 309000000
Canada 2010 34000000
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 3/8

--- Página 4 ---
Custom Table Colors
Custom Font Colorsimport plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[400:410]
colorscale  = [[0, '#4d004c' ],[.5, '#f2e5ff' ],[1, '#ffffff' ]]
fig =  ff.create_table (df_sample , colorscale =colorscale )
fig.show()
import plotly.figure_factory  as ff
text = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]
colorscale  = [[0, '#272D31' ],[.5, '#ffffff' ],[1, '#ffffff' ]]
font=['#FCFCFC' , '#00EE00' , '#008B00' , '#004F00' , '#660000' , '#CD0000' , '#FF3030' ]
fig = ff.create_table (text, colorscale =colorscale , font_colors =font)
fig.layout.width=250
fig.show()
country year pop continent lifeExp gdpPercap
Czech Republic 1972 9862158.0 Europe 70.29 13108.4536
Czech Republic 1977 10161915.0 Europe 70.71 14800.16062
Czech Republic 1982 10303704.0 Europe 70.96 15377.22855
Czech Republic 1987 10311597.0 Europe 71.58 16310.4434
Czech Republic 1992 10315702.0 Europe 72.4 14297.02122
Czech Republic 1997 10300707.0 Europe 74.01 16048.51424
Czech Republic 2002 10256295.0 Europe 75.51 17596.21022
Czech Republic 2007 10228744.0 Europe 76.486 22833.30851
Denmark 1952 4334000.0 Europe 70.78 9692.385245
Denmark 1957 4487831.0 Europe 71.81 11099.65935
Team Rank
A 1
B 2
C 3
D 4
E 5
F 6
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 4/8

--- Página 5 ---
Change Font Size
Tables with Graphsimport plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig = ff.create_table (data_matrix , index=True)
# Make text size larger
for i in range(len(fig.layout.annotations )):
    fig.layout.annotations [i].font.size = 20
fig.show()
Country Year Population
United States 2000 282200000
Canada 2000 27790000
United States 2005 295500000
Canada 2005 32310000
United States 2010 309000000
Canada 2010 34000000
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 5/8

--- Página 6 ---
import plotly.graph_objs  as go
import plotly.figure_factory  as ff
# Add table data
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['LA Kings' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
# Initialize a figure with ff.create_table(table_data)
fig = ff.create_table (table_data , height_constant =60)
# Add graph data
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'LA Kings' , 'Ottawa Senators' ]
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]
# Make traces for graph
fig.add_trace (go.Scatter(x=teams, y=GFPG,
                    marker=dict(color='#0099ff' ),
                    name='Goals For&lt;br&gt;Per Game' ,
                    xaxis='x2', yaxis='y2'))
fig.add_trace (go.Scatter(x=teams, y=GAPG,
                    marker=dict(color='#404040' ),
                    name='Goals Against&lt;br&gt;Per Game' ,
                    xaxis='x2', yaxis='y2'))
fig.update_layout (
    title_text  = '2016 Hockey Stats' ,
    margin = {'t':50, 'b':100},
    xaxis = {'domain' : [0, .5]},
    xaxis2 = {'domain' : [0.6, 1.]},
    yaxis2 = {'anchor' : 'x2', 'title': 'Goals'}
)
fig.show()
Montréal CanadiensDallas StarsNY RangersBoston BruinsChicago BlackhawksLA KingsOttawa Senators22.22.42.62.833.23.43.6Goals For
Per Game
Goals Against
Per Game2016 Hockey Stats
GoalsTeam Wins Losses Ties
Montréal
Canadiens18 4 0
Dallas Stars18 5 0
NY Rangers16 5 0
Boston
Bruins13 8 0
Chicago
Blackhawks13 8 0
LA Kings 13 8 0
Ottawa
Senators12 5 0
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 6/8

--- Página 7 ---
import plotly.graph_objs  as go
import plotly.figure_factory  as ff
# Add table data
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
# Initialize a fig with ff.create_table(table_data)
fig = ff.create_table (table_data , height_constant =60)
# Add graph data
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'Ottawa Senators' ]
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]
fig.add_trace (go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#0099ff' ),
                name='Goals For&lt;br&gt;Per Game' ))
fig.add_trace (go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#404040' ),
                name='Goals Against&lt;br&gt;Per Game' ))
fig.update_layout (
    title_text  = '2016 Hockey Stats' ,
    height = 800,
    margin = {'t':75, 'l':50},
    yaxis = {'domain' : [0, .45]},
    xaxis2 = {'anchor' : 'y2'},
    yaxis2 = {'domain' : [.6, 1], 'anchor' : 'x2', 'title': 'Goals'}
)
fig.show()
Montréal CanadiensDallas Stars NY Rangers Boston BruinsChicago BlackhawksOttawa Senators00.511.522.533.5 Goals For
Per Game
Goals Against
Per Game2016 Hockey StatsGoals
Team Wins Losses Ties
Montréal
Canadiens18 4 0
Dallas Stars 18 5 0
NY Rangers 16 5 0
Boston
Bruins13 8 0
Chicago
Blackhawks13 8 0
Ottawa
Senators12 5 0
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 7/8

--- Página 8 ---
Reference
What About Dash?For more info on ff.create_table(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_table.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:26 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 8/8</content>
    </file>
    <file name="Filled area plots in Python.pdf" path="Filled area plots in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Filled area plot with plotly.express
Filled area plot in Dash &gt;  &gt; Filled
Area Plots
Filled Area Plots in Python
How to make filled area plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/filled-area-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This example shows how to fill the area enclosed by traces.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
px.area creates a stacked area plot. Each filled area corresponds to one value of the column given by the line_group parameter.
import plotly.express  as px
df = px.data.gapminder ()
fig = px.area(df, x="year", y="pop", color="continent" , line_group ="country" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1960 1970 1980 1990 200001B2B3B4B5B6Bcontinent
Asia
Europe
Africa
Americas
Oceania
yearpop
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 1/10

--- Página 2 ---
Pattern FillsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
New in v5.7
Area charts afford the use of  in addition to color:
patterns (also known as hatching or texture) (/python/pattern-hatching-texture/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Country's key performance analytics"),
    html.P("Select data on y-axis:"),
    dcc.Dropdown(
        id='y-axis',
        options=['lifeExp', 'pop', 'gdpPercap'],
        value='gdpPercap'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("y-axis", "value"))
def display_area(y):
    df = px.data.gapminder() # replace with your own data source
    countries = (
        df.country.drop_duplicates()
        .sample(n=10, random_state=42)
    )
 df df[df t ii( ti)]DOWNLOAD
Country's key performance analytics
Select data on y-axis:
gdpPercap ×
1960 1970 1980 1990 2000020k40k60k80k100k120k continent
Europe
Asia
Africa
Americas
yeargdpPercap
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 2/10

--- Página 3 ---
Filled area chart with plotly.graph_objects
Basic Overlaid Area Chartimport plotly.express  as px
df = px.data.medals_long ()
fig = px.area(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"])
fig.show()
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy' )) # fill down to xaxis
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty' )) # fill to trace0 y
fig.show()gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
1 1.5 2 2.5 3 3.5 401234567trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 3/10

--- Página 4 ---
Overlaid Area Chart Without Boundary Lines
Interior Filling for Area Chartimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy' ,
                    mode='none' # override default markers+lines
                    ))
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty' ,
                    mode= 'none'))
fig.show()
1 1.5 2 2.5 3 3.5 401234567 trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 4/10

--- Página 5 ---
Gradient Fillimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3, 4], y=[3, 4, 8, 3],
    fill=None,
    mode='lines',
    line_color ='indigo' ,
    ))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4],
    y=[1, 6, 2, 6],
    fill='tonexty' , # fill area between trace0 and trace1
    mode='lines', line_color ='indigo' ))
fig.show()
New in 5.20
Scatter traces with a fill support a fillgradient, which is a dict of options that defines the gradient. Use fillgradient.colorscale to define the 
 for the gradient and choose a type to define the orientation of the gradient ('horizontal', 'vertical' or 'radial').
colorscale
(https://plotly.com/python/colorscales)
In the following example, we've defined a horizontalfillgradient with a colorscale of three colors.1 1.5 2 2.5 3 3.5 412345678 trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 5/10

--- Página 6 ---
Stacked Area Chartimport plotly.graph_objects  as go
fig = go.Figure(
    [
        go.Scatter(
            x=[1, 2, 3, 4],
            y=[3, 4, 8, 3],
            fill=None,
            mode="lines",
            line_color ="darkblue" ,
        ),
        go.Scatter(
            x=[1, 2, 3, 4],
            y=[1, 6, 2, 6],
            fill="tonexty" ,
            mode="lines",
            line_color ="darkblue" ,
            fillgradient =dict(
                type="horizontal" ,
                colorscale =[(0.0, "darkblue" ), (0.5, "royalblue" ), (1.0, "cyan")],
            ),
        ),
    ]
)
fig.show()
The stackgroup parameter is used to add the y values of the different traces in the same group. Traces in the same group fill up to the next trace of the group.1 1.5 2 2.5 3 3.5 412345678 trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 6/10

--- Página 7 ---
import plotly.graph_objects  as go
x=['Winter' , 'Spring' , 'Summer' , 'Fall']
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x, y=[40, 60, 40, 10],
    hoverinfo ='x+y',
    mode='lines',
    line=dict(width=0.5, color='rgb(131, 90, 241)' ),
    stackgroup ='one' # define stack group
))
fig.add_trace (go.Scatter(
    x=x, y=[20, 10, 10, 60],
    hoverinfo ='x+y',
    mode='lines',
    line=dict(width=0.5, color='rgb(111, 231, 219)' ),
    stackgroup ='one'
))
fig.add_trace (go.Scatter(
    x=x, y=[40, 30, 50, 30],
    hoverinfo ='x+y',
    mode='lines',
    line=dict(width=0.5, color='rgb(184, 247, 212)' ),
    stackgroup ='one'
))
fig.update_layout (yaxis_range =(0, 100))
fig.show()
Winter Spring Summer Fall020406080100
trace 2
trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 7/10

--- Página 8 ---
Stacked Area Chart with Normalized Values
Select Hover Pointsimport plotly.graph_objects  as go
x=['Winter' , 'Spring' , 'Summer' , 'Fall']
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x, y=[40, 20, 30, 40],
    mode='lines',
    line=dict(width=0.5, color='rgb(184, 247, 212)' ),
    stackgroup ='one',
    groupnorm ='percent'  # sets the normalization for the sum of the stackgroup
))
fig.add_trace (go.Scatter(
    x=x, y=[50, 70, 40, 60],
    mode='lines',
    line=dict(width=0.5, color='rgb(111, 231, 219)' ),
    stackgroup ='one'
))
fig.add_trace (go.Scatter(
    x=x, y=[70, 80, 60, 70],
    mode='lines',
    line=dict(width=0.5, color='rgb(127, 166, 238)' ),
    stackgroup ='one'
))
fig.add_trace (go.Scatter(
    x=x, y=[100, 100, 100, 100],
    mode='lines',
    line=dict(width=0.5, color='rgb(131, 90, 241)' ),
    stackgroup ='one'
))
fig.update_layout (
    showlegend =True,
    xaxis_type ='category' ,
    yaxis=dict(
        type='linear' ,
        range=[1, 100],
        ticksuffix ='%'))
fig.show()
Winter Spring Summer Fall20%40%60%80%100%
trace 3
trace 2
trace 1
trace 0
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 8/10

--- Página 9 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[0,0.5,1,1.5,2], y=[0,1,2,1,0],
                    fill='toself' , fillcolor ='darkviolet' ,
                    hoveron = 'points+fills' , # select where hover is active
                    line_color ='darkviolet' ,
                    text="Points + Fills" ,
                    hoverinfo  = 'text+x+y' ))
fig.add_trace (go.Scatter(x=[3,3.5,4,4.5,5], y=[0,1,2,1,0],
                    fill='toself' , fillcolor  = 'violet' ,
                    hoveron='points' ,
                    line_color ='violet' ,
                    text="Points only" ,
                    hoverinfo ='text+x+y' ))
fig.update_layout (
    title = "hover on &lt;i&gt;points&lt;/i&gt; or &lt;i&gt;fill&lt;/i&gt;" ,
    xaxis_range  = [0,5.2],
    yaxis_range  = [0,3]
)
fig.show()
See  and
 for more information and attribute options!
https://plotly.com/python/reference/scatter/#scatter-line (https://plotly.com/python/reference/scatter/#scatter-line)
https://plotly.com/python/reference/scatter/#scatter-fill (https://plotly.com/python/reference/scatter/#scatter-fill)0 1 2 3 4 500.511.522.53
trace 0
trace 1hover on points or fill
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 9/10

--- Página 10 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
bjects
ary Lines
d Values16/07/2025, 06:21 Filled area plots in Python
https://plotly.com/python/filled-area-plots/ 10/10</content>
    </file>
    <file name="Gantt charts in Python.pdf" path="Gantt charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Gantt Charts and Timelines with plotly.express &gt;  &gt; Gantt
Charts
Gantt Charts in Python
How to make Gantt Charts in Python with Plotly. Gantt Charts use horizontal bars to represent the start and end times of tasks.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/gantt.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a type of bar chart that illustrates a project schedule. The chart lists the tasks to be performed on the
vertical axis, and time intervals on the horizontal axis. The width of the horizontal bars in the graph shows the duration of each activity.
Gantt chart (https://en.wikipedia.org/wiki/Gantt_chart)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.timeline (introduced in version 4.9) each data point is represented as a horizontal bar with a
start and end point specified as dates.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The px.timeline function by default sets the X-axis to be of type=date, so it can be configured like any .
time-series chart (/python/time-series/)
Plotly Express also supports a .
general-purpose px.bar function for bar charts (/python/bar-charts/)
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task")
fig.update_yaxes (autorange ="reversed" ) # otherwise tasks are listed from the bottom up
fig.show()
Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job CJob BJob ATask
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 1/8

--- Página 2 ---
px.timeline supports  as above, or  as follows.
discrete color (/python/discrete-color/)
continuous color (/python/colorscales/)
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Resource" )
fig.update_yaxes (autorange ="reversed" )
fig.show()
Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job CJob BJob AResource
Alex
MaxTask
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 2/8

--- Página 3 ---
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Completion_pct =50),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Completion_pct =25),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Completion_pct =75)
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Completion_pct" )
fig.update_yaxes (autorange ="reversed" )
fig.show()
It is also possible to have multiple bars on the same horizontal line, say by resource:
Note: When setting color to the same value as y, autorange should not be set to reverse, so as to list the value of the Y axis in the same order as the legend entries.Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job CJob BJob A
3040506070Completion_pctTask
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 3/8

--- Página 4 ---
Deprecated Figure Factoryimport plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Resource" , color="Resource" )
fig.show()
Prior to the introduction of plotly.express.timeline() in version 4.9, the recommended way to make Gantt charts was to use the now-deprecated create_gantt()
, as follows:
figure
factory (/python/figure-factories/)Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009MaxAlexResource
Alex
MaxResource
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 4/8

--- Página 5 ---
Group Tasks Togetherimport plotly.figure_factory  as ff
df = [dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
      dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
      dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )]
fig = ff.create_gantt (df)
fig.show()
The following example shows how to use the now-deprecated create_gantt()  to color tasks by a numeric variable.
figure factory (/python/figure-factories/)Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job AJob BJob C1w1m6mYTD1yallGantt Chart
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 5/8

--- Página 6 ---
Color by Numeric Variableimport plotly.figure_factory  as ff
df = [dict(Task="Job-1", Start='2017-01-01' , Finish='2017-02-02' , Resource ='Complete' ),
      dict(Task="Job-1", Start='2017-02-15' , Finish='2017-03-15' , Resource ='Incomplete' ),
      dict(Task="Job-2", Start='2017-01-17' , Finish='2017-02-17' , Resource ='Not Started' ),
      dict(Task="Job-2", Start='2017-01-17' , Finish='2017-02-17' , Resource ='Complete' ),
      dict(Task="Job-3", Start='2017-03-10' , Finish='2017-03-20' , Resource ='Not Started' ),
      dict(Task="Job-3", Start='2017-04-01' , Finish='2017-04-20' , Resource ='Not Started' ),
      dict(Task="Job-3", Start='2017-05-18' , Finish='2017-06-18' , Resource ='Not Started' ),
      dict(Task="Job-4", Start='2017-01-14' , Finish='2017-03-14' , Resource ='Complete' )]
colors = {'Not Started' : 'rgb(220, 0, 0)' ,
          'Incomplete' : (1, 0.9, 0.16),
          'Complete' : 'rgb(0, 255, 100)' }
fig = ff.create_gantt (df, colors=colors, index_col ='Resource' , show_colorbar =True,
                      group_tasks =True)
fig.show()
The following example shows how to use the now-deprecated create_gantt()  to color tasks by a numeric variable.
figure factory (/python/figure-factories/)Jan 2017 Feb 2017 Mar 2017 Apr 2017 May 2017 Jun 2017Job-4Job-3Job-2Job-1Complete
Not Started
Incomplete1w1m6mYTD1yallGantt Chart
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 6/8

--- Página 7 ---
Reference
What About Dash?import plotly.figure_factory  as ff
df = [dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Complete =10),
      dict(Task="Job B", Start='2008-12-05' , Finish='2009-04-15' , Complete =60),
      dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Complete =95)]
fig = ff.create_gantt (df, colors='Viridis' , index_col ='Complete' , show_colorbar =True)
fig.show()
For more info on ff.create_gantt(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_gantt.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterDec 2008 Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job AJob BJob C1w1m6mYTD1yall
020406080100Gantt Chart
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 7/8

--- Página 8 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:21 Gantt charts in Python
https://plotly.com/python/gantt/ 8/8</content>
    </file>
    <file name="High performance visualization in Python.pdf" path="High performance visualization in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; High Performance
Visualization
High Performance Visualization in Python
Recommendations for increased speed, improved interactivity, and the ability to plot even more data!
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/performance.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 1/10

--- Página 2 ---
DataFrame Types
NumPy and NumPy Convertible Arrays for Improved Performance
Arrays and Data Types Supported
NumPy numpy.ndarray objects.
pandas Index, pandas Series, Polars Series, and PyArrow Chunked Array objects.
When working with Plotly Express, pandas DataFrame, Polars DataFrame and PyArrow DataFrame objects passed to the data_frame argument of px functions.
Array objects that can be converted to numpy.ndarray objects, i.e., they implement "__array__" or "__array_interface__" and return a numpy.ndarray.
float32
float64
int8
uint8
int16
uint16
int32
uint32
Dash Design Kit Compatibility
Unsupported AttributesNew in Plotly.py version 6
Plotly Express natively supports various dataframe libraries, including pandas, Polars, and PyArrow. When building figures with Plotly Express, changing your
dataframe library may help improve performance.
In versions of Plotly.py prior to version 6, Plotly Express functions accepted non-pandas dataframes as input but used the 
 or converted those dataframes to pandas internally.
dataframe interchange protocol
(https://data-apis.org/dataframe-protocol/latest/)
See  for full details on supported dataframe libraries.
the Plotly Express Arguments page (/python/px-arguments)
New in Plotly.py version 6
You can improve the performance of generating Plotly figures that use a large number of data points by passing data as NumPy arrays, or in a format that Plotly can
convert easily to NumPy arrays, such as pandas and Polars Series or DataFrames. These formats will usually show better performance than passing data as a Python
list.
Plotly.py uses Plotly.js for rendering, which supports typed arrays. In Plotly.py, NumPy arrays and NumPy-convertible arrays are base64 encoded before being passed
to Plotly.js for rendering.
The following types of objects in Python are supported for base64 encoding for rendering with Plotly.js.
The following  are supported:
array data types (https://numpy.org/devdocs/reference/arrays.scalars.html)
*If the array dtype is int64 or uint64, often the default dtype for arrays in NumPy when no dtype is specified, those dtypes will be changed to supported types
internally by Plotly.py where possible. When working with NumPy directly, you can 
 when creating ndarray objects, and Plotly.py won't need to make the conversion internally.
also specify the dtype (https://numpy.org/doc/stable/user/basics.types.html#array-
types-and-conversions-between-types)
Arrays or data types that are not supported for base64 encoding to Plotly.js's typed arrays specification will still work and render correctly with Plotly. Those arrays
and or data types just won't have the performance benefits that Plotly.js's base64 typed arrays feature provides.
The Dash Design Kit Graph component from versions of Dash Design Kit earlier than 1.13 doesn't work with Plotly.py version 6 when using Python objects listed in the
previous "Arrays and Data Types Supported". Upgrade Dash Design Kit to 1.13 or later to resolve this issue.
Arrays passed to attributes with the following names are not supported for base64 encoding for rendering with Plotly.js.
geojson, layers, and range.
Attributes that are not supported for base64 encoding to Plotly.js's typed arrays specification will still work and render correctly. Those attributes just won't have the
performance benefits that Plotly.js's base64 typed arrays feature provides.
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 2/10

--- Página 3 ---
Example with NumPy Arrays
Here, we use NumPy arrays with a go.Scatter3d figure.
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
# Number of data points
N = 10000
# Generate random data
x = np.random.randn(N)
y = np.random.randn(N).astype('float32' )
z = np.random.randint(size=N, low=0, high=256, dtype='uint8')
c = np.random.randint(size=N, low=-10, high=10, dtype='int8')
fig = go.Figure(data=[go.Scatter3d (
    x=x,
    y=y,
    z=z,
    marker=dict(color=c),
    mode='markers' ,
    opacity=0.2
)])
fig.show()
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 3/10

--- Página 4 ---
WebGL
The SVG API, which supports vector rendering.
The Canvas API, which supports raster rendering, and can exploit GPU hardware acceleration via a browser technology known as WebGL.
Accelerated versions of SVG trace types: scattergl, scatterpolargl,
High-performance multidimensional trace types: splom, or parcoords
3D trace types scatter3d, surface, mesh3d, cone, streamtube, isosurface, volume
Mapbox Gl JS-powered trace types: scattermap, choroplethmap, densitymap
WebGL Limitations and Tradeoffs
1. GPU requirement: WebGL is a GPU (graphics card) technology and therefore requires specific hardware which is available in most but not all cases and is
supported by most but not all browsers.
2. Rasterization: WebGL-rendered data is drawn as a grid of pixels rather than as individual shapes, so can appear pixelated or fuzz in certain cases, and when
exported to static file formats will appear pixelated on zoom. In addition, text rendering will differ between SVG and WebGL-powered traces.
3. Context limits: browsers impose a strict limit on the number of WebGL "contexts" that any given web document can access. WebGL-powered traces in plotly
can use multiple contexts in some cases but as a general rule, it may not be possible to render more than 8 WebGL-involving figures on the same page
at the same time. See the following section, Multiple WebGL Contexts, for more details.
4. Size limits: browsers impose hardware-dependent limits on the height and width of figures using WebGL which users may encounter with extremely large
plots (e.g. tens of thousands of pixels of height).
Available symbols will differ.
Area fills are not yet supported in WebGL.
Range breaks on time-series axes are not yet supported.
Axis range heuristics may differ.
Multiple WebGL Contextsplotly figures are rendered by web browsers, which broadly speaking have two families of capabilities for rendering graphics:
Each plotly trace type is rendered with either SVG or WebGL. The following trace types use WebGL for rendering:
WebGL is a powerful technology for accelerating rendering but comes with some strict limitations:
In addition to the above limitations, the WebGL-powered version of certain SVG-powered trace types (scattergl, scatterpolargl) are not complete drop-in replacements
for their SVG counterparts yet
New in 5.19
Most browsers have a limit of between 8 and 16 WebGL contexts per page. A Plotly WebGL-based figure may use multiple WebGL contexts, but generally you'll be able
to render between 4 and 8 figures on one page.
If you exceed the browser limit on WebGL contexts, some figures won't render and you'll see an error. In the console in Chrome, for example, you'll see the error: "Too
many active WebGL contexts. Oldest context will be lost".
If you encounter WebGL context limits when using WebGL-based figures, you can use , which virtualizes a
single WebGL context into multiple contexts.
Virtual WebGL (https://github.com/greggman/virtual-webgl)
To use it, in the environment where your Plotly figures are being rendered, load the Virtual WebGL script, "
", for example, using a &lt;script&gt; tag. Performance when using Virtual WebGL will be slower than when not
using Virtual WebGL.
https://unpkg.com/virtual-webgl@1.0.6/src/virtual-webgl.js
(https://unpkg.com/virtual-webgl@1.0.6/src/virtual-webgl.js)
In a Jupyter notebook environment that supports magic commands, you can load it with the 
:
HTML magic command
(https://ipython.readthedocs.io/en/stable/interactive/magics.html#cellmagic-html)
%%html
&lt;script src=“https://unpkg.com/virtual-webgl@1.0.6/src/virtual-webgl.js” &gt;&lt;/script&gt; 
 
  1
  2
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 4/10

--- Página 5 ---
WebGL for Scatter Performance
WebGL with Plotly Express
WebGL with 1,000,000 points with Graph ObjectsIn the examples below we show that it is possible to represent up to around a million points with WebGL-enabled traces. For larger datasets, or for a clearer
visualization of the density of points, it is also possible to use .
datashader (/python/datashader/)
The render_mode argument to supported Plotly Express functions (e.g. scatter and scatter_polar) can be used to enable WebGL rendering.
Note The default render_mode is "auto", in which case Plotly Express will automatically set render_mode="webgl" if the input data is more than 1,000 rows
long. In this case, WebGl can be disabled by setting render_mode=svg.
Here is an example that creates a 100,000 point scatter plot using Plotly Express with WebGL rendering explicitly enabled.
import plotly.express  as px
import pandas as pd
import numpy as np
np.random.seed(1)
N = 100000
df = pd.DataFrame (dict(x=np.random.randn(N),
                       y=np.random.randn(N)))
fig = px.scatter(df, x="x", y="y", render_mode ='webgl')
fig.update_traces (marker_line =dict(width=1, color='DarkSlateGray' ))
fig.show()
If Plotly Express does not provide a good starting point for creating a chart, you can use 
.
the more generic go.Scattergl class from plotly.graph_objects (/python/graph-
objects/)−4 −3 −2 −1 0 1 2 3 4−4−3−2−1012345
xy
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 5/10

--- Página 6 ---
Datashader
Passing Datashader Rasters as a Tile Map Image Layerimport plotly.graph_objects  as go
import numpy as np
N = 1_000_000
fig = go.Figure()
fig.add_trace (
    go.Scattergl (
        x = np.random.randn(N),
        y = np.random.randn(N),
        mode = 'markers' ,
        marker = dict(
            line = dict(
                width = 1,
                color = 'DarkSlateGrey' )
        )
    )
)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/scattergl/ (https://plotly.com/python/reference/scattergl/)
Use  to reduce the size of a dataset passed to the browser for rendering by creating a rasterized representation of the dataset.
This makes it ideal for working with datasets of tens to hundreds of millions of points.
Datashader (https://datashader.org/)
The following example shows the spatial distribution of taxi rides in New York City, which are concentrated on major avenues. For more details about tile-based maps,
see .
the tile map layers tutorial (/python/tile-map-layers)−4 −2 0 2 4−4−2024
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 6/10

--- Página 7 ---
Exploring Correlations of a Large Datasetimport pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv' )
dff = df.query('Lat &lt; 40.82' ).query('Lat &gt; 40.70' ).query('Lon &gt; -74.02' ).query('Lon &lt; -73.91' )
import datashader  as ds
cvs = ds.Canvas(plot_width =1000, plot_height =1000)
agg = cvs.points(dff, x='Lon', y='Lat')
# agg is an xarray object, see http://xarray.pydata.org/en/stable/ for more details
coords_lat , coords_lon  = agg.coords['Lat'].values, agg.coords['Lon'].values
# Corners of the image
coordinates  = [[coords_lon [0], coords_lat [0]],
               [coords_lon [-1], coords_lat [0]],
               [coords_lon [-1], coords_lat [-1]],
               [coords_lon [0], coords_lat [-1]]]
from colorcet  import fire
import datashader.transfer_functions  as tf
img = tf.shade(agg, cmap=fire)[::-1].to_pil()
import plotly.express  as px
# Trick to create rapidly a figure with map axes
fig = px.scatter_map (dff[:1], lat='Lat', lon='Lon', zoom=12)
# Add the datashader image as a tile map layer image
fig.update_layout (
    map_style ="carto-darkmatter" ,
    map_layers =[{"sourcetype" : "image", "source" : img, "coordinates" : coordinates }],
)
fig.show()
Here we explore the flight delay dataset from . In order to get a visual
impression of the correlation between features, we generate a datashader rasterized array which we plot using a Heatmap trace. It creates a much clearer
visualization than a scatter plot of (even a fraction of) the data points, as shown below.
https://www.kaggle.com/usdot/flight-delays (https://www.kaggle.com/usdot/flight-delays)
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 7/10

--- Página 8 ---
import plotly.graph_objects  as go
import pandas as pd
import numpy as np
import datashader  as ds
df = pd.read_parquet ('https://raw.githubusercontent.com/plotly/datasets/master/2015_flights.parquet' )
fig = go.Figure(go.Scattergl (x=df['SCHEDULED_DEPARTURE' ][::200],
                             y=df['DEPARTURE_DELAY' ][::200],
                             mode='markers' )
)
fig.update_layout (title_text ='A busy plot' )
fig.show()
0 5 10 15 20 250200400600800
A busy plot
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 8/10

--- Página 9 ---
What About Dash?import plotly.express  as px
import pandas as pd
import numpy as np
import datashader  as ds
df = pd.read_parquet ('https://raw.githubusercontent.com/plotly/datasets/master/2015_flights.parquet' )
cvs = ds.Canvas(plot_width =100, plot_height =100)
agg = cvs.points(df, 'SCHEDULED_DEPARTURE' , 'DEPARTURE_DELAY' )
zero_mask  = agg.values == 0
agg.values = np.log10(agg.values, where=np.logical_not (zero_mask ))
agg.values[zero_mask ] = np.nan
fig = px.imshow(agg, origin='lower', labels={'color':'Log10(count)' })
fig.update_traces (hoverongaps =False)
fig.update_layout (coloraxis_colorbar =dict(title='Count', tickprefix ='1.e'))
fig.show()
Instead of using Datashader, it would theoretically be possible to create a  with Plotly, but this is not recommended
because you would need to load the whole dataset of around 5M rows in the browser for plotly.js to compute the heatmap.
2d histogram (/python/2d-histogram-contour/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
5 10 15 20050010001500
1.e01.e11.e21.e31.e41.e5Count
SCHEDULED_DEPARTUREDEPARTURE_DELAY
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 9/10

--- Página 10 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ays for
raph
e Map
ataset16/07/2025, 06:25 High performance visualization in Python
https://plotly.com/python/performance/ 10/10</content>
    </file>
    <file name="Horizontal bar charts in Python.pdf" path="Horizontal bar charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Horizontal Bar Chart with Plotly Express
Basic Horizontal Bar Chart with Plotly Express
Configure horizontal bar chart &gt;  &gt; Horizontal
Bar Charts
Horizontal Bar Charts in Python
How to make horizontal bar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/horizontal-
bar-charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
See more examples of bar charts (including vertical bar charts) and styling options .
here (https://plotly.com/python/bar-charts/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . For a horizontal bar char, use the px.bar function with orientation='h'.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="day", orientation ='h')
fig.show()
In this example a column is used to color the bars, and we add the information from other columns to the hover data.0 200 400 600 800 1000 1200 1400 1600 1800SunSatThurFri
total_billday
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 1/11

--- Página 2 ---
Horizontal Bar Chart with go.Bar
Basic Horizontal Bar Chartimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="sex", color='day', orientation ='h',
             hover_data =["tip", "size"],
             height=400,
             title='Restaurant bills' )
fig.show()
You can also use . All the options of go.Bar are documented in the reference
the more generic go.Bar class from plotly.graph_objects (/python/graph-objects/)
https://plotly.com/python/reference/bar/ (https://plotly.com/python/reference/bar/)
import plotly.graph_objects  as go
fig = go.Figure(go.Bar(
            x=[20, 14, 23],
            y=['giraffes' , 'orangutans' , 'monkeys' ],
            orientation ='h'))
fig.show()0 500 1000 1500 2000 2500 3000FemaleMaleday
Sun
Sat
Thur
FriRestaurant bills
total_billsex
0 5 10 15 20giraffesorangutansmonkeys
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 2/11

--- Página 3 ---
Colored Horizontal Bar Chart
Small multiple horizontal bar charts show each component's size more clearly than
a stacked barimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[20, 14, 23],
    name='SF Zoo' ,
    orientation ='h',
    marker=dict(
        color='hotpink' ,
        line=dict(color='deeppink' , width=3)
    )
))
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[12, 18, 29],
    name='LA Zoo' ,
    orientation ='h',
    marker=dict(
        color='dimgray' ,
        line=dict(color='black', width=3)
    )
))
fig.update_layout (barmode='stack')
fig.show()
Bar charts with multiple components pose a fundamental trade off between presenting the total clearly and presenting the component values clearly. This small
multiples approach shows the component magnitudes clearly at the cost of slightly obscuring the totals. A stacked bar does the opposite. Small multiple bar charts
often work better in a horizontal orientation; and are easy to create with the px.bar orientation and facet_col parameters.0 10 20 30 40 50giraffesorangutansmonkeysLA Zoo
SF Zoo
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 3/11

--- Página 4 ---
Color Palette for Bar Chartimport pandas as pd
import plotly.express  as px
data = {
    "Quarter" : ["Q1", "Q2", "Q3", "Q4"] * 3,
    "Region" : ["North", "North", "North", "North", "South", "South", "South", "South", "West", "West", "West", "West"],
    "Outcome" : [150, 200, 250, 300, 120, 180, 240, 310, 100, 150, 220, 280]
}
df = pd.DataFrame (data)
fig = px.bar(
    df, 
    x="Outcome" , 
    y="Region" ,
    orientation ="h",  
    facet_col ="Quarter" , 
    title="Number of Patients Served by Region and Quarter" , 
    labels={"Outcome" : "Patients Served" , "Region" : "Region" } 
)
## the section below is optional clean up to make this presentation ready
fig.update_layout (
    height=400,  #the Plotly default makes the bars awkwardly large; setting a height improves the display
    showlegend =False,  # the legend does not add anything
)
# remove the default "facet_variable =" text from the title of each facet graph
fig.for_each_annotation (lambda a: a.update(text=a.text.split("=")[-1]))  
# Remove duplicate axis labels
fig.for_each_yaxis (lambda axis: axis.update(title=None))
fig.for_each_xaxis (lambda axis: axis.update(title=None))
# add the one valuable axis label back in
fig.update_xaxes (title="Count", row=1, col=1)
fig.show()
This bar chart uses a sequential palette to show gradations of responses. Additional color options for sequential palettes are available at 
 and 
The Urban Institute
(https://urbaninstitute.github.io/graphics-styleguide/#color)
Colorbrewer (https://colorbrewer2.org/#type=sequential)0100200300NorthSouthWest
010020030001002003000100200300Number of Patients Served by Region and Quarter
CountQ1 Q2 Q3 Q4
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 4/11

--- Página 5 ---
import plotly.graph_objects  as go
top_labels  = ['Strongly&lt;br&gt;agree' , 'Agree', 'Neutral' , 'Disagree' ,
              'Strongly&lt;br&gt;disagree' ]
colors = ['DarkBlue' , 'MediumBlue' , 'DarkSlateBlue' , 'mediumpurple' , 'thistle' ]
x_data = [[21, 30, 21, 16, 12],
          [24, 31, 19, 15, 11],
          [27, 26, 23, 11, 13],
          [29, 24, 15, 18, 14]]
y_data = ['The course was effectively&lt;br&gt;organized' ,
          'The course developed my&lt;br&gt;abilities and skills '  +
          'for&lt;br&gt;the subject' , 'The course developed '  +
          'my&lt;br&gt;ability to think critically about&lt;br&gt;the subject' ,
          'I would recommend this&lt;br&gt;course to a friend' ]
fig = go.Figure()
for i in range(0, len(x_data[0])):
    for xd, yd in zip(x_data, y_data):
        fig.add_trace (go.Bar(
            x=[xd[i]], y=[yd],
            orientation ='h',
            marker=dict(
                color=colors[i],
                line=dict(color='ghostwhite' , width=1)
            )
        ))
fig.update_layout (
    xaxis=dict(
        showgrid =False,
        showline =False,
        showticklabels =False,
        zeroline =False,
        domain=[0.15, 1]
    ),
    yaxis=dict(
        showgrid =False,
        showline =False,
        showticklabels =False,
        zeroline =False,
    ),
    barmode='stack',
    paper_bgcolor ='lavenderblush' ,
    plot_bgcolor ='lavenderblush' ,
    margin=dict(l=120, r=10, t=140, b=80),
    showlegend =False,
)
annotations  = []
for yd, xd in zip(y_data, x_data):
    # labeling the y-axis
    annotations .append(dict(xref='paper', yref='y',
                            x=0.14, y=yd,
                            xanchor='right',
                            text=str(yd),
                            font=dict(family='Arial', size=14,
                                      color='dimgray' ),
                            showarrow =False, align='right'))
    # labeling the first percentage of each bar (x_axis)
    annotations .append(dict(xref='x', yref='y',
                            x=xd[0] / 2, y=yd,
                            text=str(xd[0]) + '%',
                            font=dict(family='Arial', size=14,
                                      color='white'),
                            showarrow =False))
    # labeling the first Likert scale (on the top)
    if yd == y_data[-1]:
        annotations .append(dict(xref='x', yref='paper',
                                x=xd[0] / 2, y=1.1,
                                text=top_labels [0],
                                font=dict(family='Arial', size=14,
                                          color='dimgray' ),
                                showarrow =False))
    space = xd[0]
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 5/11

--- Página 6 ---
Diverging Bar (or Butterfly) Chart    for i in range(1, len(xd)):
            # labeling the rest of percentages for each bar (x_axis)
            annotations .append(dict(xref='x', yref='y',
                                    x=space + (xd[i]/2), y=yd,
                                    text=str(xd[i]) + '%',
                                    font=dict(family='Arial', size=14,
                                              color='ghostwhite' ),
                                    showarrow =False))
            # labeling the Likert scale
            if yd == y_data[-1]:
                annotations .append(dict(xref='x', yref='paper',
                                        x=space + (xd[i]/2), y=1.1,
                                        text=top_labels [i],
                                        font=dict(family='Arial', size=14,
                                                  color='dimgray' ),
                                        showarrow =False))
            space += xd[i]
fig.update_layout (annotations =annotations )
fig.show()
Diverging bar charts show counts of positive outcomes or sentiments to the right of zero and counts of negative outcomes to the left of zero, allowing the reader to
easily spot areas of excellence and concern. This example allows the reader of the graph to infer the number of people offering a neutral response because the
neutral category, which is left implicit, would make the responses add to 100%.The course was effectively
organized21% 30% 21% 16% 12%The course developed my
abilities and skills for
the subject24% 31% 19% 15% 11%The course developed my
ability to think critically about
the subject27% 26% 23% 11%13%I would recommend this
course to a friend29%Strongly
agree
24%Agree
15%Neutral
18%Disagree
14%Strongly
disagree
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 6/11

--- Página 7 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/gss_2002_5_pt_likert.csv' )
df.rename(columns={'Unnamed: 0' :"Category" }, inplace=True)
#achieve the diverging effect by putting a negative sign on the "disagree" answers 
for v in ["Disagree" ,"Strongly Disagree" ]:
    df[v]=df[v]*-1
fig = go.Figure()
# this color palette conveys meaning:  blues for positive, red and orange for negative
color_by_category ={
    "Strongly Agree" :'darkblue' ,
    "Agree":'lightblue' ,
    "Disagree" :'orange' ,
    "Strongly Disagree" :'red',
}
# We want the legend to be ordered in the same order that the categories appear, left to right --
# which is different from the order in which we have to add the traces to the figure.
# since we need to create the "somewhat" traces before the "strongly" traces to display
# the segments in the desired order
legend_rank_by_category ={
    "Strongly Disagree" :1,
    "Disagree" :2,
    "Agree":3,
    "Strongly Agree" :4,
}
# Add bars for each category
for col in ["Disagree" ,"Strongly Disagree" ,"Agree","Strongly Agree" ]:
    fig.add_trace (go.Bar(
        y=df["Category" ], 
        x=df[col], 
        name=col, 
        orientation ='h',
        marker=dict(color=color_by_category [col]),
        legendrank =legend_rank_by_category [col]
    ))
fig.update_layout (
   title="Reactions to statements from the 2002 General Social Survey:" ,
    yaxis_title  = "",
    barmode='relative' ,  # Allows bars to diverge from the center
    plot_bgcolor ="white",
)
fig.update_xaxes (
        title="Percent of Responses" ,
        zeroline =True,  # Ensure there's a zero line for divergence
        zerolinecolor ="black",
        # use array tick mode to show that the counts to the left of zero are still positive.
        # this is hard coded; generalize this if you plan to create a function that takes unknown or widely varying data
        tickmode  = 'array',     
        tickvals  = [-50, 0, 50, 100],
        ticktext  = [50, 0, 50, 100]
)
fig.show()
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 7/11

--- Página 8 ---
0 50People should … help others who are less fortunatePeople who are better off should help friends who are less well offYou should take care of yourself and your family first…Those in need have to learn to take care of themselves…Strongly Disagree
Disagree
Agree
Strongly AgreeReactions to statements from the 2002 General Social Survey:
Percent of Responses
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 8/11

--- Página 9 ---
Bar Chart with Line Plot
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
y_saving  = [1.3586, 2.2623000000000002 , 4.9821999999999997 , 6.5096999999999996 ,
            7.4812000000000003 , 7.5133000000000001 , 15.2148, 17.520499999999998
            ]
y_net_worth  = [93453.919999999998 , 81666.570000000007 , 69889.619999999995 ,
               78381.529999999999 , 141395.29999999999 , 92969.020000000004 ,
               66090.179999999993 , 122379.3 ]
x = ['Japan', 'United Kingdom' , 'Canada' , 'Netherlands' ,
     'United States' , 'Belgium' , 'Sweden' , 'Switzerland' ]
# Creating two subplots
fig = make_subplots (rows=1, cols=2, specs=[[{}, {}]], shared_xaxes =True,
                    shared_yaxes =False, vertical_spacing =0.001)
fig.add_trace (go.Bar(
    x=y_saving ,
    y=x,
    marker=dict(
        color='mediumseagreen' ,
        line=dict(
            color='seagreen' ,
            width=1),
    ),
    name='Household savings, percentage of household disposable income' ,
    orientation ='h',
), 1, 1)
fig.add_trace (go.Scatter(
    x=y_net_worth , y=x,
    mode='lines+markers' ,
    line_color ='purple' ,
    name='Household net worth, Million USD/capita' ,
), 1, 2)
fig.update_layout (
    title=dict(text='Household savings &amp; net worth for eight OECD countries' ),
    yaxis=dict(
        showgrid =False,
        showline =False,
        showticklabels =True,
        domain=[0, 0.85],
    ),
    yaxis2=dict(
        showgrid =False,
        showline =True,
        showticklabels =False,
        linecolor ='gray',
        linewidth =2,
        domain=[0, 0.85],
    ),
    xaxis=dict(
        zeroline =False,
        showline =False,
        showticklabels =True,
        showgrid =True,
        domain=[0, 0.42],
    ),
    xaxis2=dict(
        zeroline =False,
        showline =False,
        showticklabels =True,
        showgrid =True,
        domain=[0.47, 1],
        side='top',
        dtick=25000,
    ),
    legend=dict(x=0.029, y=1.038, font_size =10),
    margin=dict(l=100, r=20, t=70, b=70),
    paper_bgcolor ='lavenderblush' ,
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 9/11

--- Página 10 ---
Reference    plot_bgcolor ='lavenderblush' ,
)
annotations  = []
y_s = np.round(y_saving , decimals =2)
y_nw = np.rint(y_net_worth )
# Adding labels
for ydn, yd, xd in zip(y_nw, y_s, x):
    # labeling the scatter savings
    annotations .append(dict(xref='x2', yref='y2',
                            y=xd, x=ydn - 20000,
                            text='{:,}'.format(ydn) + 'M',
                            font=dict(family='Arial', size=12,
                                      color='purple' ),
                            showarrow =False))
    # labeling the bar net worth
    annotations .append(dict(xref='x1', yref='y1',
                            y=xd, x=yd + 3,
                            text=str(yd) + '%',
                            font=dict(family='Arial', size=16,
                                      color='mediumseagreen' ),
                            showarrow =False))
# Source
annotations .append(dict(xref='paper', yref='paper',
                        x=-0.2, y=-0.109,
                        text='OECD "'  +
                             '(2015), Household savings (indicator), '  +
                             'Household net worth (indicator). doi: '  +
                             '10.1787/cfc6f499-en (Accessed on 05 June 2015)' ,
                        font=dict(family='Arial', size=10, color='gray'),
                        showarrow =False))
fig.update_layout (annotations =annotations )
fig.show()
See more examples of bar charts and styling options .
See  for more information and chart attribute options!
here (https://plotly.com/python/bar-charts/)
https://plotly.com/python/reference/bar/ (https://plotly.com/python/reference/bar/)0 5 10 15 20JapanUnited KingdomCanadaNetherlandsUnited StatesBelgiumSwedenSwitzerland50k 75k 100k 125kHousehold savings, percentage of household disposable income
Household net worth, Million USD/capitaHousehold savings &amp; net worth for eight OECD countries
93,454.0M 1.36%81,667.0M 2.26%69,890.0M 4.98%78,382.0M 6.51%141,395.0M 7.48%92,969.0M 7.51%66,090.0M 15.21%122,379.0M 17.52%
 15), Household savings (indicator), Household net worth (indicator). doi: 10.1787/cfc6f499-en (Accessed on 05 June 2015)
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 10/11

--- Página 11 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
tly
s show
 than a16/07/2025, 06:21 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 11/11</content>
    </file>
    <file name="Horizontal bar charts in Python2.pdf" path="Horizontal bar charts in Python2.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Horizontal Bar Chart with Plotly Express
Basic Horizontal Bar Chart with Plotly Express
Configure horizontal bar chart &gt;  &gt; Horizontal
Bar Charts
Horizontal Bar Charts in Python
How to make horizontal bar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/horizontal-
bar-charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
See more examples of bar charts (including vertical bar charts) and styling options .
here (https://plotly.com/python/bar-charts/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . For a horizontal bar char, use the px.bar function with orientation='h'.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="day", orientation ='h')
fig.show()
In this example a column is used to color the bars, and we add the information from other columns to the hover data.0 200 400 600 800 1000 1200 1400 1600 1800SunSatThurFri
total_billday
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 1/11

--- Página 2 ---
Horizontal Bar Chart with go.Bar
Basic Horizontal Bar Chartimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="total_bill" , y="sex", color='day', orientation ='h',
             hover_data =["tip", "size"],
             height=400,
             title='Restaurant bills' )
fig.show()
You can also use . All the options of go.Bar are documented in the reference
the more generic go.Bar class from plotly.graph_objects (/python/graph-objects/)
https://plotly.com/python/reference/bar/ (https://plotly.com/python/reference/bar/)
import plotly.graph_objects  as go
fig = go.Figure(go.Bar(
            x=[20, 14, 23],
            y=['giraffes' , 'orangutans' , 'monkeys' ],
            orientation ='h'))
fig.show()0 500 1000 1500 2000 2500 3000FemaleMaleday
Sun
Sat
Thur
FriRestaurant bills
total_billsex
0 5 10 15 20giraffesorangutansmonkeys
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 2/11

--- Página 3 ---
Colored Horizontal Bar Chart
Small multiple horizontal bar charts show each component's size more clearly than
a stacked barimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[20, 14, 23],
    name='SF Zoo' ,
    orientation ='h',
    marker=dict(
        color='hotpink' ,
        line=dict(color='deeppink' , width=3)
    )
))
fig.add_trace (go.Bar(
    y=['giraffes' , 'orangutans' , 'monkeys' ],
    x=[12, 18, 29],
    name='LA Zoo' ,
    orientation ='h',
    marker=dict(
        color='dimgray' ,
        line=dict(color='black', width=3)
    )
))
fig.update_layout (barmode='stack')
fig.show()
Bar charts with multiple components pose a fundamental trade off between presenting the total clearly and presenting the component values clearly. This small
multiples approach shows the component magnitudes clearly at the cost of slightly obscuring the totals. A stacked bar does the opposite. Small multiple bar charts
often work better in a horizontal orientation; and are easy to create with the px.bar orientation and facet_col parameters.0 10 20 30 40 50giraffesorangutansmonkeysLA Zoo
SF Zoo
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 3/11

--- Página 4 ---
Color Palette for Bar Chartimport pandas as pd
import plotly.express  as px
data = {
    "Quarter" : ["Q1", "Q2", "Q3", "Q4"] * 3,
    "Region" : ["North", "North", "North", "North", "South", "South", "South", "South", "West", "West", "West", "West"],
    "Outcome" : [150, 200, 250, 300, 120, 180, 240, 310, 100, 150, 220, 280]
}
df = pd.DataFrame (data)
fig = px.bar(
    df, 
    x="Outcome" , 
    y="Region" ,
    orientation ="h",  
    facet_col ="Quarter" , 
    title="Number of Patients Served by Region and Quarter" , 
    labels={"Outcome" : "Patients Served" , "Region" : "Region" } 
)
## the section below is optional clean up to make this presentation ready
fig.update_layout (
    height=400,  #the Plotly default makes the bars awkwardly large; setting a height improves the display
    showlegend =False,  # the legend does not add anything
)
# remove the default "facet_variable =" text from the title of each facet graph
fig.for_each_annotation (lambda a: a.update(text=a.text.split("=")[-1]))  
# Remove duplicate axis labels
fig.for_each_yaxis (lambda axis: axis.update(title=None))
fig.for_each_xaxis (lambda axis: axis.update(title=None))
# add the one valuable axis label back in
fig.update_xaxes (title="Count", row=1, col=1)
fig.show()
This bar chart uses a sequential palette to show gradations of responses. Additional color options for sequential palettes are available at 
 and 
The Urban Institute
(https://urbaninstitute.github.io/graphics-styleguide/#color)
Colorbrewer (https://colorbrewer2.org/#type=sequential)0100200300NorthSouthWest
010020030001002003000100200300Number of Patients Served by Region and Quarter
CountQ1 Q2 Q3 Q4
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 4/11

--- Página 5 ---
import plotly.graph_objects  as go
top_labels  = ['Strongly&lt;br&gt;agree' , 'Agree', 'Neutral' , 'Disagree' ,
              'Strongly&lt;br&gt;disagree' ]
colors = ['DarkBlue' , 'MediumBlue' , 'DarkSlateBlue' , 'mediumpurple' , 'thistle' ]
x_data = [[21, 30, 21, 16, 12],
          [24, 31, 19, 15, 11],
          [27, 26, 23, 11, 13],
          [29, 24, 15, 18, 14]]
y_data = ['The course was effectively&lt;br&gt;organized' ,
          'The course developed my&lt;br&gt;abilities and skills '  +
          'for&lt;br&gt;the subject' , 'The course developed '  +
          'my&lt;br&gt;ability to think critically about&lt;br&gt;the subject' ,
          'I would recommend this&lt;br&gt;course to a friend' ]
fig = go.Figure()
for i in range(0, len(x_data[0])):
    for xd, yd in zip(x_data, y_data):
        fig.add_trace (go.Bar(
            x=[xd[i]], y=[yd],
            orientation ='h',
            marker=dict(
                color=colors[i],
                line=dict(color='ghostwhite' , width=1)
            )
        ))
fig.update_layout (
    xaxis=dict(
        showgrid =False,
        showline =False,
        showticklabels =False,
        zeroline =False,
        domain=[0.15, 1]
    ),
    yaxis=dict(
        showgrid =False,
        showline =False,
        showticklabels =False,
        zeroline =False,
    ),
    barmode='stack',
    paper_bgcolor ='lavenderblush' ,
    plot_bgcolor ='lavenderblush' ,
    margin=dict(l=120, r=10, t=140, b=80),
    showlegend =False,
)
annotations  = []
for yd, xd in zip(y_data, x_data):
    # labeling the y-axis
    annotations .append(dict(xref='paper', yref='y',
                            x=0.14, y=yd,
                            xanchor='right',
                            text=str(yd),
                            font=dict(family='Arial', size=14,
                                      color='dimgray' ),
                            showarrow =False, align='right'))
    # labeling the first percentage of each bar (x_axis)
    annotations .append(dict(xref='x', yref='y',
                            x=xd[0] / 2, y=yd,
                            text=str(xd[0]) + '%',
                            font=dict(family='Arial', size=14,
                                      color='white'),
                            showarrow =False))
    # labeling the first Likert scale (on the top)
    if yd == y_data[-1]:
        annotations .append(dict(xref='x', yref='paper',
                                x=xd[0] / 2, y=1.1,
                                text=top_labels [0],
                                font=dict(family='Arial', size=14,
                                          color='dimgray' ),
                                showarrow =False))
    space = xd[0]
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 5/11

--- Página 6 ---
Diverging Bar (or Butterfly) Chart    for i in range(1, len(xd)):
            # labeling the rest of percentages for each bar (x_axis)
            annotations .append(dict(xref='x', yref='y',
                                    x=space + (xd[i]/2), y=yd,
                                    text=str(xd[i]) + '%',
                                    font=dict(family='Arial', size=14,
                                              color='ghostwhite' ),
                                    showarrow =False))
            # labeling the Likert scale
            if yd == y_data[-1]:
                annotations .append(dict(xref='x', yref='paper',
                                        x=space + (xd[i]/2), y=1.1,
                                        text=top_labels [i],
                                        font=dict(family='Arial', size=14,
                                                  color='dimgray' ),
                                        showarrow =False))
            space += xd[i]
fig.update_layout (annotations =annotations )
fig.show()
Diverging bar charts show counts of positive outcomes or sentiments to the right of zero and counts of negative outcomes to the left of zero, allowing the reader to
easily spot areas of excellence and concern. This example allows the reader of the graph to infer the number of people offering a neutral response because the
neutral category, which is left implicit, would make the responses add to 100%.The course was effectively
organized21% 30% 21% 16% 12%The course developed my
abilities and skills for
the subject24% 31% 19% 15% 11%The course developed my
ability to think critically about
the subject27% 26% 23% 11%13%I would recommend this
course to a friend29%Strongly
agree
24%Agree
15%Neutral
18%Disagree
14%Strongly
disagree
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 6/11

--- Página 7 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/gss_2002_5_pt_likert.csv' )
df.rename(columns={'Unnamed: 0' :"Category" }, inplace=True)
#achieve the diverging effect by putting a negative sign on the "disagree" answers 
for v in ["Disagree" ,"Strongly Disagree" ]:
    df[v]=df[v]*-1
fig = go.Figure()
# this color palette conveys meaning:  blues for positive, red and orange for negative
color_by_category ={
    "Strongly Agree" :'darkblue' ,
    "Agree":'lightblue' ,
    "Disagree" :'orange' ,
    "Strongly Disagree" :'red',
}
# We want the legend to be ordered in the same order that the categories appear, left to right --
# which is different from the order in which we have to add the traces to the figure.
# since we need to create the "somewhat" traces before the "strongly" traces to display
# the segments in the desired order
legend_rank_by_category ={
    "Strongly Disagree" :1,
    "Disagree" :2,
    "Agree":3,
    "Strongly Agree" :4,
}
# Add bars for each category
for col in ["Disagree" ,"Strongly Disagree" ,"Agree","Strongly Agree" ]:
    fig.add_trace (go.Bar(
        y=df["Category" ], 
        x=df[col], 
        name=col, 
        orientation ='h',
        marker=dict(color=color_by_category [col]),
        legendrank =legend_rank_by_category [col]
    ))
fig.update_layout (
   title="Reactions to statements from the 2002 General Social Survey:" ,
    yaxis_title  = "",
    barmode='relative' ,  # Allows bars to diverge from the center
    plot_bgcolor ="white",
)
fig.update_xaxes (
        title="Percent of Responses" ,
        zeroline =True,  # Ensure there's a zero line for divergence
        zerolinecolor ="black",
        # use array tick mode to show that the counts to the left of zero are still positive.
        # this is hard coded; generalize this if you plan to create a function that takes unknown or widely varying data
        tickmode  = 'array',     
        tickvals  = [-50, 0, 50, 100],
        ticktext  = [50, 0, 50, 100]
)
fig.show()
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 7/11

--- Página 8 ---
0 50People should … help others who are less fortunatePeople who are better off should help friends who are less well offYou should take care of yourself and your family first…Those in need have to learn to take care of themselves…Strongly Disagree
Disagree
Agree
Strongly AgreeReactions to statements from the 2002 General Social Survey:
Percent of Responses
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 8/11

--- Página 9 ---
Bar Chart with Line Plot
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
y_saving  = [1.3586, 2.2623000000000002 , 4.9821999999999997 , 6.5096999999999996 ,
            7.4812000000000003 , 7.5133000000000001 , 15.2148, 17.520499999999998
            ]
y_net_worth  = [93453.919999999998 , 81666.570000000007 , 69889.619999999995 ,
               78381.529999999999 , 141395.29999999999 , 92969.020000000004 ,
               66090.179999999993 , 122379.3 ]
x = ['Japan', 'United Kingdom' , 'Canada' , 'Netherlands' ,
     'United States' , 'Belgium' , 'Sweden' , 'Switzerland' ]
# Creating two subplots
fig = make_subplots (rows=1, cols=2, specs=[[{}, {}]], shared_xaxes =True,
                    shared_yaxes =False, vertical_spacing =0.001)
fig.add_trace (go.Bar(
    x=y_saving ,
    y=x,
    marker=dict(
        color='mediumseagreen' ,
        line=dict(
            color='seagreen' ,
            width=1),
    ),
    name='Household savings, percentage of household disposable income' ,
    orientation ='h',
), 1, 1)
fig.add_trace (go.Scatter(
    x=y_net_worth , y=x,
    mode='lines+markers' ,
    line_color ='purple' ,
    name='Household net worth, Million USD/capita' ,
), 1, 2)
fig.update_layout (
    title=dict(text='Household savings &amp; net worth for eight OECD countries' ),
    yaxis=dict(
        showgrid =False,
        showline =False,
        showticklabels =True,
        domain=[0, 0.85],
    ),
    yaxis2=dict(
        showgrid =False,
        showline =True,
        showticklabels =False,
        linecolor ='gray',
        linewidth =2,
        domain=[0, 0.85],
    ),
    xaxis=dict(
        zeroline =False,
        showline =False,
        showticklabels =True,
        showgrid =True,
        domain=[0, 0.42],
    ),
    xaxis2=dict(
        zeroline =False,
        showline =False,
        showticklabels =True,
        showgrid =True,
        domain=[0.47, 1],
        side='top',
        dtick=25000,
    ),
    legend=dict(x=0.029, y=1.038, font_size =10),
    margin=dict(l=100, r=20, t=70, b=70),
    paper_bgcolor ='lavenderblush' ,
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 9/11

--- Página 10 ---
Reference    plot_bgcolor ='lavenderblush' ,
)
annotations  = []
y_s = np.round(y_saving , decimals =2)
y_nw = np.rint(y_net_worth )
# Adding labels
for ydn, yd, xd in zip(y_nw, y_s, x):
    # labeling the scatter savings
    annotations .append(dict(xref='x2', yref='y2',
                            y=xd, x=ydn - 20000,
                            text='{:,}'.format(ydn) + 'M',
                            font=dict(family='Arial', size=12,
                                      color='purple' ),
                            showarrow =False))
    # labeling the bar net worth
    annotations .append(dict(xref='x1', yref='y1',
                            y=xd, x=yd + 3,
                            text=str(yd) + '%',
                            font=dict(family='Arial', size=16,
                                      color='mediumseagreen' ),
                            showarrow =False))
# Source
annotations .append(dict(xref='paper', yref='paper',
                        x=-0.2, y=-0.109,
                        text='OECD "'  +
                             '(2015), Household savings (indicator), '  +
                             'Household net worth (indicator). doi: '  +
                             '10.1787/cfc6f499-en (Accessed on 05 June 2015)' ,
                        font=dict(family='Arial', size=10, color='gray'),
                        showarrow =False))
fig.update_layout (annotations =annotations )
fig.show()
See more examples of bar charts and styling options .
See  for more information and chart attribute options!
here (https://plotly.com/python/bar-charts/)
https://plotly.com/python/reference/bar/ (https://plotly.com/python/reference/bar/)0 5 10 15 20JapanUnited KingdomCanadaNetherlandsUnited StatesBelgiumSwedenSwitzerland50k 75k 100k 125kHousehold savings, percentage of household disposable income
Household net worth, Million USD/capitaHousehold savings &amp; net worth for eight OECD countries
93,454.0M 1.36%81,667.0M 2.26%69,890.0M 4.98%78,382.0M 6.51%141,395.0M 7.48%92,969.0M 7.51%66,090.0M 15.21%122,379.0M 17.52%
 15), Household savings (indicator), Household net worth (indicator). doi: 10.1787/cfc6f499-en (Accessed on 05 June 2015)
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 10/11

--- Página 11 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
tly
s show
 than a16/07/2025, 06:25 Horizontal bar charts in Python
https://plotly.com/python/horizontal-bar-charts/ 11/11</content>
    </file>
    <file name="Icicle charts in Python.pdf" path="Icicle charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Icicle Plot with plotly.express &gt;  &gt; Icicle
Charts
Icicle Charts in Python
How to make Icicle Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/icicle-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
New in v5.0
Icicle charts visualize hierarchical data using rectangular sectors that cascade from root to leaves in one of four directions: up, down, left, or right. Similar to 
 and  charts, the hierarchy is defined by labels (names for px.icicle)
and parents attributes. Click on one sector to zoom in/out, which also displays a pathbar on the top of your icicle. To zoom out, you can click the parent sector or click
the pathbar as well.
Sunburst
charts (https://plotly.com/python/sunburst-charts/)
Treemaps (https://plotly.com/python/treemaps/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.icicle, each item in the character list is represented as a rectangular sector of the icicle.
import plotly.express  as px
data = dict(
    character =["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parent=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])
fig =px.icicle(
    data,
    names='character' ,
    parents='parent' ,
    values='value',
)
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
Eve Seth
Cain
Awan
Abel
Azura
Enos
Noam
Enoch
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 1/21

--- Página 2 ---
Icicle of a rectangular DataFrame with plotly.express
Icicle of a rectangular DataFrame with continuous color argument in px.icicleHierarchical data are often stored as a rectangular dataframe, with different columns corresponding to different levels of the hierarchy. px.icicle can take a path
parameter corresponding to a list of columns. Note that id and parent should not be provided if path is given.
import plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'day', 'time', 'sex'], values='total_bill' )
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If a color argument is passed, the color of a node is computed as the average of the color values of its children, weighted by their values.all Sat
Sun
Thur
FriDinner
Dinner
Lunch
Dinner
Dinner
Lunch
Male
Female
Male
Female
Male
Female
Female
Male
Female
Female
Male
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 2/21

--- Página 3 ---
Icicle of a rectangular DataFrame with discrete color argument in px.icicleimport plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.icicle(df, path=[px.Constant ("world"), 'continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ],
                  color_continuous_scale ='RdBu',
                  color_continuous_midpoint =np.average(df['lifeExp' ], weights=df['pop']))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
When the argument of color corresponds to non-numerical data, discrete colors are used. If a sector has the same value of the color column for all its children, then
the corresponding color is used, otherwise the first color of the discrete color sequence is used.
import plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                values='total_bill' , color='day')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()world Asia
Africa
Americas
Europe
OceaniaChina
India
Indonesia
Pakistan
Bangladesh
Japan
Philippines
Vietnam
Iran
Thailand
Korea, Rep.
Myanmar
Afghanistan
Nepal
Saudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.
Taiwan
Yemen, Rep.
Sri Lanka
Syria
Cambodia
Hong Kong, China
Israel
Jordan
Singapore
West Bank and Gaza
Lebanon
Oman
Mongolia
Kuwait
Bahrain
Nigeria
Egypt
Ethiopia
Congo, Dem. Rep.
South Africa
Sudan
Tanzania
Kenya
Morocco
Algeria
Uganda
Ghana
Mozambique
Madagascar
Cote d'Ivoire
Cameroon
Burkina Faso
Malawi
Niger
Angola
Zimbabwe
Senegal
Mali
Zambia
Tunisia
Chad
Guinea
Somalia
Rwanda
Burundi
Benin
Sierra Leone
Libya
Togo
Eritrea
Central African Republic
Congo, Rep.
Mauritania
Liberia
Namibia
Lesotho
Gambia
Botswana
Guinea-Bissau
Gabon
Mauritius
Swaziland
Reunion
Comoros
Equatorial Guinea
Djibouti
Sao Tome and Principe
United States
Brazil
Mexico
Colombia
Argentina
Canada
Peru
Venezuela
Chile
Ecuador
Guatemala
Cuba
Dominican Republic
Bolivia
Haiti
Honduras
El Salvador
Paraguay
Nicaragua
Costa Rica
Puerto Rico
Uruguay
Panama
Jamaica
Trinidad and Tobago
Germany
Turkey
France
United Kingdom
Italy
Spain
Poland
Romania
Netherlands
Greece
Portugal
Belgium
Czech Republic
Serbia
Hungary
Sweden
Austria
Switzerland
Bulgaria
Denmark
Slovak Republic
Finland
Norway
Bosnia and Herzegovina
Croatia
Ireland
Albania
Slovenia
Montenegro
Iceland
Australia
New Zealand405060708090lifeExp
all Male
FemaleSun
Sat
Thur
Fri
Sat
Thur
Sun
Fri
Dinner
Dinner
Lunch
Dinner
Lunch
Dinner
Lunch
Dinner
Dinner
Dinner
Lunch
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 3/21

--- Página 4 ---
Using an explicit mapping for discrete colorsIn the example below the color of Saturday and Sunday sectors is the same as Dinner because there are only Dinner entries for Saturday and Sunday. However, for
Female -&gt; Friday there are both lunches and dinners, hence the "mixed" color (blue here) is used.
import plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                values='total_bill' , color='time')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
For more information about discrete colors, see the .
dedicated page (https://plotly.com/python/discrete-color/)all Male
FemaleSun
Sat
Thur
Fri
Sat
Thur
Sun
Fri
Dinner
Dinner
Lunch
Dinner
Lunch
Dinner
Lunch
Dinner
Dinner
Dinner
Lunch
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 4/21

--- Página 5 ---
Rectangular data with missing valuesimport plotly.express  as px
df = px.data.tips()
fig = px.icicle(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                values='total_bill' , color='time',
                color_discrete_map ={'(?)':'lightgrey' , 'Lunch':'gold', 'Dinner' :'darkblue' })
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If the dataset is not fully rectangular, missing values should be supplied as None. Note that the parents of None entries must be a leaf, i.e. it cannot have other
children than None (otherwise a ValueError is raised).all Male
FemaleSun
Sat
Thur
Fri
Sat
Thur
Sun
Fri
Dinner
Dinner
Lunch
Dinner
Lunch
Dinner
Lunch
Dinner
Dinner
Dinner
Lunch
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 5/21

--- Página 6 ---
Basic Icicle Plot with go.Icicle
1. labels (names in px.icicle since labels is reserved for overriding columns names): sets the labels of icicle sectors.
2. parents: sets the parent sectors of icicle sectors. An empty string '' is used for the root node in the hierarchy. In this example, the root is "Eve".
3. values: sets the values associated with icicle sectors, determining their width (See the branchvalues section below for different modes for setting the width).import plotly.express  as px
import pandas as pd
vendors = ["A", "B", "C", "D", None, "E", "F", "G", "H", None]
sectors = ["Tech", "Tech", "Finance" , "Finance" , "Other",
           "Tech", "Tech", "Finance" , "Finance" , "Other"]
regions = ["North", "North", "North", "North", "North",
           "South", "South", "South", "South", "South"]
sales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]
df = pd.DataFrame (
    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)
)
df["all"] = "all" # in order to have a single root node
print(df)
fig = px.icicle(df, path=['all', 'regions' , 'sectors' , 'vendors' ], values='sales')
fig.update_traces (root_color ='lightgrey' )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Icicle class from plotly.graph_objects (/python/graph-objects/)
Main arguments:vendors  sectors regions  sales  all
0       A     Tech   North      1  all
1       B     Tech   North      3  all
2       C  Finance   North      2  all
3       D  Finance   North      4  all
4    None    Other   North      1  all
5       E     Tech   South      2  all
6       F     Tech   South      2  all
7       G  Finance   South      1  all
8       H  Finance   South      4  all
9    None    Other   South      1  all
all North
SouthFinance
Tech
Other
Finance
Tech
Other
D
C
B
A
H
G
E
F
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 6/21

--- Página 7 ---
import plotly.graph_objects  as go
fig =go.Figure(go.Icicle(
    labels=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
    root_color ="lightgrey"
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
Eve Seth
Cain
Awan
Abel
Azura
Enos
Noam
Enoch
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 7/21

--- Página 8 ---
Icicle with Repeated Labels
Branchvaluesimport plotly.graph_objects  as go
fig =go.Figure(go.Icicle(
 ids=["Sports" ,
    "North America" , "Europe" , "Australia" , "North America - Football" , "Soccer" ,
    "North America - Rugby" , "Europe - Football" , "Rugby",
    "Europe - American Football" ,"Australia - Football" , "Association" ,
    "Australian Rules" , "Autstralia - American Football" , "Australia - Rugby" ,
    "Rugby League" , "Rugby Union"
  ],
  labels= ["Sports" ,
    "North&lt;br&gt;America" , "Europe" , "Australia" , "Football" , "Soccer" , "Rugby",
    "Football" , "Rugby", "American&lt;br&gt;Football" , "Football" , "Association" ,
    "Australian&lt;br&gt;Rules" , "American&lt;br&gt;Football" , "Rugby", "Rugby&lt;br&gt;League" ,
    "Rugby&lt;br&gt;Union"
  ],
  parents=["",
    "Sports" , "Sports" , "Sports" , "North America" , "North America" , "North America" , "Europe" ,
    "Europe" , "Europe" ,"Australia" , "Australia - Football" , "Australia - Football" ,
    "Australia - Football" , "Australia - Football" , "Australia - Rugby" ,
    "Australia - Rugby"
  ],
    root_color ="lightgrey"
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
With branchvalues "total", the value of the parent represents the height/width of its slice. In the example below, "Enoch" is 4 and "Awan" is 6 and so Enoch's height is
4/6ths of Awans. With branchvalues "remainder", the parent's width is determined by its own value plus those of its children. So, Enoch's height is 4/10ths of Awan's (4
/ (6 + 4)).
Note that this means that the sum of the values of the children cannot exceed the value of their parent when branchvalues is set to "total". When branchvalues is set
to "remainder" (the default), children will not take up all of the space below their parent (unless the parent is the root and it has a value of 0).Sports Australia
North
America
EuropeFootball
Football
Soccer
Rugby
Football
Rugby
American
FootballRugby
Association
Australian
Rules
American
Football
Rugby
League
Rugby
Union
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 8/21

--- Página 9 ---
Large Number of Slicesimport plotly.graph_objects  as go
fig =go.Figure(go.Icicle(
    labels=[ "Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["",    "Eve",  "Eve",  "Seth", "Seth", "Eve",  "Eve",  "Awan",  "Eve" ],
    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],
    branchvalues ="total",
    root_color ="lightgrey"
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
This example uses a  for the subplots. Reference the row and column destination using
the  attribute.
plotly grid attribute (https://plotly.com/python/reference/layout/#layout-grid)
domain (https://plotly.com/python/reference/icicle/#icicle-domain)Eve
 Cain
Seth
Abel
Awan
Azura
Enos
Noam
Enoch
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 9/21

--- Página 10 ---
Controlling text fontsize with uniformtextimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure()
fig.add_trace (go.Icicle(
    ids=df.ids,
    labels=df.labels,
    parents=df.parents,
    root_color ="lightgrey"
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If you want all the text labels to have the same size, you can use the uniformtext layout parameter. The minsize attribute sets the font size, and the mode attribute
sets what happens for labels which cannot fit with the desired fontsize: either hide them or show them with overflow.
Note: animated transitions are currently not implemented when uniformtext is used.Coffee Flavors Aromas
TastesEnzymatic
Sugar Browning
Dry Distillation
Bitter
Salt
Sweet
SourFlowery
Fruity
Herby
Nutty
Carmelly
Chocolatey
Resinous
Spicy
Carbony
Pungent
Harsh
Sharp
Bland
Mellow
Acidy
Winey
SouryFloral
Fragrant
Citrus
Berry-like
Alliaceous
Leguminous
Nut-like
Malt-like
Candy-like
Syrup-like
Chocolate-like
Vanilla-like
Turpeny
Medicinal
Warming
Pungent
Smokey
Ashy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
Coffee Blossom
Tea Rose
Cardamon Caraway
Coriander Seeds
Lemon
Apple
Apricot
Blackberry
Onion
Garlic
Cucumber
Garden Peas
Roasted Peanuts
Walnuts
Balsamic Rice
Toast
Roasted Hazelnut
Roasted Almond
Honey
Maple Syrup
Bakers
Dark Chocolate
Swiss
Butter
Piney
Blackcurrant-like
Camphoric
Cineolic
Cedar
Pepper
Clove
Thyme
Tarry
Pipe Tobacco
Burnt
Charred
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 10/21

--- Página 11 ---
Icicle chart with a continuous colorscaleimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(go.Icicle(
    ids = df.ids,
    labels = df.labels,
    parents = df.parents,
    root_color ="lightgrey"
))
fig.update_layout (
    uniformtext =dict(minsize=10, mode='hide'),
    margin = dict(t=50, l=25, r=25, b=25)
)
fig.show()
The example below visualizes a breakdown of sales (corresponding to sector width) and call success rate (corresponding to sector color) by region, county and
salesperson level. For example, when exploring the data you can see that although the East region is behaving poorly, the Tyler county is still above average --
however, its performance is reduced by the poor success rate of salesperson GT.
In the right subplot which has a maxdepth of two levels, click on a slice to see its breakdown to lower levels.Coffee Flavors Aromas
TastesEnzymatic
Sugar Browning
Dry Distillation
Bitter
Salt
Sweet
SourFlowery
Fruity
Herby
Nutty
Carmelly
Chocolatey
Resinous
Spicy
Carbony
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 11/21

--- Página 12 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/sales_success.csv' )
print(df.head())
levels = ['salesperson' , 'county' , 'region' ] # levels used for the hierarchical chart
color_columns  = ['sales', 'calls']
value_column  = 'calls'
def build_hierarchical_dataframe (df, levels, value_column , color_columns =None):
    """
    Build a hierarchy of levels for Icicle charts.
    Levels are given starting from the bottom to the top of the hierarchy,
    ie the last level corresponds to the root.
    """
    df_list = []
    for i, level in enumerate (levels):
        df_tree = pd.DataFrame (columns=['id', 'parent' , 'value', 'color'])
        dfg = df.groupby(levels[i:]).sum()
        dfg = dfg.reset_index ()
        df_tree['id'] = dfg[level].copy()
        if i &lt; len(levels) - 1:
            df_tree['parent' ] = dfg[levels[i+1]].copy()
        else:
            df_tree['parent' ] = 'total'
        df_tree['value'] = dfg[value_column ]
        df_tree['color'] = dfg[color_columns [0]] / dfg[color_columns [1]]
        df_list.append(df_tree)
    total = pd.Series(dict(id='total', parent='',
                              value=df[value_column ].sum(),
                              color=df[color_columns [0]].sum() / df[color_columns [1]].sum()), name=0)
    df_list.append(total)
    df_all_trees  = pd.concat(df_list, ignore_index =True)
    return df_all_trees
df_all_trees  = build_hierarchical_dataframe (df, levels, value_column , color_columns )
average_score  = df['sales'].sum() / df['calls'].sum()
fig = make_subplots (1, 2, specs=[[{"type": "domain" }, {"type": "domain" }]],)
fig.add_trace (go.Icicle(
    labels=df_all_trees ['id'],
    parents=df_all_trees ['parent' ],
    values=df_all_trees ['value'],
    branchvalues ='total',
    marker=dict(
        colors=df_all_trees ['color'],
        colorscale ='RdBu',
        cmid=average_score ),
    hovertemplate ='&lt;b&gt;%{label} &lt;/b&gt; &lt;br&gt; Sales: % {value}&lt;br&gt; Success rate: % {color:.2f} ',
    name=''
    ), 1, 1)
fig.add_trace (go.Icicle(
    labels=df_all_trees ['id'],
    parents=df_all_trees ['parent' ],
    values=df_all_trees ['value'],
    branchvalues ='total',
    marker=dict(
        colors=df_all_trees ['color'],
        colorscale ='RdBu',
        cmid=average_score ),
    hovertemplate ='&lt;b&gt;%{label} &lt;/b&gt; &lt;br&gt; Sales: % {value}&lt;br&gt; Success rate: % {color:.2f} ',
    maxdepth =2
    ), 1, 2)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 12/21

--- Página 13 ---
Set Color of Icicle Sectors
import plotly.graph_objects  as go
labels = ["container" , "A1", "A2", "A3", "A4", "A5", "B1", "B2"]
parents = ["", "container" , "A1", "A2", "A3", "A4", "container" , "B1"]
fig = go.Figure(go.Icicle(
    labels = labels,
    parents = parents,
    marker_colors  = ["pink", "royalblue" , "lightgray" , "purple" ,
                     "cyan", "lightgray" , "lightblue" , "lightgreen" ]))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()Unnamed: 0 region   county salesperson  calls  sales
0           0  North   Dallam          JE     35     23
1           1  North   Dallam          ZQ     49     13
2           2  North   Dallam          IJ     20      6
3           3  North  Hartley          WE     39     37
4           4  North  Hartley          PL     42     37
total North
East
South
WestFloyd
Gray
Hartley
Dallam
Motley
Moore
Shelby
Houston
Tyler
Rusk
Webb
Hidalgo
Zavala
Duval
Presidio
Pecos
BrewsterUA
WH
OH
ES
YJ
XY
PL
WE
BI
ZQ
JE
IJ
EH
NY
MW
TW
TZ
ZM
XH
NZ
VN
AX
YN
QK
UF
GT
JC
OY
UM
HW
RR
QJ
KR
LQ
LR
LV
FL
IV
YA
DS
FJ
GW
SV
DQ
OT
QM
WZ
WV
BS
IK
JFtotal North
East
South
West
container A1
B1A2
B2A3 A4
 A5
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 13/21

--- Página 14 ---
This example uses iciclecolorway attribute, which should be set in layout.
import plotly.graph_objects  as go
values = [0, 11, 12, 13, 14, 15, 20, 30]
labels = ["container" , "A1", "A2", "A3", "A4", "A5", "B1", "B2"]
parents = ["", "container" , "A1", "A2", "A3", "A4", "container" , "B1"]
fig = go.Figure(go.Icicle(
    labels = labels,
    parents = parents,
    values=values,
    root_color ="lightblue"
))
fig.update_layout (
    iciclecolorway  = ["pink", "lightgray" ],
    margin = dict(t=50, l=25, r=25, b=25)
)
fig.show()
container A1
B1A2
B2A3 A4
 A5
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 14/21

--- Página 15 ---
Pattern Fillsimport plotly.graph_objects  as go
values = [0, 11, 12, 13, 14, 15, 20, 30]
labels = ["container" , "A1", "A2", "A3", "A4", "A5", "B1", "B2"]
parents = ["", "container" , "A1", "A2", "A3", "A4", "container" , "B1"]
fig = go.Figure(go.Icicle(
    labels = labels,
    values = values,
    parents = parents,
    marker_colorscale  = 'Blues'))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
New in 5.15
Icicle charts support  (also known as hatching or texture) in addition to color. In this example, we apply a pattern to all
chart sections. We also configure the size and solidity of the pattern.
patterns (/python/pattern-hatching-texture/)container A1
B1A2
B2A3 A4 A5
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 15/21

--- Página 16 ---
Set the Direction of Icicle chartsimport plotly.graph_objects  as go
fig = go.Figure(
    go.Icicle(
        labels=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
        parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"],
        values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
        root_color ="lightgrey" ,
        textfont_size =20,
        marker=dict(pattern=dict(shape="|", size=5, solidity =0.9)),
    )
)
fig.update_layout (margin=dict(t=50, l=25, r=25, b=25))
fig.show()
As mentioned above, Icicle charts can grow in one of four directions. Icicle charts have a tiling attribute and this has two attributes: orientation and flip. orientation
takes either h (horiztonal) or v (vertical) and flip takes either x or y. You can use these two attributes in combination to create each of the four cardinal directions: left,
right, top, bottom.
Up Direction (Flame Chart)Eve Seth
Cain
Awan
Abel
Azura
Enos
Noam
Enoch
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 16/21

--- Página 17 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(
    go.Icicle(
        ids = df.ids,
        labels = df.labels,
        parents = df.parents,
        root_color ="lightgrey" ,
        tiling = dict(
            orientation ='v',
            flip='y'
        )
    )
)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
Down Direction (Icicle)Coffee FlavorsAromas TastesEnzymatic Sugar Browning Dry Distillation BitterSaltSweetSourFloweryFruityHerbyNuttyCarmellyChocolateyResinousSpicyCarbonyPungentHarshSharpBlandMellowAcidyWineySouryFloralFragrantCitrusBerry-likeAlliaceousLeguminousNut-likeMalt-likeCandy-likeSyrup-likeChocolate-likeVanilla-likeTurpenyMedicinalWarmingPungentSmokeyAshy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
Coffee Blossom
Tea Rose
Cardamon Caraway
 Coriander Seeds
Lemon
Apple
Apricot
Blackberry
Onion
Garlic
Cucumber
 Garden Peas
Roasted Peanuts
Walnuts
Balsamic Rice
Toast
Roasted Hazelnut
 Roasted Almond
Honey
Maple Syrup
Bakers
Dark Chocolate
Swiss
Butter
Piney
Blackcurrant-like
Camphoric
Cineolic
Cedar
Pepper
Clove
Thyme
Tarry
Pipe Tobacco
Burnt
Charred
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 17/21

--- Página 18 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(
    go.Icicle(
        ids = df.ids,
        labels = df.labels,
        parents = df.parents,
        root_color ="lightgrey" ,
        tiling = dict(
            orientation ='v'
        )
    )
)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
Right DirectionCoffee Flavors
Aromas Tastes
Enzymatic Sugar Browning Dry Distillation BitterSaltSweetSour
FloweryFruityHerbyNuttyCarmellyChocolateyResinousSpicyCarbonyPungentHarshSharpBlandMellowAcidyWineySoury
FloralFragrantCitrusBerry-likeAlliaceousLeguminousNut-likeMalt-likeCandy-likeSyrup-likeChocolate-likeVanilla-likeTurpenyMedicinalWarmingPungentSmokeyAshy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
Coffee Blossom
Tea Rose
Cardamon Caraway
 Coriander Seeds
Lemon
Apple
Apricot
Blackberry
Onion
Garlic
Cucumber
 Garden Peas
Roasted Peanuts
Walnuts
Balsamic Rice
Toast
Roasted Hazelnut
 Roasted Almond
Honey
Maple Syrup
Bakers
Dark Chocolate
Swiss
Butter
Piney
Blackcurrant-like
Camphoric
Cineolic
Cedar
Pepper
Clove
Thyme
Tarry
Pipe Tobacco
Burnt
Charred
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 18/21

--- Página 19 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(
    go.Icicle(
        ids = df.ids,
        labels = df.labels,
        parents = df.parents,
        root_color ="lightgrey" ,
        tiling = dict(
            orientation ='h'
        )
    )
)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
Left DirectionCoffee Flavors Aromas
TastesEnzymatic
Sugar Browning
Dry Distillation
Bitter
Salt
Sweet
SourFlowery
Fruity
Herby
Nutty
Carmelly
Chocolatey
Resinous
Spicy
Carbony
Pungent
Harsh
Sharp
Bland
Mellow
Acidy
Winey
SouryFloral
Fragrant
Citrus
Berry-like
Alliaceous
Leguminous
Nut-like
Malt-like
Candy-like
Syrup-like
Chocolate-like
Vanilla-like
Turpeny
Medicinal
Warming
Pungent
Smokey
Ashy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
Coffee Blossom
Tea Rose
Cardamon Caraway
Coriander Seeds
Lemon
Apple
Apricot
Blackberry
Onion
Garlic
Cucumber
Garden Peas
Roasted Peanuts
Walnuts
Balsamic Rice
Toast
Roasted Hazelnut
Roasted Almond
Honey
Maple Syrup
Bakers
Dark Chocolate
Swiss
Butter
Piney
Blackcurrant-like
Camphoric
Cineolic
Cedar
Pepper
Clove
Thyme
Tarry
Pipe Tobacco
Burnt
Charred
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 19/21

--- Página 20 ---
Referenceimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(
    go.Icicle(
        ids = df.ids,
        labels = df.labels,
        parents = df.parents,
        root_color ="lightgrey" ,
        tiling = dict(
            orientation ='h',
            flip='x'
        )
    )
)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
See  or 
 for more information and chart attribute options!
function reference for px.icicle() (https://plotly.com/python-api-reference/generated/plotly.express.icicle)
https://plotly.com/python/reference/icicle/
(https://plotly.com/python/reference/icicle/)Coffee Flavors Aromas
TastesEnzymatic
Sugar Browning
Dry Distillation
Bitter
Salt
Sweet
SourFlowery
Fruity
Herby
Nutty
Carmelly
Chocolatey
Resinous
Spicy
Carbony
Pungent
Harsh
Sharp
Bland
Mellow
Acidy
Winey
SouryFloral
Fragrant
Citrus
Berry-like
Alliaceous
Leguminous
Nut-like
Malt-like
Candy-like
Syrup-like
Chocolate-like
Vanilla-like
Turpeny
Medicinal
Warming
Pungent
Smokey
Ashy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
Coffee Blossom
Tea Rose
Cardamon Caraway
Coriander Seeds
Lemon
Apple
Apricot
Blackberry
Onion
Garlic
Cucumber
Garden Peas
Roasted Peanuts
Walnuts
Balsamic Rice
Toast
Roasted Hazelnut
Roasted Almond
Honey
Maple Syrup
Bakers
Dark Chocolate
Swiss
Butter
Piney
Blackcurrant-like
Camphoric
Cineolic
Cedar
Pepper
Clove
Thyme
Tarry
Pipe Tobacco
Burnt
Charred
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 20/21

--- Página 21 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ith
ith
 cle
ith
ete colors
es
mtext
scale16/07/2025, 06:26 Icicle charts in Python
https://plotly.com/python/icicle-charts/ 21/21</content>
    </file>
    <file name="Line charts in Python.pdf" path="Line charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Line Plots with plotly.express &gt;  &gt; Line
Charts
Line Charts in Python
How to make line charts in Python with Plotly. Examples on creating and styling line charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/line-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.line, each data point is represented as a vertex (which location is given by the x and y columns)
of a polyline mark in 2D space.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
For more examples of line plots, see the .
line and scatter notebook (https://plotly.com/python/line-and-scatter/)
import plotly.express  as px
df = px.data.gapminder ().query("country=='Canada'" )
fig = px.line(df, x="year", y="lifeExp" , title='Life expectancy in Canada' )
fig.show()
1960 1970 1980 1990 2000707274767880Life expectancy in Canada
yearlifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 1/17

--- Página 2 ---
Line Plots with column encoding color
Line charts in Dashimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color='country' )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1960 1970 1980 1990 2000707274767880country
Australia
New Zealand
yearlifeExp
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 2/17

--- Página 3 ---
Data Order in Line ChartsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
Plotly line charts are implemented as  (see below), meaning that the points are
plotted and connected with lines in the order they are provided, with no automatic reordering.
connected scatterplots (https://www.data-to-viz.com/graph/connectedscatter.html)
This makes it possible to make charts like the one below, but also means that it may be required to explicitly sort data before passing it to Plotly to avoid lines moving
"backwards" across the chart.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Life expentancy progression of countries per continents'),
    dcc.Graph(id="graph"),
    dcc.Checklist(
        id="checklist",
        options=["Asia", "Europe", "Africa","Americas","Oceania"],
        value=["Americas", "Oceania"],
        inline=True
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("checklist", "value"))
def update_line_chart(continents):
    df = px.data.gapminder() # replace with your own data source
    mask = df.continent.isin(continents)
    fig = px.line(df[mask],
" " "lifE" l ' t')DOWNLOAD
Life expentancy progression of countries per continents
AsiaEuropeAfricaAmericasOceania1960 1970 1980 1990 20004050607080country
Argentina
Australia
Bolivia
Brazil
Canada
Chile
Colombia
Costa Rica
Cuba
Dominican Republic
Ecuador
El Salvador
Guatemala
Haiti
Honduras
yearlifeExp
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 3/17

--- Página 4 ---
Connected Scatterplotsimport plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    x = [1, 3, 2, 4],
    y = [1, 2, 3, 4]
))
fig = px.line(df, x="x", y="y", title="Unsorted Input" )
fig.show()
df = df.sort_values (by="x")
fig = px.line(df, x="x", y="y", title="Sorted Input" )
fig.show()
In a connected scatterplot, two continuous variables are plotted against each other, with a line connecting them in some meaningful order, usually a time variable. In
the plot below, we show the "trajectory" of a pair of countries through a space defined by GDP per Capita and Life Expectancy.1 1.5 2 2.5 3 3.5 411.522.533.54Unsorted Input
xy
1 1.5 2 2.5 3 3.5 411.522.533.54Sorted Input
xy
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 4/17

--- Página 5 ---
Line charts with markersimport plotly.express  as px
df = px.data.gapminder ().query("country in ['Canada', 'Botswana']" )
fig = px.line(df, x="lifeExp" , y="gdpPercap" , color="country" , text="year")
fig.update_traces (textposition ="bottom right" )
fig.show()
The markers argument can be set to True to show markers on lines.
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x='year', y='lifeExp' , color='country' , markers=True)
fig.show()
The symbol argument can be used to map a data field to the marker symbol. A  are available.
wide variety of symbols (https://plotly.com/python/marker-style/)195219571962196719721977198219871992199720022007
195219571962196719721977198219871992199720022007
45 50 55 60 65 70 75 8005k10k15k20k25k30k35kcountry
Botswana
Canada
lifeExpgdpPercap
1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealand
yearlifeExp
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 5/17

--- Página 6 ---
Line plots on Date axesimport plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x='year', y='lifeExp' , color='country' , symbol="country" )
fig.show()
Line plots can be made on using any type of cartesian axis, including , ,
 or date axes. Line plots on date axes are often called 
.
linear (https://plotly.com/python/axes/)
logarithmic (https://plotly.com/python/log-plot/)
categorical (https://plotly.com/python/categorical-axes/)
time-series charts (https://plotly.com/python/time-
series/)
Plotly auto-sets the axis type to a date format when the corresponding data are either ISO-formatted date strings or if they're a 
 or 
.
date pandas column
(https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)
datetime NumPy array
(https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)
import plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x='date', y="GOOG")
fig.show()1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealand
yearlifeExp
Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.90.9511.051.11.151.2
dateGOOG
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 6/17

--- Página 7 ---
Sparklines with Plotly Express
Line Plot with go.Scatter
Simple Line PlotSparklines are scatter plots inside subplots, with gridlines, axis lines, and ticks removed.
import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df, facet_row ="company" , facet_row_spacing =0.01, height=200, width=200)
# hide and lock down axes
fig.update_xaxes (visible=False, fixedrange =True)
fig.update_yaxes (visible=False, fixedrange =True)
# remove facet/subplot labels
fig.update_layout (annotations =[], overwrite =True)
# strip down the rest of the plot
fig.update_layout (
    showlegend =False,
    plot_bgcolor ="white",
    margin=dict(t=10,l=10,b=10,r=10)
)
# disable the modebar for such a small plot
fig.show(config=dict(displayModeBar =False))
If Plotly Express does not provide a good starting point, it is possible to use .
Whereas plotly.express has two functions scatter and line, go.Scatter can be used both for plotting points (makers) or lines, depending on the value of mode. The
different options of go.Scatter are documented in its .
the more generic go.Scatter class from plotly.graph_objects (/python/graph-objects/)
reference page (https://plotly.com/python/reference/scatter/)
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 7/17

--- Página 8 ---
Line Plot Modesimport plotly.graph_objects  as go
import numpy as np
x = np.arange(10)
fig = go.Figure(data=go.Scatter(x=x, y=x**2))
fig.show()
0 2 4 6 801020304050607080
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 8/17

--- Página 9 ---
Style Line Plotsimport plotly.graph_objects  as go
# Create random data with numpy
import numpy as np
np.random.seed(1)
N = 100
random_x  = np.linspace (0, 1, N)
random_y0  = np.random.randn(N) + 5
random_y1  = np.random.randn(N)
random_y2  = np.random.randn(N) - 5
# Create traces
fig = go.Figure()
fig.add_trace (go.Scatter(x=random_x , y=random_y0 ,
                    mode='lines',
                    name='lines'))
fig.add_trace (go.Scatter(x=random_x , y=random_y1 ,
                    mode='lines+markers' ,
                    name='lines+markers' ))
fig.add_trace (go.Scatter(x=random_x , y=random_y2 ,
                    mode='markers' , name='markers' ))
fig.show()
This example styles the color and dash of the traces, adds trace names, modifies line width, and adds plot and axes titles.0 0.2 0.4 0.6 0.8 1−8−6−4−202468
lines
lines+markers
markers
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 9/17

--- Página 10 ---
import plotly.graph_objects  as go
# Add data
month = ['January' , 'February' , 'March', 'April', 'May', 'June', 'July',
         'August' , 'September' , 'October' , 'November' , 'December' ]
high_2000  = [32.5, 37.6, 49.9, 53.0, 69.1, 75.4, 76.5, 76.6, 70.7, 60.6, 45.1, 29.3]
low_2000  = [13.8, 22.3, 32.5, 37.2, 49.9, 56.1, 57.7, 58.3, 51.2, 42.8, 31.6, 15.9]
high_2007  = [36.5, 26.6, 43.6, 52.3, 71.5, 81.4, 80.5, 82.2, 76.0, 67.3, 46.1, 35.0]
low_2007  = [23.6, 14.0, 27.0, 36.8, 47.6, 57.7, 58.9, 61.2, 53.3, 48.5, 31.0, 23.6]
high_2014  = [28.8, 28.5, 37.0, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
low_2014  = [12.7, 14.3, 18.6, 35.5, 49.9, 58.0, 60.0, 58.6, 51.7, 45.2, 32.2, 29.1]
fig = go.Figure()
# Create and style traces
fig.add_trace (go.Scatter(x=month, y=high_2014 , name='High 2014' ,
                         line=dict(color='firebrick' , width=4)))
fig.add_trace (go.Scatter(x=month, y=low_2014 , name = 'Low 2014' ,
                         line=dict(color='royalblue' , width=4)))
fig.add_trace (go.Scatter(x=month, y=high_2007 , name='High 2007' ,
                         line=dict(color='firebrick' , width=4,
                              dash='dash') # dash options include 'dash', 'dot', and 'dashdot'
))
fig.add_trace (go.Scatter(x=month, y=low_2007 , name='Low 2007' ,
                         line = dict(color='royalblue' , width=4, dash='dash')))
fig.add_trace (go.Scatter(x=month, y=high_2000 , name='High 2000' ,
                         line = dict(color='firebrick' , width=4, dash='dot')))
fig.add_trace (go.Scatter(x=month, y=low_2000 , name='Low 2000' ,
                         line=dict(color='royalblue' , width=4, dash='dot')))
# Edit the layout
fig.update_layout (
        title=dict(
            text='Average High and Low Temperatures in New York'
        ),
        xaxis=dict(
            title=dict(
                text='Month'
            )
        ),
        yaxis=dict(
            title=dict(
                text='Temperature (degrees F)'
            )
        ),
)
fig.show()
JanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember1020304050607080High 2014
Low 2014
High 2007
Low 2007
High 2000
Low 2000Average High and Low Temperatures in New York
MonthTemperature (degrees F)
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 10/17

--- Página 11 ---
Connect Data Gaps
Interpolation with Line Plots determines if missing values in the provided data are shown as a gap in the graph or
not. In , we showed how to take benefit of this feature and
illustrate multiple areas on a tile map.
connectgaps (https://plotly.com/python/reference/scatter/#scatter-connectgaps)
this tutorial (https://plotly.com/python/filled-area-tile-maps/#multiple-filled-areas-with-a-scattermap-trace)
import plotly.graph_objects  as go
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x,
    y=[10, 20, None, 15, 10, 5, 15, None, 20, 10, 10, 15, 25, 20, 10],
    name = '&lt;b&gt;No&lt;/b&gt; Gaps' , # Style name/legend entry with html tags
    connectgaps =True # override default to connect the gaps
))
fig.add_trace (go.Scatter(
    x=x,
    y=[5, 15, None, 10, 5, 0, 10, None, 15, 5, 5, 10, 20, 15, 5],
    name='Gaps',
))
fig.show()
2 4 6 8 10 12 140510152025No Gaps
Gaps
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 11/17

--- Página 12 ---
Label Lines with Annotationsimport plotly.graph_objects  as go
import numpy as np
x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 3, 2, 3, 1])
fig = go.Figure()
fig.add_trace (go.Scatter(x=x, y=y, name="linear" ,
                    line_shape ='linear' ))
fig.add_trace (go.Scatter(x=x, y=y + 5, name="spline" ,
                    text=["tweak line smoothness&lt;br&gt;with 'smoothing' in line object" ],
                    hoverinfo ='text+name' ,
                    line_shape ='spline' ))
fig.add_trace (go.Scatter(x=x, y=y + 10, name="vhv",
                    line_shape ='vhv'))
fig.add_trace (go.Scatter(x=x, y=y + 15, name="hvh",
                    line_shape ='hvh'))
fig.add_trace (go.Scatter(x=x, y=y + 20, name="vh",
                    line_shape ='vh'))
fig.add_trace (go.Scatter(x=x, y=y + 25, name="hv",
                    line_shape ='hv'))
fig.update_traces (hoverinfo ='text+name' , mode='lines+markers' )
fig.update_layout (legend=dict(y=0.5, traceorder ='reversed' , font_size =16))
fig.show()
1 1.5 2 2.5 3 3.5 4 4.5 50510152025
hv
vh
hvh
vhv
spline
linear
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 12/17

--- Página 13 ---
import plotly.graph_objects  as go
import numpy as np
title = 'Main Source for News'
labels = ['Television' , 'Newspaper' , 'Internet' , 'Radio']
colors = ['rgb(67,67,67)' , 'rgb(115,115,115)' , 'rgb(49,130,189)' , 'rgb(189,189,189)' ]
mode_size  = [8, 8, 12, 8]
line_size  = [2, 2, 4, 2]
x_data = np.vstack((np.arange(2001, 2014),)*4)
y_data = np.array([
    [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],
    [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],
    [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],
    [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23],
])
fig = go.Figure()
for i in range(0, 4):
    fig.add_trace (go.Scatter(x=x_data[i], y=y_data[i], mode='lines',
        name=labels[i],
        line=dict(color=colors[i], width=line_size [i]),
        connectgaps =True,
    ))
    # endpoints
    fig.add_trace (go.Scatter(
        x=[x_data[i][0], x_data[i][-1]],
        y=[y_data[i][0], y_data[i][-1]],
        mode='markers' ,
        marker=dict(color=colors[i], size=mode_size [i])
    ))
fig.update_layout (
    xaxis=dict(
        showline =True,
        showgrid =False,
        showticklabels =True,
        linecolor ='rgb(204, 204, 204)' ,
        linewidth =2,
        ticks='outside' ,
        tickfont =dict(
            family='Arial',
            size=12,
            color='rgb(82, 82, 82)' ,
        ),
    ),
    yaxis=dict(
        showgrid =False,
        zeroline =False,
        showline =False,
        showticklabels =False,
    ),
    autosize =False,
    margin=dict(
        autoexpand =False,
        l=100,
        r=20,
        t=110,
    ),
    showlegend =False,
    plot_bgcolor ='white'
)
annotations  = []
# Adding labels
for y_trace, label, color in zip(y_data, labels, colors):
    # labeling the left_side of the plot
    annotations .append(dict(xref='paper', x=0.05, y=y_trace[0],
                                  xanchor='right', yanchor='middle' ,
                                  text=label + ' {}%'.format(y_trace[0]),
                                  font=dict(family='Arial',
                                            size=16),
                                  showarrow =False))
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 13/17

--- Página 14 ---
Filled Lines    # labeling the right_side of the plot
    annotations .append(dict(xref='paper', x=0.95, y=y_trace[11],
                                  xanchor='left', yanchor='middle' ,
                                  text='{}%'.format(y_trace[11]),
                                  font=dict(family='Arial',
                                            size=16),
                                  showarrow =False))
# Title
annotations .append(dict(xref='paper', yref='paper', x=0.0, y=1.05,
                              xanchor='left', yanchor='bottom' ,
                              text='Main Source for News' ,
                              font=dict(family='Arial',
                                        size=30,
                                        color='rgb(37,37,37)' ),
                              showarrow =False))
# Source
annotations .append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,
                              xanchor='center' , yanchor='top',
                              text='Source: PewResearch Center &amp; '  +
                                   'Storytelling with data' ,
                              font=dict(family='Arial',
                                        size=12,
                                        color='rgb(150,150,150)' ),
                              showarrow =False))
fig.update_layout (annotations =annotations )
fig.show()
2002 2004 2006 2008 2010 2012Television 74%
69%
Newspaper 45%
28%
Internet 13%50%
Radio 18%23%Main Source for News
Source: PewResearch Center &amp; Storytelling with data
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 14/17

--- Página 15 ---
import plotly.graph_objects  as go
import numpy as np
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x_rev = x[::-1]
# Line 1
y1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y1_upper  = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
y1_lower  = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
y1_lower  = y1_lower [::-1]
# Line 2
y2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]
y2_upper  = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]
y2_lower  = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]
y2_lower  = y2_lower [::-1]
# Line 3
y3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]
y3_upper  = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]
y3_lower  = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]
y3_lower  = y3_lower [::-1]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x+x_rev,
    y=y1_upper +y1_lower ,
    fill='toself' ,
    fillcolor ='rgba(0,100,80,0.2)' ,
    line_color ='rgba(255,255,255,0)' ,
    showlegend =False,
    name='Fair',
))
fig.add_trace (go.Scatter(
    x=x+x_rev,
    y=y2_upper +y2_lower ,
    fill='toself' ,
    fillcolor ='rgba(0,176,246,0.2)' ,
    line_color ='rgba(255,255,255,0)' ,
    name='Premium' ,
    showlegend =False,
))
fig.add_trace (go.Scatter(
    x=x+x_rev,
    y=y3_upper +y3_lower ,
    fill='toself' ,
    fillcolor ='rgba(231,107,243,0.2)' ,
    line_color ='rgba(255,255,255,0)' ,
    showlegend =False,
    name='Ideal',
))
fig.add_trace (go.Scatter(
    x=x, y=y1,
    line_color ='rgb(0,100,80)' ,
    name='Fair',
))
fig.add_trace (go.Scatter(
    x=x, y=y2,
    line_color ='rgb(0,176,246)' ,
    name='Premium' ,
))
fig.add_trace (go.Scatter(
    x=x, y=y3,
    line_color ='rgb(231,107,243)' ,
    name='Ideal',
))
fig.update_traces (mode='lines')
fig.show()
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 15/17

--- Página 16 ---
Reference
What About Dash?See  or 
 for more information and chart attribute options!
function reference for px.line() (https://plotly.com/python-api-reference/generated/plotly.express.line)
https://plotly.com/python/reference/scatter/
(https://plotly.com/python/reference/scatter/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)1 2 3 4 5 6 7 8 9 100246810Fair
Premium
Ideal
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 16/17

--- Página 17 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
lor16/07/2025, 06:20 Line charts in Python
https://plotly.com/python/line-charts/ 17/17</content>
    </file>
    <file name="Patterns, hatching, texture in Python.pdf" path="Patterns, hatching, texture in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)to double-encode variables (i.e. using both color and pattern) to improve accessibility for visually-impaired end-users
to encode an additional variable beyond just using color
to make charts that are easier to print in black and white
Patterned Charts with Plotly Express &gt;  &gt; Patterns,
Hatching, Texture
Patterns, Hatching, Texture in Python
How to use patterns (also known as hatching or texture) with bar charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/pattern-
hatching-texture.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
New in 5.0, with support for pie, sunburst, icicle, funnelarea, and treemap charts in 5.15
, , , , 
, , , , and 
, have large markers or areas which support not only a fill color, but also an optional pattern (also known as "hatching" or "texture"). This can be
used for a variety of reasons:
Bar charts (/python/bar-charts/)
histograms (/python/histograms/)
polar bar charts (/python/wind-rose-charts/)
area charts (/python/filled-area-plots/)
pie charts
(/python/pie-charts)
sunburst charts (/python/sunburst-charts)
funnelarea charts (/python/funnel-charts)
icicle charts (/python/icicle-charts/)
treemap charts
(/python/treemaps)
the px.bar(), px.histogram(), px.bar_polar() and px.area() functions support the pattern_shape argument. In the chart below, we double-encode nation using color and
pattern:
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" , pattern_shape ="nation" )
fig.show()
gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 1/8

--- Página 2 ---
import plotly.express  as px
df = px.data.medals_long ()
fig = px.area(df, x="medal", y="count", color="nation" , pattern_shape ="nation" )
fig.show()
In the chart below we use px.histogram() instead of px.bar() to aggregate multiple values together, and encode one variable (sex) using both color and x-position and
another (smoker) using patterns:
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="total_bill" , color="sex", pattern_shape ="smoker" )
fig.show()gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
Female Male050010001500200025003000sex, smoker
Female, No
Female, Yes
Male, No
Male, Yes
sexsum of total_bill
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 2/8

--- Página 3 ---
Controlling Pattern Assignment
In the charts above, the first value of the variable assigned pattern_shape gets the empty pattern, but this (and indeed every pattern-to-variable assignment) can be
controlled using pattern_shape_sequence and pattern_shape_map, analogously to the way  can be mapped using Plotly
Express.
discrete colors (/python/discrete-color/)
Here we use pattern_shape_sequence to replace the defaults and include a pattern-shape for the first variable:
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"])
fig.show()
Here we use pattern_shape_map to explictly assign a shape to each value of nation, regardless of order:gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 3/8

--- Página 4 ---
Black on White Patterns for Printimport plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_map ={
             "China": ".", "Canada" : "/", "South Korea" : "+"
             })
fig.show()
When creating figures meant to be printed on black and white printers, it is better to replace the fill-color with the pattern, rather than to overlay it. This can be
controlled with the &lt;trace&gt;.marker.pattern.fillmode attribute, which defaults to "overlay" but can be set to "replace" instead. Changing this attribute, and using a
simpler default template and color scheme gives the following output:gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 4/8

--- Página 5 ---
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"],
             template ="simple_white"
            )
fig.update_traces (
    marker=dict(color="black", line_color ="black", pattern_fillmode ="replace" )
)
fig.show()
Of course, this setting can be used without making the figure monochrome as well:gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 5/8

--- Página 6 ---
Patterns using Graph Objectsimport plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"],
            )
fig.update_traces (
    marker=dict(line_color ="grey", pattern_fillmode ="replace" )
)
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Bar class from plotly.graph_objects (/python/graph-objects/)gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 6/8

--- Página 7 ---
Reference
What About Dash?import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(x=["a","b"], y=[1,2], marker_pattern_shape ="."))
fig.add_trace (go.Bar(x=["a","b"], y=[3,1], marker_pattern_shape ="x"))
fig.add_trace (go.Bar(x=["a","b"], y=[2,3], marker_pattern_shape ="+"))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/bar/ (https://plotly.com/python/reference/bar/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupytera b00.511.522.53 trace 0
trace 1
trace 2
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 7/8

--- Página 8 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s16/07/2025, 06:27 Patterns, hatching, texture in Python
https://plotly.com/python/pattern-hatching-texture/ 8/8</content>
    </file>
    <file name="Pie charts in Python.pdf" path="Pie charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Pie chart with plotly express
Pie chart with repeated labels &gt;  &gt; Pie
Charts
Pie Charts in Python
How to make Pie Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/pie-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A pie chart is a circular statistical chart, which is divided into sectors to illustrate numerical proportion.
If you're looking instead for a multilevel hierarchical pie-like chart, go to the .
Sunburst tutorial (/python/sunburst-charts/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
In px.pie, data visualized by the sectors of the pie is set in values. The sector labels are set in names.
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" ).query("continent == 'Europe'" )
df.loc[df['pop'] &lt; 2.e6, 'country' ] = 'Other countries'  # Represent only large countries
fig = px.pie(df, values='pop', names='country' , title='Population of European continent' )
fig.show()
Lines of the dataframe with the same value for names are grouped together in the same sector.14.1%12.1%
10.4%
10.4%
9.92%
6.9%6.57%3.8%2.83%1.83%1.82%1.77%1.75%1.73%1.7%1.54%1.4%1.29%1.25%0.933%0.929%0.894%0.79%0.777%0.767%0.701%0.614%0.343%0.168%
Germany
Turkey
France
United Kingdom
Italy
Spain
Poland
Romania
Netherlands
Greece
Portugal
Belgium
Czech Republic
Serbia
Hungary
Sweden
Austria
SwitzerlandPopulation of European continent
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 1/15

--- Página 2 ---
Pie chart in Dashimport plotly.express  as px
# This dataframe has 244 lines, but 4 distinct values for `day`
df = px.data.tips()
fig = px.pie(df, values='tip', names='day')
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)35.6%33.8%
23.5%
7.1%Sat
Sun
Thur
Fri
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 2/15

--- Página 3 ---
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Analysis of the restaurant sales'),
    dcc.Graph(id="graph"),
    html.P("Names:"),
    dcc.Dropdown(id='names',
        options=['smoker', 'day', 'time', 'sex'],
        value='day', clearable=False
    ),
    html.P("Values:"),
    dcc.Dropdown(id='values',
        options=['total_bill', 'tip', 'size'],
        value='total_bill', clearable=False
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("names", "value"),
 I t("l ""l"))DOWNLOAD
Analysis of the restaurant sales
Names:
Values:36.8%33.7%
22.7%6.75%Sat
Sun
Thur
Fri
day
total_bill
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 3/15

--- Página 4 ---
Setting the color of pie sectors with px.pie
Using an explicit mapping for discrete colorsimport plotly.express  as px
df = px.data.tips()
fig = px.pie(df, values='tip', names='day', color_discrete_sequence =px.colors.sequential .RdBu)
fig.show()
For more information about discrete colors, see the .
dedicated page (/python/discrete-color)
import plotly.express  as px
df = px.data.tips()
fig = px.pie(df, values='tip', names='day', color='day',
             color_discrete_map ={'Thur':'lightcyan' ,
                                 'Fri':'cyan',
                                 'Sat':'royalblue' ,
                                 'Sun':'darkblue' })
fig.show()35.6%33.8%
23.5%
7.1%Sat
Sun
Thur
Fri
35.6%33.8%
23.5%
7.1%Sat
Sun
Thur
Fri
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 4/15

--- Página 5 ---
Customizing a pie chart created with px.pie
Basic Pie Chart with go.PieIn the example below, we first create a pie chart with px,pie, using some of its options such as hover_data (which columns should appear in the hover) or labels
(renaming column names). For further tuning, we call fig.update_traces to set other parameters of the chart (you can also use fig.update_layout for changing the
layout).
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" ).query("continent == 'Americas'" )
fig = px.pie(df, values='pop', names='country' ,
             title='Population of American continent' ,
             hover_data =['lifeExp' ], labels={'lifeExp' :'life expectancy' })
fig.update_traces (textposition ='inside' , textinfo ='percent+label' )
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Pie class from plotly.graph_objects (/python/graph-objects/)
In go.Pie, data visualized by the sectors of the pie is set in values. The sector labels are set in labels. The sector colors are set in marker.colors.
If you're looking instead for a multilevel hierarchical pie-like chart, go to the .
Sunburst tutorial (/python/sunburst-charts/)United States
33.5%Brazil
21.1%
Mexico
12.1%
Colombia
4.92%
Argentina
4.48%
Canada
3.71%
Peru
3.19%Venezuela2.9% Chile1.81%Ecuador1.53%Guatem
ala1.4%Cuba1.27%Dominican Republic1.04%Bolivia1.01%Haiti0.946%Honduras0.833%El Salvador0.772%Paraguay0.742%Nicaragua0.631%Costa Rica0.46%Puerto Rico0.439%Uruguay0.384%Panama0.361%Jamaica0.309%Trinidad and Tobago0.118%United States
Brazil
Mexico
Colombia
Argentina
Canada
Peru
Venezuela
Chile
Ecuador
Guatemala
Cuba
Dominican Republic
Bolivia
Haiti
Honduras
El Salvador
ParaguayPopulation of American continent
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 5/15

--- Página 6 ---
Styled Pie Chartimport plotly.graph_objects  as go
labels = ['Oxygen' ,'Hydrogen' ,'Carbon_Dioxide' ,'Nitrogen' ]
values = [4500, 2500, 1053, 500]
fig = go.Figure(data=[go.Pie(labels=labels, values=values)])
fig.show()
Colors can be given as RGB triplets or hexadecimal strings, or with  as below.
CSS color names (https://www.w3schools.com/cssref/css_colors.asp)
import plotly.graph_objects  as go
colors = ['gold', 'mediumturquoise' , 'darkorange' , 'lightgreen' ]
fig = go.Figure(data=[go.Pie(labels=['Oxygen' ,'Hydrogen' ,'Carbon_Dioxide' ,'Nitrogen' ],
                             values=[4500,2500,1053,500])])
fig.update_traces (hoverinfo ='label+percent' , textinfo ='value', textfont_size =20,
                  marker=dict(colors=colors, line=dict(color='#000000' , width=2)))
fig.show()52.6%29.2%
12.3%
5.85%Oxygen
Hydrogen
Carbon_Dioxide
Nitrogen
45002500
1053
500Oxygen
Hydrogen
Carbon_Dioxide
Nitrogen
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 6/15

--- Página 7 ---
Controlling text fontsize with uniformtext
Controlling text orientation inside pie sectorsIf you want all the text labels to have the same size, you can use the uniformtext layout parameter. The minsize attribute sets the font size, and the mode attribute
sets what happens for labels which cannot fit with the desired fontsize: either hide them or show them with overflow. In the example below we also force the text to
be inside with textposition, otherwise text labels which do not fit are displayed outside of pie sectors.
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Asia'" )
fig = px.pie(df, values='pop', names='country' )
fig.update_traces (textposition ='inside' )
fig.update_layout (uniformtext_minsize =12, uniformtext_mode ='hide')
fig.show()
The insidetextorientation attribute controls the orientation of text inside sectors. With "auto" the texts may automatically be rotated to fit with the maximum size
inside the slice. Using "horizontal" (resp. "radial", "tangential") forces text to be horizontal (resp. radial or tangential)
For a figure fig created with plotly express, use fig.update_traces(insidetextorientation='...') to change the text orientation.37.7%27.6%
5.83%
4.4%
3.69%
3.57%
2.15%
2.07%1.77%China
India
Indonesia
Japan
Pakistan
Bangladesh
Vietnam
Philippines
Thailand
Iran
Korea, Rep.
Myanmar
Taiwan
Nepal
Korea, Dem. Rep.
Afghanistan
Malaysia
Sri Lanka
Iraq
Saudi Arabia
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 7/15

--- Página 8 ---
Donut Chartimport plotly.graph_objects  as go
labels = ['Oxygen' ,'Hydrogen' ,'Carbon_Dioxide' ,'Nitrogen' ]
values = [4500, 2500, 1053, 500]
fig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo ='label+percent' ,
                             insidetextorientation ='radial'
                            )])
fig.show()
import plotly.graph_objects  as go
labels = ['Oxygen' ,'Hydrogen' ,'Carbon_Dioxide' ,'Nitrogen' ]
values = [4500, 2500, 1053, 500]
# Use `hole` to create a donut-like pie chart
fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
fig.show()Oxygen
52.6%Hydrogen
29.2%
Carbon_Dioxide
12.3%
Nitrogen
5.85%Oxygen
Hydrogen
Carbon_Dioxide
Nitrogen
52.6%29.2%
12.3%
5.85%Oxygen
Hydrogen
Carbon_Dioxide
Nitrogen
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 8/15

--- Página 9 ---
Pulling sectors out from the center
For a "pulled-out" or "exploded" layout of the pie chart, use the pull argument. It can be a scalar for pulling all sectors or an array to pull only some of the sectors.
import plotly.graph_objects  as go
labels = ['Oxygen' ,'Hydrogen' ,'Carbon_Dioxide' ,'Nitrogen' ]
values = [4500, 2500, 1053, 500]
# pull is given as a fraction of the pie radius
fig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0, 0.2, 0])])
fig.show()
52.6%29.2%
12.3%
5.85%Oxygen
Hydrogen
Carbon_Dioxide
Nitrogen
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 9/15

--- Página 10 ---
Pie Charts in subplots
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
labels = ["US", "China", "European Union" , "Russian Federation" , "Brazil" , "India",
          "Rest of World" ]
# Create subplots: use 'domain' type for Pie subplot
fig = make_subplots (rows=1, cols=2, specs=[[{'type':'domain' }, {'type':'domain' }]])
fig.add_trace (go.Pie(labels=labels, values=[16, 15, 12, 6, 5, 4, 42], name="GHG Emissions" ),
              1, 1)
fig.add_trace (go.Pie(labels=labels, values=[27, 11, 25, 8, 1, 3, 25], name="CO2 Emissions" ),
              1, 2)
# Use `hole` to create a donut-like pie chart
fig.update_traces (hole=.4, hoverinfo ="label+percent+name" )
fig.update_layout (
    title_text ="Global Emissions 1990-2011" ,
    # Add annotations in the center of the donut pies.
    annotations =[dict(text='GHG', x=sum(fig.get_subplot (1, 1).x) / 2, y=0.5,
                      font_size =20, showarrow =False, xanchor="center" ),
                 dict(text='CO2', x=sum(fig.get_subplot (1, 2).x) / 2, y=0.5,
                      font_size =20, showarrow =False, xanchor="center" )])
fig.show()
42%16%
15%
12%
6%5%4%27%25%
25%
11%8%3%1%Rest of World
US
China
European Union
Russian Federation
Brazil
IndiaGlobal Emissions 1990-2011
GHG CO2
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 10/15

--- Página 11 ---
Plot chart with area proportional to total countimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
labels = ['1st', '2nd', '3rd', '4th', '5th']
# Define color sets of paintings
night_colors  = ['rgb(56, 75, 126)' , 'rgb(18, 36, 37)' , 'rgb(34, 53, 101)' ,
                'rgb(36, 55, 57)' , 'rgb(6, 4, 4)' ]
sunflowers_colors  = ['rgb(177, 127, 38)' , 'rgb(205, 152, 36)' , 'rgb(99, 79, 37)' ,
                     'rgb(129, 180, 179)' , 'rgb(124, 103, 37)' ]
irises_colors  = ['rgb(33, 75, 99)' , 'rgb(79, 129, 102)' , 'rgb(151, 179, 100)' ,
                 'rgb(175, 49, 35)' , 'rgb(36, 73, 147)' ]
cafe_colors  =  ['rgb(146, 123, 21)' , 'rgb(177, 180, 34)' , 'rgb(206, 206, 40)' ,
                'rgb(175, 51, 21)' , 'rgb(35, 36, 21)' ]
# Create subplots, using 'domain' type for pie charts
specs = [[{'type':'domain' }, {'type':'domain' }], [{'type':'domain' }, {'type':'domain' }]]
fig = make_subplots (rows=2, cols=2, specs=specs)
# Define pie charts
fig.add_trace (go.Pie(labels=labels, values=[38, 27, 18, 10, 7], name='Starry Night' ,
                     marker_colors =night_colors ), 1, 1)
fig.add_trace (go.Pie(labels=labels, values=[28, 26, 21, 15, 10], name='Sunflowers' ,
                     marker_colors =sunflowers_colors ), 1, 2)
fig.add_trace (go.Pie(labels=labels, values=[38, 19, 16, 14, 13], name='Irises' ,
                     marker_colors =irises_colors ), 2, 1)
fig.add_trace (go.Pie(labels=labels, values=[31, 24, 19, 18, 8], name='The Night Café' ,
                     marker_colors =cafe_colors ), 2, 2)
# Tune layout and hover info
fig.update_traces (hoverinfo ='label+percent+name' , textinfo ='none')
fig.update(layout_title_text ='Van Gogh: 5 Most Prominent Colors Shown Proportionally' ,
           layout_showlegend =False)
fig = go.Figure(fig)
fig.show()
Plots in the same scalegroup are represented with an area proportional to their total size.Van Gogh: 5 Most Prominent Colors Shown Proportionally
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 11/15

--- Página 12 ---
Pattern Fillsimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
labels = ["Asia", "Europe" , "Africa" , "Americas" , "Oceania" ]
fig = make_subplots (1, 2, specs=[[{'type':'domain' }, {'type':'domain' }]],
                    subplot_titles =['1980', '2007'])
fig.add_trace (go.Pie(labels=labels, values=[4, 7, 1, 7, 0.5], scalegroup ='one',
                     name="World GDP 1980" ), 1, 1)
fig.add_trace (go.Pie(labels=labels, values=[21, 15, 3, 19, 1], scalegroup ='one',
                     name="World GDP 2007" ), 1, 2)
fig.update_layout (title_text ='World GDP' )
fig.show()
New in 5.15
Pie charts support  (also known as hatching or texture) in addition to color.
patterns (/python/pattern-hatching-texture/)35.9% 35.9%
20.5%
5.13%2.56%35.6%32.2%
25.4%
5.08%1.69%Europe
Americas
Asia
Africa
OceaniaWorld GDP
1980 2007
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 12/15

--- Página 13 ---
See Also: Sunburst chartsimport plotly.graph_objects  as go
labels = ["Oxygen" , "Hydrogen" , "Carbon_Dioxide" , "Nitrogen" ]
values = [4500, 2500, 1053, 500]
colors = ["gold", "mediumturquoise" , "darkorange" , "lightgreen" ]
fig = go.Figure(
    data=[
        go.Pie(
            labels=labels,
            values=values,
            textfont_size =20,
            marker=dict(colors=colors, pattern=dict(shape=[".", "x", "+", "-"]))
        )
    ]
)
fig.show()
For multilevel pie charts representing hierarchical data, you can use the Sunburst chart. A simple example is given below, for more information see the 
.
tutorial on
Sunburst charts (/python/sunburst-charts/)52.6%29.2%
12.3%
5.85%Oxygen
Hydrogen
Carbon_Dioxide
Nitrogen
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 13/15

--- Página 14 ---
Reference
What About Dash?import plotly.graph_objects  as go
fig =go.Figure(go.Sunburst (
    labels=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
))
fig.update_layout (margin = dict(t=0, l=0, r=0, b=0))
fig.show()
See  or 
 for more information and chart attribute options!
function reference for px.pie() (https://plotly.com/python-api-reference/generated/plotly.express.pie)
https://plotly.com/python/reference/pie/
(https://plotly.com/python/reference/pie/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterEveSeth
Cain
Awan
Abel
Azura
Enos
Noam
Enoch
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 14/15

--- Página 15 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
px.pie
ete colors
h px.pie
mtext
ie
total16/07/2025, 06:21 Pie charts in Python
https://plotly.com/python/pie-charts/ 15/15</content>
    </file>
    <file name="Sankey diagram in Python.pdf" path="Sankey diagram in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Sankey Diagram &gt;  &gt; Sankey
Diagram
Sankey Diagram in Python
How to make Sankey Diagrams in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/sankey-
diagram.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a flow diagram, in which the width of arrows is proportional to the flow quantity.
Sankey diagram (https://en.wikipedia.org/wiki/Sankey_diagram)
Sankey diagrams visualize the contributions to a flow by defining  to represent the source
node,  for the target node, 
 to set the flow volume, and  that shows the node name.
source (https://plotly.com/python/reference/sankey/#sankey-link-source)
target (https://plotly.com/python/reference/sankey/#sankey-link-target)
value (https://plotly.com/python/reference/sankey/#sankey-link-
value)
label (https://plotly.com/python/reference/sankey/#sankey-node-label)
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Sankey(
    node = dict(
      pad = 15,
      thickness  = 20,
      line = dict(color = "black", width = 0.5),
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      color = "blue"
    ),
    link = dict(
      source = [0, 1, 0, 2, 3, 3], # indices correspond to labels, eg A1, A2, A1, B1, ...
      target = [2, 3, 3, 4, 4, 5],
      value = [8, 4, 2, 8, 4, 2]
  ))])
fig.update_layout (title_text ="Basic Sankey Diagram" , font_size =10)
fig.show()
A1
A2B1
B2C1
C2Basic Sankey Diagram
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 1/11

--- Página 2 ---
More complex Sankey diagram with colored links
import plotly.graph_objects  as go
import urllib, json
url = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'
response  = urllib.request.urlopen(url)
data = json.loads(response .read())
# override gray link colors with 'source' colors
opacity = 0.4
# change 'magenta' to its 'rgba' value to add opacity
data['data'][0]['node']['color'] = ['rgba(255,0,255, 0.8)'  if color == "magenta"  else color for color in data['data'][0]['node']['color']]
data['data'][0]['link']['color'] = [data['data'][0]['node']['color'][src].replace("0.8", str(opacity))
                                    for src in data['data'][0]['link']['source' ]]
fig = go.Figure(data=[go.Sankey(
    valueformat  = ".0f",
    valuesuffix  = "TWh",
    # Define nodes
    node = dict(
      pad = 15,
      thickness  = 15,
      line = dict(color = "black", width = 0.5),
      label =  data['data'][0]['node']['label'],
      color =  data['data'][0]['node']['color']
    ),
    # Add links
    link = dict(
      source =  data['data'][0]['link']['source' ],
      target =  data['data'][0]['link']['target' ],
      value =  data['data'][0]['link']['value'],
      label =  data['data'][0]['link']['label'],
      color =  data['data'][0]['link']['color']
))])
fig.update_layout (title_text ="Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href='https://bost.ock
s.org/mike/sankey/'&gt;Mike Bostock&lt;/a&gt;" ,
                  font_size =10)
fig.show()
Agricultural 'waste'Bio-conversion
LiquidLosses
Solid
Gas
Biofuel importsBiomass imports
Coal importsCoal Coal reservesDistrict heating
Industry
Heating and cooling - commercial
Heating and cooling - homesElectricity gridOver generation / exports
H2 conversion
Road transportAgriculture
Rail transportLighting &amp; appliances - commercial
Lighting &amp; appliances - homes
Gas importsNgasGas reservesThermal generation
GeothermalH2
Hydro
International shipping
Domestic aviationInternational aviation
National navigationMarine algaeNuclear
Oil imports Oil
Oil reservesOther waste
Pumped heatSolar PV
Solar Thermal SolarTidalUK land based bioenergy
WaveWindEnergy forecast for 2050
Source: Department of Energy &amp; Climate Change, Tom Counsell via 
Mike Bostock
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 2/11

--- Página 3 ---
Sankey Diagram in Dash
Style Sankey Diagram is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
This example also uses  to enable multiple tooltips.
hovermode (https://plotly.com/python/reference/layout/#layout-hovermode)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import json, urllib
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Supply chain of the energy production'),
    dcc.Graph(id="graph"),
    html.P("Opacity"),
    dcc.Slider(id='slider', min=0, max=1,
               value=0.5, step=0.1)
])
@app.callback(
    Output("graph", "figure"),
    Input("slider", "value"))
def display_sankey(opacity):
    url = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'
    response = urllib.request.urlopen(url)
    data = json.loads(response.read()) # replace with your own data source
    node = data['data'][0]['node']
    node['color'] = [
        f'rgba(255,0,255,{opacity})'
if " t"l l ('08't( it))DOWNLOAD
Supply chain of the energy production
OpacityAgricultural 'waste'
Bio-conversionLiquid
LossesSolidGasBiofuel imports
Biomass importsCoal importsCoalCoal reserves
District heatingIndustry
Heating and cooling - commercialHeating and cooling - homesElectricity grid
Over generation / exportsH2 conversionRoad transport
Agriculture
Rail transport
Lighting &amp; appliances - commercial
Lighting &amp; appliances - homesGas imports
NgasGas reserves
Thermal generation
GeothermalH2
HydroInternational shipping
Domestic aviationInternational aviation
National navigation
Marine algae
NuclearOil imports
Oil Oil reserves
Other waste
Pumped heatSolar PV
Solar Thermal SolarTidalUK land based bioenergy
WaveWind
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 3/11

--- Página 4 ---
Link Hover Colorimport plotly.graph_objects  as go
import urllib, json
url = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'
response  = urllib.request.urlopen(url)
data = json.loads(response .read())
fig = go.Figure(data=[go.Sankey(
    valueformat  = ".0f",
    valuesuffix  = "TWh",
    node = dict(
      pad = 15,
      thickness  = 15,
      line = dict(color = "black", width = 0.5),
      label =  data['data'][0]['node']['label'],
      color =  data['data'][0]['node']['color']
    ),
    link = dict(
      source =  data['data'][0]['link']['source' ],
      target =  data['data'][0]['link']['target' ],
      value =  data['data'][0]['link']['value'],
      label =  data['data'][0]['link']['label']
  ))])
fig.update_layout (
    hovermode  = 'x',
    title=dict(text="Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href='https://bost.ocks.org/mik
e/sankey/'&gt;Mike Bostock&lt;/a&gt;" ),
    font=dict(size = 10, color = 'white'),
    plot_bgcolor ='black',
    paper_bgcolor ='black'
)
fig.show()
New in 5.19
Set link.hovercolor to change the colors of links on hover. link.hovercolor accepts either one color, specified as a string, that will apply to all links, or a list of colors to
specify different colors for each link. Here, we use a list to specify a different color for each link:Agricultural 'waste'Bio-conversion
LiquidLosses
Solid
Gas
Biofuel importsBiomass imports
Coal importsCoal Coal reservesDistrict heating
Industry
Heating and cooling - commercial
Heating and cooling - homesElectricity gridOver generation / exports
H2 conversion
Road transportAgriculture
Rail transportLighting &amp; appliances - commercial
Lighting &amp; appliances - homes
Gas importsNgasGas reservesThermal generation
GeothermalH2
Hydro
International shipping
Domestic aviationInternational aviation
National navigationMarine algaeNuclear
Oil imports Oil
Oil reservesOther waste
Pumped heatSolar PV
Solar Thermal SolarTidalUK land based bioenergy
WaveWindEnergy forecast for 2050
Source: Department of Energy &amp; Climate Change, Tom Counsell via 
Mike Bostock
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 4/11

--- Página 5 ---
Hovertemplate and customdata of Sankey diagramsimport plotly.graph_objects  as go
fig = go.Figure(data=[go.Sankey(
    node = dict(
      pad = 15,
      thickness  = 20,
      line = dict(color = "black", width = 0.5),
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      color = "blue"
    ),
    link = dict(
      source = [0, 1, 0, 2, 3, 3],
      target = [2, 3, 3, 4, 4, 5],
      value = [8, 4, 2, 8, 4, 2],
      hovercolor =["midnightblue" , "lightskyblue" , "gold", "mediumturquoise" , "lightgreen" , "cyan"],
  ))])
fig.update_layout (title_text ="Basic Sankey Diagram" , font_size =10)
fig.show()
Links and nodes have their own hovertemplate, in which link- or node-specific attributes can be displayed. To add more data to links and nodes, it is possible to use
the customdata attribute of link and nodes, as in the following example. For more information about hovertemplate and customdata, please see the 
.
tutorial on hover
text (/python/hover-text-and-formatting/)A1
A2B1
B2C1
C2Basic Sankey Diagram
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 5/11

--- Página 6 ---
Define Node Positionimport plotly.graph_objects  as go
fig = go.Figure(data=[go.Sankey(
    node = dict(
      pad = 15,
      thickness  = 20,
      line = dict(color = "black", width = 0.5),
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      customdata  = ["Long name A1" , "Long name A2" , "Long name B1" , "Long name B2" ,
                    "Long name C1" , "Long name C2" ],
      hovertemplate ='Node %{customdata}  has total value % {value}&lt;extra&gt;&lt;/extra&gt;' ,
      color = "blue"
    ),
    link = dict(
      source = [0, 1, 0, 2, 3, 3], # indices correspond to labels, eg A1, A2, A2, B1, ...
      target = [2, 3, 3, 4, 4, 5],
      value = [8, 4, 2, 8, 4, 2],
      customdata  = ["q","r","s","t","u","v"],
      hovertemplate ='Link from node % {source.customdata} &lt;br /&gt;'+
        'to node% {target.customdata} &lt;br /&gt;has value % {value}'+
        '&lt;br /&gt;and data % {customdata} &lt;extra&gt;&lt;/extra&gt;' ,
  ))])
fig.update_layout (title_text ="Basic Sankey Diagram" , font_size =10)
fig.show()
The following example sets  and node.y to place nodes in the specified locations, except in the
snap arrangement (default behaviour when node.x and node.y are not defined) to avoid overlapping of the nodes, therefore, an automatic snapping of elements will
be set to define the padding between nodes via . The other possible arrangements are: 1)
perpendicular 2) freeform 3) fixed
node.x (https://plotly.com/python/reference/sankey/#sankey-node-x)
nodepad (https://plotly.com/python/reference/sankey/#sankey-node-pad)A1
A2B1
B2C1
C2Basic Sankey Diagram
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 6/11

--- Página 7 ---
Sankey Diagram with Arrow Linksimport plotly.graph_objects  as go
fig = go.Figure(go.Sankey(
    arrangement  = "snap",
    node = {
        "label": ["A", "B", "C", "D", "E", "F"],
        "x": [0.2, 0.1, 0.5, 0.7, 0.3, 0.5],
        "y": [0.7, 0.5, 0.2, 0.4, 0.2, 0.3],
        'pad':10},  # 10 Pixels
    link = {
        "source" : [0, 0, 1, 2, 5, 4, 3, 5],
        "target" : [5, 3, 4, 3, 0, 2, 2, 3],
        "value": [1, 2, 1, 1, 1, 1, 1, 2]}))
fig.show()
New in 5.10
Create a Sankey diagram with arrow links by setting the arrowlen attribute of link:ABC
DE
F
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 7/11

--- Página 8 ---
Node Alignmentimport plotly.graph_objects  as go
fig = go.Figure(go.Sankey(
    arrangement ='snap',
    node=dict(
        label=['A', 'B', 'C', 'D', 'E', 'F'],
        x=[0.2, 0.1, 0.5, 0.7, 0.3, 0.5],
        y=[0.7, 0.5, 0.2, 0.4, 0.2, 0.3],
        pad=10,
        align="right",
    ),
    link=dict(
        arrowlen =15,
        source=[0, 0, 1, 2, 5, 4, 3, 5],
        target=[5, 3, 4, 3, 0, 2, 2, 3],
        value=[1, 2, 1, 1, 1, 1, 1, 2]
    )
))
fig.show()
New in 5.19
You can set the alignment of nodes using node.align. Here are two examples with the same source and target. The first example has nodes aligned "left" and the
second has nodes aligned "right". node.align also supports "center" and "justify". "justify" is the default if node.align is not set, and is similar to aligning to the "left",
except that nodes without outgoing links are moved to the right of the figure.ABC
DE
F
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 8/11

--- Página 9 ---
import plotly.graph_objects  as go
fig = go.Figure(go.Sankey(
    arrangement ='snap',
    node=dict(
        label=["0", "1", "2", "3", "4", "5"],
        align='left'
    ),
    link=dict(
        arrowlen =15,
        source=[0, 1, 4, 2, 1],
        target=[1, 4, 5, 4, 3],
        value=[4, 2, 3, 1, 2]
    )
))
fig.show()
01
23
45
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 9/11

--- Página 10 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure(go.Sankey(
    arrangement ='snap',
    node=dict(
        label=["0", "1", "2", "3", "4", "5"],
        align="right",
    ),
    link=dict(
        arrowlen =15,
        source=[0, 1, 4, 2, 1],
        target=[1, 4, 5, 4, 3],
        value=[4, 2, 3, 1, 2]
    )
))
fig.show()
See  for more information and options!
https://plotly.com/python/reference/sankey (https://plotly.com/python/reference/sankey/)01
23
4
5
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 10/11

--- Página 11 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
h colored
Sankey16/07/2025, 06:25 Sankey diagram in Python
https://plotly.com/python/sankey-diagram/ 11/11</content>
    </file>
    <file name="Scatter plots in Python.pdf" path="Scatter plots in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Scatter plots with Plotly Express &gt;  &gt; Scatter
Plots
Scatter Plots in Python
How to make scatter plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/line-and-
scatter.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.scatter, each data point is represented as a marker point, whose location is given by the x and y columns.
# x and y given as array_like objects
import plotly.express  as px
fig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 40246810121416
xy
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 1/25

--- Página 2 ---
Setting size and color with column names# x and y given as DataFrame columns
import plotly.express  as px
df = px.data.iris() # iris is a pandas DataFrame
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.show()
Scatter plots with variable-sized circular markers are often known as . Note that color and size data are added
to hover information. You can add other columns to hover data with the hover_data argument of px.scatter.
bubble charts (https://plotly.com/python/bubble-charts/)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 size='petal_length' , hover_data =['petal_width' ])
fig.show()
Color can be  as follows, or  as above.
continuous (https://plotly.com/python/colorscales/)
discrete/categorical (https://plotly.com/python/discrete-color/)2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
2 2.5 3 3.5 4 4.54.555.566.577.58species
setosa
versicolor
virginica
sepal_widthsepal_length
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 2/25

--- Página 3 ---
Scatter plots in Dashimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color='petal_length' )
fig.show()
The symbol argument can be mapped to a column as well. A  are available.
wide variety of symbols (https://plotly.com/python/marker-style/)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , symbol="species" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)2 2.5 3 3.5 4 4.54.555.566.577.58
123456petal_length
sepal_widthsepal_length
2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 3/25

--- Página 4 ---
Scatter plots and Categorical AxesSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
Scatter plots can be made using any type of cartesian axis, including , ,
 or  axes.
linear (https://plotly.com/python/axes/)
logarithmic (https://plotly.com/python/log-plot/)
categorical (https://plotly.com/python/categorical-axes/)
date (https://plotly.com/python/time-series/)
Scatter plots where one axis is categorical are often known as .
dot plots (https://plotly.com/python/dot-plots/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive scatter plot with Iris dataset'),
    dcc.Graph(id="scatter-plot"),
    html.P("Filter by petal width:"),
    dcc.RangeSlider(
        id='range-slider',
        min=0, max=2.5, step=0.1,
        marks={0: '0', 2.5: '2.5'},
        value=[0.5, 2]
    ),
])
@app.callback(
    Output("scatter-plot", "figure"),
    Input("range-slider", "value"))
def update_bar_chart(slider_range):
    df = px.data.iris() # replace with your own data source
    low, high = slider_range
 k (df['tlidth']&gt;l)&amp;(df['tlidth']&lt;hih)DOWNLOAD
Interactive scatter plot with Iris dataset
Filter by petal width:
2 2.2 2.4 2.6 2.8 3 3.2 3.4 3.655.566.577.5species
setosa
versicolor
virginica
sepal_widthsepal_length
0 2.5
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 4/25

--- Página 5 ---
Grouped Scatter Pointsimport plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="nation" , x="count", color="medal", symbol="medal")
fig.update_traces (marker_size =10)
fig.show()
New in 5.12
By default, scatter points at the same location are overlayed. We can see this in the previous example, with the values for Canada for bronze and silver. Set
scattermode='group' to plot scatter points next to one another, centered around the shared location.8 10 12 14 16 18 20 22 24South KoreaChinaCanadamedal
gold
silver
bronze
countnation
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 5/25

--- Página 6 ---
import plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="count", x="nation" , color="medal")
fig.update_traces (marker_size =10)
fig.update_layout (scattermode ="group")
fig.show()
New in 5.12
You can configure the gap between groups of scatter points using scattergap. Here we set it to 0.75, which brings the points closer together by allocating more space
to the gap between groups. If you don't set scattergap, a default value of 0 is used, unless you have bargap set. If you have bargap set, the scattergap defaults to that
value.
import plotly.express  as px
df = px.data.medals_long ()
fig = px.scatter(df, y="count", x="nation" , color="medal")
fig.update_traces (marker_size =10)
fig.update_layout (scattermode ="group", scattergap =0.75)
fig.show()South Korea China Canada0510152025medal
gold
silver
bronze
nationcount
South Korea China Canada0510152025medal
gold
silver
bronze
nationcount
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 6/25

--- Página 7 ---
Error Bars
Marginal Distribution PlotsScatter plots support .
error bars (https://plotly.com/python/error-bars/)
import plotly.express  as px
df = px.data.iris()
df["e"] = df["sepal_width" ]/100
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 error_x="e", error_y="e")
fig.show()
Scatter plots support 
marginal distribution plots (https://plotly.com/python/marginal-plots/)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , marginal_x ="histogram" , marginal_y ="rug")
fig.show()2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
4 4.5 5 5.5 6 6.5 7 7.5 822.533.544.5
sepal_lengthsepal_width
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 7/25

--- Página 8 ---
Facetting
Linear Regression and Other TrendlinesScatter plots support .
faceting (https://plotly.com/python/facet-plots/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" , facet_col ="sex", facet_row ="time")
fig.show()
Scatter plots support .
linear and non-linear trendlines (https://plotly.com/python/linear-fits/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", trendline ="ols")
fig.show()0 20 40246810
0 20 40246810 smoker
No
Yes
total_bill total_billtip tipsex=Female sex=Maletime=Lunch time=Dinner
10 20 30 40 50246810
total_billtip
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 8/25

--- Página 9 ---
Line plots with Plotly Express
import plotly.express  as px
import numpy as np
t = np.linspace (0, 2*np.pi, 100)
fig = px.line(x=t, y=np.cos(t), labels={'x':'t', 'y':'cos(t)' })
fig.show()
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x='year', y='lifeExp' , color='country' )
fig.show()
The markers argument can be set to True to show markers on lines.0 1 2 3 4 5 6−1−0.500.51
tcos(t)
1960 1970 1980 1990 2000707274767880country
Australia
New Zealand
yearlifeExp
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 9/25

--- Página 10 ---
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x='year', y='lifeExp' , color='country' , markers=True)
fig.show()
The symbol argument can be used to map a data field to the marker symbol. A  are available.
wide variety of symbols (https://plotly.com/python/marker-style/)
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x='year', y='lifeExp' , color='country' , symbol="country" )
fig.show()1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealand
yearlifeExp
1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealand
yearlifeExp
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 10/25

--- Página 11 ---
Line plots on Date axes
Data Order in Scatter and Line ChartsLine plots can be made on using any type of cartesian axis, including , ,
 or date axes. Line plots on date axes are often called 
.
linear (https://plotly.com/python/axes/)
logarithmic (https://plotly.com/python/log-plot/)
categorical (https://plotly.com/python/categorical-axes/)
time-series charts (https://plotly.com/python/time-
series/)
Plotly auto-sets the axis type to a date format when the corresponding data are either ISO-formatted date strings or if they're a 
 or 
.
date pandas column
(https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)
datetime NumPy array
(https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)
import plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x='date', y="GOOG")
fig.show()
Plotly line charts are implemented as  (see below), meaning that the points are
plotted and connected with lines in the order they are provided, with no automatic reordering.
connected scatterplots (https://www.data-to-viz.com/graph/connectedscatter.html)
This makes it possible to make charts like the one below, but also means that it may be required to explicitly sort data before passing it to Plotly to avoid lines moving
"backwards" across the chart.Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.90.9511.051.11.151.2
dateGOOG
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 11/25

--- Página 12 ---
Connected Scatterplotsimport plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    x = [1, 3, 2, 4],
    y = [1, 2, 3, 4]
))
fig = px.line(df, x="x", y="y", title="Unsorted Input" )
fig.show()
df = df.sort_values (by="x")
fig = px.line(df, x="x", y="y", title="Sorted Input" )
fig.show()
In a connected scatterplot, two continuous variables are plotted against each other, with a line connecting them in some meaningful order, usually a time variable. In
the plot below, we show the "trajectory" of a pair of countries through a space defined by GDP per Capita and Life Expectancy. Botswana's life expectancy1 1.5 2 2.5 3 3.5 411.522.533.54Unsorted Input
xy
1 1.5 2 2.5 3 3.5 411.522.533.54Sorted Input
xy
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 12/25

--- Página 13 ---
Swarm (or Beeswarm) Plotsimport plotly.express  as px
df = px.data.gapminder ().query("country in ['Canada', 'Botswana']" )
fig = px.line(df, x="lifeExp" , y="gdpPercap" , color="country" , text="year")
fig.update_traces (textposition ="bottom right" )
fig.show()
Swarm plots show the distribution of values in a column by giving each entry one dot and adjusting the y-value so that dots do not overlap and appear symmetrically
around the y=0 line. They complement , , and 
. This example could be generalized to implement a swarm plot for multiple categories by adjusting the y-coordinate for each
category.
histograms (https://plotly.com/python/histograms/)
box plots (https://plotly.com/python/box-plots/)
violin plots
(https://plotly.com/python/violin/)195219571962196719721977198219871992199720022007
195219571962196719721977198219871992199720022007
45 50 55 60 65 70 75 8005k10k15k20k25k30k35kcountry
Botswana
Canada
lifeExpgdpPercap
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 13/25

--- Página 14 ---
import pandas as pd
import plotly.express  as px
import collections
def negative_1_if_count_is_odd (count):
    # if this is an odd numbered entry in its bin, make its y coordinate negative
    # the y coordinate of the first entry is 0, so entries 3, 5, and 7 get 
    # negative y coordinates
    if count % 2 == 1:
        return -1
    else:
        return 1
def swarm(
    X_series ,
    fig_title ,
    point_size =16,
    fig_width =800,
    gap_multiplier =1.2,
    bin_fraction =0.95,  # slightly undersizes the bins to avoid collisions
):
    # sorting will align columns in attractive c-shaped arcs rather than having 
    # columns that vary unpredictably in the x-dimension.
    # We also exploit the fact that sorting means we see bins sequentially when 
    # we add collision prevention offsets.
    X_series  = X_series .copy().sort_values ()
    # we need to reason in terms of the marker size that is measured in px
    # so we need to think about each x-coordinate as being a fraction of the way from the
    # minimum X value to the maximum X value
    min_x = min(X_series )
    max_x = max(X_series )
    list_of_rows  = []
    # we will count the number of points in each "bin" / vertical strip of the graph
    # to be able to assign a y-coordinate that avoids overlapping
    bin_counter  = collections .Counter()
    for x_val in X_series :
        # assign this x_value to bin number
        # each bin is a vertical strip slightly narrower than one marker
        bin = (((fig_width *bin_fraction *(x_val-min_x))/(max_x-min_x)) // point_size )
        # update the count of dots in that strip
        bin_counter .update([bin])
        # remember the "y-slot" which tells us the number of points in this bin and is sufficient to compute the y coordinate unless there's a colli
sion with the point to its left
        list_of_rows .append(
            {"x": x_val, "y_slot" : bin_counter [bin], "bin": bin})
    # iterate through the points and "offset" any that are colliding with a 
    # point to their left apply the offsets to all subsequent points in the same bin.
    # this arranges points in an attractive swarm c-curve where the points 
    # toward the edges are (weakly) further right.
    bin = 0
    offset = 0
    for row in list_of_rows :
        if bin != row["bin"]:
            # we have moved to a new bin, so we need to reset the offset
            bin = row["bin"]
            offset = 0
        # see if we need to "look left" to avoid a possible collision
        for other_row  in list_of_rows :
            if (other_row ["bin"] == bin-1):
                # "bubble" the entry up until we find a slot that avoids a collision
                while ((other_row ["y_slot" ] == row["y_slot" ]+offset)
                       and (((fig_width *(row["x"]-other_row ["x"]))/(max_x-min_x)
                              // point_size ) &lt; 1)):
                    offset += 1
                    # update the bin count so we know whether the number of 
                    # *used* slots is even or odd
                    bin_counter .update([bin])
        row["y_slot" ] += offset
        # The collision free y coordinate gives the items in a vertical bin
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 14/25

--- Página 15 ---
        # y-coordinates to evenly spread their locations above and below the 
        # y-axis (we'll make a correction below to deal with even numbers of 
        # entries).  For now, we'll assign 0, 1, -1, 2, -2, 3, -3 ... and so on.
        # We scale this by the point_size*gap_multiplier to get a y coordinate 
        # in px.
        row["y"] = (row["y_slot" ]//2) * \
            negative_1_if_count_is_odd (row["y_slot" ])*point_size *gap_multiplier
    # if the number of points is even, move y-coordinates down to put an equal 
    # number of entries above and below the axis
    for row in list_of_rows :
        if bin_counter [row["bin"]] % 2 == 0:
            row["y"] -= point_size *gap_multiplier /2
    df = pd.DataFrame (list_of_rows )
    # One way to make this code more flexible to e.g. handle multiple categories
    # would be to return a list of "swarmified" y coordinates here and then plot
    # outside the function.
    # That generalization would let you "swarmify" y coordinates for each 
    # category and add category specific offsets to put the each category in its 
    # own row
    fig = px.scatter(
        df,
        x="x",
        y="y",
        title=fig_title ,
    )
    # we want to suppress the y coordinate in the hover value because the 
    # y-coordinate is irrelevant/misleading
    fig.update_traces (
        marker_size =point_size ,
        # suppress the y coordinate because the y-coordinate is irrelevant
        hovertemplate ="&lt;b&gt;value&lt;/b&gt;: % {x}",
    )
    # we have to set the width and height because we aim to avoid icon collisions
    # and we specify the icon size in the same units as the width and height
    fig.update_layout (width=fig_width , height=(
        point_size *max(bin_counter .values())+200))
    fig.update_yaxes (
        showticklabels =False,  # Turn off y-axis labels
        ticks='',               # Remove the ticks
        title=""
    )
    return fig
df = px.data.iris()  # iris is a pandas DataFrame
fig = swarm(df["sepal_length" ], "Sepal length distribution from 150 iris samples" )
# The iris data set entries are rounded so there are no collisions.
# a more interesting test case for collision avoidance is:
# fig = swarm(pd.Series([1, 1.5, 1.78, 1.79, 1.85, 2,
#            2, 2, 2, 3, 3, 2.05, 2.1, 2.2, 2.5, 12]))
fig.show()
4.5 5 5.5 6 6.5 7 7.5 8Sepal length distribution from 150 iris samples
x
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 15/25

--- Página 16 ---
Scatter and line plots with go.Scatter
Simple Scatter Plot
Line and Scatter PlotsIf Plotly Express does not provide a good starting point, it is possible to use .
Whereas plotly.express has two functions scatter and line, go.Scatter can be used both for plotting points (makers) or lines, depending on the value of mode. The
different options of go.Scatter are documented in its .
the more generic go.Scatter class from plotly.graph_objects (/python/graph-objects/)
reference page (https://plotly.com/python/reference/scatter/)
import plotly.graph_objects  as go
import numpy as np
N = 1000
t = np.linspace (0, 10, 100)
y = np.sin(t)
fig = go.Figure(data=go.Scatter(x=t, y=y, mode='markers' ))
fig.show()
Use mode argument to choose between markers, lines, or a combination of both. For more options about line plots, see also the 
 and the .
line charts notebook
(https://plotly.com/python/line-charts/)
filled area plots notebook (https://plotly.com/python/filled-area-plots/)0 2 4 6 8 10−1−0.500.51
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 16/25

--- Página 17 ---
Bubble Scatter Plotsimport plotly.graph_objects  as go
# Create random data with numpy
import numpy as np
np.random.seed(1)
N = 100
random_x  = np.linspace (0, 1, N)
random_y0  = np.random.randn(N) + 5
random_y1  = np.random.randn(N)
random_y2  = np.random.randn(N) - 5
fig = go.Figure()
# Add traces
fig.add_trace (go.Scatter(x=random_x , y=random_y0 ,
                    mode='markers' ,
                    name='markers' ))
fig.add_trace (go.Scatter(x=random_x , y=random_y1 ,
                    mode='lines+markers' ,
                    name='lines+markers' ))
fig.add_trace (go.Scatter(x=random_x , y=random_y2 ,
                    mode='lines',
                    name='lines'))
fig.show()
In , a third dimension of the data is shown through the size of markers. For more examples, see the 
bubble charts (https://en.wikipedia.org/wiki/Bubble_chart)
bubble
chart notebook (https://plotly.com/python/bubble-charts/)0 0.2 0.4 0.6 0.8 1−8−6−4−202468
markers
lines+markers
lines
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 17/25

--- Página 18 ---
Style Scatter Plotsimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
    x=[1, 2, 3, 4],
    y=[10, 11, 12, 13],
    mode='markers' ,
    marker=dict(size=[40, 60, 80, 100],
                color=[0, 1, 2, 3])
))
fig.show()
1 1.5 2 2.5 3 3.5 4 4.59.51010.51111.51212.51313.514
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 18/25

--- Página 19 ---
Data Labels on Hoverimport plotly.graph_objects  as go
import numpy as np
t = np.linspace (0, 10, 100)
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=t, y=np.sin(t),
    name='sin',
    mode='markers' ,
    marker_color ='rgba(152, 0, 0, .8)'
))
fig.add_trace (go.Scatter(
    x=t, y=np.cos(t),
    name='cos',
    marker_color ='rgba(255, 182, 193, .9)'
))
# Set options common to all traces with fig.update_traces
fig.update_traces (mode='markers' , marker_line_width =2, marker_size =10)
fig.update_layout (title=dict(text='Styled Scatter' ),
                  yaxis_zeroline =False, xaxis_zeroline =False)
fig.show()
0 2 4 6 8 10−1−0.500.51sin
cosStyled Scatter
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 19/25

--- Página 20 ---
Scatter with a Color Dimensionimport plotly.graph_objects  as go
import pandas as pd
data= pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv" )
fig = go.Figure(data=go.Scatter(x=data['Postal' ],
                                y=data['Population' ],
                                mode='markers' ,
                                marker_color =data['Population' ],
                                text=data['State'])) # hover text goes here
fig.update_layout (title=dict(text='Population of USA States' ))
fig.show()
ALAZCACTDCGAIDINKSLAMDMIMSMTNVNJNYNDOKPARISDTXVTWAWI05M10M15M20M25M30M35M40MPopulation of USA States
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 20/25

--- Página 21 ---
Trace Zorderimport plotly.graph_objects  as go
import numpy as np
fig = go.Figure(data=go.Scatter(
    y = np.random.randn(500),
    mode='markers' ,
    marker=dict(
        size=16,
        color=np.random.randn(500), #set color equal to a variable
        colorscale ='Viridis' , # one of plotly colorscales
        showscale =True
    )
))
fig.show()
New in 5.21
For many trace types, including go.Scatter, you can define the order traces are drawn in by setting a zorder. Traces with a higher zorder appear at the front, with
traces with a lower zorder at the back. In this example, we give our trace for 'France' the highest zorder, meaning it is drawn in front of the other two traces:0 100 200 300 400 500−3−2−101234
−3−2−1012
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 21/25

--- Página 22 ---
Large Data Setsimport plotly.graph_objects  as go
import plotly.data  as data
df = data.gapminder ()
df_europe  = df[df['continent' ] == 'Europe' ]
trace1 = go.Scatter(x=df_europe [df_europe ['country' ] == 'France' ]['year'],
                    y=df_europe [df_europe ['country' ] == 'France' ]['lifeExp' ],
                    mode='lines+markers' ,
                    zorder=3,
                    name='France' ,
                    marker=dict(size=15))
trace2 = go.Scatter(x=df_europe [df_europe ['country' ] == 'Germany' ]['year'],
                    y=df_europe [df_europe ['country' ] == 'Germany' ]['lifeExp' ],
                    mode='lines+markers' ,
                    zorder=1,
                    name='Germany' ,
                    marker=dict(size=15))
trace3 = go.Scatter(x=df_europe [df_europe ['country' ] == 'Spain']['year'],
                    y=df_europe [df_europe ['country' ] == 'Spain']['lifeExp' ],
                    mode='lines+markers' ,
                    zorder=2,
                    name='Spain',
                    marker=dict(size=15))
layout = go.Layout(title=dict(text='Life Expectancy in Europe Over Time' ))
fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)
fig.show()
Now in Plotly you can implement WebGL with Scattergl() in place of Scatter()
for increased speed, improved interactivity, and the ability to plot even more data!1950 1960 1970 1980 1990 2000 201064666870727476788082France
Germany
SpainLife Expectancy in Europe Over Time
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 22/25

--- Página 23 ---
import plotly.graph_objects  as go
import numpy as np
N = 100000
fig = go.Figure(data=go.Scattergl (
    x = np.random.randn(N),
    y = np.random.randn(N),
    mode='markers' ,
    marker=dict(
        color=np.random.randn(N),
        colorscale ='Viridis' ,
        line_width =1
    )
))
fig.show()
−4 −3 −2 −1 0 1 2 3 4−4−2024
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 23/25

--- Página 24 ---
Referenceimport plotly.graph_objects  as go
import numpy as np
N = 100000
r = np.random.uniform(0, 1, N)
theta = np.random.uniform(0, 2*np.pi, N)
fig = go.Figure(data=go.Scattergl (
    x = r * np.cos(theta), # non-uniform distribution
    y = r * np.sin(theta), # zoom to see more points at the center
    mode='markers' ,
    marker=dict(
        color=np.random.randn(N),
        colorscale ='Viridis' ,
        line_width =1
    )
))
fig.show()
See  or 
 or  for more information
and chart attribute options!
function reference for px.scatter() (https://plotly.com/python-api-reference/generated/plotly.express.scatter)
https://plotly.com/python/reference/scatter/
(https://plotly.com/python/reference/scatter/)
https://plotly.com/python/reference/scattergl/ (https://plotly.com/python/reference/scattergl/)−1 −0.5 0 0.5 1−1−0.500.51
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 24/25

--- Página 25 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
names
ines
rts
er16/07/2025, 06:20 Scatter plots in Python
https://plotly.com/python/line-and-scatter/ 25/25</content>
    </file>
    <file name="Sunburst charts in Python.pdf" path="Sunburst charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Sunburst Plot with plotly.express &gt;  &gt; Sunburst
Charts
Sunburst Charts in Python
How to make Sunburst Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/sunburst-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Sunburst plots visualize hierarchical data spanning outwards radially from root to leaves. Similar to  and
, the hierarchy is defined by labels (names for px.icicle) and parents attributes. The root starts from the center and
children are added to the outer rings.
Icicle charts (https://plotly.com/python/icicle-charts/)
Treemaps (https://plotly.com/python/treemaps/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.sunburst, each row of the DataFrame is represented as a sector of the sunburst.
import plotly.express  as px
data = dict(
    character =["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parent=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])
fig = px.sunburst (
    data,
    names='character' ,
    parents='parent' ,
    values='value',
)
fig.show()
EveSeth
Cain
Awan
Abel
Azura
Enos
Noam
Enoch
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 1/15

--- Página 2 ---
Sunburst of a rectangular DataFrame with plotly.express
Sunburst of a rectangular DataFrame with continuous color argument in
px.sunburstHierarchical data are often stored as a rectangular dataframe, with different columns corresponding to different levels of the hierarchy. px.sunburst can take a path
parameter corresponding to a list of columns. Note that id and parent should not be provided if path is given.
import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['day', 'time', 'sex'], values='total_bill' )
fig.show()
If a color argument is passed, the color of a node is computed as the average of the color values of its children, weighted by their values.Sat
Sun
ThurFriDinner
Dinner
LunchDinnerDinnerLunch
Male
Female
Male
Female
Male
Female
Female
Male
Female
Female
Male
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 2/15

--- Página 3 ---
Sunburst of a rectangular DataFrame with discrete color argument in px.sunburstimport plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.sunburst (df, path=['continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ],
                  color_continuous_scale ='RdBu',
                  color_continuous_midpoint =np.average(df['lifeExp' ], weights=df['pop']))
fig.show()
When the argument of color corresponds to non-numerical data, discrete colors are used. If a sector has the same value of the color column for all its children, then
the corresponding color is used, otherwise the first color of the discrete color sequence is used.
import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['sex', 'day', 'time'], values='total_bill' , color='day')
fig.show()Asia
AfricaAmericasEuropeOceaniaChinaIndia
Indonesia Pakistan
Bangladesh
Japan
Philippines
Vietnam
Iran
Thailand
Korea, Rep.
Myanmar
Afghanistan
Nepal
Saudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.
Taiwan
Yemen, Rep.
Sri Lanka
Syria
Cambodia
Hong Kong, China
Israel
Jordan
Singapore
West Bank and Gaza
Lebanon
Oman
Mongolia
Kuwait
Bahrain
Nigeria
Egypt
Ethiopia
Congo, Dem. Rep.
South Africa
Sudan
Tanzania
Kenya
Morocco
Algeria
Uganda
Ghana
Mozambique
Madagascar
Cote d'Ivoire
Cameroon
Burkina Faso
Malawi
Niger
Angola
Zimbabwe
Senegal
Mali
Zambia
Tunisia
Chad
Guinea
Somalia
Rwanda
Burundi
BeninSierra LeoneLibyaTogoEritreaCentral African RepublicCongo, Rep.M
auritaniaLiberiaNam
ibiaLesothoGam
biaBotswanaGuinea-BissauGabonM
auritiusSwazilandReunionCom
orosEquatorial GuineaDjiboutiSao Tom
e and PrincipeUnited StatesBrazilMexicoColombiaArgentinaCanadaPeruVenezuelaChileEcuadorGuatemalaCubaDominican RepublicBoliviaHaitiHondurasEl SalvadorParaguayNicaraguaCosta RicaPuerto RicoUruguayPanamaJamaicaTrinidad and TobagoGermanyTurkeyFranceUnited KingdomItalySpainPolandRomaniaNetherlandsGreecePortugalBelgiumCzech RepublicSerbiaHungarySwedenAustriaSwitzerlandBulgariaDenmarkSlovak RepublicFinlandNorwayBosnia and HerzegovinaCroatiaIrelandAlbaniaSloveniaMontenegroIcelandAustraliaNew Zealand
405060708090lifeExp
Male
FemaleSunSat
Thur
FriSatThurSunFri
Dinner
Dinner
Lunch
Dinner
Lunch
Dinner
Lunch
Dinner
Dinner
Dinner
Lunch
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 3/15

--- Página 4 ---
Using an explicit mapping for discrete colorsIn the example below the color of Saturday and Sunday sectors is the same as Dinner because there are only Dinner entries for Saturday and Sunday. However, for
Female -&gt; Friday there are both lunches and dinners, hence the "mixed" color (blue here) is used.
import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['sex', 'day', 'time'], values='total_bill' , color='time')
fig.show()
For more information about discrete colors, see the .
dedicated page (/python/discrete-color)
import plotly.express  as px
df = px.data.tips()
fig = px.sunburst (df, path=['sex', 'day', 'time'], values='total_bill' , color='time',
                  color_discrete_map ={'(?)':'black', 'Lunch':'gold', 'Dinner' :'darkblue' })
fig.show()Male
FemaleSunSat
Thur
FriSatThurSunFri
Dinner
Dinner
Lunch
Dinner
Lunch
Dinner
Lunch
Dinner
Dinner
Dinner
Lunch
Male
FemaleSunSat
Thur
FriSatThurSunFri
Dinner
Dinner
Lunch
Dinner
Lunch
Dinner
Lunch
Dinner
Dinner
Dinner
Lunch
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 4/15

--- Página 5 ---
Rectangular data with missing values
Basic Sunburst Plot with go.Sunburst
1. labels (names in px.sunburst since labels is reserved for overriding columns names): sets the labels of sunburst sectors.
2. parents: sets the parent sectors of sunburst sectors. An empty string '' is used for the root node in the hierarchy. In this example, the root is "Eve".
3. values: sets the values associated with sunburst sectors, determining their width (See the branchvalues section below for different modes for setting the
width).If the dataset is not fully rectangular, missing values should be supplied as None. Note that the parents of None entries must be a leaf, i.e. it cannot have other
children than None (otherwise a ValueError is raised).
import plotly.express  as px
import pandas as pd
vendors = ["A", "B", "C", "D", None, "E", "F", "G", "H", None]
sectors = ["Tech", "Tech", "Finance" , "Finance" , "Other",
           "Tech", "Tech", "Finance" , "Finance" , "Other"]
regions = ["North", "North", "North", "North", "North",
           "South", "South", "South", "South", "South"]
sales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]
df = pd.DataFrame (
    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)
)
print(df)
fig = px.sunburst (df, path=['regions' , 'sectors' , 'vendors' ], values='sales')
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Sunburst class from plotly.graph_objects (/python/graph-
objects/)
Main arguments:vendors  sectors regions  sales
0       A     Tech   North      1
1       B     Tech   North      3
2       C  Finance   North      2
3       D  Finance   North      4
4    None    Other   North      1
5       E     Tech   South      2
6       F     Tech   South      2
7       G  Finance   South      1
8       H  Finance   South      4
9    None    Other   South      1
North
SouthFinance
Tech
Other
Finance Tech
Other
D
C
B
A
H
G
E
F
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 5/15

--- Página 6 ---
import plotly.graph_objects  as go
fig =go.Figure(go.Sunburst (
    labels=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
))
# Update layout for tight margin
# See https://plotly.com/python/creating-and-updating-figures/
fig.update_layout (margin = dict(t=0, l=0, r=0, b=0))
fig.show()
EveSeth
Cain
Awan
Abel
Azura
Enos
Noam
Enoch
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 6/15

--- Página 7 ---
Sunburst with Repeated Labels
Branchvaluesimport plotly.graph_objects  as go
fig =go.Figure(go.Sunburst (
 ids=[
    "North America" , "Europe" , "Australia" , "North America - Football" , "Soccer" ,
    "North America - Rugby" , "Europe - Football" , "Rugby",
    "Europe - American Football" ,"Australia - Football" , "Association" ,
    "Australian Rules" , "Autstralia - American Football" , "Australia - Rugby" ,
    "Rugby League" , "Rugby Union"
  ],
  labels= [
    "North&lt;br&gt;America" , "Europe" , "Australia" , "Football" , "Soccer" , "Rugby",
    "Football" , "Rugby", "American&lt;br&gt;Football" , "Football" , "Association" ,
    "Australian&lt;br&gt;Rules" , "American&lt;br&gt;Football" , "Rugby", "Rugby&lt;br&gt;League" ,
    "Rugby&lt;br&gt;Union"
  ],
  parents=[
    "", "", "", "North America" , "North America" , "North America" , "Europe" ,
    "Europe" , "Europe" ,"Australia" , "Australia - Football" , "Australia - Football" ,
    "Australia - Football" , "Australia - Football" , "Australia - Rugby" ,
    "Australia - Rugby"
  ],
))
fig.update_layout (margin = dict(t=0, l=0, r=0, b=0))
fig.show()
With branchvalues "total", the value of the parent represents the width of its wedge. In the example below, "Enoch" is 4 and "Awan" is 6 and so Enoch's width is 4/6ths
of Awans. With branchvalues "remainder", the parent's width is determined by its own value plus those of its children. So, Enoch's width is 4/10ths of Awan's (4 / (6 +
4)).
Note that this means that the sum of the values of the children cannot exceed the value of their parent when branchvalues is set to "total". When branchvalues is set
to "remainder" (the default), children will not take up all of the space below their parent (unless the parent is the root and it has a value of 0).Australia
NorthAmericaEuropeFootball
Football
Soccer
Rugby
Football
Rugby
AmericanFootballRugby
Association
Australian
Rules
American
Football
Rugby
League
Rugby
Union
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 7/15

--- Página 8 ---
Large Number of Slicesimport plotly.graph_objects  as go
fig =go.Figure(go.Sunburst (
    labels=[ "Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["",    "Eve",  "Eve",  "Seth", "Seth", "Eve",  "Eve",  "Awan",  "Eve" ],
    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],
    branchvalues ="total",
))
fig.update_layout (margin = dict(t=0, l=0, r=0, b=0))
fig.show()
This example uses a  for the subplots. Reference the row and column destination using
the  attribute.
plotly grid attribute (https://plotly.com/python/reference/layout/#layout-grid)
domain (https://plotly.com/python/reference/sunburst/#sunburst-domain)Eve
CainSeth
Abel
Awan
Azura
Enos
Noam
Enoch
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 8/15

--- Página 9 ---
Controlling text orientation inside sunburst sectorsimport plotly.graph_objects  as go
import pandas as pd
df1 = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv' )
df2 = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv' )
fig = go.Figure()
fig.add_trace (go.Sunburst (
    ids=df1.ids,
    labels=df1.labels,
    parents=df1.parents,
    domain=dict(column=0)
))
fig.add_trace (go.Sunburst (
    ids=df2.ids,
    labels=df2.labels,
    parents=df2.parents,
    domain=dict(column=1),
    maxdepth =2
))
fig.update_layout (
    grid= dict(columns=2, rows=1),
    margin = dict(t=0, l=0, r=0, b=0)
)
fig.show()
The insidetextorientation attribute controls the orientation of text inside sectors. With "auto" the texts may automatically be rotated to fit with the maximum size
inside the slice. Using "horizontal" (resp. "radial", "tangential") forces text to be horizontal (resp. radial or tangential). Note that plotly may reduce the font size in order
to fit the text with the requested orientation.
For a figure fig created with plotly express, use fig.update_traces(insidetextorientation='...') to change the text orientation.Aromas
TastesEnzymatic Sugar Browning
Dry Distillation
Bitter
SaltSweetSourFloweryFruityHerbyNutty
Carmelly
ChocolateyResinous
Spicy
Carbony
Pungent
HarshSharpBlandMellowAcidyWineySouryFloralFragrantCitrusBerry-like
Alliaceous
LeguminousNut-like M
alt-likeCandy-likeSyrup-likeChocolate-like
Vanilla-like
Turpeny
Medicinal
Warming
Pungent
Smokey
Ashy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
Coffee Blossom
Tea Rose
Cardamon Caraway
Coriander Seeds
Lemon
Apple
Apricot
Blackberry
Onion
Garlic
Cucumber
Garden Peas
Roasted Peanuts
W
alnuts
Balsam
ic Rice
Toast
Roasted Hazelnut
Roasted Almond
Honey
Maple Syrup
Bakers
 Dark Chocolate
Swiss
Butter
Piney
Blackcurrant-like
Camphoric
Cineolic
Cedar
Pepper
Clove
Thyme
Tarry
Pipe Tobacco
Burnt
CharredFloweryFruityHerbyNutty Carmelly Chocolatey
Resinous
Spicy
Carbony
Pungent
HarshSharpBlandMellowAcidyWineySouryFloralFragrantCitrus Berry-like
Alliaceous
LeguminousNut-like M
alt-likeCandy-likeSyrup-likeChocolate-likeVanilla-like
Turpeny
Medicinal
Warming
Pungent
Smokey
Ashy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 9/15

--- Página 10 ---
Controlling text fontsize with uniformtextimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv' )
fig = go.Figure()
fig.add_trace (go.Sunburst (
    ids=df.ids,
    labels=df.labels,
    parents=df.parents,
    domain=dict(column=1),
    maxdepth =2,
    insidetextorientation ='radial'
))
fig.update_layout (
    margin = dict(t=10, l=10, r=10, b=10)
)
fig.show()
If you want all the text labels to have the same size, you can use the uniformtext layout parameter. The minsize attribute sets the font size, and the mode attribute
sets what happens for labels which cannot fit with the desired fontsize: either hide them or show them with overflow.
Note: animated transitions are currently not implemented when uniformtext is used.FloweryFruityHerbyNuttyCarmellyChocolatey
Resinous
Spicy
Carbony
Pungent
HarshSharpBlandMellowAcidyWineySouryFloralFragrantCitrus Berry-like
Alliaceous
LeguminousNut-like M
alt-likeCandy-likeSyrup-like Chocolate-like
Vanilla-like
Turpeny
Medicinal
Warming
Pungent
Smokey
Ashy
Creosol
Phenolic
Caustic
Alkaline
Astringent
Rough
Neutral
Soft
Delicate
Mild
Nippy
Piquant
Tangy
Tart
Hard
Acrid
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 10/15

--- Página 11 ---
Pattern Fillsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(go.Sunburst (
        ids = df.ids,
        labels = df.labels,
        parents = df.parents))
fig.update_layout (uniformtext =dict(minsize=10, mode='hide'))
fig.show()
New in 5.15
Sunburst charts support  (also known as hatching or texture) in addition to color. In this example, we add a different
pattern to each level of the hierarchy. We also specify the solidity of the pattern.
patterns (/python/pattern-hatching-texture/)AromasEnzymatic
Dry Distillation
Bitter
SaltSweetSourFloweryFruityHerbyNutty
Spicy
Carbony
HarshSharpBlandAcidyWineySouryFloralCitrus
Ashy
Lemon
Apple
Onion
Garlic
Toast
Honey
Bakers
Swiss
Butter
Piney
Cedar
Clove
Thyme
Tarry
Burnt
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 11/15

--- Página 12 ---
Sunburst chart with a continuous colorscaleimport plotly.graph_objects  as go
fig = go.Figure(
    go.Sunburst (
        labels=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
        parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"],
        values=[65, 14, 12, 10, 2, 6, 6, 4, 4],
        branchvalues ="total",
        textfont_size =16,
        marker=dict(
            pattern=dict(
                shape=["", "/", "/", ".", ".", "/", "/", ".", "/"], solidity =0.9
            )
        ),
    )
)
fig.update_layout (margin=dict(t=0, l=0, r=0, b=0))
fig.show()
The example below visualizes a breakdown of sales (corresponding to sector width) and call success rate (corresponding to sector color) by region, county and
salesperson level. For example, when exploring the data you can see that although the East region is behaving poorly, the Tyler county is still above average --
however, its performance is reduced by the poor success rate of salesperson GT.
In the right subplot which has a maxdepth of two levels, click on a sector to see its breakdown to lower levels.Eve
CainSeth
Abel
Awan
Azura
Enos
Noam
Enoch
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 12/15

--- Página 13 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/sales_success.csv' )
print(df.head())
levels = ['salesperson' , 'county' , 'region' ] # levels used for the hierarchical chart
color_columns  = ['sales', 'calls']
value_column  = 'calls'
def build_hierarchical_dataframe (df, levels, value_column , color_columns =None):
    """
    Build a hierarchy of levels for Sunburst or Treemap charts.
    Levels are given starting from the bottom to the top of the hierarchy,
    ie the last level corresponds to the root.
    """
    df_list = []
    for i, level in enumerate (levels):
        df_tree = pd.DataFrame (columns=['id', 'parent' , 'value', 'color'])
        dfg = df.groupby(levels[i:]).sum()
        dfg = dfg.reset_index ()
        df_tree['id'] = dfg[level].copy()
        if i &lt; len(levels) - 1:
            df_tree['parent' ] = dfg[levels[i+1]].copy()
        else:
            df_tree['parent' ] = 'total'
        df_tree['value'] = dfg[value_column ]
        df_tree['color'] = dfg[color_columns [0]] / dfg[color_columns [1]]
        df_list.append(df_tree)
    total = pd.Series(dict(id='total', parent='',
                              value=df[value_column ].sum(),
                              color=df[color_columns [0]].sum() / df[color_columns [1]].sum()), name=0)
    df_list.append(total)
    df_all_trees  = pd.concat(df_list, ignore_index =True)
    return df_all_trees
df_all_trees  = build_hierarchical_dataframe (df, levels, value_column , color_columns )
average_score  = df['sales'].sum() / df['calls'].sum()
fig = make_subplots (1, 2, specs=[[{"type": "domain" }, {"type": "domain" }]],)
fig.add_trace (go.Sunburst (
    labels=df_all_trees ['id'],
    parents=df_all_trees ['parent' ],
    values=df_all_trees ['value'],
    branchvalues ='total',
    marker=dict(
        colors=df_all_trees ['color'],
        colorscale ='RdBu',
        cmid=average_score ),
    hovertemplate ='&lt;b&gt;%{label} &lt;/b&gt; &lt;br&gt; Sales: % {value}&lt;br&gt; Success rate: % {color:.2f} ',
    name=''
    ), 1, 1)
fig.add_trace (go.Sunburst (
    labels=df_all_trees ['id'],
    parents=df_all_trees ['parent' ],
    values=df_all_trees ['value'],
    branchvalues ='total',
    marker=dict(
        colors=df_all_trees ['color'],
        colorscale ='RdBu',
        cmid=average_score ),
    hovertemplate ='&lt;b&gt;%{label} &lt;/b&gt; &lt;br&gt; Sales: % {value}&lt;br&gt; Success rate: % {color:.2f} ',
    maxdepth =2
    ), 1, 2)
fig.update_layout (margin=dict(t=10, b=10, r=10, l=10))
fig.show()
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 13/15

--- Página 14 ---
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px.sunburst() (https://plotly.com/python-api-reference/generated/plotly.express.sunburst)
https://plotly.com/python/reference/sunburst/ (https://plotly.com/python/reference/sunburst/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterUnnamed: 0 region   county salesperson  calls  sales
0           0  North   Dallam          JE     35     23
1           1  North   Dallam          ZQ     49     13
2           2  North   Dallam          IJ     20      6
3           3  North  Hartley          WE     39     37
4           4  North  Hartley          PL     42     37
totalNorth
East
SouthWestFloydGrayHartleyDallam Motley Moore
Shelby
Houston
Tyler
Rusk
Webb
Hidalgo
Zavala
DuvalPresidioPecosBrewsterUAWHOHESYJXYPLWEBIZQJEIJEHNYM
WTW
TZZM
XH
NZ
VN
AX
YN
QK
UF
GT
JC
OY
UM
HW
RR
QJ
KRLQ
LRLVFLIVYADSFJGWSVDQOTQMWZWVBSIKJF totalNorth
East
SouthWest
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 14/15

--- Página 15 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ess
me with
me with
 nburst
me with
 urst
ete colors
es
st
unburst
mtext
olorscale16/07/2025, 06:21 Sunburst charts in Python
https://plotly.com/python/sunburst-charts/ 15/15</content>
    </file>
    <file name="Sunburst traces in Python.pdf" path="Sunburst traces in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; sunburst Traces
Python Figure Reference: sunburst Traces
A plotly.graph_objects.Sunburst trace is a graph object in the figure's data list with any of the named arguments or attributes listed
below.
Visualize hierarchal data spanning outward radially from root to leaves. The sunburst sectors are determined by the entries in "labels"
or "ids" and in "parents".
Code:fig.update_traces(name=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Sets the trace name. The trace name appears as the legend item and on hover.
Code:fig.update_traces(visible=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( True | False | "legendonly" )
Default:True
Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that
the legend itself is visible).
Code:fig.update_traces(legend=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: subplotid
Default:legend
Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for
these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
Code:fig.update_traces(legendrank=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number
Default:1000
Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed"
`legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place
certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal
rank items shapes would be displayed after traces i.e. according to their order in data and layout.
Code:fig.update_traces(legendgrouptitle=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(legendgrouptitle_font=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets this legend group's title font.
Code:fig.update_traces(legendgrouptitle_font_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Code:fig.update_traces(legendgrouptitle_font_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Python (/python)
Figure Reference (/python/reference/index/)
name
visible
legend
legendrank
legendgrouptitle
font
color
family
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 1/23

--- Página 2 ---
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font
if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the
preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-
studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and
supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One",
"Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Code:fig.update_traces(legendgrouptitle_font_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Code:fig.update_traces(legendgrouptitle_font_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color.
See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(legendgrouptitle_font_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 1
Code:fig.update_traces(legendgrouptitle_font_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_traces(legendgrouptitle_font_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
Code:fig.update_traces(legendgrouptitle_font_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(legendgrouptitle_font_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(legendgrouptitle_text=&lt;VALUE&gt;, selector=dict(type='sunburst'))
lineposition
shadow
size
style
textcase
variant
weight
text
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 2/23

--- Página 3 ---
Type: string
Default:""
Sets the title of the legend group.
Code:fig.update_traces(legendwidth=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Sets the width (in px or fraction) of the legend for this trace.
Code:fig.update_traces(opacity=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number between or equal to 0 and 1
Default:1
Sets the opacity of the trace.
Code:fig.update_traces(ids=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not
numbers or any other type.
Code:fig.update_traces(parents=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids`
is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`,
but beware they must be unique.
Code:fig.update_traces(values=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.
Code:fig.update_traces(labels=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the labels of each of the sectors.
Code:fig.update_traces(text=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets text elements associated with each sector. If trace `textinfo` contains a "text" flag, these elements will be seen on the chart. If trace
`hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.
Code:fig.update_traces(texttemplate=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:""
Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are
inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example
"Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted
using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-
legendwidth
opacity
ids
parents
values
labels
text
texttemplate
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 3/23

--- Página 4 ---
format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones
that are `arrayOk: True`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`,
`percentEntry`, `percentParent`, `label` and `value`.
Code:fig.update_traces(hovertext=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:""
Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string,
the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a "text" flag.
Code:fig.update_traces(hoverinfo=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "label", "text", "value", "name", "current path", "percent root", "percent entry", "percent
parent" joined with a "+" OR "all" or "none" or "skip".
Examples:"label", "text", "label+text", "label+text+value", "all"
Default:"label+text+value+name"
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if
`none` is set, click and hover events are still fired.
Code:fig.update_traces(hovertemplate=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:""
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are
inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for
several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other"
will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for
example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are
formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}".
https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in
`hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.
Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: True`) are available. Finally, the template
string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag
`&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use
an empty tag `&lt;extra&gt;&lt;/extra&gt;`.
Code:fig.update_traces(meta=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or categorical coordinate string
Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`,
graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To
access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item
in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the
trace index.
Code:fig.update_traces(customdata=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also
appends customdata items in the markers DOM elements
Code:fig.update_traces(domain=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(domain_column=&lt;VALUE&gt;, selector=dict(type='sunburst'))
hovertext
hoverinfo
hovertemplate
meta
customdata
domain
column
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 4/23

--- Página 5 ---
Type: integer greater than or equal to 0
Default:0
If there is a layout grid, use the domain for this column in the grid for this sunburst trace .
Code:fig.update_traces(domain_row=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer greater than or equal to 0
Default:0
If there is a layout grid, use the domain for this row in the grid for this sunburst trace .
Code:fig.update_traces(domain_x=list(...), selector=dict(type='sunburst'))
Type: list
Default:[0, 1]
Sets the horizontal domain of this sunburst trace (in plot fraction).
Code:fig.update_traces(domain_y=list(...), selector=dict(type='sunburst'))
Type: list
Default:[0, 1]
Sets the vertical domain of this sunburst trace (in plot fraction).
Code:fig.update_traces(marker=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(marker_autocolorscale=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
Default:True
Determines whether the colorscale is a default palette (`autocolorscale: True`) or the palette determined by `marker.colorscale`.
Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is True, the default
palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
Code:fig.update_traces(marker_cauto=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
Default:True
Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in
`marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `False` when `marker.cmin`
and `marker.cmax` are set by the user.
Code:fig.update_traces(marker_cmax=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number
Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same
units as colors and if set, `marker.cmin` must be set as well.
Code:fig.update_traces(marker_cmid=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number
Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an
effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is
`False`.
row
x
y
marker
autocolorscale
cauto
cmax
cmid
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 5/23

--- Página 6 ---
Code:fig.update_traces(marker_cmin=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number
Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same
units as colors and if set, `marker.cmax` must be set as well.
Code:fig.update_traces(marker_coloraxis=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: subplotid
Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc.
Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple
color scales can be linked to the same color axis.
Code:fig.update_traces(marker_colorbar=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(marker_colorbar_bgcolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Default:"rgba(0,0,0,0)"
Sets the color of padded area.
Code:fig.update_traces(marker_colorbar_bordercolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Default:"#444"
Sets the axis line color.
Code:fig.update_traces(marker_colorbar_borderwidth=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:0
Sets the width (in px) or the border enclosing this color bar.
Code:fig.update_traces(marker_colorbar_dtick=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or categorical coordinate string
Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log"
and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to
set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at
1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a
positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put
ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5).
`tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For
example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;"
gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month,
set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"
Code:fig.update_traces(marker_colorbar_exponentformat=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" )
Default:"B"
Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it
appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.
cmin
coloraxis
colorbar
bgcolor
bordercolor
borderwidth
dtick
exponentformat
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 6/23

--- Página 7 ---
Code:fig.update_traces(marker_colorbar_labelalias=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or categorical coordinate string
Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA
to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For
negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use
−1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include
html-like tags or MathJax.
Code:fig.update_traces(marker_colorbar_len=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:1
Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this
length minus the padding on both ends.
Code:fig.update_traces(marker_colorbar_lenmode=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "fraction" | "pixels" )
Default:"fraction"
Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot
"fraction" or in "pixels. Use `len` to set the value.
Code:fig.update_traces(marker_colorbar_minexponent=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:3
Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".
Code:fig.update_traces(marker_colorbar_nticks=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer greater than or equal to 0
Default:0
Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to
be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".
Code:fig.update_traces(marker_colorbar_orientation=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "h" | "v" )
Default:"v"
Sets the orientation of the colorbar.
Code:fig.update_traces(marker_colorbar_outlinecolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Default:"#444"
Sets the axis line color.
Code:fig.update_traces(marker_colorbar_outlinewidth=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:1
Sets the width (in px) of the axis line.
labelalias
len
lenmode
minexponent
nticks
orientation
outlinecolor
outlinewidth
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 7/23

--- Página 8 ---
Code:fig.update_traces(marker_colorbar_separatethousands=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
If "True", even 4-digit integers are separated
Code:fig.update_traces(marker_colorbar_showexponent=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "all" | "first" | "last" | "none" )
Default:"all"
If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last",
only the exponent of the last tick is shown. If "none", no exponents appear.
Code:fig.update_traces(marker_colorbar_showticklabels=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
Default:True
Determines whether or not the tick labels are drawn.
Code:fig.update_traces(marker_colorbar_showtickprefix=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "all" | "first" | "last" | "none" )
Default:"all"
If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last
tick is displayed with a suffix. If "none", tick prefixes are hidden.
Code:fig.update_traces(marker_colorbar_showticksuffix=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "all" | "first" | "last" | "none" )
Default:"all"
Same as `showtickprefix` but for tick suffixes.
Code:fig.update_traces(marker_colorbar_thickness=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:30
Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
Code:fig.update_traces(marker_colorbar_thicknessmode=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "fraction" | "pixels" )
Default:"pixels"
Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot
"fraction" or in "pixels". Use `thickness` to set the value.
Code:fig.update_traces(marker_colorbar_tick0=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or categorical coordinate string
Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of
your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more
info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a
number, using the scale where each category is assigned a serial number from zero in the order it appears.
Code:fig.update_traces(marker_colorbar_tickangle=&lt;VALUE&gt;, selector=dict(type='sunburst'))
separatethousands
showexponent
showticklabels
showtickprefix
showticksuffix
thickness
thicknessmode
tick0
tickangle
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 8/23

--- Página 9 ---
Type: angle
Default:"auto"
Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels
vertically.
Code:fig.update_traces(marker_colorbar_tickcolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Default:"#444"
Sets the tick color.
Code:fig.update_traces(marker_colorbar_tickfont=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets the color bar's tick label font
Code:fig.update_traces(marker_colorbar_tickfont_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Code:fig.update_traces(marker_colorbar_tickfont_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to
apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas,
to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at
https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts
are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans
Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New
Roman".
Code:fig.update_traces(marker_colorbar_tickfont_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Code:fig.update_traces(marker_colorbar_tickfont_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font
color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(marker_colorbar_tickfont_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 1
Code:fig.update_traces(marker_colorbar_tickfont_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
tickcolor
tickfont
color
family
lineposition
shadow
size
style
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 9/23

--- Página 10 ---
Code:fig.update_traces(marker_colorbar_tickfont_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
Code:fig.update_traces(marker_colorbar_tickfont_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" |
"unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(marker_colorbar_tickfont_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(marker_colorbar_tickformat=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Default:""
Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For
numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-
time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal
number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat
"%H~%M~%S.%2f" would display "09~15~23.46"
Code:fig.update_traces(marker_colorbar_tickformatstops=list(...), selector=dict(type='sunburst'))
Type: list of dict where each dict has one or more of the keys listed below.
Parent:data[type=sunburst].marker.colorbar.tickformatstops[]
Type: list
range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit
"min" or "max" value by passing "null"
Parent:data[type=sunburst].marker.colorbar.tickformatstops[]
Type: boolean
Default:True
Determines whether or not this stop is used. If `False`, this stop is ignored even within its `dtickrange`.
Parent:data[type=sunburst].marker.colorbar.tickformatstops[]
Type: string
When used in a template, named items are created in the output figure in addition to any items the figure already
has in this array. You can modify these items in the output figure by making your own item with
`templateitemname` matching this `name` alongside your modifications (including `visible: False` or `enabled:
False` to hide it). Has no effect outside of a template.
textcase
variant
weight
tickformat
tickformatstops
dtickrange
enabled
name
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 10/23

--- Página 11 ---
Parent:data[type=sunburst].marker.colorbar.tickformatstops[]
Type: string
Used to refer to a named item in this array in the template. Named items from the template will be created even
without a matching item in the input figure, but you can modify one by making an item with `templateitemname`
matching its `name`, alongside your modifications (including `visible: False` or `enabled: False` to hide it). If there is
no template or no matching item, this item will be hidden unless you explicitly show it with `visible: True`.
Parent:data[type=sunburst].marker.colorbar.tickformatstops[]
Type: string
Default:""
string - dtickformat for described zoom level, the same as "tickformat"
Code:fig.update_traces(marker_colorbar_ticklabeloverflow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" )
Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default
value for inside tick labels is "hide past domain". In other cases the default is "hide past div".
Code:fig.update_traces(marker_colorbar_ticklabelposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside
right" | "inside right" | "outside bottom" | "inside bottom" )
Default:"outside"
Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top
and bottom when `orientation` is "v".
Code:fig.update_traces(marker_colorbar_ticklabelstep=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer greater than or equal to 1
Default:1
Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets
a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines
which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".
Code:fig.update_traces(marker_colorbar_ticklen=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:5
Sets the tick length (in px).
Code:fig.update_traces(marker_colorbar_tickmode=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "auto" | "linear" | "array" )
Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is
determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are
provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value
if `tickvals` is provided).
Code:fig.update_traces(marker_colorbar_tickprefix=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Default:""
templateitemname
value
ticklabeloverflow
ticklabelposition
ticklabelstep
ticklen
tickmode
tickprefix
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 11/23

--- Página 12 ---
Sets a tick label prefix.
Code:fig.update_traces(marker_colorbar_ticks=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "outside" | "inside" | "" )
Default:""
Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn
outside (inside) the axis lines.
Code:fig.update_traces(marker_colorbar_ticksuffix=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Default:""
Sets a tick label suffix.
Code:fig.update_traces(marker_colorbar_ticktext=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with
`tickvals`.
Code:fig.update_traces(marker_colorbar_tickvals=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.
Code:fig.update_traces(marker_colorbar_tickwidth=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:1
Sets the tick width (in px).
Code:fig.update_traces(marker_colorbar_title=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(marker_colorbar_title_font=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets this color bar's title font.
Code:fig.update_traces(marker_colorbar_title_font_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Code:fig.update_traces(marker_colorbar_title_font_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able
to apply a font if it is available on the system which it operates. Provide multiple font families, separated by
commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart
Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a
select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid
Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT
Sans Narrow", "Raleway", "Times New Roman".
ticks
ticksuffix
ticktext
tickvals
tickwidth
title
font
color
family
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 12/23

--- Página 13 ---
Code:fig.update_traces(marker_colorbar_title_font_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations
e.g. "under+over", etc.
Code:fig.update_traces(marker_colorbar_title_font_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast
text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(marker_colorbar_title_font_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 1
Code:fig.update_traces(marker_colorbar_title_font_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_traces(marker_colorbar_title_font_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each
word capitalized.
Code:fig.update_traces(marker_colorbar_title_font_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" |
"unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(marker_colorbar_title_font_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(marker_colorbar_title_side=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "right" | "top" | "bottom" )
Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v"
and defaults to "right" when `orientation` if "h".
Code:fig.update_traces(marker_colorbar_title_text=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string
lineposition
shadow
size
style
textcase
variant
weight
side
text
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 13/23

--- Página 14 ---
Sets the title of the color bar.
Code:fig.update_traces(marker_colorbar_x=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number
Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when
`orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and
0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is
"paper".
Code:fig.update_traces(marker_colorbar_xanchor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "left" | "center" | "right" )
Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the
color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".
Code:fig.update_traces(marker_colorbar_xpad=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:10
Sets the amount of padding (in px) along the x direction.
Code:fig.update_traces(marker_colorbar_xref=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "container" | "paper" )
Default:"paper"
Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting
area only.
Code:fig.update_traces(marker_colorbar_y=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number
Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when
`orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v"
and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is
"paper".
Code:fig.update_traces(marker_colorbar_yanchor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "top" | "middle" | "bottom" )
Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the
color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".
Code:fig.update_traces(marker_colorbar_ypad=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number greater than or equal to 0
Default:10
Sets the amount of padding (in px) along the y direction.
Code:fig.update_traces(marker_colorbar_yref=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "container" | "paper" )
Default:"paper"
x
xanchor
xpad
xref
y
yanchor
ypad
yref
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 14/23

--- Página 15 ---
Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the
plotting area only.
Code:fig.update_traces(marker_colors=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.
Code:fig.update_traces(marker_colorscale=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: colorscale
Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays
mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and
highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in
color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list:
Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
Code:fig.update_traces(marker_line=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(marker_line_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.
Code:fig.update_traces(marker_line_width=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers greater than or equal to 0
Default:1
Sets the width (in px) of the line enclosing each sector.
Code:fig.update_traces(marker_pattern=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets the pattern within the marker.
Code:fig.update_traces(marker_pattern_bgcolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when
`fillmode` is "overlay". Otherwise, defaults to a transparent background.
Code:fig.update_traces(marker_pattern_fgcolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when
`fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.
Code:fig.update_traces(marker_pattern_fgopacity=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number between or equal to 0 and 1
Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.
colors
colorscale
line
color
width
pattern
bgcolor
fgcolor
fgopacity
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 15/23

--- Página 16 ---
Code:fig.update_traces(marker_pattern_fillmode=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "replace" | "overlay" )
Default:"replace"
Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
Code:fig.update_traces(marker_pattern_shape=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." )
Default:""
Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
Code:fig.update_traces(marker_pattern_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers greater than or equal to 0
Default:8
Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.
Code:fig.update_traces(marker_pattern_solidity=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers between or equal to 0 and 1
Default:0.3
Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only
the background color without pattern and solidty of 1 shows only the foreground color without pattern.
Code:fig.update_traces(marker_reversescale=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
Reverses the color mapping if True. Has an effect only if colors is set to a numerical array. If True, `marker.cmin` will correspond
to the last color in the array and `marker.cmax` will correspond to the first color.
Code:fig.update_traces(marker_showscale=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.
Code:fig.update_traces(textfont=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets the font used for `textinfo`.
Code:fig.update_traces(textfont_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Code:fig.update_traces(textfont_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is
available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in
which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-
fillmode
shape
size
solidity
reversescale
showscale
textfont
color
family
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 16/23

--- Página 17 ---
premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial",
"Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans",
"Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Code:fig.update_traces(textfont_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over",
etc.
Code:fig.update_traces(textfont_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See
https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(textfont_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers greater than or equal to 1
Code:fig.update_traces(textfont_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_traces(textfont_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
Code:fig.update_traces(textfont_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-
caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(textfont_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer or array of integers between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(textinfo=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "label", "text", "value", "current path", "percent root", "percent entry", "percent parent"
joined with a "+" OR "none".
Examples:"label", "text", "label+text", "label+text+value", "none"
lineposition
shadow
size
style
textcase
variant
weight
textinfo
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 17/23

--- Página 18 ---
Determines which trace information appear on the graph.
Code:fig.update_traces(branchvalues=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "remainder" | "total" )
Default:"remainder"
Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants.
When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part
of the sum of the values at their leaves.
Code:fig.update_traces(count=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "branches", "leaves" joined with a "+"
Examples:"branches", "leaves", "branches+leaves"
Default:"leaves"
Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.
Code:fig.update_traces(hoverlabel=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(hoverlabel_align=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" )
Default:"auto"
Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more
two or more lines
Code:fig.update_traces(hoverlabel_bgcolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Sets the background color of the hover labels for this trace
Code:fig.update_traces(hoverlabel_bordercolor=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Sets the border color of the hover labels for this trace.
Code:fig.update_traces(hoverlabel_font=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets the font used in hover labels.
Code:fig.update_traces(hoverlabel_font_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Code:fig.update_traces(hoverlabel_font_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font
if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the
preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-
branchvalues
count
hoverlabel
align
bgcolor
bordercolor
font
color
family
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 18/23

--- Página 19 ---
studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and
supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One",
"Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Code:fig.update_traces(hoverlabel_font_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Code:fig.update_traces(hoverlabel_font_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color.
See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(hoverlabel_font_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers greater than or equal to 1
Code:fig.update_traces(hoverlabel_font_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_traces(hoverlabel_font_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
Code:fig.update_traces(hoverlabel_font_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" |
"petite-caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(hoverlabel_font_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer or array of integers between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(hoverlabel_namelength=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer or array of integers greater than or equal to -1
Default:15
lineposition
shadow
size
style
textcase
variant
weight
namelength
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 19/23

--- Página 20 ---
Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name
regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many
characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
Code:fig.update_traces(insidetextfont=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets the font used for `textinfo` lying inside the sector.
Code:fig.update_traces(insidetextfont_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Code:fig.update_traces(insidetextfont_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is
available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in
which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-
premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial",
"Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans",
"Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Code:fig.update_traces(insidetextfont_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over",
etc.
Code:fig.update_traces(insidetextfont_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See
https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(insidetextfont_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers greater than or equal to 1
Code:fig.update_traces(insidetextfont_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_traces(insidetextfont_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
insidetextfont
color
family
lineposition
shadow
size
style
textcase
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 20/23

--- Página 21 ---
Code:fig.update_traces(insidetextfont_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-
caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(insidetextfont_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer or array of integers between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(insidetextorientation=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated , one of ( "horizontal" | "radial" | "tangential" | "auto" )
Default:"auto"
Controls the orientation of the text inside chart sectors. When set to "auto", text may be oriented in any direction in order to be as big
as possible in the middle of a sector. The "horizontal" option orients text to be parallel with the bottom of the chart, and may make text
smaller in order to achieve that goal. The "radial" option orients text along the radius of the sector. The "tangential" option orients text
perpendicular to the radius of the sector.
Code:fig.update_traces(outsidetextfont=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a
sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be
used.
Code:fig.update_traces(outsidetextfont_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color or array of colors
Code:fig.update_traces(outsidetextfont_family=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is
available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in
which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-
premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial",
"Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans",
"Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Code:fig.update_traces(outsidetextfont_lineposition=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over",
etc.
Code:fig.update_traces(outsidetextfont_shadow=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: string or array of strings
Default:"none"
variant
weight
insidetextorientation
outsidetextfont
color
family
lineposition
shadow
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 21/23

--- Página 22 ---
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See
https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_traces(outsidetextfont_size=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or array of numbers greater than or equal to 1
Code:fig.update_traces(outsidetextfont_style=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_traces(outsidetextfont_textcase=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
Code:fig.update_traces(outsidetextfont_variant=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-
caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_traces(outsidetextfont_weight=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer or array of integers between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_traces(root=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(root_color=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: color
Default:"rgba(0,0,0,0)"
sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the
markers.
Code:fig.update_traces(leaf=dict(...), selector=dict(type='sunburst'))
Type: dict containing one or more of the keys listed below.
Code:fig.update_traces(leaf_opacity=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number between or equal to 0 and 1
Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7
size
style
textcase
variant
weight
root
color
leaf
opacity
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 22/23

--- Página 23 ---
Code:fig.update_traces(level=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or categorical coordinate string
Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if
`ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.
Code:fig.update_traces(maxdepth=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: integer
Default:-1
Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.
Code:fig.update_traces(rotation=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: angle
Default:0
Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.
Code:fig.update_traces(sort=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: boolean
Default:True
Determines whether or not the sectors are reordered from largest to smallest.
Code:fig.update_traces(uirevision=&lt;VALUE&gt;, selector=dict(type='sunburst'))
Type: number or categorical coordinate string
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: True`
modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are
controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by
`layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: True}`) is controlled by `layout.editrevision`. Trace
changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before
the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each
trace a `uid` that stays with it as it moves.
level
maxdepth
rotation
sort
uirevision
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:25 Sunburst traces in Python
https://plotly.com/python/reference/sunburst/ 23/23</content>
    </file>
    <file name="Tables in Python.pdf" path="Tables in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Table
Styled Table &gt;  &gt; Tables
Tables in Python
How to make tables in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/table.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
go.Table provides a Table object for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for header, columns,
rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors.
Note that  provides a different type of .
Dash (https://dash.plotly.com/)
DataTable (https://dash.plotly.com/datatable)
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(header=dict(values=['A Scores' , 'B Scores' ]),
                 cells=dict(values=[[100, 90, 80, 90], [95, 85, 75, 95]]))
                     ])
fig.show()
100
90
80
9095
85
75
95
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 1/9

--- Página 2 ---
Use a Pandas Dataframeimport plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(
    header=dict(values=['A Scores' , 'B Scores' ],
                line_color ='darkslategray' ,
                fill_color ='lightskyblue' ,
                align='left'),
    cells=dict(values=[[100, 90, 80, 90], # 1st column
                       [95, 85, 75, 95]], # 2nd column
               line_color ='darkslategray' ,
               fill_color ='lightcyan' ,
               align='left'))
])
fig.update_layout (width=500, height=300)
fig.show()
100
90
80
9095
85
75
95
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 2/9

--- Página 3 ---
Tables in Dashimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv' )
fig = go.Figure(data=[go.Table(
    header=dict(values=list(df.columns),
                fill_color ='paleturquoise' ,
                align='left'),
    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population ],
               fill_color ='lavender' ,
               align='left'))
])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16Alabama
Alaska
Arizona
Arkansas
California
Colorado
Connecticut
Delaware
District of Columbia
Florida
Georgia
Hawaii
Idaho
Illinois
Indiana
IowaAL
AK
AZ
AR
CA
CO
CT
DE
DC
FL
GA
HI
ID
IL
IN
IA4849377
736732
6731484
2966369
38802500
5355866
3596677
935614
658893
19893297
10097343
1419561
1634464
12880580
6596855
3107126
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 3/9

--- Página 4 ---
Changing Row and Column SizeSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, html, Input, Output, dash_table
import pandas as pd
data_url = 'https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv'
df = pd.read_csv(data_url) # replace with your own data source
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Simple interactive table'),
    html.P(id='table_out'),
    dash_table.DataTable(
        id='table',
        columns=[{"name": i, "id": i}
                 for i in df.columns],
        data=df.to_dict('records'),
        style_cell=dict(textAlign='left'),
        style_header=dict(backgroundColor="paleturquoise"),
        style_data=dict(backgroundColor="lavender")
    ),
])
@app.callback(
    Output('table_out', 'children'),
 I t('tbl''ti ll'))DOWNLOAD
Simple interactive table
Click the table
Rank State Postal Population
1 Alabama AL 4849377
2 Alaska AK 736732
3 Arizona AZ 6731484
4 Arkansas AR 2966369
5 California CA 38802500
6 Colorado CO 5355866
7 Connecticut CT 3596677
8 Delaware DE 935614
9 District of Columbia DC 658893
10 Florida FL 19893297
11 Georgia GA 10097343
12 Hawaii HI 1419561
13 Idaho ID 1634464
14 Illinois IL 12880580
15 Indiana IN 6596855
16 Iowa IA 3107126
17 Kansas KS 2904021
18 Kentucky KY 4413457
19 Louisiana LA 4649676
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 4/9

--- Página 5 ---
Alternating Row Colorsimport plotly.graph_objects  as go
values = [['Salaries' , 'Office' , 'Merchandise' , 'Legal', '&lt;b&gt;TOTAL&lt;br&gt;EXPENSES&lt;/b&gt;' ], #1st col
  ["Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ]]
fig = go.Figure(data=[go.Table(
  columnorder  = [1,2],
  columnwidth  = [80,400],
  header = dict(
    values = [['&lt;b&gt;EXPENSES&lt;/b&gt;&lt;br&gt;as of July 2017' ],
                  ['&lt;b&gt;DESCRIPTION&lt;/b&gt;' ]],
    line_color ='darkslategray' ,
    fill_color ='royalblue' ,
    align=['left','center' ],
    font=dict(color='white', size=12),
    height=40
  ),
  cells=dict(
    values=values,
    line_color ='darkslategray' ,
    fill=dict(color=['paleturquoise' , 'white']),
    align=['left', 'center' ],
    font_size =12,
    height=30)
    )
])
fig.show()
Salaries
Office
Merchandise
Legal
TOTAL
EXPENSESLorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 5/9

--- Página 6 ---
Row Color Based on Variableimport plotly.graph_objects  as go
headerColor  = 'grey'
rowEvenColor  = 'lightgrey'
rowOddColor  = 'white'
fig = go.Figure(data=[go.Table(
  header=dict(
    values=['&lt;b&gt;EXPENSES&lt;/b&gt;' ,'&lt;b&gt;Q1&lt;/b&gt;' ,'&lt;b&gt;Q2&lt;/b&gt;' ,'&lt;b&gt;Q3&lt;/b&gt;' ,'&lt;b&gt;Q4&lt;/b&gt;' ],
    line_color ='darkslategray' ,
    fill_color =headerColor ,
    align=['left','center' ],
    font=dict(color='white', size=12)
  ),
  cells=dict(
    values=[
      ['Salaries' , 'Office' , 'Merchandise' , 'Legal', '&lt;b&gt;TOTAL&lt;/b&gt;' ],
      [1200000, 20000, 80000, 2000, 12120000 ],
      [1300000, 20000, 70000, 2000, 130902000 ],
      [1300000, 20000, 120000, 2000, 131222000 ],
      [1400000, 20000, 90000, 2000, 14102000 ]],
    line_color ='darkslategray' ,
    # 2-D list of colors for alternating rows
    fill_color  = [[rowOddColor ,rowEvenColor ,rowOddColor , rowEvenColor ,rowOddColor ]*5],
    align = ['left', 'center' ],
    font = dict(color = 'darkslategray' , size = 11)
    ))
])
fig.show()
Salaries
Office
Merchandise
Legal
TOTAL1200000
20000
80000
2000
121200001300000
20000
70000
2000
1309020001300000
20000
120000
2000
1312220001400000
20000
90000
2000
14102000
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 6/9

--- Página 7 ---
Cell Color Based on Variableimport plotly.graph_objects  as go
import pandas as pd
colors = ['rgb(239, 243, 255)' , 'rgb(189, 215, 231)' , 'rgb(107, 174, 214)' ,
          'rgb(49, 130, 189)' , 'rgb(8, 81, 156)' ]
data = {'Year' : [2010, 2011, 2012, 2013, 2014], 'Color' : colors}
df = pd.DataFrame (data)
fig = go.Figure(data=[go.Table(
  header=dict(
    values=["Color", "&lt;b&gt;YEAR&lt;/b&gt;" ],
    line_color ='white', fill_color ='white',
    align='center' , font=dict(color='black', size=12)
  ),
  cells=dict(
    values=[df.Color, df.Year],
    line_color =[df.Color], fill_color =[df.Color],
    align='center' , font=dict(color='black', size=11)
  ))
])
fig.show()
rgb(239, 243, 255)
rgb(189, 215, 231)
rgb(107, 174, 214)
rgb(49, 130, 189)
rgb(8, 81, 156)2010
2011
2012
2013
2014
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 7/9

--- Página 8 ---
Referenceimport plotly.graph_objects  as go
from plotly.colors  import n_colors
import numpy as np
np.random.seed(1)
colors = n_colors ('rgb(255, 200, 200)' , 'rgb(200, 0, 0)' , 9, colortype ='rgb')
a = np.random.randint(low=0, high=9, size=10)
b = np.random.randint(low=0, high=9, size=10)
c = np.random.randint(low=0, high=9, size=10)
fig = go.Figure(data=[go.Table(
  header=dict(
    values=['&lt;b&gt;Column A&lt;/b&gt;' , '&lt;b&gt;Column B&lt;/b&gt;' , '&lt;b&gt;Column C&lt;/b&gt;' ],
    line_color ='white', fill_color ='white',
    align='center' ,font=dict(color='black', size=12)
  ),
  cells=dict(
    values=[a, b, c],
    line_color =[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],
    fill_color =[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],
    align='center' , font=dict(color='white', size=11)
    ))
])
fig.show()
For more information on tables and table attributes see: .
https://plotly.com/python/reference/table/ (https://plotly.com/python/reference/table/)5
8
5
0
0
1
7
6
2
45
2
4
2
4
7
7
1
7
06
7
6
1
0
1
8
8
3
8
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 8/9

--- Página 9 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:25 Tables in Python
https://plotly.com/python/table/ 9/9</content>
    </file>
    <file name="Tables in Python2.pdf" path="Tables in Python2.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Table
Styled Table &gt;  &gt; Tables
Tables in Python
How to make tables in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/table.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
go.Table provides a Table object for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for header, columns,
rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors.
Note that  provides a different type of .
Dash (https://dash.plotly.com/)
DataTable (https://dash.plotly.com/datatable)
import plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(header=dict(values=['A Scores' , 'B Scores' ]),
                 cells=dict(values=[[100, 90, 80, 90], [95, 85, 75, 95]]))
                     ])
fig.show()
100
90
80
9095
85
75
95
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 1/9

--- Página 2 ---
Use a Pandas Dataframeimport plotly.graph_objects  as go
fig = go.Figure(data=[go.Table(
    header=dict(values=['A Scores' , 'B Scores' ],
                line_color ='darkslategray' ,
                fill_color ='lightskyblue' ,
                align='left'),
    cells=dict(values=[[100, 90, 80, 90], # 1st column
                       [95, 85, 75, 95]], # 2nd column
               line_color ='darkslategray' ,
               fill_color ='lightcyan' ,
               align='left'))
])
fig.update_layout (width=500, height=300)
fig.show()
100
90
80
9095
85
75
95
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 2/9

--- Página 3 ---
Tables in Dashimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv' )
fig = go.Figure(data=[go.Table(
    header=dict(values=list(df.columns),
                fill_color ='paleturquoise' ,
                align='left'),
    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population ],
               fill_color ='lavender' ,
               align='left'))
])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16Alabama
Alaska
Arizona
Arkansas
California
Colorado
Connecticut
Delaware
District of Columbia
Florida
Georgia
Hawaii
Idaho
Illinois
Indiana
IowaAL
AK
AZ
AR
CA
CO
CT
DE
DC
FL
GA
HI
ID
IL
IN
IA4849377
736732
6731484
2966369
38802500
5355866
3596677
935614
658893
19893297
10097343
1419561
1634464
12880580
6596855
3107126
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 3/9

--- Página 4 ---
Changing Row and Column SizeSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, html, Input, Output, dash_table
import pandas as pd
data_url = 'https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv'
df = pd.read_csv(data_url) # replace with your own data source
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Simple interactive table'),
    html.P(id='table_out'),
    dash_table.DataTable(
        id='table',
        columns=[{"name": i, "id": i}
                 for i in df.columns],
        data=df.to_dict('records'),
        style_cell=dict(textAlign='left'),
        style_header=dict(backgroundColor="paleturquoise"),
        style_data=dict(backgroundColor="lavender")
    ),
])
@app.callback(
    Output('table_out', 'children'),
 I t('tbl''ti ll'))DOWNLOAD
Simple interactive table
Click the table
Rank State Postal Population
1 Alabama AL 4849377
2 Alaska AK 736732
3 Arizona AZ 6731484
4 Arkansas AR 2966369
5 California CA 38802500
6 Colorado CO 5355866
7 Connecticut CT 3596677
8 Delaware DE 935614
9 District of Columbia DC 658893
10 Florida FL 19893297
11 Georgia GA 10097343
12 Hawaii HI 1419561
13 Idaho ID 1634464
14 Illinois IL 12880580
15 Indiana IN 6596855
16 Iowa IA 3107126
17 Kansas KS 2904021
18 Kentucky KY 4413457
19 Louisiana LA 4649676
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 4/9

--- Página 5 ---
Alternating Row Colorsimport plotly.graph_objects  as go
values = [['Salaries' , 'Office' , 'Merchandise' , 'Legal', '&lt;b&gt;TOTAL&lt;br&gt;EXPENSES&lt;/b&gt;' ], #1st col
  ["Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ,
  "Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis  
timeam vel ad" ]]
fig = go.Figure(data=[go.Table(
  columnorder  = [1,2],
  columnwidth  = [80,400],
  header = dict(
    values = [['&lt;b&gt;EXPENSES&lt;/b&gt;&lt;br&gt;as of July 2017' ],
                  ['&lt;b&gt;DESCRIPTION&lt;/b&gt;' ]],
    line_color ='darkslategray' ,
    fill_color ='royalblue' ,
    align=['left','center' ],
    font=dict(color='white', size=12),
    height=40
  ),
  cells=dict(
    values=values,
    line_color ='darkslategray' ,
    fill=dict(color=['paleturquoise' , 'white']),
    align=['left', 'center' ],
    font_size =12,
    height=30)
    )
])
fig.show()
Salaries
Office
Merchandise
Legal
TOTAL
EXPENSESLorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id
usu aeterno adversarium, summo mollis timeam vel ad
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 5/9

--- Página 6 ---
Row Color Based on Variableimport plotly.graph_objects  as go
headerColor  = 'grey'
rowEvenColor  = 'lightgrey'
rowOddColor  = 'white'
fig = go.Figure(data=[go.Table(
  header=dict(
    values=['&lt;b&gt;EXPENSES&lt;/b&gt;' ,'&lt;b&gt;Q1&lt;/b&gt;' ,'&lt;b&gt;Q2&lt;/b&gt;' ,'&lt;b&gt;Q3&lt;/b&gt;' ,'&lt;b&gt;Q4&lt;/b&gt;' ],
    line_color ='darkslategray' ,
    fill_color =headerColor ,
    align=['left','center' ],
    font=dict(color='white', size=12)
  ),
  cells=dict(
    values=[
      ['Salaries' , 'Office' , 'Merchandise' , 'Legal', '&lt;b&gt;TOTAL&lt;/b&gt;' ],
      [1200000, 20000, 80000, 2000, 12120000 ],
      [1300000, 20000, 70000, 2000, 130902000 ],
      [1300000, 20000, 120000, 2000, 131222000 ],
      [1400000, 20000, 90000, 2000, 14102000 ]],
    line_color ='darkslategray' ,
    # 2-D list of colors for alternating rows
    fill_color  = [[rowOddColor ,rowEvenColor ,rowOddColor , rowEvenColor ,rowOddColor ]*5],
    align = ['left', 'center' ],
    font = dict(color = 'darkslategray' , size = 11)
    ))
])
fig.show()
Salaries
Office
Merchandise
Legal
TOTAL1200000
20000
80000
2000
121200001300000
20000
70000
2000
1309020001300000
20000
120000
2000
1312220001400000
20000
90000
2000
14102000
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 6/9

--- Página 7 ---
Cell Color Based on Variableimport plotly.graph_objects  as go
import pandas as pd
colors = ['rgb(239, 243, 255)' , 'rgb(189, 215, 231)' , 'rgb(107, 174, 214)' ,
          'rgb(49, 130, 189)' , 'rgb(8, 81, 156)' ]
data = {'Year' : [2010, 2011, 2012, 2013, 2014], 'Color' : colors}
df = pd.DataFrame (data)
fig = go.Figure(data=[go.Table(
  header=dict(
    values=["Color", "&lt;b&gt;YEAR&lt;/b&gt;" ],
    line_color ='white', fill_color ='white',
    align='center' , font=dict(color='black', size=12)
  ),
  cells=dict(
    values=[df.Color, df.Year],
    line_color =[df.Color], fill_color =[df.Color],
    align='center' , font=dict(color='black', size=11)
  ))
])
fig.show()
rgb(239, 243, 255)
rgb(189, 215, 231)
rgb(107, 174, 214)
rgb(49, 130, 189)
rgb(8, 81, 156)2010
2011
2012
2013
2014
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 7/9

--- Página 8 ---
Referenceimport plotly.graph_objects  as go
from plotly.colors  import n_colors
import numpy as np
np.random.seed(1)
colors = n_colors ('rgb(255, 200, 200)' , 'rgb(200, 0, 0)' , 9, colortype ='rgb')
a = np.random.randint(low=0, high=9, size=10)
b = np.random.randint(low=0, high=9, size=10)
c = np.random.randint(low=0, high=9, size=10)
fig = go.Figure(data=[go.Table(
  header=dict(
    values=['&lt;b&gt;Column A&lt;/b&gt;' , '&lt;b&gt;Column B&lt;/b&gt;' , '&lt;b&gt;Column C&lt;/b&gt;' ],
    line_color ='white', fill_color ='white',
    align='center' ,font=dict(color='black', size=12)
  ),
  cells=dict(
    values=[a, b, c],
    line_color =[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],
    fill_color =[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],
    align='center' , font=dict(color='white', size=11)
    ))
])
fig.show()
For more information on tables and table attributes see: .
https://plotly.com/python/reference/table/ (https://plotly.com/python/reference/table/)5
8
5
0
0
1
7
6
2
45
2
4
2
4
7
7
1
7
06
7
6
1
0
1
8
8
3
8
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 8/9

--- Página 9 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:26 Tables in Python
https://plotly.com/python/table/ 9/9</content>
    </file>
    <file name="Treemap charts in Python.pdf" path="Treemap charts in Python.pdf" type="pdf">
      <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Treemap with plotly.express
Treemap of a rectangular DataFrame with plotly.express &gt;  &gt; Treemap
Charts
Treemap Charts in Python
How to make Treemap Charts with Plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/treemaps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 visualize hierarchical data using nested rectangles. The input data format is the same as for 
 and : the hierarchy is defined by 
 (names for px.treemap) and 
 attributes. Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar
as well.
Treemap charts (https://en.wikipedia.org/wiki/Treemapping)
Sunburst
Charts (https://plotly.com/python/sunburst-charts/)
Icicle Charts (https://plotly.com/python/icicle-charts/)
labels
(https://plotly.com/python/reference/treemap/#treemap-labels)
parents (https://plotly.com/python/reference/treemap/#treemap-
parents)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.treemap, each row of the DataFrame is represented as a sector of the treemap.
import plotly.express  as px
fig = px.treemap(
    names = ["Eve","Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"]
)
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
Hierarchical data are often stored as a rectangular dataframe, with different columns corresponding to different levels of the hierarchy. px.treemap can take a path
parameter corresponding to a list of columns. Note that id and parent should not be provided if path is given.Eve
Seth Cain
AbelAwan
AzuraEnos
NoamEnoch
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 1/18

--- Página 2 ---
Treemap of a rectangular DataFrame with continuous color argument in
px.treemapimport plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'day', 'time', 'sex'], values='total_bill' )
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If a color argument is passed, the color of a node is computed as the average of the color values of its children, weighted by their values.
Note: for best results, ensure that the first path element is a single root node. In the examples below we are creating a dummy column containing identical values for
each row to achieve this.all
Sat Sun Thur
FriDinner Dinner Lunch
Dinner
Dinner LunchMale
FemaleMale
FemaleMale
Female
Male FemaleFemaleMale
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 2/18

--- Página 3 ---
Treemap of a rectangular DataFrame with discrete color argument in px.treemapimport plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.treemap(df, path=[px.Constant ("world"), 'continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ],
                  color_continuous_scale ='RdBu',
                  color_continuous_midpoint =np.average(df['lifeExp' ], weights=df['pop']))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
When the argument of color corresponds to non-numerical data, discrete colors are used. If a sector has the same value of the color column for all its children, then
the corresponding color is used, otherwise the first color of the discrete color sequence is used.
import plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                 values='total_bill' , color='day')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()world
Asia Africa
Americas Europe
OceaniaChina
IndiaIndonesiaPakistan
BangladeshJapan
PhilippinesVietnamIran
Thailand
Korea, Rep.
MyanmarAfghanistanNepalSaudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.TaiwanYemen, Rep.
Sri Lanka
SyriaCambodiaHong Kong, China
Israel
JordanSingaporeWest Bank and Gaza
Lebanon
OmanMongolia
KuwaitNigeria
EgyptEthiopia
Congo, Dem. Rep.South Africa
Sudan
TanzaniaKenya
Morocco
AlgeriaUgandaGhanaMozambiqueMadagascar
Cote d'Ivoire
Cameroon
Burkina Faso
MalawiNigerAngolaZimbabweSenegal
Mali
Zambia
TunisiaChadGuineaSomalia
Rwanda
Burundi
BeninSierra LeoneLibya Togo
Eritrea
Central African Republic
Congo, Rep.Mauritania Liberia
Namibia
Lesotho
GambiaBotswanaGuinea-Bissau
GabonMauritius
Swaziland
ReunionComorosEquatorial Guinea
Djibouti
United StatesBrazil
Mexico
ColombiaArgentina
Canada
PeruVenezuelaChile
EcuadorGuatemalaCuba
Dominican Republic
Bolivia
HaitiHonduras El Salvador
Paraguay
NicaraguaCosta RicaPuerto Rico
Uruguay
PanamaJamaica
Trinidad and TobagoGermanyTurkey
FranceUnited Kingdom
ItalySpainPoland
Romania
NetherlandsGreece
Portugal
BelgiumCzech Republic
Serbia
HungarySwedenAustria
Switzerland BulgariaDenmark
Slovak Republic
FinlandNorway
Bosnia and HerzegovinaCroatiaIreland
AlbaniaSlovenia
Montenegro
405060708090lifeExp
all
Male Female
Sun Sat
Thur FriSat
Thur Sun
FriDinner Dinner
Lunch Dinner
LunchDinner
Lunch
DinnerDinner
DinnerLunch
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 3/18

--- Página 4 ---
Using an explicit mapping for discrete colorsIn the example below the color of Saturday and Sunday sectors is the same as Dinner because there are only Dinner entries for Saturday and Sunday. However, for
Female -&gt; Friday there are both lunches and dinners, hence the "mixed" color (blue here) is used.
import plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                 values='total_bill' , color='time')
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
For more information about discrete colors, see the .
dedicated page (/python/discrete-color)all
Male Female
Sun Sat
Thur FriSat
Thur Sun
FriDinner Dinner
Lunch Dinner
LunchDinner
Lunch
DinnerDinner
DinnerLunch
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 4/18

--- Página 5 ---
Rectangular data with missing valuesimport plotly.express  as px
df = px.data.tips()
fig = px.treemap(df, path=[px.Constant ("all"), 'sex', 'day', 'time'],
                 values='total_bill' , color='time',
                  color_discrete_map ={'(?)':'lightgrey' , 'Lunch':'gold', 'Dinner' :'darkblue' })
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If the dataset is not fully rectangular, missing values should be supplied as None.all
Male Female
Sun Sat
Thur FriSat
Thur Sun
FriDinner Dinner
Lunch Dinner
LunchDinner
Lunch
DinnerDinner
DinnerLunch
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 5/18

--- Página 6 ---
Treemap with Rounded Cornersimport plotly.express  as px
import pandas as pd
vendors = ["A", "B", "C", "D", None, "E", "F", "G", "H", None]
sectors = ["Tech", "Tech", "Finance" , "Finance" , "Other",
           "Tech", "Tech", "Finance" , "Finance" , "Other"]
regions = ["North", "North", "North", "North", "North",
           "South", "South", "South", "South", "South"]
sales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]
df = pd.DataFrame (
    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)
)
df["all"] = "all" # in order to have a single root node
print(df)
fig = px.treemap(df, path=['all', 'regions' , 'sectors' , 'vendors' ], values='sales')
fig.update_traces (root_color ="lightgrey" )
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
New in 5.12
Update treemap sectors to have rounded corners by configuring the cornerradius in px.vendors  sectors regions  sales  all
0       A     Tech   North      1  all
1       B     Tech   North      3  all
2       C  Finance   North      2  all
3       D  Finance   North      4  all
4    None    Other   North      1  all
5       E     Tech   South      2  all
6       F     Tech   South      2  all
7       G  Finance   South      1  all
8       H  Finance   South      4  all
9    None    Other   South      1  all
all
North South
Finance Tech
OtherFinance
Tech OtherD
CB
AH G
E F
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 6/18

--- Página 7 ---
Basic Treemap with go.Treemapimport plotly.express  as px
fig = px.treemap(
    names = ["Eve","Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"]
)
fig.update_traces (marker=dict(cornerradius =5))
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Treemap class from plotly.graph_objects (/python/graph-
objects/)Eve
Seth Cain
AbelAwan
AzuraEnos
NoamEnoch
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 7/18

--- Página 8 ---
Set Different Attributes in Treemap
1. : sets the values associated with each of the sectors.
2. : determines which trace information appear on the graph that can be 'text', 'value',
'current path', 'percent root', 'percent entry', and 'percent parent', or any combination of them.
3. : a main extra feature of treemap to display the current path of the visible portion
of the hierarchical map. It may also be useful for zooming out of the graph.
4. : determines how the items in values are summed. When set to "total",
items in values are taken to be value of all its descendants. In the example below Eve = 65, which is equal to 14 + 12 + 10 + 2 + 6 + 6 + 1 + 4. When set to
"remainder", items in values corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their
leaves.import plotly.graph_objects  as go
fig = go.Figure(go.Treemap(
    labels = ["Eve","Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"],
    root_color ="lightgrey"
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
This example uses the following attributes:
values (https://plotly.com/python/reference/treemap/#treemap-values)
textinfo (https://plotly.com/python/reference/treemap/#treemap-textinfo)
pathbar (https://plotly.com/python/reference/treemap/#treemap-pathbar)
branchvalues (https://plotly.com/python/reference/treemap/#treemap-branchvalues)Eve
Seth Cain
AbelAwan
AzuraEnos
NoamEnoch
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 8/18

--- Página 9 ---
Set Color of Treemap Sectors
1. , 2) 
, 3) . The following examples show how to use each of them.import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
labels = ["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"]
parents = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"]
fig = make_subplots (
    cols = 2, rows = 1,
    column_widths  = [0.4, 0.4],
    subplot_titles  = ('branchvalues: &lt;b&gt;remainder&lt;br /&gt;&amp;nbsp;&lt;br /&gt;' , 'branchvalues: &lt;b&gt;total&lt;br /&gt;&amp;nbsp;&lt;br /&gt;' ),
    specs = [[{'type': 'treemap' , 'rowspan' : 1}, {'type': 'treemap' }]]
)
fig.add_trace (go.Treemap(
    labels = labels,
    parents = parents,
    values =  [10, 14, 12, 10, 2, 6, 6, 1, 4],
    textinfo  = "label+value+percent parent+percent entry+percent root" ,
    root_color ="lightgrey"
),row = 1, col = 1)
fig.add_trace (go.Treemap(
    branchvalues  = "total",
    labels = labels,
    parents = parents,
    values = [65, 14, 12, 10, 2, 6, 6, 1, 4],
    textinfo  = "label+value+percent parent+percent entry" ,
    root_color ="lightgrey"
),row = 1, col = 2)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
There are three different ways to change the color of the sectors in Treemap:
marker.colors (https://plotly.com/python/reference/treemap/#treemap-marker-colors)
colorway (https://plotly.com/python/reference/treemap/#treemap-
colorway)
colorscale (https://plotly.com/python/reference/treemap/#treemap-colorscale)Eve
Seth Cain
14
22% of parent
22% of entry
22% of root
Awan Abel
6
9% of parent
9% of entry
9% of root
Azura
4
6% of parent
6% of entry
6% of rootEnos
10
42% of parent
15% of entry
15% of rootNoam
2
8% of parent
3% of entry
3% of root
Enoch
1
14% of parent
2% of entry
2% of rootEve
Cain
14
22% of parent
22% of entrySeth
Abel
6
9% of parent
9% of entry
AwanAzura
4
6% of parent
6% of entryEnos
10
83% of parent
15% of entryNoam
2
17% of parent
3% of entry
Enoch
1
17% of parent
2% of entrybranchvalues: remainder branchvalues: total
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 9/18

--- Página 10 ---
import plotly.graph_objects  as go
values = [0, 11, 12, 13, 14, 15, 20, 30]
labels = ["container" , "A1", "A2", "A3", "A4", "A5", "B1", "B2"]
parents = ["", "container" , "A1", "A2", "A3", "A4", "container" , "B1"]
fig = go.Figure(go.Treemap(
    labels = labels,
    values = values,
    parents = parents,
    marker_colors  = ["pink", "royalblue" , "lightgray" , "purple" ,
                     "cyan", "lightgray" , "lightblue" , "lightgreen" ]
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
This example uses treemapcolorway attribute, which should be set in layout.container
A1 B1
A2 B2
A3
A4
A5
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 10/18

--- Página 11 ---
import plotly.graph_objects  as go
values = [0, 11, 12, 13, 14, 15, 20, 30]
labels = ["container" , "A1", "A2", "A3", "A4", "A5", "B1", "B2"]
parents = ["", "container" , "A1", "A2", "A3", "A4", "container" , "B1"]
fig = go.Figure(go.Treemap(
    labels = labels,
    values = values,
    parents = parents,
    root_color ="lightblue"
))
fig.update_layout (
    treemapcolorway  = ["pink", "lightgray" ],
    margin = dict(t=50, l=25, r=25, b=25)
)
fig.show()
container
A1 B1
A2 B2
A3
A4
A5
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 11/18

--- Página 12 ---
Treemap chart with a continuous colorscaleimport plotly.graph_objects  as go
values = [0, 11, 12, 13, 14, 15, 20, 30]
labels = ["container" , "A1", "A2", "A3", "A4", "A5", "B1", "B2"]
parents = ["", "container" , "A1", "A2", "A3", "A4", "container" , "B1"]
fig = go.Figure(go.Treemap(
    labels = labels,
    values = values,
    parents = parents,
    marker_colorscale  = 'Blues'
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
The example below visualizes a breakdown of sales (corresponding to sector width) and call success rate (corresponding to sector color) by region, county and
salesperson level. For example, when exploring the data you can see that although the East region is behaving poorly, the Tyler county is still above average --
however, its performance is reduced by the poor success rate of salesperson GT.
In the right subplot which has a maxdepth of two levels, click on a sector to see its breakdown to lower levels.container
A1 B1
A2 B2
A3
A4
A5
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 12/18

--- Página 13 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/sales_success.csv' )
print(df.head())
levels = ['salesperson' , 'county' , 'region' ] # levels used for the hierarchical chart
color_columns  = ['sales', 'calls']
value_column  = 'calls'
def build_hierarchical_dataframe (df, levels, value_column , color_columns =None):
    """
    Build a hierarchy of levels for Sunburst or Treemap charts.
    Levels are given starting from the bottom to the top of the hierarchy,
    ie the last level corresponds to the root.
    """
    df_list = []
    for i, level in enumerate (levels):
        df_tree = pd.DataFrame (columns=['id', 'parent' , 'value', 'color'])
        dfg = df.groupby(levels[i:]).sum()
        dfg = dfg.reset_index ()
        df_tree['id'] = dfg[level].copy()
        if i &lt; len(levels) - 1:
            df_tree['parent' ] = dfg[levels[i+1]].copy()
        else:
            df_tree['parent' ] = 'total'
        df_tree['value'] = dfg[value_column ]
        df_tree['color'] = dfg[color_columns [0]] / dfg[color_columns [1]]
        df_list.append(df_tree)
    total = pd.Series(dict(id='total', parent='',
                              value=df[value_column ].sum(),
                              color=df[color_columns [0]].sum() / df[color_columns [1]].sum()), name=0)
    df_list.append(total)
    df_all_trees  = pd.concat(df_list, ignore_index =True)
    return df_all_trees
df_all_trees  = build_hierarchical_dataframe (df, levels, value_column , color_columns )
average_score  = df['sales'].sum() / df['calls'].sum()
fig = make_subplots (1, 2, specs=[[{"type": "domain" }, {"type": "domain" }]],)
fig.add_trace (go.Treemap(
    labels=df_all_trees ['id'],
    parents=df_all_trees ['parent' ],
    values=df_all_trees ['value'],
    branchvalues ='total',
    marker=dict(
        colors=df_all_trees ['color'],
        colorscale ='RdBu',
        cmid=average_score ),
    hovertemplate ='&lt;b&gt;%{label} &lt;/b&gt; &lt;br&gt; Sales: % {value}&lt;br&gt; Success rate: % {color:.2f} ',
    name=''
    ), 1, 1)
fig.add_trace (go.Treemap(
    labels=df_all_trees ['id'],
    parents=df_all_trees ['parent' ],
    values=df_all_trees ['value'],
    branchvalues ='total',
    marker=dict(
        colors=df_all_trees ['color'],
        colorscale ='RdBu',
        cmid=average_score ),
    hovertemplate ='&lt;b&gt;%{label} &lt;/b&gt; &lt;br&gt; Sales: % {value}&lt;br&gt; Success rate: % {color:.2f} ',
    maxdepth =2
    ), 1, 2)
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 13/18

--- Página 14 ---
Nested Layers in Treemap
The following example uses hierarchical data that includes layers and grouping. Treemap and  charts reveal
insights into the data, and the format of your hierarchical data.  attribute sets the
number of rendered sectors from the given level.
Sunburst (https://plotly.com/python/sunburst-charts/)
maxdepth (https://plotly.com/python/reference/treemap/#treemap-maxdepth)Unnamed: 0 region   county salesperson  calls  sales
0           0  North   Dallam          JE     35     23
1           1  North   Dallam          ZQ     49     13
2           2  North   Dallam          IJ     20      6
3           3  North  Hartley          WE     39     37
4           4  North  Hartley          PL     42     37
total
North East
South WestFloyd Gray
Hartley
DallamMotley
MooreShelbyHouston
Tyler Rusk
Webb
HidalgoZavala
DuvalPresidio
PecosBrewsterUAWHOHESYJXY
PLWEBI
ZQJEIJEHNYMW
TWTZZMXH
NZVNAX
YN
QK
UF
GTJCOY
UMHW
RRQJKR
LQLRLVFLIVYA
DSFJ
GWSVDQOT
QMWZWVBS
IK
JFtotal
North East
South West
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 14/18

--- Página 15 ---
Controlling text fontsize with uniformtextimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure()
fig.add_trace (go.Treemap(
    ids = df.ids,
    labels = df.labels,
    parents = df.parents,
    maxdepth =3,
    root_color ="lightgrey"
))
fig.update_layout (margin = dict(t=50, l=25, r=25, b=25))
fig.show()
If you want all the text labels to have the same size, you can use the uniformtext layout parameter. The minsize attribute sets the font size, and the mode attribute
sets what happens for labels which cannot fit with the desired fontsize: either hide them or show them with overflow.
Note: animated transitions are currently not implemented when uniformtext is used.Coffee Flavors
Aromas Tastes
Enzymatic
Sugar BrowningDry Distillation Bitter Salt
Sweet Sour
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 15/18

--- Página 16 ---
Pattern Fillsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/96c0bd/sunburst-coffee-flavors-complete.csv' )
fig = go.Figure(go.Treemap(
    ids = df.ids,
    labels = df.labels,
    parents = df.parents,
    pathbar_textfont_size =15,
    root_color ="lightgrey"
))
fig.update_layout (
    uniformtext =dict(minsize=10, mode='hide'),
    margin = dict(t=50, l=25, r=25, b=25)
)
fig.show()
New in 5.15
Treemap charts support  (also known as hatching or texture) in addition to color. In this example, we apply a pattern to
the root node.
patterns (/python/pattern-hatching-texture/)Coffee Flavors
Aromas Tastes
Enzymatic
Sugar BrowningDry Distillation Bitter Salt
Sweet SourFlowery Fruity Herby
Nutty Carmelly ChocolateyResinous
Spicy
CarbonyPungent
HarshSharp
Bland
Mellow
AcidyWiney
SouryFloral
FragrantCitrus
Berry-likeAlliaceous
Leguminous
Nut-like
Malt-likeCandy-like
Syrup-likeChocolate-like
Vanilla-likeTurpeny Medicinal
Warming Pungent
Smokey AshyCreosolPhenolic
CausticAlkalineRough
NeutralSoft
DelicateMild
NippyPiquantTangyTart
HardAcridLemonApple
ApricotOnionGarlic
Walnuts
Toast HoneyBakers
SwissButterPiney
Clove
Tarry Burnt
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 16/18

--- Página 17 ---
Reference
What About Dash?import plotly.graph_objects  as go
fig = go.Figure(
    go.Treemap(
        labels = ["Eve","Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
        parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"],
        root_color ="lightgrey" ,
        textfont_size =20,
        marker=dict(pattern=dict(shape=["|"], solidity =0.80)),
    )
)
fig.show()
See  or 
 for more information and chart attribute options!
function reference for px.treemap() (https://plotly.com/python-api-reference/generated/plotly.express.treemap)
https://plotly.com/python/reference/treemap/
(https://plotly.com/python/reference/treemap/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterEve
Seth Cain
AbelAwan
AzuraEnos
NoamEnoch
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 17/18

--- Página 18 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
me with
me with
 eemap
me with
 map
ete colors
es
olorscale
mtext16/07/2025, 06:25 Treemap charts in Python
https://plotly.com/python/treemaps/ 18/18</content>
    </file>
    <category name="pyvy_2x" path="pyvy_2x">
      <file name="Latex in Python.pdf" path="pyvy_2x/Latex in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)LaTeX Typesetting &gt;  &gt; LaTeX
LaTeX in Python
How to add LaTeX to python graphs.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/LaTeX.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Figure titles, axis labels and annotations all accept LaTeX directives for rendering mathematical formulas and notation, when the entire label is surrounded by dollar
signs $...$. This rendering is handled by the , which must be loaded in the environment
where figures are being rendered. MathJax is included by default in Jupyter-like environments. When embedding Plotly figures in other contexts it may be required to
ensure that MathJax is separately loaded, for example via a &lt;script&gt; tag pointing to a content-delivery network (CDN). Versions 2 and 3 are supported.
MathJax library (https://www.npmjs.com/package/mathjax?activeTab=versions)
import plotly.express  as px
fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], title=r'$\alpha_ {1c} = 352 \pm 11 \text{ km s}^{-1}$' )
fig.update_layout (
    xaxis_title =r'$\sqrt{(n_\text {c}(t|{T_\text {early}}))}$',
    yaxis_title =r'$d, r \text{ (solar radius)}$'
)
fig.show()
1 1.5 2 2.5 3 3.5 4246810121416
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Latex in Python
https://plotly.com/python/LaTeX/ 1/3

--- Página 2 ---
What About Dash?import plotly.graph_objs  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4],
    y=[1, 4, 9, 16],
    name=r'$\alpha_ {1c} = 352 \pm 11 \text{ km s}^{-1}$'
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4],
    y=[0.5, 2, 4.5, 8],
    name=r'$\beta_ {1c} = 25 \pm 11 \text{ km s}^{-1}$'
))
fig.update_layout (
    xaxis_title =r'$\sqrt{(n_\text {c}(t|{T_\text {early}}))}$',
    yaxis_title =r'$d, r \text{ (solar radius)}$'
)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter1 1.5 2 2.5 3 3.5 40246810121416
16/07/2025, 06:17 Latex in Python
https://plotly.com/python/LaTeX/ 2/3

--- Página 3 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:17 Latex in Python
https://plotly.com/python/LaTeX/ 3/3</content>
      </file>
      <file name="Peak finding in Python.pdf" path="pyvy_2x/Peak finding in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Imports
Import Data &gt;  &gt; Peak Finding
Peak Finding in Python
Learn how to find peaks and valleys on datasets in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/peak-finding.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The tutorial below imports , and .
Pandas (https://pandas.pydata.org/docs/user_guide/10min.html)
SciPy (https://www.scipy.org/)
import pandas as pd
from scipy.signal  import find_peaks
To start detecting peaks, we will import some data on milk production by month:
import plotly.graph_objects  as go
import pandas as pd
milk_data  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv' )
time_series  = milk_data ['Monthly milk production (pounds per cow)' ]
fig = go.Figure(data=go.Scatter(
    y = time_series ,
    mode = 'lines'
))
fig.show()
0 20 40 60 80 100 120 140 160550600650700750800850900950
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Peak finding in Python
https://plotly.com/python/peak-finding/ 1/4

--- Página 2 ---
Peak Detection
Only Highest PeaksWe need to find the x-axis indices for the peaks in order to determine where the peaks are located.
import plotly.graph_objects  as go
import pandas as pd
from scipy.signal  import find_peaks
milk_data  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv' )
time_series  = milk_data ['Monthly milk production (pounds per cow)' ]
indices = find_peaks (time_series )[0]
fig = go.Figure()
fig.add_trace (go.Scatter(
    y=time_series ,
    mode='lines+markers' ,
    name='Original Plot'
))
fig.add_trace (go.Scatter(
    x=indices,
    y=[time_series [j] for j in indices],
    mode='markers' ,
    marker=dict(
        size=8,
        color='red',
        symbol='cross'
    ),
    name='Detected Peaks'
))
fig.show()
We can attempt to set our threshold so that we identify as many of the highest peaks that we can.0 50 100 150550600650700750800850900950Original Plot
Detected Peaks
16/07/2025, 06:17 Peak finding in Python
https://plotly.com/python/peak-finding/ 2/4

--- Página 3 ---
import plotly.graph_objects  as go
import numpy as np
import pandas as pd
from scipy.signal  import find_peaks
milk_data  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv' )
time_series  = milk_data ['Monthly milk production (pounds per cow)' ]
indices = find_peaks (time_series , threshold =20)[0]
fig = go.Figure()
fig.add_trace (go.Scatter(
    y=time_series ,
    mode='lines+markers' ,
    name='Original Plot'
))
fig.add_trace (go.Scatter(
    x=indices,
    y=[time_series [j] for j in indices],
    mode='markers' ,
    marker=dict(
        size=8,
        color='red',
        symbol='cross'
    ),
    name='Detected Peaks'
))
fig.show()
0 50 100 150550600650700750800850900950Original Plot
Detected Peaks
16/07/2025, 06:17 Peak finding in Python
https://plotly.com/python/peak-finding/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:17 Peak finding in Python
https://plotly.com/python/peak-finding/ 4/4</content>
      </file>
      <file name="Plot csv data in Python.pdf" path="pyvy_2x/Plot csv data in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Plot from CSV with Plotly Express &gt;  &gt; Plot CSV Data
Plot CSV Data in Python
How to create charts from csv files with Plotly and Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/plot-data-from-csv.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
CSV or comma-delimited-values is a very popular format for storing structured data. In this tutorial, we will see how to plot beautiful graphs using csv data, and
Pandas. We will learn how to import csv data from an external source (a url), and plot it using Plotly and pandas.
First we import the data and look at it.
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv' )
df.head()
import pandas as pd
import plotly.express  as px
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv' )
fig = px.line(df, x = 'AAPL_x' , y = 'AAPL_y' , title='Apple Share Prices over time (2014)' )
fig.show()AAPL_xAAPL_y
02014-01-0277.445395
12014-01-0377.045575
22014-01-0674.896972
32014-01-0775.856461
42014-01-0875.091947
Mar 2014 May 2014 Jul 2014 Sep 2014 Nov 2014708090100110120Apple Share Prices over time (2014)
AAPL_xAAPL_y
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:16 Plot csv data in Python
https://plotly.com/python/plot-data-from-csv/ 1/4

--- Página 2 ---
Plot from CSV in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import pandas as pd
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Simple stock plot with adjustable axis'),
    html.Button("Switch Axis", n_clicks=0,
                id='button'),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("button", "n_clicks"))
def display_graph(n_clicks):
    df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv') # replace with your own data source
    if n_clicks % 2 == 0:
        x, y = 'AAPL_x', 'AAPL_y'
    else:
        x, y = 'AAPL_y', 'AAPL_x'
 fi li(df )DOWNLOAD
Simple stock plot with adjustable axis
SWITCH AXIS
Mar 2014 May 2014 Jul 2014 Sep 2014 Nov 2014708090100110120
AAPL_xAAPL_y
16/07/2025, 06:16 Plot csv data in Python
https://plotly.com/python/plot-data-from-csv/ 2/4

--- Página 3 ---
Plot from CSV with graph_objects
Referenceimport pandas as pd
import plotly.graph_objects  as go
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv' )
fig = go.Figure(go.Scatter(x = df['AAPL_x' ], y = df['AAPL_y' ],
                  name='Share Prices (in USD)' ))
fig.update_layout (title=dict(text='Apple Share Prices over time (2014)' ),
                   plot_bgcolor ='rgb(230, 230,230)' ,
                   showlegend =True)
fig.show()
See  for more information about Plotly's Python API!
https://plotly.com/python/getting-started (https://plotly.com/python/getting-started)Mar 2014 May 2014 Jul 2014 Sep 2014 Nov 2014708090100110120Share Prices (in USD)Apple Share Prices over time (2014)
16/07/2025, 06:16 Plot csv data in Python
https://plotly.com/python/plot-data-from-csv/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:16 Plot csv data in Python
https://plotly.com/python/plot-data-from-csv/ 4/4</content>
      </file>
      <file name="Plotly Python Graphing Library.pdf" path="pyvy_2x/Plotly Python Graphing Library.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Plotly Open Source Graphing Library for Python
Plotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box
plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.
Plotly.py is  and you can .
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
free and open source (/python/is-plotly-free)
view the source, report issues or contribute on GitHub (https://github.com/plotly/plotly.py)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Fundamentals
More Fundamentals » (/python/plotly-fundamentals)
(/python/figure-
structure/)
The Figure Data
Structure
(/python/creating-and-
updating-figures/)
Creating and Updating
Figures
(/python/renderers/)
Displaying Figures
(/python/plotly-express/)
Plotly Express
(https://dash.plotly.com/)
Analytical Apps with
Dash
Basic Charts
More Basic Charts » (/python/basic-charts/)
(/python/line-and-
scatter/)
Scatter Plots
(/python/line-charts/)
Line Charts
(/python/bar-charts/)
Bar Charts
(/python/pie-charts/)
Pie Charts
(/python/bubble-charts/)
Bubble Charts
Statistical Charts
More Statistical Charts » (/python/statistical-charts/)
(/python/error-bars/)
Error Bars
(/python/box-plots/)
Box Plots
(/python/histograms/)
Histograms
(/python/distplot/)
Distplots
(/python/2D-Histogram/)
2D Histograms
Scientific Charts
More Scientific Charts » (/python/scientific-charts/)
(/python/contour-plots/)
Contour Plots
(/python/heatmaps/)
Heatmaps
(/python/imshow/)
Imshow
(/python/ternary-plots/)
Ternary Plots
(/python/log-plot/)
Log Plots
Financial Charts
More Financial Charts » (/python/financial-charts/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:15 Plotly Python Graphing Library
https://plotly.com/python/ 1/4

--- Página 2 ---
(/python/time-series/)
Time Series and Date
Axes
(/python/candlestick-
charts/)
Candlestick Charts
(/python/waterfall-
charts/)
Waterfall Charts
(/python/funnel-charts/)
Funnel Chart
(/python/ohlc-charts/)
OHLC Charts
Maps
More Maps » (/python/maps/)
(/python/mapbox-to-
maplibre/)
MapLibre Migration
(/python/tile-county-
choropleth/)
Tile Choropleth Maps
(/python/lines-on-tile-
maps/)
Lines on Tile Maps
(/python/filled-area-tile-
maps/)
Filled Area on Tile Maps
(/python/bubble-maps/)
Bubble Maps
Artificial Intelligence and Machine Learning
More AI and ML » (/python/ai-ml/)
(/python/ml-regression/)
ML Regression
(/python/knn-
classification/)
kNN Classification
(/python/roc-and-pr-
curves/)
ROC and PR Curves
(/python/pca-
visualization/)
PCA Visualization
(https://plotly.com/building-
machine-learning-web-
apps-in-python/)
AI/ML Apps with Dash
Bioinformatics
More Bioinformatics » (/python/bio/)
(/python/volcano-plot/)
Volcano Plot
(/python/manhattan-
plot/)
Manhattan Plot
(/python/clustergram/)
Clustergram
(/python/alignment-
chart/)
Alignment Chart
3D Charts
More 3D Charts » (/python/3d-charts/)
(/python/3d-axes/)
3D Axes
(/python/3d-scatter-
plots/)
3D Scatter Plots
(/python/3d-surface-
plots/)
3D Surface Plots
(/python/3d-subplots/)
3D Subplots
(/python/3d-camera-
controls/)
3D Camera Controls
Subplots
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:15 Plotly Python Graphing Library
https://plotly.com/python/ 2/4

--- Página 3 ---
(/python/mixed-
subplots/)
Mixed Subplots
(/python/map-subplots-
and-small-multiples/)
Map Subplots
(/python/table-
subplots/)
Table and Chart
Subplots
(/python/figure-factory-
subplots/)
Figure Factory Subplots
Jupyter Widgets Interaction
(/python/figurewidget/)
Plotly FigureWidget
Overview
(/python/jupyter-lab-
tools/)
Jupyter Lab with
FigureWidget
(/python/figurewidget-
app/)
Interactive Data
Analysis with
FigureWidget ipywidgets
(/python/click-events/)
Click Events
Add Custom Controls
(/python/custom-
buttons/)
Custom Buttons
(/python/sliders/)
Sliders
(/python/dropdowns/)
Dropdown Menus
(/python/range-slider/)
Range Slider and
Selector
Animations
(/python/animations/)
Intro to Animations
Advanced
Plot CSV Data
(/python/plot-data-from-csv/)
Random Walk
(/python/random-walk/)
Peak Finding
(/python/peak-finding/)
Smoothing
(/python/smoothing/)
LaTeX
(/python/LaTeX/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:15 Plotly Python Graphing Library
https://plotly.com/python/ 3/4

--- Página 4 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:15 Plotly Python Graphing Library
https://plotly.com/python/ 4/4</content>
      </file>
      <file name="Random walk in Python.pdf" path="pyvy_2x/Random walk in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Random Walk in 1D &gt;  &gt; Random Walk
Random Walk in Python
Learn how to use Python to make a Random Walk
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/random-walk.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  can be thought of as a random process in which a token or a marker is randomly moved around some
space, that is, a space with a metric used to compute distance. It is more commonly conceptualized in one dimension ($\mathbb{Z}$), two dimensions
($\mathbb{Z}^2$) or three dimensions ($\mathbb{Z}^3$) in Cartesian space, where $\mathbb{Z}$ represents the set of integers. In the visualizations below, we will be
using  as well as a colorscale to denote the time sequence of the walk.
random walk (https://en.wikipedia.org/wiki/Random_walk)
scatter plots (https://plotly.com/python/line-and-scatter/)
The jitter in the data points along the x and y axes are meant to illuminate where the points are being drawn and what the tendency of the random walk is.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 1/6

--- Página 2 ---
Random Walk in 2Dimport plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
l = 100
steps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l) # l steps
position  = np.cumsum(steps) # integrate the position by summing steps values
y = 0.05 * np.random.randn(l)
fig = go.Figure(data=go.Scatter(
    x=position ,
    y=y,
    mode='markers' ,
    name='Random Walk in 1D' ,
    marker=dict(
        color=np.arange(l),
        size=7,
        colorscale ='Reds',
        showscale =True,
    )
))
fig.update_layout (yaxis_range =[-1, 1])
fig.show()
−4 −2 0 2 4 6 8 10−1−0.500.51
020406080
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 2/6

--- Página 3 ---
Random walk and diffusionimport plotly.graph_objects  as go
import numpy as np
l = 1000
x_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l) # l steps
y_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l) # l steps
x_position  = np.cumsum(x_steps) # integrate the position by summing steps values
y_position  = np.cumsum(y_steps) # integrate the position by summing steps values
fig = go.Figure(data=go.Scatter(
    x=x_position ,
    y=y_position ,
    mode='markers' ,
    name='Random Walk' ,
    marker=dict(
        color=np.arange(l),
        size=8,
        colorscale ='Greens' ,
        showscale =True
    )
))
fig.show()
In the two following charts we show the link between random walks and diffusion. We compute a large number N of random walks representing for examples
molecules in a small drop of chemical. While all trajectories start at 0, after some time the spatial distribution of points is a Gaussian distribution. Also, the average
distance to the origin grows as $\sqrt(t)$.−25 −20 −15 −10 −5 0 5 10 15 20−30−20−10010
0200400600800
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
import numpy as np
l = 1000
N = 10000
steps = np.random.choice([-1, 1], size=(N, l)) + 0.05 * np.random.standard_normal ((N, l)) # l steps
position  = np.cumsum(steps, axis=1) # integrate all positions by summing steps values along time axis
fig = go.Figure(data=go.Histogram (x=position [:, -1])) # positions at final time step
fig.show()
−100 −50 0 50 100050100150200250
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 4/6

--- Página 5 ---
Advanced Tipimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
l = 1000
N = 10000
t = np.arange(l)
steps = np.random.choice([-1, 1], size=(N, l)) + 0.05 * np.random.standard_normal ((N, l)) # l steps
position  = np.cumsum(steps, axis=1) # integrate the position by summing steps values
average_distance  = np.std(position , axis=0) # average distance
fig = make_subplots (1, 2)
fig.add_trace (go.Scatter(x=t, y=average_distance , name='mean distance' ), 1, 1)
fig.add_trace (go.Scatter(x=t, y=average_distance **2, name='mean squared distance' ), 1, 2)
fig.update_xaxes (title_text ='$t$')
fig.update_yaxes (title_text ='$l$', col=1)
fig.update_yaxes (title_text ='$l^2$', col=2)
fig.update_layout (showlegend =False)
fig.show()
We can formally think of a 1D random walk as a point jumping along the integer number line. Let $Z_i$ be a random variable that takes on the values +1 and -1. Let
this random variable represent the steps we take in the random walk in 1D (where +1 means right and -1 means left). Also, as with the above visualizations, let us
assume that the probability of moving left and right is just $\frac{1}{2}$. Then, consider the sum
Sn=n
∑
i=0Zi
where S_n represents the point that the random walk ends up on after n steps have been taken.
To find the expected value of $S_n$, we can compute it directly. Since each $Z_i$ is independent, we have
E(Sn)=n
∑
i=0E(Zi)
but since $Z_i$ takes on the values +1 and -1 then
E(Zi)=1 ⋅P(Zi=1)+−1 ⋅P(Zi=−1)=−=01
21
2
Therefore, we expect our random walk to hover around $0$ regardless of how many steps we take in our walk.0 200 400 600 800051015202530
0 200 400 600 80002004006008001000
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:17 Random walk in Python
https://plotly.com/python/random-walk/ 6/6</content>
      </file>
      <file name="Smoothing in Python.pdf" path="pyvy_2x/Smoothing in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Imports
Savitzky-Golay Filter &gt;  &gt; Smoothing
Smoothing in Python
Learn how to perform smoothing using various methods in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/smoothing.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The tutorial below imports , ,  and
.
NumPy (http://www.numpy.org/)
Pandas (https://pandas.pydata.org/docs/user_guide/10min.html)
SciPy (https://www.scipy.org/)
Plotly (https://plotly.com/python/getting-started/)
import plotly.graph_objects  as go
import numpy as np
import pandas as pd
import scipy
from scipy import signal
Smoothing is a technique that is used to eliminate noise from a dataset. There are many algorithms and methods to accomplish this but all have the same general
purpose of 'roughing out the edges' or 'smoothing' some data.
There is reason to smooth data if there is little to no small-scale structure in the data. The danger to this thinking is that one may skew the representation of the data
enough to change its perceived meaning, so for the sake of scientific honesty it is an imperative to at the very minimum explain one's reason's for using a smoothing
algorithm to their dataset.
In this example we use the , which fits subsequent windows of adjacent data with a
low-order polynomial.
Savitzky-Golay Filter (https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 1/5

--- Página 2 ---
import plotly.graph_objects  as go
import numpy as np
import pandas as pd
import scipy
from scipy import signal
np.random.seed(1)
x = np.linspace (0, 10, 100)
y = np.sin(x)
noise = 2 * np.random.random(len(x)) - 1 # uniformly distributed between -1 and 1
y_noise = y + noise
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x,
    y=y,
    mode='markers' ,
    marker=dict(size=2, color='black'),
    name='Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=y_noise,
    mode='markers' ,
    marker=dict(
        size=6,
        color='royalblue' ,
        symbol='circle-open'
    ),
    name='Noisy Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=signal.savgol_filter (y_noise,
                           53, # window size used for filtering
                           3), # order of fitted polynomial
    mode='markers' ,
    marker=dict(
        size=6,
        color='mediumpurple' ,
        symbol='triangle-up'
    ),
    name='Savitzky-Golay'
))
fig.show()
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 2/5

--- Página 3 ---
Triangular Moving Average
Another method for smoothing is a moving average. There are various forms of this, but the idea is to take a window of points in your dataset, compute an average of
the points, then shift the window over by one point and repeat. This will generate a bunch of points which will result in the smoothed data.
Let us look at the common Simple Moving Average first. In the 1D case we have a data set of $N$ points with y-values $y_1, y_2, ..., y_N$. Setting our window size to $n
&lt; N$, the new $i^{th}$ y-value after smoothing is computed as:
SMAi=yi+...+yi+n
n
In the Triangular Moving Average, two simple moving averages are computed on top of each other, in order to give more weight to closer (adjacent) points. This
means that our $SMA_i$ are computed then a Triangular Moving Average $TMA_i$ is computed as:
TMAi=SMAi+...+SMAi+n
n0 2 4 6 8 10−2−1.5−1−0.500.511.52Sine
Noisy Sine
Savitzky-Golay
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 3/5

--- Página 4 ---
def smoothTriangle (data, degree):
    triangle =np.concatenate ((np.arange(degree + 1), np.arange(degree)[::-1])) # up then down
    smoothed =[]
    for i in range(degree, len(data) - degree * 2):
        point=data[i:i + len(triangle )] * triangle
        smoothed .append(np.sum(point)/np.sum(triangle ))
    # Handle boundaries
    smoothed =[smoothed [0]]*int(degree + degree/2) + smoothed
    while len(smoothed ) &lt; len(data):
        smoothed .append(smoothed [-1])
    return smoothed
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x,
    y=y,
    mode='markers' ,
    marker=dict(
        size=2,
        color='rgb(0, 0, 0)' ,
    ),
    name='Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=y_noise,
    mode='markers' ,
    marker=dict(
        size=6,
        color='#5E88FC' ,
        symbol='circle-open'
    ),
    name='Noisy Sine'
))
fig.add_trace (go.Scatter(
    x=x,
    y=smoothTriangle (y_noise, 10),  # setting degree to 10
    mode='markers' ,
    marker=dict(
        size=6,
        color='#C190F0' ,
        symbol='triangle-up'
    ),
    name='Moving Triangle - Degree 10'
))
fig.show()
0 2 4 6 8 10−2−1.5−1−0.500.511.52Sine
Noisy Sine
Moving Triangle - Degree 10
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:17 Smoothing in Python
https://plotly.com/python/smoothing/ 5/5</content>
      </file>
      <file name="pyvy_2x.md" path="pyvy_2x/pyvy_2x.md" type="md">
        <content>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos de gráficos, desde básicos e estatísticos até científicos, financeiros e geoespaciais. Além disso, aborda funcionalidades avançadas como integração com Jupyter, animações, controles personalizados e a criação de aplicações web analíticas com o Dash[cite: 43].&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Fundamentos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;The Figure Data Structure [cite: 21]&lt;/item&gt;
      &lt;item&gt;Creating and Updating Figures [cite: 29]&lt;/item&gt;
      &lt;item&gt;Displaying Figures [cite: 28]&lt;/item&gt;
      &lt;item&gt;Plotly Express [cite: 41]&lt;/item&gt;
      &lt;item&gt;Analytical Apps with Dash [cite: 43]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Básicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Scatter Plots [cite: 25]&lt;/item&gt;
      &lt;item&gt;Line Charts [cite: 30]&lt;/item&gt;
      &lt;item&gt;Bar Charts [cite: 31]&lt;/item&gt;
      &lt;item&gt;Pie Charts [cite: 47]&lt;/item&gt;
      &lt;item&gt;Bubble Charts [cite: 49]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Estatísticos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Error Bars [cite: 32]&lt;/item&gt;
      &lt;item&gt;Box Plots [cite: 33]&lt;/item&gt;
      &lt;item&gt;Histograms [cite: 51]&lt;/item&gt;
      &lt;item&gt;Distplots [cite: 54]&lt;/item&gt;
      &lt;item&gt;2D Histograms [cite: 55]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Científicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Heatmaps [cite: 57]&lt;/item&gt;
      &lt;item&gt;Imshow [cite: 58]&lt;/item&gt;
      &lt;item&gt;Ternary Plots [cite: 63]&lt;/item&gt;
      &lt;item&gt;Log Plots [cite: 64]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Financeiros e de Séries Temporais&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Time Series and Date Axes [cite: 71]&lt;/item&gt;
      &lt;item&gt;Candlestick Charts [cite: 72]&lt;/item&gt;
      &lt;item&gt;Waterfall Charts [cite: 84]&lt;/item&gt;
      &lt;item&gt;Funnel Chart [cite: 81]&lt;/item&gt;
      &lt;item&gt;OHLC Charts [cite: 82]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Mapas&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;MapLibre Migration [cite: 98]&lt;/item&gt;
      &lt;item&gt;Tile Choropleth Maps [cite: 100]&lt;/item&gt;
      &lt;item&gt;Lines on Tile Maps [cite: 103]&lt;/item&gt;
      &lt;item&gt;Filled Area on Tile Maps [cite: 104]&lt;/item&gt;
      &lt;item&gt;Bubble Maps [cite: 106]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Inteligência Artificial e Machine Learning&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;ML Regression [cite: 111]&lt;/item&gt;
      &lt;item&gt;KNN Classification [cite: 113]&lt;/item&gt;
      &lt;item&gt;ROC and PR Curves [cite: 115]&lt;/item&gt;
      &lt;item&gt;PCA Visualization [cite: 117]&lt;/item&gt;
      &lt;item&gt;AI/ML Apps with Dash [cite: 119]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Bioinformática&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Volcano Plot [cite: 121]&lt;/item&gt;
      &lt;item&gt;Manhattan Plot [cite: 123]&lt;/item&gt;
      &lt;item&gt;Clustergram [cite: 124]&lt;/item&gt;
      &lt;item&gt;Alignment Chart [cite: 126]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos 3D&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;3D Axes [cite: 131]&lt;/item&gt;
      &lt;item&gt;3D Scatter Plots [cite: 133]&lt;/item&gt;
      &lt;item&gt;3D Surface Plots [cite: 135]&lt;/item&gt;
      &lt;item&gt;3D Subplots [cite: 136]&lt;/item&gt;
      &lt;item&gt;3D Camera Controls [cite: 138]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Interação com Jupyter Widgets&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Plotly FigureWidget Overview [cite: 162]&lt;/item&gt;
      &lt;item&gt;Jupyter Lab with FigureWidget [cite: 164]&lt;/item&gt;
      &lt;item&gt;Interactive Data Analysis with FigureWidget ipywidgets [cite: 166]&lt;/item&gt;
      &lt;item&gt;Click Events [cite: 167]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Controles Personalizados e Animações&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Custom Buttons [cite: 173]&lt;/item&gt;
      &lt;item&gt;Sliders [cite: 179]&lt;/item&gt;
      &lt;item&gt;Dropdown Menus [cite: 188]&lt;/item&gt;
      &lt;item&gt;Range Slider and Selector [cite: 189]&lt;/item&gt;
      &lt;item&gt;Intro to Animations [cite: 176]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;bar&lt;/type&gt;
      &lt;title&gt;Gráficos de Barras&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráficos de Linha&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;pie&lt;/type&gt;
      &lt;title&gt;Gráficos de Pizza&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Gráficos de Dispersão&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;heatmap&lt;/type&gt;
      &lt;title&gt;Mapas de Calor&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Histogramas&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;box-plot&lt;/type&gt;
      &lt;title&gt;Box Plots&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;candlestick&lt;/type&gt;
        &lt;title&gt;Gráficos de Candlestick&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;3d-surface&lt;/type&gt;
        &lt;title&gt;Gráficos de Superfície 3D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;dashboard&gt;
        &lt;title&gt;Analytical Apps with Dash&lt;/title&gt;
        &lt;metric&gt;
            &lt;label&gt;Descrição&lt;/label&gt;
            &lt;value&gt;Crie aplicações web analíticas com Dash, sem necessidade de JavaScript. [cite: 43, 206]&lt;/value&gt;
        &lt;/metric&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/" type="external"&gt;Página Principal da Biblioteca Python&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py" type="external"&gt;Repositório no GitHub [cite: 12]&lt;/link&gt;
  &lt;link url="https://dash.plotly.com/" type="external"&gt;Dash [cite: 40, 220]&lt;/link&gt;
  &lt;link url="https://plotly.com/studio/?utm.medium-graphing libraries&amp;amp;utm campaign=studio early access&amp;amp;utm content=sidebar" type="external"&gt;Plotly Studio Early Access [cite: 14]&lt;/link&gt;
  &lt;link url="https://community.plot.ly/" type="external"&gt;Suporte da Comunidade [cite: 230]&lt;/link&gt;
  &lt;link url="https://plotly.com/graphing-libraries" type="external"&gt;Documentação [cite: 2, 230]&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Plot CSV Data in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que demonstra como criar gráficos a partir de arquivos de dados CSV em Python utilizando a biblioteca Plotly em conjunto com a biblioteca Pandas. São abordados três métodos principais: o uso do Plotly Express para criação rápida de gráficos, a utilização dos Graph Objects para maior customização e a integração dos gráficos gerados em aplicações analíticas interativas com o framework Dash.&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Plot de Dados CSV&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;CSV (comma-delimited-values) é um formato muito popular para armazenar dados estruturados[cite: 10]. [cite_start]Neste tutorial, veremos como plotar belos gráficos usando dados de um CSV e a biblioteca Pandas[cite: 11]. [cite_start]Aprenderemos como importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com Plotly Express&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Primeiro, importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV no Dash&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Dash é a melhor maneira de construir aplicações analíticas em Python usando figuras Plotly[cite: 41]. [cite_start]Para exibir uma figura em uma aplicação Dash, basta passá-la para o argumento `figure` do componente `dcc.Graph`[cite: 118, 129].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      from dash import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd

      app = Dash(__name__)

      app.layout = html.Div([
          html.H4('Simple stock plot with adjustable axis'),
          html.Button("Switch Axis", n_clicks=0, id='button'),
          dcc.Graph(id="graph"),
      ])

      @app.callback(
          Output("graph", "figure"),
          Input("button", "n_clicks"))
      def display_graph(n_clicks):
          df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
          
          if n_clicks % 2 == 0:
              x, y = 'AAPL_x', 'AAPL_y'
          else:
              x, y = 'AAPL_y', 'AAPL_x'

          fig = px.line(df, x=x, y=y)
          return fig

      # app.run(debug=True)
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Apple Share Prices over time (2014)&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/plot-data-from-csv/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv" type="external"&gt;Fonte de Dados CSV (Ações da Apple 2014)&lt;/link&gt;
  &lt;link url="https://plotly.com/dash/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/plot-data-from-csv.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Random Walk in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica o conceito de 'random walk' (passeio aleatório) e demonstra como simular e visualizar exemplos em 1D e 2D utilizando Python, com as bibliotecas NumPy e Plotly. [cite: 9, 10] O conteúdo aborda a teoria, a implementação prática com blocos de código, a visualização dos resultados com gráficos de dispersão e a conexão entre passeios aleatórios e o fenômeno da difusão, ilustrada com histogramas. [cite: 15, 128] Adicionalmente, apresenta uma seção com a fundamentação matemática do valor esperado de um passeio aleatório. [cite: 205, 213]&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Random Walk (Passeio Aleatório)&lt;/title&gt;
    &lt;paragraph&gt;Um passeio aleatório (random walk) pode ser entendido como um processo aleatório no qual um marcador é movido aleatoriamente por algum espaço. [cite: 13] É mais comumente conceituado em uma dimensão ($\mathbb{Z}$), duas dimensões ($\mathbb{Z}^2$) ou três dimensões ($\mathbb{Z}^3$) no espaço Cartesiano, onde $\mathbb{Z}$ representa o conjunto dos inteiros. [cite: 14] As visualizações neste tutorial utilizam gráficos de dispersão com uma escala de cores para denotar a sequência temporal do passeio. [cite: 15]&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk em 1D&lt;/title&gt;
    &lt;paragraph&gt;A flutuação (jitter) nos pontos de dados ao longo dos eixos x e y tem como objetivo iluminar onde os pontos estão sendo desenhados e qual é a tendência do passeio aleatório. [cite: 17]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      np.random.seed(1)
      l = 100
      steps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l)
      position = np.cumsum(steps)
      y = 0.05 * np.random.randn(l)

      fig = go.Figure(data=go.Scatter(
          x = position,
          y = y,
          mode = 'markers',
          name = 'Random Walk in 1D',
          marker = dict(
              color=np.arange(l),
              size=7,
              colorscale='Reds',
              showscale=True,
          )
      ))
      fig.update_layout(yaxis_range=[-1,1])
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Random Walk em 2D&lt;/title&gt;
    &lt;paragraph&gt;O conceito é estendido para duas dimensões, onde passos são dados tanto na direção x quanto na y.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      x_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      y_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      x_position = np.cumsum(x_steps)
      y_position = np.cumsum(y_steps)

      fig = go.Figure(data=go.Scatter(
          x = x_position,
          y = y_position,
          mode = 'markers',
          name = 'Random Walk',
          marker = dict(
              color=np.arange(l),
              size=8,
              colorscale='Greens',
              showscale=True
          )
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk e Difusão&lt;/title&gt;
    &lt;paragraph&gt;Esta seção mostra a ligação entre passeios aleatórios e difusão. [cite: 128] Um grande número de passeios aleatórios é computado, representando, por exemplo, moléculas em uma pequena gota de um químico. [cite: 129] Embora todas as trajetórias comecem em 0, após algum tempo, a distribuição espacial dos pontos se torna uma distribuição Gaussiana. [cite: 130] Além disso, a distância média da origem cresce como $\sqrt{t}$. [cite: 131]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Histograma das posições finais
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      N = 10000
      steps = np.random.choice([-1,1], size=(N, l)) + 0.05*np.random.standard_normal((N, l))
      position = np.cumsum(steps, axis=1)
      
      fig = go.Figure(data=go.Histogram(x=position[:, -1]))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Dica Avançada: Fundamentação Matemática&lt;/title&gt;
    &lt;paragraph&gt;Podemos pensar formalmente em um passeio aleatório 1D como um ponto saltando ao longo da linha de números inteiros. [cite: 206] Seja $Z_i$ uma variável aleatória que assume os valores +1 e -1. [cite: 207] Considere a soma $S_{n}=\sum_{i=0}^{n}Z_{i}$, onde S_n representa o ponto final do passeio após n passos. [cite: 211, 212] Para encontrar o valor esperado de $S_n$, podemos calculá-lo diretamente. [cite: 213] Como cada $Z_i$ é independente, temos $E(S_{n})=\sum_{i=0}^{n}E(Z_{i})$. [cite: 218] Uma vez que $Z_i$ assume os valores +1 e -1 com probabilidade de $\frac{1}{2}$ cada, $E(Z_i) = 1 \cdot P(Z_i=1) + (-1) \cdot P(Z_i=-1) = \frac{1}{2} - \frac{1}{2} = 0$. [cite: 209, 214, 219, 220] Isso resulta em $E(S_n)=0$, o que significa que esperamos que o passeio aleatório paire em torno de 0, independentemente de quantos passos damos. [cite: 221]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 1D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 2D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Distribuição Espacial das Posições Finais (Difusão)&lt;/title&gt;
    &lt;/chart&gt;
     &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Distância Média e Quadrática Média vs. Tempo na Difusão&lt;/title&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/random-walk/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://en.wikipedia.org/wiki/Random_walk" type="external"&gt;Artigo da Wikipedia sobre Random Walk&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/random-walk.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Peak Finding in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que ensina como encontrar picos e vales em conjuntos de dados utilizando Python. O processo utiliza a biblioteca SciPy, especificamente a função `find_peaks`, para a lógica de detecção, a biblioteca Pandas para manipulação de dados e a Plotly para visualização. O guia demonstra como carregar dados de séries temporais, aplicar a detecção de picos básica, e subsequentemente filtrar os resultados para identificar apenas os picos mais significativos utilizando um limiar (threshold).&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução e Importação de Dados&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para começar a detectar picos, o tutorial utiliza dados sobre a produção mensal de leite. [cite: 16] [cite_start]As bibliotecas necessárias são Pandas para manipulação de dados e SciPy para a função de detecção de picos. [cite: 12]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Importação de bibliotecas e dados
      import pandas as pd
      from scipy.signal import find_peaks
      import plotly.graph_objects as go

      # Leitura dos dados de um arquivo CSV
      milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
      time_series = milk_data['Monthly milk production (pounds per cow)']

      # Plot inicial da série temporal
      fig = go.Figure(data=go.Scatter(
          y = time_series,
          mode = 'lines'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Detecção de Picos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para localizar os picos, utilizamos a função `find_peaks` da SciPy, que retorna os índices do eixo x onde os picos ocorrem. [cite: 53] [cite_start]Em seguida, esses picos detectados são plotados sobre o gráfico original para visualização. [cite: 67, 75]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos na série temporal
      indices, _ = find_peaks(time_series)

      # Cria a figura e adiciona o plot original
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))

      # Adiciona os picos detectados ao gráfico
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Filtrando Apenas os Picos Mais Altos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível ajustar um limiar (threshold) para identificar apenas os picos mais significativos. [cite: 91] [cite_start]O parâmetro `threshold` na função `find_peaks` pode ser usado para este propósito. [cite: 109]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos com um threshold
      indices, _ = find_peaks(time_series, threshold=20)

      # Plot com os picos filtrados
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal da Produção Mensal de Leite&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal com Picos Detectados&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda&lt;/label&gt;
        &lt;value&gt;Original Plot (Linha Azul), Detected Peaks (Cruzes Vermelhas)&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/peak-finding/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv" type="external"&gt;Fonte de Dados CSV (Produção de Leite)&lt;/link&gt;
  &lt;link url="https://pandas.pydata.org/docs/user_guide/10min.html" type="external"&gt;Documentação do Pandas&lt;/link&gt;
  &lt;link url="https://www.scipy.org/" type="external"&gt;Documentação do SciPy&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;LaTeX in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. [cite_start]All rights reserved. [cite: 988]&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica como adicionar e renderizar expressões matemáticas e notações complexas usando LaTeX em gráficos Plotly. Ele detalha que a funcionalidade depende da biblioteca MathJax e que as diretivas LaTeX devem ser envolvidas por cifrões ($...$). O guia fornece exemplos de código práticos para adicionar LaTeX a títulos de gráficos, rótulos de eixos e nomes de legendas, tanto com o Plotly Express quanto com os Graph Objects.&lt;/summary&gt;
  
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Tipografia LaTeX em Gráficos Plotly&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Títulos de figuras, rótulos de eixos e anotações aceitam diretivas LaTeX para renderizar fórmulas matemáticas e notações quando todo o rótulo está entre cifrões ($...$)[cite: 876]. [cite_start]Essa renderização é gerenciada pela biblioteca MathJax, que deve ser carregada no ambiente onde as figuras estão sendo exibidas[cite: 877]. [cite_start]O MathJax é incluído por padrão em ambientes do tipo Jupyter, mas pode exigir o carregamento separado em outros contextos, como através de uma tag &amp;lt;script&amp;gt;[cite: 878].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Exemplo com Plotly Express&lt;/title&gt;
    &lt;paragraph&gt;O exemplo a seguir demonstra como adicionar títulos e rótulos de eixos formatados com LaTeX a um gráfico de linha criado com Plotly Express.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px

      fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], 
                    title=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$')
      
      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Exemplo com Graph Objects e Múltiplas Traces&lt;/title&gt;
    &lt;paragraph&gt;Este exemplo usa `graph_objects` para criar um gráfico com duas 'traces' (séries de dados), onde o nome de cada uma é uma expressão LaTeX, que será renderizada na legenda do gráfico.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go

      fig = go.Figure()

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[1, 4, 9, 16],
          name=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[0.5, 2, 4.5, 8],
          name=r'$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )

      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Título e Eixos em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Título&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo X&lt;/label&gt;
        &lt;value&gt;$\sqrt{(n_\text{c}(t|T_\text{early}))}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo Y&lt;/label&gt;
        &lt;value&gt;$d, r \text{ (solar radius)}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Legendas em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda 1&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
       &lt;data&gt;
        &lt;label&gt;Legenda 2&lt;/label&gt;
        &lt;value&gt;$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  [cite_start]&lt;link url="https://plotly.com/python/LaTeX/" type="external"&gt;Página do Tutorial [cite: 900, 961, 994]&lt;/link&gt;
  [cite_start]&lt;link url="https://www.npmjs.com/package/mathjax?activeTab=versions" type="external"&gt;Biblioteca MathJax [cite: 877]&lt;/link&gt;
  [cite_start]&lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash [cite: 945]&lt;/link&gt;
&lt;/web_content&gt;

</content>
      </file>
      <file name="pyvy_2x.txt" path="pyvy_2x/pyvy_2x.txt" type="txt">
        <content>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos de gráficos, desde básicos e estatísticos até científicos, financeiros e geoespaciais. Além disso, aborda funcionalidades avançadas como integração com Jupyter, animações, controles personalizados e a criação de aplicações web analíticas com o Dash[cite: 43].&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Fundamentos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;The Figure Data Structure [cite: 21]&lt;/item&gt;
      &lt;item&gt;Creating and Updating Figures [cite: 29]&lt;/item&gt;
      &lt;item&gt;Displaying Figures [cite: 28]&lt;/item&gt;
      &lt;item&gt;Plotly Express [cite: 41]&lt;/item&gt;
      &lt;item&gt;Analytical Apps with Dash [cite: 43]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Básicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Scatter Plots [cite: 25]&lt;/item&gt;
      &lt;item&gt;Line Charts [cite: 30]&lt;/item&gt;
      &lt;item&gt;Bar Charts [cite: 31]&lt;/item&gt;
      &lt;item&gt;Pie Charts [cite: 47]&lt;/item&gt;
      &lt;item&gt;Bubble Charts [cite: 49]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Estatísticos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Error Bars [cite: 32]&lt;/item&gt;
      &lt;item&gt;Box Plots [cite: 33]&lt;/item&gt;
      &lt;item&gt;Histograms [cite: 51]&lt;/item&gt;
      &lt;item&gt;Distplots [cite: 54]&lt;/item&gt;
      &lt;item&gt;2D Histograms [cite: 55]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Científicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Heatmaps [cite: 57]&lt;/item&gt;
      &lt;item&gt;Imshow [cite: 58]&lt;/item&gt;
      &lt;item&gt;Ternary Plots [cite: 63]&lt;/item&gt;
      &lt;item&gt;Log Plots [cite: 64]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Financeiros e de Séries Temporais&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Time Series and Date Axes [cite: 71]&lt;/item&gt;
      &lt;item&gt;Candlestick Charts [cite: 72]&lt;/item&gt;
      &lt;item&gt;Waterfall Charts [cite: 84]&lt;/item&gt;
      &lt;item&gt;Funnel Chart [cite: 81]&lt;/item&gt;
      &lt;item&gt;OHLC Charts [cite: 82]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Mapas&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;MapLibre Migration [cite: 98]&lt;/item&gt;
      &lt;item&gt;Tile Choropleth Maps [cite: 100]&lt;/item&gt;
      &lt;item&gt;Lines on Tile Maps [cite: 103]&lt;/item&gt;
      &lt;item&gt;Filled Area on Tile Maps [cite: 104]&lt;/item&gt;
      &lt;item&gt;Bubble Maps [cite: 106]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Inteligência Artificial e Machine Learning&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;ML Regression [cite: 111]&lt;/item&gt;
      &lt;item&gt;KNN Classification [cite: 113]&lt;/item&gt;
      &lt;item&gt;ROC and PR Curves [cite: 115]&lt;/item&gt;
      &lt;item&gt;PCA Visualization [cite: 117]&lt;/item&gt;
      &lt;item&gt;AI/ML Apps with Dash [cite: 119]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Bioinformática&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Volcano Plot [cite: 121]&lt;/item&gt;
      &lt;item&gt;Manhattan Plot [cite: 123]&lt;/item&gt;
      &lt;item&gt;Clustergram [cite: 124]&lt;/item&gt;
      &lt;item&gt;Alignment Chart [cite: 126]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos 3D&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;3D Axes [cite: 131]&lt;/item&gt;
      &lt;item&gt;3D Scatter Plots [cite: 133]&lt;/item&gt;
      &lt;item&gt;3D Surface Plots [cite: 135]&lt;/item&gt;
      &lt;item&gt;3D Subplots [cite: 136]&lt;/item&gt;
      &lt;item&gt;3D Camera Controls [cite: 138]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Interação com Jupyter Widgets&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Plotly FigureWidget Overview [cite: 162]&lt;/item&gt;
      &lt;item&gt;Jupyter Lab with FigureWidget [cite: 164]&lt;/item&gt;
      &lt;item&gt;Interactive Data Analysis with FigureWidget ipywidgets [cite: 166]&lt;/item&gt;
      &lt;item&gt;Click Events [cite: 167]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Controles Personalizados e Animações&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Custom Buttons [cite: 173]&lt;/item&gt;
      &lt;item&gt;Sliders [cite: 179]&lt;/item&gt;
      &lt;item&gt;Dropdown Menus [cite: 188]&lt;/item&gt;
      &lt;item&gt;Range Slider and Selector [cite: 189]&lt;/item&gt;
      &lt;item&gt;Intro to Animations [cite: 176]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;bar&lt;/type&gt;
      &lt;title&gt;Gráficos de Barras&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráficos de Linha&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;pie&lt;/type&gt;
      &lt;title&gt;Gráficos de Pizza&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Gráficos de Dispersão&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;heatmap&lt;/type&gt;
      &lt;title&gt;Mapas de Calor&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Histogramas&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;box-plot&lt;/type&gt;
      &lt;title&gt;Box Plots&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;candlestick&lt;/type&gt;
        &lt;title&gt;Gráficos de Candlestick&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;3d-surface&lt;/type&gt;
        &lt;title&gt;Gráficos de Superfície 3D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;dashboard&gt;
        &lt;title&gt;Analytical Apps with Dash&lt;/title&gt;
        &lt;metric&gt;
            &lt;label&gt;Descrição&lt;/label&gt;
            &lt;value&gt;Crie aplicações web analíticas com Dash, sem necessidade de JavaScript. [cite: 43, 206]&lt;/value&gt;
        &lt;/metric&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/" type="external"&gt;Página Principal da Biblioteca Python&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py" type="external"&gt;Repositório no GitHub [cite: 12]&lt;/link&gt;
  &lt;link url="https://dash.plotly.com/" type="external"&gt;Dash [cite: 40, 220]&lt;/link&gt;
  &lt;link url="https://plotly.com/studio/?utm.medium-graphing libraries&amp;amp;utm campaign=studio early access&amp;amp;utm content=sidebar" type="external"&gt;Plotly Studio Early Access [cite: 14]&lt;/link&gt;
  &lt;link url="https://community.plot.ly/" type="external"&gt;Suporte da Comunidade [cite: 230]&lt;/link&gt;
  &lt;link url="https://plotly.com/graphing-libraries" type="external"&gt;Documentação [cite: 2, 230]&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Plot CSV Data in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que demonstra como criar gráficos a partir de arquivos de dados CSV em Python utilizando a biblioteca Plotly em conjunto com a biblioteca Pandas. São abordados três métodos principais: o uso do Plotly Express para criação rápida de gráficos, a utilização dos Graph Objects para maior customização e a integração dos gráficos gerados em aplicações analíticas interativas com o framework Dash.&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Plot de Dados CSV&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;CSV (comma-delimited-values) é um formato muito popular para armazenar dados estruturados[cite: 10]. [cite_start]Neste tutorial, veremos como plotar belos gráficos usando dados de um CSV e a biblioteca Pandas[cite: 11]. [cite_start]Aprenderemos como importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com Plotly Express&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Primeiro, importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV no Dash&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Dash é a melhor maneira de construir aplicações analíticas em Python usando figuras Plotly[cite: 41]. [cite_start]Para exibir uma figura em uma aplicação Dash, basta passá-la para o argumento `figure` do componente `dcc.Graph`[cite: 118, 129].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      from dash import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd

      app = Dash(__name__)

      app.layout = html.Div([
          html.H4('Simple stock plot with adjustable axis'),
          html.Button("Switch Axis", n_clicks=0, id='button'),
          dcc.Graph(id="graph"),
      ])

      @app.callback(
          Output("graph", "figure"),
          Input("button", "n_clicks"))
      def display_graph(n_clicks):
          df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
          
          if n_clicks % 2 == 0:
              x, y = 'AAPL_x', 'AAPL_y'
          else:
              x, y = 'AAPL_y', 'AAPL_x'

          fig = px.line(df, x=x, y=y)
          return fig

      # app.run(debug=True)
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Apple Share Prices over time (2014)&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/plot-data-from-csv/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv" type="external"&gt;Fonte de Dados CSV (Ações da Apple 2014)&lt;/link&gt;
  &lt;link url="https://plotly.com/dash/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/plot-data-from-csv.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Random Walk in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica o conceito de 'random walk' (passeio aleatório) e demonstra como simular e visualizar exemplos em 1D e 2D utilizando Python, com as bibliotecas NumPy e Plotly. [cite: 9, 10] O conteúdo aborda a teoria, a implementação prática com blocos de código, a visualização dos resultados com gráficos de dispersão e a conexão entre passeios aleatórios e o fenômeno da difusão, ilustrada com histogramas. [cite: 15, 128] Adicionalmente, apresenta uma seção com a fundamentação matemática do valor esperado de um passeio aleatório. [cite: 205, 213]&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Random Walk (Passeio Aleatório)&lt;/title&gt;
    &lt;paragraph&gt;Um passeio aleatório (random walk) pode ser entendido como um processo aleatório no qual um marcador é movido aleatoriamente por algum espaço. [cite: 13] É mais comumente conceituado em uma dimensão ($\mathbb{Z}$), duas dimensões ($\mathbb{Z}^2$) ou três dimensões ($\mathbb{Z}^3$) no espaço Cartesiano, onde $\mathbb{Z}$ representa o conjunto dos inteiros. [cite: 14] As visualizações neste tutorial utilizam gráficos de dispersão com uma escala de cores para denotar a sequência temporal do passeio. [cite: 15]&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk em 1D&lt;/title&gt;
    &lt;paragraph&gt;A flutuação (jitter) nos pontos de dados ao longo dos eixos x e y tem como objetivo iluminar onde os pontos estão sendo desenhados e qual é a tendência do passeio aleatório. [cite: 17]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      np.random.seed(1)
      l = 100
      steps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l)
      position = np.cumsum(steps)
      y = 0.05 * np.random.randn(l)

      fig = go.Figure(data=go.Scatter(
          x = position,
          y = y,
          mode = 'markers',
          name = 'Random Walk in 1D',
          marker = dict(
              color=np.arange(l),
              size=7,
              colorscale='Reds',
              showscale=True,
          )
      ))
      fig.update_layout(yaxis_range=[-1,1])
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Random Walk em 2D&lt;/title&gt;
    &lt;paragraph&gt;O conceito é estendido para duas dimensões, onde passos são dados tanto na direção x quanto na y.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      x_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      y_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      x_position = np.cumsum(x_steps)
      y_position = np.cumsum(y_steps)

      fig = go.Figure(data=go.Scatter(
          x = x_position,
          y = y_position,
          mode = 'markers',
          name = 'Random Walk',
          marker = dict(
              color=np.arange(l),
              size=8,
              colorscale='Greens',
              showscale=True
          )
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk e Difusão&lt;/title&gt;
    &lt;paragraph&gt;Esta seção mostra a ligação entre passeios aleatórios e difusão. [cite: 128] Um grande número de passeios aleatórios é computado, representando, por exemplo, moléculas em uma pequena gota de um químico. [cite: 129] Embora todas as trajetórias comecem em 0, após algum tempo, a distribuição espacial dos pontos se torna uma distribuição Gaussiana. [cite: 130] Além disso, a distância média da origem cresce como $\sqrt{t}$. [cite: 131]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Histograma das posições finais
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      N = 10000
      steps = np.random.choice([-1,1], size=(N, l)) + 0.05*np.random.standard_normal((N, l))
      position = np.cumsum(steps, axis=1)
      
      fig = go.Figure(data=go.Histogram(x=position[:, -1]))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Dica Avançada: Fundamentação Matemática&lt;/title&gt;
    &lt;paragraph&gt;Podemos pensar formalmente em um passeio aleatório 1D como um ponto saltando ao longo da linha de números inteiros. [cite: 206] Seja $Z_i$ uma variável aleatória que assume os valores +1 e -1. [cite: 207] Considere a soma $S_{n}=\sum_{i=0}^{n}Z_{i}$, onde S_n representa o ponto final do passeio após n passos. [cite: 211, 212] Para encontrar o valor esperado de $S_n$, podemos calculá-lo diretamente. [cite: 213] Como cada $Z_i$ é independente, temos $E(S_{n})=\sum_{i=0}^{n}E(Z_{i})$. [cite: 218] Uma vez que $Z_i$ assume os valores +1 e -1 com probabilidade de $\frac{1}{2}$ cada, $E(Z_i) = 1 \cdot P(Z_i=1) + (-1) \cdot P(Z_i=-1) = \frac{1}{2} - \frac{1}{2} = 0$. [cite: 209, 214, 219, 220] Isso resulta em $E(S_n)=0$, o que significa que esperamos que o passeio aleatório paire em torno de 0, independentemente de quantos passos damos. [cite: 221]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 1D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 2D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Distribuição Espacial das Posições Finais (Difusão)&lt;/title&gt;
    &lt;/chart&gt;
     &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Distância Média e Quadrática Média vs. Tempo na Difusão&lt;/title&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/random-walk/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://en.wikipedia.org/wiki/Random_walk" type="external"&gt;Artigo da Wikipedia sobre Random Walk&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/random-walk.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Peak Finding in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que ensina como encontrar picos e vales em conjuntos de dados utilizando Python. O processo utiliza a biblioteca SciPy, especificamente a função `find_peaks`, para a lógica de detecção, a biblioteca Pandas para manipulação de dados e a Plotly para visualização. O guia demonstra como carregar dados de séries temporais, aplicar a detecção de picos básica, e subsequentemente filtrar os resultados para identificar apenas os picos mais significativos utilizando um limiar (threshold).&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução e Importação de Dados&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para começar a detectar picos, o tutorial utiliza dados sobre a produção mensal de leite. [cite: 16] [cite_start]As bibliotecas necessárias são Pandas para manipulação de dados e SciPy para a função de detecção de picos. [cite: 12]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Importação de bibliotecas e dados
      import pandas as pd
      from scipy.signal import find_peaks
      import plotly.graph_objects as go

      # Leitura dos dados de um arquivo CSV
      milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
      time_series = milk_data['Monthly milk production (pounds per cow)']

      # Plot inicial da série temporal
      fig = go.Figure(data=go.Scatter(
          y = time_series,
          mode = 'lines'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Detecção de Picos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para localizar os picos, utilizamos a função `find_peaks` da SciPy, que retorna os índices do eixo x onde os picos ocorrem. [cite: 53] [cite_start]Em seguida, esses picos detectados são plotados sobre o gráfico original para visualização. [cite: 67, 75]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos na série temporal
      indices, _ = find_peaks(time_series)

      # Cria a figura e adiciona o plot original
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))

      # Adiciona os picos detectados ao gráfico
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Filtrando Apenas os Picos Mais Altos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível ajustar um limiar (threshold) para identificar apenas os picos mais significativos. [cite: 91] [cite_start]O parâmetro `threshold` na função `find_peaks` pode ser usado para este propósito. [cite: 109]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos com um threshold
      indices, _ = find_peaks(time_series, threshold=20)

      # Plot com os picos filtrados
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal da Produção Mensal de Leite&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal com Picos Detectados&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda&lt;/label&gt;
        &lt;value&gt;Original Plot (Linha Azul), Detected Peaks (Cruzes Vermelhas)&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/peak-finding/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv" type="external"&gt;Fonte de Dados CSV (Produção de Leite)&lt;/link&gt;
  &lt;link url="https://pandas.pydata.org/docs/user_guide/10min.html" type="external"&gt;Documentação do Pandas&lt;/link&gt;
  &lt;link url="https://www.scipy.org/" type="external"&gt;Documentação do SciPy&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;LaTeX in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. [cite_start]All rights reserved. [cite: 988]&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica como adicionar e renderizar expressões matemáticas e notações complexas usando LaTeX em gráficos Plotly. Ele detalha que a funcionalidade depende da biblioteca MathJax e que as diretivas LaTeX devem ser envolvidas por cifrões ($...$). O guia fornece exemplos de código práticos para adicionar LaTeX a títulos de gráficos, rótulos de eixos e nomes de legendas, tanto com o Plotly Express quanto com os Graph Objects.&lt;/summary&gt;
  
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Tipografia LaTeX em Gráficos Plotly&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Títulos de figuras, rótulos de eixos e anotações aceitam diretivas LaTeX para renderizar fórmulas matemáticas e notações quando todo o rótulo está entre cifrões ($...$)[cite: 876]. [cite_start]Essa renderização é gerenciada pela biblioteca MathJax, que deve ser carregada no ambiente onde as figuras estão sendo exibidas[cite: 877]. [cite_start]O MathJax é incluído por padrão em ambientes do tipo Jupyter, mas pode exigir o carregamento separado em outros contextos, como através de uma tag &amp;lt;script&amp;gt;[cite: 878].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Exemplo com Plotly Express&lt;/title&gt;
    &lt;paragraph&gt;O exemplo a seguir demonstra como adicionar títulos e rótulos de eixos formatados com LaTeX a um gráfico de linha criado com Plotly Express.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px

      fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], 
                    title=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$')
      
      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Exemplo com Graph Objects e Múltiplas Traces&lt;/title&gt;
    &lt;paragraph&gt;Este exemplo usa `graph_objects` para criar um gráfico com duas 'traces' (séries de dados), onde o nome de cada uma é uma expressão LaTeX, que será renderizada na legenda do gráfico.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go

      fig = go.Figure()

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[1, 4, 9, 16],
          name=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[0.5, 2, 4.5, 8],
          name=r'$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )

      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Título e Eixos em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Título&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo X&lt;/label&gt;
        &lt;value&gt;$\sqrt{(n_\text{c}(t|T_\text{early}))}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo Y&lt;/label&gt;
        &lt;value&gt;$d, r \text{ (solar radius)}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Legendas em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda 1&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
       &lt;data&gt;
        &lt;label&gt;Legenda 2&lt;/label&gt;
        &lt;value&gt;$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  [cite_start]&lt;link url="https://plotly.com/python/LaTeX/" type="external"&gt;Página do Tutorial [cite: 900, 961, 994]&lt;/link&gt;
  [cite_start]&lt;link url="https://www.npmjs.com/package/mathjax?activeTab=versions" type="external"&gt;Biblioteca MathJax [cite: 877]&lt;/link&gt;
  [cite_start]&lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash [cite: 945]&lt;/link&gt;
&lt;/web_content&gt;

</content>
      </file>
      <file name="pyvy_2x_01x.txt" path="pyvy_2x/pyvy_2x_01x.txt" type="txt">
        <content />
      </file>
      <file name="pyvy_2x_02x.txt" path="pyvy_2x/pyvy_2x_02x.txt" type="txt">
        <content />
      </file>
    </category>
    <category name="pyvy_2x1" path="pyvy_2x1">
      <file name="Annotated heatmaps in Python.pdf" path="pyvy_2x1/Annotated heatmaps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Annotated Heatmaps with Plotly Express
Basic Annotated Heatmap for z-annotations &gt;  &gt;
Annotated Heatmaps
Annotated Heatmaps in Python
How to make Annotated Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/annotated-heatmap.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
New in v5.5
As of version 5.5.0 of plotly, the recommended way to  rather than the now-deprecated
create_annotated_heatmap figure factory documented below for historical reasons.
display annotated heatmaps is to use px.imshow() (/python/heatmaps/)
New in v5.5
After creating a figure with px.imshow, you can add z-annotations with .update_traces(texttemplate="%{z}").
import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 1/9

--- Página 2 ---
Deprecated Figure Factory
Simple Annotated Heatmap
Custom Text and X &amp; Y LabelsThe remaining examples show how to create Annotated Heatmaps with the deprecated create_annotated_heatmap .
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = ff.create_annotated_heatmap (z)
fig.show()
set annotation_text to a matrix with the same dimensions as z
WARNING: this legacy figure factory requires the y array to be provided in reverse order, and will map the z_text to the z values in reverse order. The use of
the px.imshow() version below is highly recommended
0.1 0.3 0.5 0.7 0.91 0.8 0.6 0.4 0.20.2 0 0.5 0.7 0.90.9 0.8 0.4 0.2 00.3 0.4 0.5 0.7 1
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 2/9

--- Página 3 ---
import plotly.figure_factory  as ff
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game Three' , 'Game Two' , 'Game One' ]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = ff.create_annotated_heatmap (z, x=x, y=y, annotation_text =z_text, colorscale ='Viridis' )
fig.show()
Here is the same figure using px.imshow()
Team A Team B Team C
Game Three  Game Two  Game One  
Win Lose WinLose Lose WinWin Win Lose
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 3/9

--- Página 4 ---
Annotated Heatmap with numpyimport plotly.express  as px
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game One' , 'Game Two' , 'Game Three' ]
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = px.imshow(z, x=x, y=y, color_continuous_scale ='Viridis' , aspect="auto")
fig.update_traces (text=z_text, texttemplate ="%{text}")
fig.update_xaxes (side="top")
fig.show()
Win Lose Win
Lose Lose Win
Win Win LoseTeam A Team B Team C
Game ThreeGame TwoGame One
0.10.20.30.40.50.60.70.80.91
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 4/9

--- Página 5 ---
import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
z = np.random.randn(20, 20)
z_text = np.around(z, decimals =2) # Only show rounded value (full value on hover)
fig = ff.create_annotated_heatmap (z, annotation_text =z_text, colorscale ='Greys',
                                  hoverinfo ='z')
# Make text size smaller
for i in range(len(fig.layout.annotations )):
    fig.layout.annotations [i].font.size = 8
fig.show()
Here is the same figure using px.imshow()
1.62-0.61-0.53-1.070.87-2.31.74-0.760.32-0.251.46-2.06-0.32-0.381.13-1.1-0.17-0.880.040.58-1.11.140.90.50.9-0.68-0.12-0.94-0.270.53-0.69-0.4-0.69-0.85-0.67-0.01-1.120.231.660.74-0.19-0.89-0.751.690.05-0.640.192.10.120.620.3-0.35-1.14-0.35-0.210.590.840.930.290.89-0.751.250.51-0.30.49-0.081.131.522.19-1.4-1.44-0.50.160.880.32-2.02-0.310.830.230.76-0.22-0.20.190.410.20.12-0.670.380.121.131.20.19-0.38-0.640.420.08-0.340.04-0.620.7-0.451.220.40.59-1.090.170.74-0.95-0.270.03-1.370.320.85-0.860.35-1.31-0.04-1.621.120.41-0.02-0.781.271.97-1.861.241.630.34-1.20.86-0.18-0.6-1.230.550.79-0.620.52-1.140.80.05-0.19-0.10.870.750.530.140.080.620.230.68-0.31-2.431.042.190.44-0.1-0.14-0.120.02-1.12-0.52-1.00.25-0.30.5-0.170.990.212.19-1.9-0.650.92.53-0.250.04-0.231.33-0.290.68-0.32-1.270.310.51.29-0.11-0.620.560.240.28-0.071.160.371.91.110.66-1.630.60.420.811.04-0.40.82-0.561.95-1.33-1.76-1.65-0.89-1.121.96-0.33-1.341.11-0.59-1.240.880.62-0.431.410.131.620.51.560.11-1.222.45-0.55-0.2-0.7-0.20.240.20.661.79-0.12-1.23-1.18-0.67-1.670.83-0.5-0.31-0.0-1.4-0.860.670.62-0.441.81-1.31-0.34-0.23-2.791.940.37-1.042.050.590.43-0.610.11-1.530.8-0.370.131.20.280.260.28-0.730.841.540.760.88-0.88-0.87-1.441.23-0.251.4-0.78-0.440.10.920.060.210.020.18-1.120.08-0.19-0.060.49-0.68-0.08-0.30.420.78-0.960.592.07-1.47-0.83-0.88-0.281.620.01-0.690.62-0.61.120.311.39-0.663.030.820.65-0.05-0.73-0.87-0.14-0.80.28-0.830.620.96-0.711.19-0.241.160.441.12-1.0-0.111.45-0.62-2.04-1.94-2.51-2.11-0.411.28-0.440.32-0.110.01-0.17-0.170.46-1.181.010.92-0.20.81-0.7-0.540.16-0.19-0.45-0.67-0.560.94-1.940.35-0.240.730.52-2.780.580.320.02-0.470.85-0.411.830.562.14-0.79-1.760.710.850.04-1.54-0.450.62-0.18-0.12-0.18-0.93-0.53-1.431.77-0.480.48-1.020.79-1.870.92-0.042.11
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 5/9

--- Página 6 ---
import plotly.express  as px
import numpy as np
np.random.seed(1)
z = np.random.randn(20, 20)
fig = px.imshow(z, text_auto =".2f", color_continuous_scale ='Greys', aspect="auto")
fig.show()
Here is a fairly contrived example showing how one can display a periodic table with custom text and hover using ff.create_annotated_heatmap() (scroll below to see
the px.imshow() equivalent).
1.62-0.61-0.53-1.070.87-2.301.74-0.760.32-0.251.46-2.06-0.32-0.381.13-1.10-0.17-0.880.040.58
-1.101.140.900.500.90-0.68-0.12-0.94-0.270.53-0.69-0.40-0.69-0.85-0.67-0.01-1.120.231.660.74
-0.19-0.89-0.751.690.05-0.640.192.100.120.620.30-0.35-1.14-0.35-0.210.590.840.930.290.89
-0.751.250.51-0.300.49-0.081.131.522.19-1.40-1.44-0.500.160.880.32-2.02-0.310.830.230.76
-0.22-0.200.190.410.200.12-0.670.380.121.131.200.19-0.38-0.640.420.08-0.340.04-0.620.70
-0.451.220.400.59-1.090.170.74-0.95-0.270.03-1.370.320.85-0.860.35-1.31-0.04-1.621.120.41
-0.02-0.781.271.97-1.861.241.630.34-1.200.86-0.18-0.60-1.230.550.79-0.620.52-1.140.800.05
-0.19-0.100.870.750.530.140.080.620.230.68-0.31-2.431.042.190.44-0.10-0.14-0.120.02-1.12
-0.52-1.000.25-0.300.50-0.170.990.212.19-1.90-0.650.902.53-0.250.04-0.231.33-0.290.68-0.32
-1.270.310.501.29-0.11-0.620.560.240.28-0.071.160.371.901.110.66-1.630.600.420.811.04
-0.400.82-0.561.95-1.33-1.76-1.65-0.89-1.121.96-0.33-1.341.11-0.59-1.240.880.62-0.431.410.13
1.620.501.560.11-1.222.45-0.55-0.20-0.70-0.200.240.200.661.79-0.12-1.23-1.18-0.67-1.670.83
-0.50-0.310.00-1.40-0.860.670.62-0.441.81-1.31-0.34-0.23-2.791.940.37-1.042.050.590.43-0.61
0.11-1.530.80-0.370.131.200.280.260.28-0.730.841.540.760.88-0.88-0.87-1.441.23-0.251.40
-0.78-0.440.100.920.060.210.020.18-1.120.08-0.19-0.060.49-0.68-0.08-0.300.420.78-0.960.59
2.07-1.47-0.83-0.88-0.281.620.01-0.690.62-0.601.120.311.39-0.663.030.820.65-0.05-0.73-0.87
-0.14-0.800.28-0.830.620.96-0.711.19-0.241.160.441.12-1.00-0.111.45-0.62-2.04-1.94-2.51-2.11
-0.411.28-0.440.32-0.110.01-0.17-0.170.46-1.181.010.92-0.200.81-0.70-0.540.16-0.19-0.45-0.67
-0.560.94-1.940.35-0.240.730.52-2.780.580.320.02-0.470.85-0.411.830.562.14-0.79-1.760.71
0.850.04-1.54-0.450.62-0.18-0.12-0.18-0.93-0.53-1.431.77-0.480.48-1.020.79-1.870.92-0.042.11
0 5 10 15151050
−2−10123
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 6/9

--- Página 7 ---
# Periodic Table Data
symbol = [['H', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'He'],
         ['Li', 'Be', '', '', '', '', '', '', '', '', '', '', 'B', 'C', 'N', 'O', 'F', 'Ne'],
         ['Na', 'Mg', '', '', '', '', '', '', '', '', '', '', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar'],
         ['K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr'],
         ['Rb ', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe' ],
         ['Cs', 'Ba', '', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn' ],
         ['Fr', 'Ra', '', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Uut', 'Fl', 'Uup', 'Lv', 'Uus', 'Uuo'],
         ['', '', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', ''],
         ['', '', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', '' ],
         ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
         ['', 'Alkali Metal' , '', '', 'Transition Metal' , '', '', 'Actinide' , '', '', 'Semimetal' , '', '', 'Halogen' , '', '', '', ''],
         ['', 'Alkaline Metal' , '', '', 'Lanthanide' , '', '', 'Basic Metal' , '', '', 'Nonmetal' , '', '', 'Noble Gas' , '', '', '', '']]
element = [['Hydrogen' , '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Helium' ],
           ['Lithium' , 'Beryllium' , '', '', '', '', '', '', '', '', '', '', 'Boron', 'Carbon' , 'Nitrogen' , 'Oxygen' , 'Fluorine' , 'Neon'],
           ['Sodium' , 'Magnesium' , '', '', '', '', '', '', '', '', '', '', 'Aluminium' , 'Silicon' , 'Phosphorus' , 'Sulfur' , 'Chlorine' , 'Argon'],
           ['Potassium' , 'Calcium' , 'Scandium' , 'Titanium' , 'Vanadium' , 'Chromium' ,  'Manganese' , 'Iron', 'Cobalt' , 'Nickel' , 'Copper' , 'Zinc', 'Ga
llium', 'Germanium' , 'Arsenic' , 'Selenium' , 'Bromine' , 'Krypton' ],
           ['Rubidium' , 'Strontium' , 'Yttrium' , 'Zirconium' , 'Niobium' , 'Molybdenum' , 'Technetium' , 'Ruthenium' , 'Rhodium' , 'Palladium' , 'Silver' , 
'Cadmium' , 'Indium' , 'Tin', 'Antimony' , 'Tellurium' , 'Iodine' , 'Xenon'],
           ['Cesium' , 'Barium' , '',  'Hafnium' , 'Tantalum' , 'Tungsten' , 'Rhenium' , 'Osmium' , 'Iridium' , 'Platinum' , 'Gold', 'Mercury' , 'Thallium' , 
'Lead', 'Bismuth' , 'Polonium' , 'Astatine' , 'Radon'],
           ['Francium' , 'Radium' , '', 'Rutherfordium' ,'Dubnium' ,'Seaborgium' ,'Bohrium' ,'Hassium' ,'Meitnerium' ,'Darmstadtium' ,'Roentgenium' ,'Coperni
cium','Ununtrium' ,'Ununquadium' ,'Ununpentium' ,'Ununhexium' ,'Ununseptium' ,'Ununoctium' ],
           ['', '',  'Lanthanum' , 'Cerium' , 'Praseodymium' , 'Neodymium' , 'Promethium' , 'Samarium' , 'Europium' , 'Gadolinium' , 'Terbium' , 'Dysprosiu
m', 'Holmium' , 'Erbium' , 'Thulium' , 'Ytterbium' , 'Lutetium' , ''],
           ['', '', 'Actinium' , 'Thorium' , 'Protactinium' , 'Uranium' , 'Neptunium' , 'Plutonium' , 'Americium' , 'Curium' , 'Berkelium' , 'Californium' , 
'Einsteinium' ,'Fermium'  ,'Mendelevium' , 'Nobelium' , 'Lawrencium' , '' ],
           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']]
atomic_mass  = [[ 1.00794, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  4.002602 ],
     [ 6.941, 9.012182 , .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  10.811, 12.0107, 14.0067, 15.9994, 18.9984032 , 20.1797],
     [ 22.98976928 , 24.3050, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  26.9815386 , 28.0855, 30.973762 , 32.065, 35.453, 39.948],
     [ 39.0983, 40.078, 44.955912 , 47.867, 50.9415, 51.9961, 54.938045 , 55.845, 58.933195 , 58.6934, 63.546, 65.38, 69.723, 72.64, 74.92160 , 78.96, 
79.904, 83.798],
     [ 85.4678, 87.62, 88.90585 , 91.224, 92.90638 , 95.96, 98, 101.07, 102.90550 , 106.42, 107.8682 , 112.411, 114.818, 118.710, 121.760, 127.60, 126.
90447, 131.293],
     [ 132.9054519 , 137.327, .0, 178.49, 180.94788 , 183.84, 186.207, 190.23, 192.217, 195.084, 196.966569 , 200.59, 204.3833 , 207.2, 208.98040 , 209, 
210, 222],
     [223, 226, .0, 267, 268, 271, 272, 270, 276, 281, 280, 285, 284, 289, 288, 293, 'unknown' , 294],
     [.0, .0, 138.90547 , 140.116, 140.90765 , 144.242, 145, 150.36, 151.964, 157.25, 158.92535 , 162.500, 164.93032 , 167.259, 168.93421 , 173.054, 17
4.9668, .0],
     [.0, .0, 227, 232.03806 , 231.03588 , 238.02891 , 237, 244, 243, 247, 247, 251, 252, 257, 258, 259, 262, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0]]
color = [[.8, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, 1.],
     [.1, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .7, .8, .8, .8, .9, 1.],
     [.1, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .6, .7, .8, .8, .9, 1],
     [.1, .2, .3, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .7, .8, .8, .9, 1.],
     [.1, .2, .3, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .7, .7, .9, 1.],
     [.1, .2, .4, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .6, .7, .9, 1.],
     [.1, .2, .5, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .6, .6, .9, 1.],
     [.0, .0, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .0],
     [.0, .0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],
     [.1, .1, .1, .3, .3, .3, .5, .5, .5, .7, .7, .7, .9, .9, .9, .0, .0, .0],
     [.2, .2, .2, .4, .4, .4, .6, .6, .6, .8, .8, .8, 1., 1., 1., .0, .0, .0]]
# Set Colorscale
colorscale =[[0.0, 'rgb(255,255,255)' ], [.2, 'rgb(255, 255, 153)' ],
            [.4, 'rgb(153, 255, 204)' ], [.6, 'rgb(179, 217, 255)' ],
            [.8, 'rgb(240, 179, 255)' ],[1.0, 'rgb(255, 77, 148)' ]]
# Display element name and atomic mass on hover
hover=[]
for x in range(len(symbol)):
    hover.append([i + '&lt;br&gt;' + 'Atomic Mass: '  + str(j) if i else ''
                      for i, j in zip(element[x], atomic_mass [x])])
import plotly.figure_factory  as ff
# Make Annotated Heatmap
fig = ff.create_annotated_heatmap (color[::-1], annotation_text =symbol[::-1], text=hover[::-1],
                                 colorscale =colorscale , font_colors =['black'], hoverinfo ='text')
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 7/9

--- Página 8 ---
fig.update_layout (
     title_text ='Periodic Table' ,
     margin=dict(l=10, r=10, t=10, b=10, pad=10),
     xaxis=dict(zeroline =False, showgrid =False),
     yaxis=dict(zeroline =False, showgrid =False, scaleanchor ="x"),
)
fig.show()
Here is the same output using px.imshow() with much less array manipulation:
import plotly.express  as px
import numpy as np
fig = px.imshow(color, color_continuous_scale =colorscale , aspect="auto",
               title='Periodic Table' )
fig.update_traces (
    text=symbol, texttemplate ="%{text}", textfont_size =12,
    customdata =np.moveaxis ([element, atomic_mass ], 0,-1),
    hovertemplate ="%{customdata[0]} &lt;br&gt;Atomic Mass: % {customdata[1]:.2f} &lt;extra&gt;&lt;/extra&gt;"
)
fig.update_xaxes (visible=False)
fig.update_yaxes (visible=False)
fig.update_coloraxes (showscale =False)
fig.show()
Periodic Table
Alkaline Metal Lanthanide Basic Metal Nonmetal Noble GasAlkali Metal Transition Metal Actinide Semimetal HalogenAcThPaUNpPuAmCmBkCfEsFmMdNoLrLaCePrNdPmSmEuGdTbDyHoErTmYbLuFrRa RfDbSgBhHsMtDsRgCnUutFlUupLvUusUuoCsBa HfTaWReOsIrPtAuHgTlPbBiPoAtRnRb SrYZrNbMoTcRuRhPdAgCdInSnSbTeIXeKCaScTiVCrMnFeCoNiCuZnGaGeAsSeBrKrNaMg AlSiPSClArLiBe BCNOFNeH He
H He
LiBe BCNOFNe
NaMg AlSiPSClAr
KCaScTiVCrMnFeCoNiCuZnGaGeAsSeBrKr
Rb SrYZrNbMoTcRuRhPdAgCdInSnSbTeIXe
CsBa HfTaWReOsIrPtAuHgTlPbBiPoAtRn
FrRa RfDbSgBhHsMtDsRgCnUutFlUupLvUusUuo
LaCePrNdPmSmEuGdTbDyHoErTmYbLu
AcThPaUNpPuAmCmBkCfEsFmMdNoLr
Alkali Metal Transition Metal Actinide Semimetal Halogen
Alkaline Metal Lanthanide Basic Metal Nonmetal Noble GasPeriodic Table
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 8/9

--- Página 9 ---
Reference
What About Dash?For more info on Plotly heatmaps, see: .
For more info on using colorscales with Plotly see: 
For more info on ff.create_annotated_heatmap(), see the 
https://plotly.com/python/reference/heatmap/ (https://plotly.com/python/reference/heatmap/)
https://plotly.com/python/heatmap-and-contour-colorscales/ (https://plotly.com/python/heatmap-and-contour-
colorscales/)
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_annotated_heatmap.html#plotly.figure_factory.create_annotated_heatmap)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
otations16/07/2025, 06:00 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 9/9</content>
      </file>
      <file name="Axes in Python.pdf" path="pyvy_2x1/Axes in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) The axis object is 
. The axis object is 
. The axis object is 
. The axis object is 
. The axis object is 
. The axis object is .
2-D Cartesian Axis Types and Auto-Detection
'linear' as described in this page
'log' (see the )
'date' (see the )
'category' (see the )
'multicategory' (see the )
First check for multicategory, then date, then category, else default to linear (log is never automatically selected)
multicategory is just a shape test: is the array nested?
date and category: require more than twice as many distinct date or category strings as distinct numbers in order to choose that axis type.
Both of these test an evenly-spaced sample of at most 1000 values
Forcing an axis to be categorical &gt;  &gt;
Axes
Axes in Python
How to adjust axes properties in Python - axes titles, styling and coloring axes and grid lines, ticks, tick labels and more.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/axes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This tutorial explain how to set the properties of , namely
 and .
2-dimensional Cartesian axes (/python/figure-structure/#2d-cartesian-trace-types-and-subplots)
go.layout.XAxis (/python/reference/layout/xaxis/)
go.layout.YAxis (/python/reference/layout/xaxis/)
Other kinds of subplots and axes are described in other tutorials:
3D axes (/python/3d-axes)
go.layout.Scene (/python/reference/layout/scene/)
Polar axes (/python/polar-chart/)
go.layout.Polar (/python/reference/layout/polar/)
Ternary axes (/python/ternary-plots)
go.layout.Ternary (/python/reference/layout/ternary/)
Geo axes (/python/map-configuration/)
go.layout.Geo (/python/reference/layout/geo/)
Map axes (/python/tile-map-layers/)
go.layout.Map (/python/reference/layout/map/)
Color axes (/python/colorscales/)
go.layout.Coloraxis (/python/reference/layout/coloraxis/)
See also the tutorials on ,  and .
facet plots (/python/facet-plots/)
subplots (/python/subplots)
multiple axes (/python/multiple-axes/)
The different types of Cartesian axes are configured via the xaxis.type or yaxis.type attribute, which can take on the following values:
log plot tutorial (/python/log-plot/)
tutorial on timeseries (/python/time-series/)
categorical axes tutorial (/python/categorical-axes/)
categorical axes tutorial (/python/categorical-axes/)
The axis type is auto-detected by looking at data from the first  linked to this axis:
trace (/python/figure-structure/)
It is possible to force the axis type by setting explicitly xaxis_type. In the example below the automatic X axis type would be linear (because there are not more than
twice as many unique strings as unique numbers) but we force it to be category.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 1/43

--- Página 2 ---
General Axis properties
title of the axis
tick values (locations of tick marks) and tick labels. Tick labels and grid lines are placed at tick values.
lines: grid lines (passing through tick values), axis lines, zero lines
range of the axis
domain of the axis
Set and Style Axes Title Labels
Set axis title text with Plotly Expressimport plotly.express  as px
fig = px.bar(x=["a", "a", "b", 3], y = [1,2,3,4])
fig.update_xaxes (type='category' )
fig.show()
The different groups of Cartesian axes properties are
The examples on this page apply to axes of any type, but extra attributes are available for  and 
.
axes of type category (/python/categorical-axes/)
axes of type date
(/python/time-series/)
Axis titles are automatically set to the column names when .
using Plotly Express with a data frame as input (/python/px-arguments/)a b 300.511.522.533.54
xy
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 2/43

--- Página 3 ---
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex")
fig.show()
Axis titles (and ) can also be overridden using the labels argument of Plotly Express functions:
legend titles (/python/legend/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex",
    labels=dict(total_bill ="Total Bill ($)" , tip="Tip ($)" , sex="Payer Gender" )
)
fig.show()
The PX labels argument can also be used without a data frame argument:10 20 30 40 50246810sex
Female
Male
total_billtip
10 20 30 40 50246810Payer Gender
Female
Male
Total Bill ($)Tip ($)
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 3/43

--- Página 4 ---
Rotating tick labels in Dashimport plotly.express  as px
fig = px.bar(df, x=["Apples" , "Oranges" ], y=[10,20], color=["Here", "There"],
    labels=dict(x="Fruit", y="Amount" , color="Place")
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)Apples Oranges05101520Place
Here
There
FruitAmount
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 4/43

--- Página 5 ---
Moving Tick Labels Inside the PlotSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
The ticklabelposition attribute moves tick labels inside the plotting area, and modifies the auto-range behaviour to accommodate the labels.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive Plotly Express axes'),
    html.Button("Rotate labels", n_clicks=0,
                id='button'),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("button", "n_clicks"))
def rotate_figure(n_clicks):
    df = px.data.tips() # replace with your own data source
    fig = px.histogram(df, x="sex", height=500)
    fig.update_xaxes(tickangle=n_clicks*45)
    return fig
app.run(debug=True)DOWNLOAD
Interactive Plotly Express axes
ROTATE LABELS
Female Male020406080100120140160
sexcount
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 5/43

--- Página 6 ---
Specifying Label Aliasesimport plotly.express  as px
df = px.data.stocks(indexed=True)-1
fig = px.bar(df, x=df.index, y="GOOG")
fig.update_yaxes (ticklabelposition ="inside top" , title=None)
fig.show()
New in 5.14
With labelalias, you can specify replacement text for specific tick and hover labels. In this example, the dataset has the values of "Sat" and "Sun" in the day column. By
setting labelalias=dict(Sat="Saturday", Sun="Sunday"), we swap these out for "Saturday" and "Sunday".Jan 2018Apr 2018Jul 2018 Oct 2018Jan 2019Apr 2019Jul 2019 Oct 2019Jan 2020−0.1−0.0500.050.10.150.2
date
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 6/43

--- Página 7 ---
Set axis title text with Graph Objectsimport plotly.express  as px
import pandas as pd
df = px.data.tips()
df = df[df.day.isin(['Sat', 'Sun'])].groupby(by='day', as_index =False).sum(numeric_only =True)
fig = px.bar(df, x="day", y="total_bill" )
fig.update_xaxes (labelalias =dict(Sat="Saturday" , Sun="Sunday" ))
fig.show()
Axis titles are set using the nested title.text property of the x or y axis. Here is an example of creating a new figure and using update_xaxes and update_yaxes, with
magic underscore notation, to set the axis titles.Saturday Sunday020040060080010001200140016001800
daytotal_bill
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 7/43

--- Página 8 ---
Set axis title positionimport plotly.express  as px
fig = px.line(y=[1, 0])
fig.update_xaxes (title_text ='Time')
fig.update_yaxes (title_text ='Value A' )
fig.show()
This example sets standoff attribute to cartesian axes to determine the distance between the tick labels and the axis title. Note that the axis title position is always
constrained within the margins, so the actual standoff distance is always less than the set or default value. By default 
 is True in Plotly template for the cartesian axis, so the margins will be pushed to fit the axis title at given standoff distance.
automargin (https://plotly.com/python/setting-
graph-size/#automatically-adjust-margins)0 0.2 0.4 0.6 0.8 100.20.40.60.81
TimeValue A
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 8/43

--- Página 9 ---
Set axis title fontimport plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    mode = "lines+markers" ,
    y = [4, 1, 3],
    x = ["December" , "January" , "February" ]))
fig.update_xaxes (
        tickangle  = 90,
        title_text  = "Month",
        title_font  = {"size": 20},
        title_standoff  = 25)
fig.update_yaxes (
        title_text  = "Temperature" ,
        title_standoff  = 25)
fig.show()
Here is an example that configures the font family, size, and color for the axis titles in a figure created using Plotly Express.
DecemberJanuaryFebruary11.522.533.54
MonthTemperature
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 9/43

--- Página 10 ---
Tick Placement, Color, and Style
Toggling axis tick marksimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (title_font =dict(size=18, family='Courier' , color='crimson' ))
fig.update_yaxes (title_font =dict(size=18, family='Courier' , color='crimson' ))
fig.show()
Axis tick marks are disabled by default for the default plotly theme, but they can easily be turned on by setting the ticks axis property to "inside" (to place ticks inside
plotting area) or "outside" (to place ticks outside the plotting area).
Here is an example of turning on inside x-axis and y-axis ticks in a faceted figure created using Plotly Express. Note how the col argument to update_yaxes is used to
only turn on the y-axis ticks for the left-most subplot.2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 10/43

--- Página 11 ---
Set number of tick marks (and grid lines)import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (ticks="inside" )
fig.update_yaxes (ticks="inside" , col=1)
fig.show()
The approximate number of ticks displayed for an axis can be specified using the nticks axis property.
Here is an example of updating the y-axes of a figure created using Plotly Express to display approximately 20 ticks.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (nticks=20)
fig.show()2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 11/43

--- Página 12 ---
Set start position and distance between ticks
Set exact location of axis ticksThe tick0 and dtick axis properties can be used to control to placement of axis ticks as follows: If specified, a tick will fall exactly on the location of tick0 and additional
ticks will be added in both directions at intervals of dtick.
Here is an example of updating the y axis of a figure created using Plotly Express to position the ticks at intervals of 0.5, starting at 0.25.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (tick0=0.25, dtick=0.5)
fig.show()
It is possible to configure an axis to display ticks at a set of predefined locations by setting the tickvals property to an array of positions.
Here is an example of setting the exact location of ticks on the y axes of a figure created using Plotly Express.2 3 44.254.755.255.756.256.757.257.75
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 12/43

--- Página 13 ---
Style tick marksimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (tickvals =[5.1, 5.9, 6.3, 7.5])
fig.show()
As discussed above, tick marks are disabled by default in the default plotly theme, but they can be enabled by setting the ticks axis property to "inside" (to place ticks
inside plotting area) or "outside" (to place ticks outside the plotting area).
The appearance of these tick marks can be customized by setting their length (ticklen), width (tickwidth), and color (tickcolor).
Here is an example of enabling and styling the tick marks of a faceted figure created using Plotly Express. Note how the col argument to update_yaxes is used to only
turn on and style the y-axis ticks for the left-most subplot.2 3 45.15.96.37.5
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 13/43

--- Página 14 ---
Step for tick labelsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (ticks="outside" , tickwidth =2, tickcolor ='crimson' , ticklen=10)
fig.update_yaxes (ticks="outside" , tickwidth =2, tickcolor ='crimson' , ticklen=10, col=1)
fig.show()
New in v5.6
You can set a step for tick labels with ticklabelstep. In this example, we hide labels between every 2 ticks on the y axes. Similarly, this can be used with
fig.update_xaxes for x axes: fig.update_xaxes(ticklabelstep=2).2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 14/43

--- Página 15 ---
Toggling axis labelsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (ticklabelstep =2)
fig.show()
The axis tick mark labels can be disabled by setting the showticklabels axis property to False.
Here is an example of disabling tick labels in all subplots for a faceted figure created using Plotly Express.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (showticklabels =False)
fig.update_yaxes (showticklabels =False)
fig.show()2 3 45678
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 15/43

--- Página 16 ---
Set axis label rotation and font
Auto Tick Angle OptionsThe orientation of the axis tick mark labels is configured using the tickangle axis property. The value of tickangle is the angle of rotation, in the clockwise direction, of
the labels from vertical in units of degrees. The font family, size, and color for the tick labels are stored under the tickfont axis property.
Here is an example of rotating the x-axis tick labels by 45 degrees, and customizing their font properties, in a faceted histogram figure created using Plotly Express.
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="tip", histfunc ='sum', facet_col ='smoker' )
fig.update_xaxes (tickangle =45, tickfont =dict(family='Rockwell' , color='crimson' , size=14))
fig.show()
New in 5.19
If tickangle is not explicitly set, its default value is auto, meaning if the label needs to be rotated to avoid labels overlapping, it will rotate by either 30 or 90 degrees.
Using autotickangles, you can also specify a list of angles for tickangle to use. If tickangle is auto and you provide a list of angles to autotickangles, the label angle will
be set to the first value in the list that prevents overlap.FemaleMale050100150200250300
FemaleMale
sex sexsum of tipsmoker=No smoker=Yes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 16/43

--- Página 17 ---
Enumerated Ticks with Tickvals and Ticktextimport plotly.express  as px
df = px.data.gapminder ()
df = df.loc[(df.continent =="Asia") &amp; (df.year==1992)]
fig = px.histogram (df, x=df.country, y=df.gdpPercap )
fig.update_xaxes (autotickangles =[45, 60, 90])
fig.show()
The tickvals and ticktext axis properties can be used together to display custom tick label text at custom locations along an axis. They should be set to lists of the same
length where the tickvals list contains positions along the axis, and ticktext contains the strings that should be displayed at the corresponding positions.
Here is an example.AfghanistanBahrainBangladeshCambodiaChinaHong Kong, ChinaIndiaIndonesiaIranIraqIsraelJapanJordanKorea, Dem. Rep.Korea, Rep.KuwaitLebanonMalaysiaMongoliaMyanmarNepalOmanPakistanPhilippinesSaudi ArabiaSingaporeSri LankaSyriaTaiwanThailandVietnamWest Bank and GazaYemen, Rep.05k10k15k20k25k30k35k
countrysum of gdpPercap
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 17/43

--- Página 18 ---
Adding minor ticksimport plotly.graph_objects  as go
import pandas as pd
apple_df  = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv"
)
# Convert 'Date' column to datetime format
apple_df ['Date'] = pd.to_datetime (apple_df ['Date'])
# Set 'Date' column as index
apple_df .set_index ('Date', inplace=True)
# Filter for 2016
apple_df_2016  = apple_df .loc['2016']
# Create figure and add line
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=apple_df_2016 .index,
    y=apple_df_2016 ["AAPL.High" ],
    mode="lines"
))
# Set custom x-axis labels
fig.update_xaxes (
    ticktext =["End of Q1" , "End of Q2" , "End of Q3" , "End of Q4" ],
    tickvals =["2016-04-01" , "2016-07-01" , "2016-10-01" , apple_df_2016 .index.max()],
)
# Prefix y-axis tick labels with dollar sign
fig.update_yaxes (tickprefix ="$")
# Set figure title
fig.update_layout (title_text ="Apple Stock Price" )
fig.show()
new in 5.8
You can position and style minor ticks on a Cartesian axis using the minor attribute. This takes a dict of properties to apply to minor ticks. See the 
 for full details on the accepted keys in this dict.
figure reference
(https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-minor)
In the following example, we add minor ticks to the x-axis and then to the y-axis. For the y-axis we add ticks on the inside: ticks="inside". On the x-axis we've specified
some additional properties to style the minor ticks, setting the length of the ticks with ticklen and the color with tickcolor. We've also turned on grid lines for the x-axis
minor ticks using showgrid.End of Q1 End of Q2 End of Q3 End of Q4$95$100$105$110$115$120Apple Stock Price
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 18/43

--- Página 19 ---
Adjust Tick Label Positionsimport plotly.express  as px
import pandas as pd
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex")
fig.update_xaxes (minor=dict(ticklen=6, tickcolor ="black", showgrid =True))
fig.update_yaxes (minor_ticks ="inside" )
fig.show()
New in 5.23
You can adjust tick label positions by moving them a number of pixels away from the axis using ticklabelstandoff or along the axis using ticklabelshift.
In this example, ticklabelshift=25 shifts the labels 25 pixels to the right along the x-axis. By providing a negative value, we could move the labels 25 pixels to the left,
(ticklabelshift=-25).
Here, ticklabelstandoff=15 moves the labels 15 pixels further away from the x-axis. A negative value here would move them closer to the axis.10 20 30 40 50246810sex
Female
Male
total_billtip
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 19/43

--- Página 20 ---
Use Minor Tick for Labelimport plotly.express  as px
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.line(df, x='Date', y='AAPL.High' )
fig.update_layout (
    xaxis=dict(
        ticks='outside' ,
        ticklen=10,
        ticklabelshift =25,
        ticklabelstandoff =15
    )
)
fig.show()
New in 5.23
On date or linear axes, use ticklabelindex to draw a label for a minor tick instead of a major tick.
To draw the label for the minor tick before each major tick, set ticklabelindex=-1, like in the following example.Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 20179095100105110115120125130135
DateAAPL.High
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 20/43

--- Página 21 ---
Axis lines: grid and zerolines
Toggling Axis grid linesimport plotly.express  as px
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.line(df, x='Date', y='AAPL.High' )
fig.update_layout (
    xaxis=dict(
        minor=dict(ticks='outside' ),
        ticks='outside' ,
        ticklen=10,
        ticklabelindex =-1
    )
)
fig.show()
Axis grid lines can be disabled by setting the showgrid property to False for the x and/or y axis.
Here is an example of setting showgrid to False in the graph object figure constructor.Mar 2015 Jun 2015 Sep 2015 Dec 2015Mar 2016 Jun 2016 Sep 2016 Dec 20169095100105110115120125130135
DateAAPL.High
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 21/43

--- Página 22 ---
Toggling Axis zero linesimport plotly.express  as px
fig = px.line(y=[1, 0])
fig.update_xaxes (showgrid =False)
fig.update_yaxes (showgrid =False)
fig.show()
The lines passing through zero can be disabled as well by setting the zeroline axis property to False
import plotly.express  as px
fig = px.line(y=[1, 0])
fig.update_xaxes (showgrid =False, zeroline =False)
fig.update_yaxes (showgrid =False, zeroline =False)
fig.show()0 0.2 0.4 0.6 0.8 100.20.40.60.81
xy
0 0.2 0.4 0.6 0.8 100.20.40.60.81
xy
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 22/43

--- Página 23 ---
Styling and Coloring Axes and the Zero-Line
Styling axis lines
Mirroring axis linesThe showline axis property controls the visibility of the axis line, and the linecolor and linewidth axis properties control the color and width of the axis line.
Here is an example of enabling the x and y axis lines, and customizing their width and color, for a faceted histogram created with Plotly Express.
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="tip", histfunc ='sum', facet_col ='smoker' )
fig.update_xaxes (showline =True, linewidth =2, linecolor ='black')
fig.update_yaxes (showline =True, linewidth =2, linecolor ='black')
fig.show()
Axis lines can be mirrored to the opposite side of the plotting area by setting the mirror axis property to True.
Here is an example of mirroring the x and y axis lines in a faceted histogram created using Plotly Express.Female Male050100150200250300
Female Male
sex sexsum of tipsmoker=No smoker=Yes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 23/43

--- Página 24 ---
Styling grid linesimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="tip", histfunc ='sum', facet_col ='smoker' )
fig.update_xaxes (showline =True, linewidth =2, linecolor ='black', mirror=True)
fig.update_yaxes (showline =True, linewidth =2, linecolor ='black', mirror=True)
fig.show()
The width and color of axis grid lines are controlled by the gridwidth and gridcolor axis properties.
Here is an example of customizing the grid line width and color for a faceted scatter plot created with Plotly ExpressFemale Male050100150200250300
Female Male
sex sexsum of tipsmoker=No smoker=Yes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 24/43

--- Página 25 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (showgrid =True, gridwidth =1, gridcolor ='LightPink' )
fig.update_yaxes (showgrid =True, gridwidth =1, gridcolor ='LightPink' )
fig.show()
new in 5.8
By default grid lines are solid. Set the griddash property to change this style. In this example we display the x-axis grid lines as dash and the minor grid lines as dot.
Other allowable values are longdash, dashdot, or longdashdot.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (gridcolor ='black', griddash ='dash', minor_griddash ="dot")
fig.show()2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 25/43

--- Página 26 ---
Styling zero lines
Setting the Range of Axes ManuallyThe width and color of axis zero lines are controlled by the zerolinewidth and zerolinecolor axis properties.
Here is an example of configuring the zero line width and color for a simple figure using the update_xaxes and update_yaxes graph object figure methods.
import plotly.express  as px
fig = px.line(y=[1, 0])
fig.update_xaxes (zeroline =True, zerolinewidth =2, zerolinecolor ='LightPink' )
fig.update_yaxes (zeroline =True, zerolinewidth =2, zerolinecolor ='LightPink' )
fig.show()
The visible x and y axis range can be configured manually by setting the range axis property to a list of two values, the lower and upper bound.
Here's an example of manually specifying the x and y axis range for a faceted scatter plot created with Plotly Express.0 0.2 0.4 0.6 0.8 100.20.40.60.81
xy
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 26/43

--- Página 27 ---
Exclude Inside Tick Labels from Rangeimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (range=[1.5, 4.5])
fig.update_yaxes (range=[3, 9])
fig.show()
New in 5.18
You can use insiderange instead of range on an axis if you have tick labels positioned on the inside of another axis and you don't want the range to overlap with those
labels.
In this example, we have a y axis with ticklabelposition="inside" and by setting insiderange=['2018-10-01', '2019-01-01'] on the x axis, the data point of 2018-10-01 is
displayed after the y axis labels.2 3 43456789
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 27/43

--- Página 28 ---
Setting only a Lower or Upper Bound for Rangeimport plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df, df.index, y="GOOG")
fig.update_yaxes (ticklabelposition ="inside" , title=dict(text="Price"))
fig.update_xaxes (insiderange =['2018-10-01' , '2019-01-01' ], title=dict(text="Date"))
fig.show()
New in 5.17
You can also set just a lower or upper bound manually and have autorange applied to the other bound by setting it to None. In the following example, we set a an
upper bound of 4.5 on the x axes, while specifying None for the lower bound, meaning it will use autorange. On the y axes, we set the lower bound, and use None for
the upper bound, meaning that uses autorange.Oct 14 Oct 28 Nov 11 Nov 25 Dec 9 Dec 230.90.9511.051.11.151.2
DatePrice
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 28/43

--- Página 29 ---
Setting a Maximum and Minimum Allowed Axis Valueimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (range=[None, 4.5])
fig.update_yaxes (range=[3, None])
fig.show()
New in 5.17
When setting a range manually, you can also set a maxallowed or minallowed for an axis. With this set, you won't be able to pan further than the min or max allowed.
In this example, we've set the minimum allowed on the x-axis to 1 and the maximum allowed on the y-axis to 10.2 3 4345678
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 29/43

--- Página 30 ---
Disabling Pan/Zoom on Axes (Fixed Range)import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.update_xaxes (range=[1.5, 4.5], minallowed =1)
fig.update_yaxes (range=[3, 9], maxallowed =10)
fig.show()
Pan/Zoom can be disabled for a given axis by setting fixedrange to True.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (fixedrange =True)
fig.show()1.5 2 2.5 3 3.5 4 4.53456789
sepal_widthsepal_length
2 3 44.555.566.577.58
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 30/43

--- Página 31 ---
Fixed Ratio Axes
Fixed Ratio Axes with Compressed domainThe scaleanchor and scaleratio axis properties can be used to force a fixed ratio of pixels per unit between two axes.
Here is an example of anchoring the scale of the x and y axis with a scale ratio of 1. Notice how the zoom box is constrained to prevent the distortion of the shape of
the line plot.
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],
    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]
))
fig.update_layout (
    width = 800,
    height = 500,
    title = "fixed-ratio axes"
)
fig.update_yaxes (
    scaleanchor  = "x",
    scaleratio  = 1,
  )
fig.show()
If an axis needs to be compressed (either due to its own scaleanchor and scaleratio or those of the other axis), constrain determines how that happens: by increasing
the "range" (default), or by decreasing the "domain".−1 0 1 2 3 400.511.522.53fixed-ratio axes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 31/43

--- Página 32 ---
Decreasing the domain spanned by an axisimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],
    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]
))
fig.update_layout (
    width = 800,
    height = 500,
    title = "fixed-ratio axes with compressed axes"
)
fig.update_xaxes (
    range=[-1,4],  # sets the range of xaxis
    constrain ="domain" ,  # meanwhile compresses the xaxis by decreasing its "domain"
)
fig.update_yaxes (
    scaleanchor  = "x",
    scaleratio  = 1
)
fig.show()
In the example below, the x and y axis are anchored together, and the range of the xaxis is set manually. By default, plotly extends the range of the axis (overriding
the range parameter) to fit in the figure domain. You can restrict the domain to force the axis to span only the set range, by setting constrain='domain' as below.−1 0 1 2 3 400.511.522.53fixed-ratio axes with compressed axes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 32/43

--- Página 33 ---
Reversed Axesimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],
    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]
))
fig.update_layout (
    width = 800,
    height = 500,
    title = "fixed-ratio axes"
)
fig.update_xaxes (
    scaleanchor  = "x",
    scaleratio  = 1,
)
fig.update_yaxes (
    range=(-0.5, 3.5),
    constrain ='domain'
)
fig.show()
You can tell plotly's automatic axis range calculation logic to reverse the direction of an axis by setting the autorange axis property to "reversed".
Here is an example of reversing the direction of the y axes for a faceted scatter plot created using Plotly Express.0 0.5 1 1.5 2 2.5 3−0.500.511.522.533.5fixed-ratio axes
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 33/43

--- Página 34 ---
Reversed Axes with Range ( Min/Max ) Specifiedimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (autorange ="reversed" )
fig.show()
The direction of an axis can be reversed when manually setting the range extents by specifying a list containing the upper bound followed by the lower bound (rather
that the lower followed by the upper) as the range axis property.
Here is an example of manually setting the reversed range of the y axes in a faceted scatter plot figure created using Plotly Express.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (range=[9, 3])
fig.show()2 3 487.576.565.554.5
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
2 3 49876543
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 34/43

--- Página 35 ---
New in 5.17
To use a reversed axis while specifying only a lower bound for the range, set autorange="min reversed":
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (range=[9, None], autorange ="min reversed" )
fig.show()
New in 5.17
To use a reversed axis while specifying only an upper bound for the range, set autorange="max reversed":2 3 498.587.576.565.554.5
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 35/43

--- Página 36 ---
Axis range for log axis typeimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_yaxes (range=[None, 3], autorange ="max reversed" )
fig.show()
If you are using a log type of axis and you want to set the range of the axis, you have to give the log10 value of the bounds when using fig.update_xaxes or
fig.update_layout. However, with plotly.express functions you pass directly the values of the range bounds (plotly.express then computes the appropriate values to
pass to the figure layout).
import plotly.express  as px
import numpy as np
x = np.linspace (1, 200, 30)
fig = px.scatter(x=x, y=x**3, log_x=True, log_y=True, range_x=[0.8, 250])
fig.show()2 3 4876543
2 3 4 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
8912 3456789102 34567891002110100100010k100k1M10M
xy
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 36/43

--- Página 37 ---
Setting the domain of the axisimport plotly.graph_objects  as go
import numpy as np
x = np.linspace (1, 200, 30)
fig = go.Figure(go.Scatter(x=x, y=x**3))
fig.update_xaxes (type="log", range=[np.log10(0.8), np.log10(250)])
fig.update_yaxes (type="log")
fig.show()
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],
    y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]
))
fig.update_xaxes (domain=(0.25, 0.75))
fig.update_yaxes (domain=(0.25, 0.75))
fig.show()8912 3456789102 34567891002110100100010k100k1M10M
0 1 2 30123
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 37/43

--- Página 38 ---
Synchronizing axes in subplots with matches
nonnegative, tozero, and normal RangemodeUsing facet_col from plotly.express let  and 
 each facet to the same range implicitly. However, if the subplots are created with
make_subplots, the axis needs to be updated with matches parameter to update all the subplots accordingly.
zoom (https://help.plotly.com/zoom-pan-hover-controls/#step-3-zoom-in-and-zoom-out-autoscale-the-plot)
pan
(https://help.plotly.com/zoom-pan-hover-controls/#step-6-pan-along-axes)
Zoom in one trace below, to see the other subplots zoomed to the same x-axis range. To pan all the subplots, click and drag from the center of x-axis to the side:
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
N = 20
x = np.linspace (0, 1, N)
fig = make_subplots (1, 3)
for i in range(1, 4):
    fig.add_trace (go.Scatter(x=x, y=np.random.random(N)), 1, i)
fig.update_xaxes (matches='x')
fig.show()
When you don't specify a range, autorange is used. It's also used for bounds set to None when providing a range.
The axis auto-range calculation logic can be configured using the rangemode axis parameter.
If rangemode is "normal" (the default), the range is computed based on the min and max values of the input data. If "tozero", the range will always include zero. If
"nonnegative", the range will not extend below zero, regardless of the input data.
Here is an example of configuring a faceted scatter plot created using Plotly Express to always include zero for both the x and y axes.0 0.5 10.10.20.30.40.50.60.70.8
0 0.5 10.20.40.60.81
0 0.5 100.20.40.60.8trace 0
trace 1
trace 2
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 38/43

--- Página 39 ---
Autorange Options
Specifying Minimum and Maximum Allowed Valuesimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , facet_col ="species" )
fig.update_xaxes (rangemode ="tozero" )
fig.update_yaxes (rangemode ="tozero" )
fig.show()
New in 5.17
You can further configure how autorange is applied using autorangeoptions to specify maximum or minimum values or values to include.
Using autorangeoptions.maxallowed, you can specify an exact value to use as the autorange maximum. With autorangeoptions.minallowed, you can specify an exact
value to use as the autorange minimum.0 1 2 3 4012345678
0 1 2 3 4 0 1 2 3 4
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 39/43

--- Página 40 ---
Clip Minimum and Maximumimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.update_yaxes (autorangeoptions =dict(minallowed =3))
fig.update_xaxes (autorangeoptions =dict(maxallowed =5))
fig.show()
You can also clip an axis range at a specific maximum or minimum value with autorangeoptions.clipmax and autorangeoptions.clipmin.2 2.5 3 3.5 4 4.5 5345678
sepal_widthsepal_length
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 40/43

--- Página 41 ---
Specify Values to be Includedimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.update_yaxes (autorangeoptions =dict(clipmin=5))
fig.update_xaxes (autorangeoptions =dict(clipmax=4))
fig.show()
Use autorangeoptions.include to specify a value that should always be included within the calculated autorange. In this example, we specify that for the autorange
calculated on the x-axis, 5 should be included.2 2.5 3 3.5 455.566.577.58
sepal_widthsepal_length
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 41/43

--- Página 42 ---
Reference
What About Dash?import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.update_xaxes (autorangeoptions =dict(include=5))
fig.show()
See  and 
 for more information and chart attribute options!
https://plotly.com/python/reference/layout/xaxis/ (https://plotly.com/python/reference/layout/xaxis/)
https://plotly.com/python/reference/layout/yaxis/
(https://plotly.com/python/reference/layout/yaxis/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter2 2.5 3 3.5 4 4.5 54.555.566.577.58
sepal_widthsepal_length
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 42/43

--- Página 43 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
s
lines)
ween
Ticktext
ero-Line
ge
nd for
Allowed
Range)
domain
an axis
x)16/07/2025, 06:05 Axes in Python
https://plotly.com/python/axes/ 43/43</content>
      </file>
      <file name="Built-in continuous color scales in Python.pdf" path="pyvy_2x1/Built-in continuous color scales in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Using Built-In Continuous Color Scales
Discrete Color Sequences
Named Built-In Continuous Color Scales &gt;  &gt; Built-in
Continuous Color Scales
Built-in Continuous Color Scales in Python
A reference for the built-in named continuous (sequential, diverging and cyclical) color scales in Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/builtin-colorscales.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Many Plotly Express functions accept a color_continuous_scale argument and many trace types have a colorscale attribute in their schema. Plotly comes with a large
number of built-in continuous color scales, which can be referred to in Python code when setting the above arguments, either by name in a case-insensitive string e.g.
px.scatter(color_continuous_scale="Viridis") or by reference e.g. go.Scatter(marker_colorscale=plotly.colors.sequential.Viridis). They can also be reversed by adding _r
at the end e.g. "Viridis_r" or plotly.colors.sequential.Viridis_r.
The plotly.colours module is also available under plotly.express.colors so you can refer to it as px.colors.
When using continuous color scales, you will often want to .
configure various aspects of its range and colorbar (/python/colorscales/)
Plotly also comes with some built-in  which are not intended to be used with the color_continuous_scale argument as
they are not designed for interpolation to occur between adjacent colors.
discrete color sequences (/python/discrete-color/)
You can use any of the following names as string values to set continuous_color_scale or colorscale arguments. These strings are case-insensitive and you can append
_r to them to reverse the order of the scale.
import plotly.express  as px
from textwrap  import wrap
named_colorscales  = px.colors.named_colorscales ()
print("\n".join(wrap("".join('{:&lt;12}'.format(c) for c in named_colorscales ), 96)))
Built-in color scales are stored as lists of CSS colors:aggrnyl     agsunset    blackbody   bluered     blues       blugrn      bluyl       brwnyl
bugn        bupu        burg        burgyl      cividis     darkmint    electric    emrld
gnbu        greens      greys       hot         inferno     jet         magenta     magma
mint        orrd        oranges     oryel       peach       pinkyl      plasma      plotly3
pubu        pubugn      purd        purp        purples     purpor      rainbow     rdbu
rdpu        redor       reds        sunset      sunsetdark  teal        tealgrn     turbo
viridis     ylgn        ylgnbu      ylorbr      ylorrd      algae       amp         deep
dense       gray        haline      ice         matter      solar       speed       tempo
thermal     turbid      armyrose    brbg        earth       fall        geyser      prgn
piyg        picnic      portland    puor        rdgy        rdylbu      rdylgn      spectral
tealrose    temps       tropic      balance     curl        delta       oxy         edge
hsv         icefire     phase       twilight    mrybm       mygbm
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 1/10

--- Página 2 ---
Continuous Color Scales in Dashimport plotly.express  as px
print(px.colors.sequential .Plasma)
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)['#0d0887', '#46039f', '#7201a8', '#9c179e', '#bd3786', '#d8576b', '#ed7953', '#fb9f3a', '#fdca26', '#f0f921']

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
colorscales = px.colors.named_colorscales()
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive Plotly Express color scale selection'),
    html.P("Color Scale"),
    dcc.Dropdown(
        id='dropdown',
        options=colorscales,
        value='viridis'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def change_colorscale(scale):
    df = px.data.iris() # replace with your own data source
 fi tt(DOWNLOAD
Interactive Plotly Express color scale selection
Color Scale
viridis ×
2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 2/10

--- Página 3 ---
Built-In Sequential Color scalesSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
A collection of predefined sequential colorscales is provided in the plotly.colors.sequential module. Sequential color scales are appropriate for most continuous data,
but in some cases it can be helpful to use a diverging or cyclical color scale (see below).
Here are all the built-in scales in the plotly.colors.sequential module:
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 3/10

--- Página 4 ---
import plotly.express  as px
fig = px.colors.sequential .swatches_continuous ()
fig.show()
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 4/10

--- Página 5 ---
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 5/10

--- Página 6 ---
speedmatteralgaedensedeepgrayicesolarhalinethermalturbidYlOrRdYlOrBrYlGnBuYlGnRedsRdPuRdBuPurplesPuRdPuBuGnPuBuOrangesOrRdGreysGreensGnBuBuPuBuGnBluesRainbowJetHotElectricBlueredBlackbodyTurboPlasmaMagmaInfernoCividisViridisPlotly3plotly.colors.sequential
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 6/10

--- Página 7 ---
Built-In Diverging Color scalesNote: RdBu was included in the sequential module by mistake, even though it is a diverging color scale. It is intentionally left in for backwards-compatibility reasons.
A collection of predefined diverging color scales is provided in the plotly.colors.diverging module. Diverging color scales are appropriate for continuous data that has a
natural midpoint other otherwise informative special value, such as 0 altitude, or the boiling point of a liquid. These scales are intended to be used when 
.
explicitly
setting the midpoint of the scale (/python/colorscales/#setting-the-midpoint-of-a-color-range-for-a-diverging-color-scale)
Here are all the built-in scales in the plotly.colors.diverging module:BrwnylAgsunsetSunsetdarkMagentaSunsetPurporPurpTealgrnTealBluylAggrnylEmrldDarkmintBlugrnMintPinkylPeachOryelRedorBurgylBurgtempoamp
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 7/10

--- Página 8 ---
Built-In Cyclical Color scalesimport plotly.express  as px
fig = px.colors.diverging .swatches_continuous ()
fig.show()
A collection of predefined cyclical color scales is provided in the plotly.colors.cyclical module. Cyclical color scales are appropriate for continuous data that has a
natural cyclical structure, such as temporal data (hour of day, day of week, day of year, seasons) or complex numbers or other phase or angular data.
Here are all the built-in scales in the plotly.colors.cyclical module:PortlandPicnicEarthTropicTealroseTempsGeyserFallArmyroseoxycurldeltabalanceSpectralRdYlGnRdYlBuRdGyRdBuPuOrPiYGPRGnBrBGplotly.colors.diverging
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 8/10

--- Página 9 ---
import plotly.express  as px
fig = px.colors.cyclical .swatches_cyclical ()
fig.show()
fig = px.colors.cyclical .swatches_continuous ()
fig.show()
plotly.colors.cyclical
Twilight IceFire Edge Phase
HSV mrybm mygbm
mygbmmrybmHSVPhaseEdgeIceFireTwilightplotly.colors.cyclical
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 9/10

--- Página 10 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
les
cales16/07/2025, 06:08 Built-in continuous color scales in Python
https://plotly.com/python/builtin-colorscales/ 10/10</content>
      </file>
      <file name="Changes in version 6 in Python.pdf" path="pyvy_2x1/Changes in version 6 in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; Changes
in Version 6
Changes in Version 6 in Python
Guide to changes in version 6 of Plotly.py and how to migrate from version 5
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/v6-
changes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page outlines the changes in Plotly.py version 6 and cases where you may need to update your charts or tools that you use for working with Plotly.py.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Widget
vertible
leoffset16/07/2025, 06:04 Changes in version 6 in Python
https://plotly.com/python/v6-migration/ 1/4

--- Página 2 ---
Jupyter Notebook Support
Change to anywidget for go.FigureWidget
Processing NumPy and NumPy-Convertible Arrays
Dataframe Support
Mapbox Deprecation
Removed Attributes
titlefont,titleposition, titleside, and titleoffsetVersions of Jupyter Notebook earlier than version 7 are no longer supported. To upgrade to the latest Jupyter Notebook:
pip install notebook --upgrade 
 
 now uses . Install anywidget with:
go.FigureWidget (https://plotly.com/python/figurewidget/)
anywidget (https://anywidget.dev/)
pip install anywidget
Plotly.py now takes advantage of recent changes in how Plotly.js handles typed arrays for improved performance. See the 
 for more details.
performance page
(https://plotly.com/python/performance/)
If you are using Plotly.py 6 or later with Dash Design Kit, you may need to upgrade your Dash Design Kit version. See the 
 for more details.
Dash Design Kit Compatibility
section on the performance page (/python/performance/#dash-design-kit-compatibility)
Plotly Express now uses  to natively support pandas, Polars, and PyArrow. With this change, the 
 of using Polars or PyArrow with Plotly Express is significantly improved.
Narwhals (https://narwhals-dev.github.io/narwhals/)
performance
(https://plotly.com/python/performance/)
Mapbox-based traces are deprecated and will be removed in a future version of Plotly.py. Use  traces
instead.
Maplibre-based (https://plotly.com/python/mapbox-to-maplibre/)
The following attributes have been removed in Plotly.py 6.
The layout attributes titlefont,titleposition, titleside, and titleoffset have been removed. Replace them with title.font, title.position, title.side, and title.offset.
The following example shows how to use layout.title.font:
import plotly.graph_objects  as go
fig = go.Figure(
    data=[
      go.Bar(
        x=["A", "B", "C", "D"],
        y=[10, 15, 13, 17]
        )
    ],
    layout=dict(
      title=dict(
        text="Chart Title" ,
        font=dict(
          size=40
          )
        )
      ),
    # Previously the title font could be set like this:
    # titlefont=dict(size=40)
)
fig.show()
  1
Widget
vertible
leoffset16/07/2025, 06:04 Changes in version 6 in Python
https://plotly.com/python/v6-migration/ 2/4

--- Página 3 ---
Removed Traces
heatmapgl
pointcloud
Other Removed Features
Transforms
What About Dash?The following traces have been removed.
The heatmapgl trace has been removed. Use  instead.
heatmap (/python/heatmaps/)
The pointcloud trace has been removed. Use .
scattergl (/python/reference/scattergl/)
Transforms, which were deprecated in Plotly.py v5, have been removed. You can achieve similar functionality by preprocessing the data with a dataframe library.
For example, a transform to filter the data:
dict(
    type = 'filter' ,
    target = df['year'],
    orientation  = '=',
    value = 2007
  ),
Could be rewritten using Pandas:
df_2007 = df[df['year'] == 2007]
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
Widget
vertible
leoffset16/07/2025, 06:04 Changes in version 6 in Python
https://plotly.com/python/v6-migration/ 3/4

--- Página 4 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
Widget
vertible
leoffset16/07/2025, 06:04 Changes in version 6 in Python
https://plotly.com/python/v6-migration/ 4/4</content>
      </file>
      <file name="Choropleth maps in Python.pdf" path="pyvy_2x1/Choropleth maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Base Map Configuration
Introduction: main parameters for choropleth outline maps
1. Geometry information:
A. This can either be a supplied GeoJSON file where each feature has either an id field or some identifying value in properties; or
B. one of the built-in geometries within plotly: US states and world countries (see below)
2. A list of values indexed by feature identifier.
Choropleth Map with plotly.express
GeoJSON with feature.id &gt;  &gt; Choropleth
Maps
Choropleth Maps in Python
How to make choropleth maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/choropleth-
maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a map composed of colored polygons. It is used to represent spatial variations of a quantity. This
page documents how to build outline choropleth maps, but you can also build .
Choropleth Map (https://en.wikipedia.org/wiki/Choropleth_map)
choropleth tile maps (/python/tile-county-choropleth)
Below we show how to create Choropleth Maps using either Plotly Express' px.choropleth function or the lower-level go.Choropleth graph object.
Plotly figures made with px.scatter_geo, px.line_geo or px.choropleth functions or containing go.Choropleth or go.Scattergeo
 have a go.layout.Geo object which can be used to  onto
which data is plotted.
Plotly Express (/python/plotly-express/)
graph objects (/python/graph-objects/)
control the appearance of the base map (/python/map-configuration/)
Making choropleth maps requires two main types of input:
The GeoJSON data is passed to the geojson argument, and the data is passed into the color argument of px.choropleth (z if using graph_objects), in the same order as
the IDs are passed into the location argument.
Note the geojson attribute can also be the URL to a GeoJSON file, which can speed up map rendering in certain cases.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Here we load a GeoJSON file containing the geometry information for US counties, where feature.id is a .
FIPS code (https://en.wikipedia.org/wiki/FIPS_county_code)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 1/13

--- Página 2 ---
Data indexed by id
Choropleth map using GeoJSONfrom urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
counties ["features" ][0]
Here we load unemployment data by county, also indexed by .
FIPS code (https://en.wikipedia.org/wiki/FIPS_county_code)
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
df.head()
Note In this example we set layout.geo.scope to usa to automatically configure the map to display USA-centric data in an appropriate projection. See the 
 for more information on scopes.
Geo map
configuration documentation (/python/map-configuration/){'type': 'Feature',
'properties': {'GEO_ID': '0500000US01001',
'STATE': '01',
'COUNTY': '001',
'NAME': 'Autauga',
'LSAD': 'County',
'CENSUSAREA': 594.436},
'geometry': {'type': 'Polygon',
'coordinates': [[[-86.496774, 32.344437],
[-86.717897, 32.402814],
[-86.814912, 32.340803],
[-86.890581, 32.502974],
[-86.917595, 32.664169],
[-86.71339, 32.661732],
[-86.714219, 32.705694],
[-86.413116, 32.707386],
[-86.411172, 32.409937],
[-86.496774, 32.344437]]]},
'id': '01001'}
fipsunemp
0010015.3
1010035.4
2010058.6
3010076.6
4010095.5
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 2/13

--- Página 3 ---
Indexing by GeoJSON Propertiesfrom urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.express  as px
fig = px.choropleth (df, geojson=counties , locations ='fips', color='unemp',
                           color_continuous_scale ="Viridis" ,
                           range_color =(0, 12),
                           scope="usa",
                           labels={'unemp':'unemployment rate' }
                          )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
If the GeoJSON you are using either does not have an id field or you wish to use one of the keys in the properties field, you may use the featureidkey parameter to
specify where to match the values of locations.
In the following GeoJSON object/data-file pairing, the values of properties.district match the values of the district column:
import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
print(df["district" ][2])
print(geojson["features" ][0]["properties" ])
To use them together, we set locations to district and featureidkey to "properties.district". The color is set to the number of votes by the candidate named Bergeron.
Note In this example we set layout.geo.visible to False to hide the base map and frame, and we set layout.geo.fitbounds to 'locations' to automatically zoom the map
to show just the area of interest. See the  for more information on projections and bounds.
Geo map configuration documentation (/python/map-configuration/)024681012unemployment rate
11-Sault-au-Récollet
{'district': '11-Sault-au-Récollet'}
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 3/13

--- Página 4 ---
Choropleth maps in Dashimport plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="Bergeron" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)100020003000400050006000Bergeron
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 4/13

--- Página 5 ---
Discrete ColorsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
In addition to , we can  our choropleth maps by setting color to a non-numerical
column, like the name of the winner of an election.
continuous colors (/python/colorscales/)
discretely-color (/python/discrete-color/)
Note In this example we set layout.geo.visible to False to hide the base map and frame, and we set layout.geo.fitbounds to 'locations' to automatically zoom the map
to show just the area of interest. See the  for more information on projections and bounds.
Geo map configuration documentation (/python/map-configuration/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Political candidate voting pool analysis'),
    html.P("Select a candidate:"),
    dcc.RadioItems(
        id='candidate',
        options=["Joly", "Coderre", "Bergeron"],
        value="Coderre",
        inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("candidate", "value"))
def display_choropleth(candidate):
    df = px.data.election() # replace with your own data source
    geojson = px.data.election_geojson()
 fi h lth(DOWNLOAD
Political candidate voting pool analysis
Select a candidate:
JolyCoderreBergeron
0100020003000400050006000Coderre
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 5/13

--- Página 6 ---
Using GeoPandas Data Framesimport plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="winner" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator" , hover_data =["Bergeron" , "Coderre" , "Joly"]
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
px.choropleth accepts the geometry of a  data frame as the input to geojson if the geometry contains polygons.
GeoPandas (https://geopandas.org/)winner
Joly
Coderre
Bergeron
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 6/13

--- Página 7 ---
Using Built-in Country and State Geometries
1. USA States
2. Countries as defined in the Natural Earth dataset.import plotly.express  as px
import geopandas  as gpd
df = px.data.election ()
geo_df = gpd.GeoDataFrame .from_features (
    px.data.election_geojson ()["features" ]
).merge(df, on="district" ).set_index ("district" )
fig = px.choropleth (geo_df,
                   geojson=geo_df.geometry ,
                   locations =geo_df.index,
                   color="Joly",
                   projection ="mercator" )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.show()
Plotly comes with two built-in geometries which do not require an external GeoJSON file:
Note and disclaimer: cultural (as opposed to physical) features are by definition subject to change, debate and dispute. Plotly includes data from Natural Earth "as-is"
and defers to the 
which read:
Natural Earth policy regarding disputed borders (https://www.naturalearthdata.com/downloads/50m-cultural-vectors/50m-admin-0-countries-2/)
Natural Earth Vector draws boundaries of countries according to defacto status. We show who actually controls the situation on the ground.
To use the built-in countries geometry, provide locations as .
three-letter ISO country codes (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)500100015002000250030003500Joly
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 7/13

--- Página 8 ---
Choropleth Maps with go.Choropleth
United States Choropleth Mapimport plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.choropleth (df, locations ="iso_alpha" ,
                    color="lifeExp" , # lifeExp is a column of gapminder
                    hover_name ="country" , # column to add to hover information
                    color_continuous_scale =px.colors.sequential .Plasma)
fig.show()
To use the USA States geometry, set locationmode='USA-states' and provide locations as two-letter state abbreviations:
import plotly.express  as px
fig = px.choropleth (locations =["CA", "TX", "NY"], locationmode ="USA-states" , color=[1,2,3], scope="usa")
fig.show()404550556065707580lifeExp
11.522.53color
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 8/13

--- Página 9 ---
Customize choropleth chartimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv' )
fig = go.Figure(data=go.Choropleth (
    locations =df['code'], # Spatial coordinates
    z = df['total exports' ].astype(float), # Data to be color-coded
    locationmode  = 'USA-states' , # set of locations match entries in `locations`
    colorscale  = 'Reds',
    colorbar_title  = "Millions USD" ,
))
fig.update_layout (
    title_text  = '2011 US Agriculture Exports by State' ,
    geo_scope ='usa', # limite map scope to USA
)
fig.show()
2k4k6k8k10k12k14k16kMillions USD2011 US Agriculture Exports by State
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 9/13

--- Página 10 ---
World Choropleth Mapimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv' )
for col in df.columns:
    df[col] = df[col].astype(str)
df['text'] = df['state'] + '&lt;br&gt;' + \
    'Beef ' + df['beef'] + ' Dairy '  + df['dairy'] + '&lt;br&gt;' + \
    'Fruits '  + df['total fruits' ] + ' Veggies '  + df['total veggies' ] + '&lt;br&gt;' + \
    'Wheat '  + df['wheat'] + ' Corn '  + df['corn']
fig = go.Figure(data=go.Choropleth (
    locations =df['code'],
    z=df['total exports' ].astype(float),
    locationmode ='USA-states' ,
    colorscale ='Reds',
    autocolorscale =False,
    text=df['text'], # hover text
    marker_line_color ='white', # line markers between states
    colorbar =dict(
        title=dict(
            text="Millions USD"
            )
    )
))
fig.update_layout (
    title_text ='2011 US Agriculture Exports by State&lt;br&gt;(Hover for breakdown)' ,
    geo = dict(
        scope='usa',
        projection =go.layout.geo.Projection (type = 'albers usa' ),
        showlakes =True, # lakes
        lakecolor ='rgb(255, 255, 255)' ),
)
fig.show()
2k4k6k8k10k12k14k16kMillions USD2011 US Agriculture Exports by State
(Hover for breakdown)
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 10/13

--- Página 11 ---
County Choropleth Figure Factoryimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv' )
fig = go.Figure(data=go.Choropleth (
    locations  = df['CODE'],
    z = df['GDP (BILLIONS)' ],
    text = df['COUNTRY' ],
    colorscale  = 'Blues',
    autocolorscale =False,
    reversescale =True,
    marker_line_color ='darkgray' ,
    marker_line_width =0.5,
    colorbar_tickprefix  = '$',
    colorbar_title  = 'GDP&lt;br&gt;Billions US$' ,
))
fig.update_layout (
    title_text ='2014 Global GDP' ,
    geo=dict(
        showframe =False,
        showcoastlines =False,
        projection_type ='equirectangular'
    ),
    annotations  = [dict(
        x=0.55,
        y=0.1,
        xref='paper',
        yref='paper',
        text='Source: &lt;a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html"&gt; \
            CIA World Factbook&lt;/a&gt;' ,
        showarrow  = False
    )]
)
fig.show()
Plotly also includes a .
legacy "figure factory" for creating US county-level choropleth maps (/python/county-choropleth/)$0$5k$10k$15kGDP
Billions US$2014 Global GDP
Source: 
            CIA World Factbook
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 11/13

--- Página 12 ---
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv' )
df_sample ['State FIPS Code' ] = df_sample ['State FIPS Code' ].apply(lambda x: str(x).zfill(2))
df_sample ['County FIPS Code' ] = df_sample ['County FIPS Code' ].apply(lambda x: str(x).zfill(3))
df_sample ['FIPS'] = df_sample ['State FIPS Code' ] + df_sample ['County FIPS Code' ]
colorscale  = ["#f7fbff" , "#ebf3fb" , "#deebf7" , "#d2e3f3" , "#c6dbef" , "#b3d2e9" , "#9ecae1" ,
    "#85bcdb" , "#6baed6" , "#57a0ce" , "#4292c6" , "#3082be" , "#2171b5" , "#1361a9" ,
    "#08519c" , "#0b4083" , "#08306b"
]
endpts = list(np.linspace (1, 12, len(colorscale ) - 1))
fips = df_sample ['FIPS'].tolist()
values = df_sample ['Unemployment Rate (%)' ].tolist()
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['usa'],
    binning_endpoints =endpts, colorscale =colorscale ,
    show_state_data =False,
    show_hover =True,
    asp = 2.9,
    title_text  = 'USA by Unemployment %' ,
    legend_title  = '% unemployed'
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
&gt; 12.0
11.27 - 12.0
10.53 - 11.27
9.8 - 10.53
9.07 - 9.8
8.33 - 9.07
7.6 - 8.33
6.87 - 7.6
6.13 - 6.87
5.4 - 6.13
4.67 - 5.4
3.93 - 4.67
3.2 - 3.93
2.47 - 3.2
1.73 - 2.47
1.0 - 1.73USA by Unemployment %
% unemployed
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 12/13

--- Página 13 ---
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px.(choropleth) (https://plotly.com/python-api-reference/generated/plotly.express.choropleth)
https://plotly.com/python/reference/choropleth/ (https://plotly.com/python/reference/choropleth/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ometries
th16/07/2025, 06:00 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 13/13</content>
      </file>
      <file name="Configuration in Python.pdf" path="pyvy_2x1/Configuration in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Configuration Options
Enabling Scroll Zoom &gt;  &gt;
Configuration
Configuration in Python
How to set the configuration options of figures using the Plotly Python graphing library.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/configuration-options.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The .show() method that you use to display your figures also accepts a config parameter.
You can set the configuration options for your figure by passing a dictionary to this parameter which contains the options you want to set.
If you don't set an option's value, it will be automatically be set to the default value for that option.
For the complete list of configuration options and their defaults see: 
https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js
(https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js)
This option allows users to zoom in and out of figures using the scroll wheel on their mouse and/or a two-finger scroll.
import plotly.graph_objects  as go
fig = go.Figure()
config = {'scrollZoom' : True}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
1 1.5 2 2.5 311.522.53
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 1/14

--- Página 2 ---
Turning Off Responsiveness
By default, figures you create with the plotly.py package are . Responsive figures automatically
change their height and width when the size of the window they are displayed in changes. This is true for figures which are displayed in web browsers on desktops
and mobile, Jupyter Notebooks, and other  environments.
responsive (https://en.wikipedia.org/wiki/Responsive_web_design)
rendering (https://plot.ly/python/renderers/)
Try resizing your browser window to see this behavior in effect on this page.
If you would like to disable this default behavior and force your figures to always have the same height and width regardless of the window size, set the value of the
responsive key to False in your figure's configuration dictionary.
import plotly.graph_objects  as go
fig = go.Figure()
config = {'responsive' : False}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 2/14

--- Página 3 ---
Making A Static Chart
Forcing The Modebar to Always Be Visibleimport plotly.graph_objects  as go
fig = go.Figure()
config = {'staticPlot' : True}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
When users hover over a figure generated with plotly.py, a modebar appears in the top-right of the figure. This presents users with several options for interacting
with the figure.
By default, the modebar is only visible while the user is hovering over the chart. If you would like the modebar to always be visible regardless of whether or not the
user is currently hovering over the figure, set the displayModeBar attribute in the configuration of your figure to true.1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 3/14

--- Página 4 ---
Preventing the Modebar from Appearingimport plotly.graph_objects  as go
fig = go.Figure()
config = {'displayModeBar' : True}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
When users hover over a figure generated with plotly.py, a modebar appears in the top-right of the figure. This presents users with several options for interacting with
the figure.
By default, the modebar is only visible while the user is hovering over the chart. If you would like the modebar to never be visible, then set the displayModeBar
attribute in the config of your figure to false.1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 4/14

--- Página 5 ---
import plotly.graph_objects  as go
fig = go.Figure()
config = {'displayModeBar' : False}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 5/14

--- Página 6 ---
Hiding the Plotly Logo on the Modebar
Customizing Modebar "Download Plot" Buttonimport plotly.graph_objects  as go
fig = go.Figure()
config = {'displaylogo' : False}
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config=config)
The camera icon on the modebar causes a static version of the figure to be downloaded via the user's browser. The default behaviour is to download a PNG of size
700 by 450 pixels.
This behavior can be controlled via the toImageButtonOptions configuration key.1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 6/14

--- Página 7 ---
import plotly.express  as px
config = {
  'toImageButtonOptions' : {
    'format' : 'svg', # one of png, svg, jpeg, webp
    'filename' : 'custom_image' ,
    'height' : 500,
    'width': 700,
    'scale': 1 # Multiply title/legend/axis/canvas sizes by this factor
  }
}
fig = px.bar(x=[1, 2, 3], y=[1, 3, 1])
fig.show(config=config)
Figures can be set to download at the currently-rendered size by setting height and width to None:0.5 1 1.5 2 2.5 3 3.500.511.522.53
xy
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 7/14

--- Página 8 ---
Removing Modebar Buttons
High-level: zoom, pan, select, zoomIn, zoomOut, autoScale, resetScale
2D: zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d, v1hovermode
2D Shape Drawing: drawline, drawopenpath, drawclosedpath, drawcircle, drawrect, eraseshape
3D: zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d
Cartesian: hoverClosestCartesian, hoverCompareCartesian
Geo: zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo
Other: hoverClosestGl2d, hoverClosestPie, toggleHover, resetViews, toImage, sendDataToCloud, toggleSpikelines, resetViewMapboximport plotly.express  as px
config = {
  'toImageButtonOptions' : { 'height' : None, 'width': None, }
}
fig = px.bar(x=[1, 2, 3], y=[1, 3, 1])
fig.show(config=config)
To delete buttons from the modebar, pass an array of strings containing the names of the buttons you want to remove to the modeBarButtonsToRemove attribute in
the figure's configuration dictionary. Note that different chart types have different default modebars. The following is a list of all the modebar buttons and the chart
types they are associated with:0.5 1 1.5 2 2.5 3 3.500.511.522.53
xy
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 8/14

--- Página 9 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.show(config={
    'modeBarButtonsToRemove' : ['zoom', 'pan']
})
New in v5.0
The layout.modebar.remove attribute can be used instead of the approach used above:1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 9/14

--- Página 10 ---
Add optional shape-drawing buttons to modebarimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]))
fig.update_layout (modebar_remove =['zoom', 'pan'])
fig.show()
New in v4.7
Some modebar buttons of Cartesian plots are optional and have to be added explicitly, using the modeBarButtonsToAdd config attribute. These buttons are used for
drawing or erasing shapes. See  for more details.
the tutorial on shapes and shape drawing (/python/shapes#drawing-shapes-with-a-mouse-on-cartesian-plots)1 1.5 2 2.5 311.522.53
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 10/14

--- Página 11 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x='petal_width' , y='sepal_length' , color='species' )
fig.update_layout (
    dragmode ='drawopenpath' ,
    newshape_line_color ='cyan',
    title_text ='Draw a path to separate versicolor and virginica'
)
fig.show(config={'modeBarButtonsToAdd' : ['drawline' ,
                                        'drawopenpath' ,
                                        'drawclosedpath' ,
                                        'drawcircle' ,
                                        'drawrect' ,
                                        'eraseshape'
                                       ]})
New in v5.0
The layout.modebar.add attribute can be used instead of the approach used above:0 0.5 1 1.5 2 2.54.555.566.577.58 species
setosa
versicolor
virginicaDraw a path to separate versicolor and virginica
petal_widthsepal_length
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 11/14

--- Página 12 ---
Double-Click Delayimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x='petal_width' , y='sepal_length' , color='species' )
fig.update_layout (
    dragmode ='drawopenpath' ,
    newshape_line_color ='cyan',
    title_text ='Draw a path to separate versicolor and virginica' ,
    modebar_add =['drawline' ,
        'drawopenpath' ,
        'drawclosedpath' ,
        'drawcircle' ,
        'drawrect' ,
        'eraseshape'
       ]
)
fig.show()
Sets the maximum delay between two consecutive clicks to be interpreted as a double-click in milliseconds. This is the time interval between first mousedown and
second mouseup. The default timing is 300 ms (less than half a second). This setting propagates to all on-subplot double clicks (except for geo and mapbox).0 0.5 1 1.5 2 2.54.555.566.577.58 species
setosa
versicolor
virginicaDraw a path to separate versicolor and virginica
petal_widthsepal_length
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 12/14

--- Página 13 ---
Configuring Figures in Dash Apps
Referenceimport plotly.graph_objects  as go
config = {'doubleClickDelay' : 1000}
fig = go.Figure(go.Bar(
    y=[3, 5, 3, 2],
    x=["2019-09-02" , "2019-10-10" , "2019-11-12" , "2019-12-22" ],
    texttemplate ="%{label}",
    textposition ="inside" ))
fig.update_layout (xaxis={'type': 'date'})
fig.show(config=config)
The same configuration dictionary that you pass to the config parameter of the show() method can also be passed to the 
.
config property of a dcc.Graph component
(https://dash.plotly.com/dash-core-components/graph)
See config options at 
https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js
(https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js)Sep 2, 2019Oct 10, 2019
Nov 12, 2019
Dec 22, 2019
Aug 18
2019Sep 1Sep 15Sep 29Oct 13Oct 27Nov 10Nov 24Dec 8Dec 22Jan 5
2020012345
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 13/14

--- Página 14 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
Visible
aring
bar
ot
s to16/07/2025, 06:04 Configuration in Python
https://plotly.com/python/configuration-options/ 14/14</content>
      </file>
      <file name="Continuous color scales and color bars in Python.pdf" path="pyvy_2x1/Continuous color scales and color bars in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Continuous vs Discrete Color
Continuous Color Concepts
color scales represent a mapping between the range 0 to 1 and some color domain within which colors are to be interpolated (unlike 
 which are never interpolated). Color scale defaults depend on the layout.colorscales attributes of the active 
, and can be explicitly specified using the color_continuous_scale argument for many  functions or
the colorscale argument in various graph_objects such as layout.coloraxis or marker.colorscale in go.Scatter traces or colorscale in go.Heatmap traces. For
example [(0,"blue"), (1,"red")] is a simple color scale that interpolated between blue and red via purple, which can also be implicitly represented as ["blue", "red"]
and happens to be one of the  and therefore referred to as "bluered" or plotly.colors.sequential.Bluered.
color ranges represent the minimum to maximum range of data to be mapped onto the 0 to 1 input range of the color scale. Color ranges default to the
range of the input data and can be explicitly specified using either the range_color or color_continuous_midpoint arguments for many Plotly Express functions,
or cmin/cmid/cmax or zmin/zmid/zmax for various graph_objects such as layout.coloraxis.cmin or marker.cmin in go.Scatter traces or cmin in go.Heatmap traces.
For example, if a color range of [100, 200] is used with the color scale above, then any mark with a color value of 100 or less will be blue, and 200 or more will
be red. Marks with values in between will be various shades of purple.
color bars are legend-like visible representations of the color range and color scale with optional tick labels and tick marks. Color bars can be configured with
attributes inside layout.coloraxis.colorbar or in places like marker.colorbar in go.Scatter traces or colorbar in go.Heatmap traces.
color axes connect color scales, color ranges and color bars to a trace's data. By default, any colorable attribute in a trace is attached to its own local color
axis, but color axes may also be shared across attributes and traces by setting e.g. marker.coloraxis in go.Scatter traces or coloraxis in go.Heatmap traces. Local
color axis attributes are configured within traces e.g. marker.showscale whereas shared color axis attributes are configured within the Layout e.g.
layout.coloraxis.showscale.
Continuous Color with Plotly Express &gt;  &gt; Continuous Color
Scales and Color Bars
Continuous Color Scales and Color Bars in Python
How to set, create and control continuous color scales and color bars in scatter, bar, map and heatmap figures.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/colorscales.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In the same way as the X or Y position of a mark in cartesian coordinates can be used to represent continuous values (i.e. amounts or moments in time) or categories
(i.e. labels), color can be used to represent continuous or categorical data. This page is about using color to represent continuous data, but Plotly can also 
.
represent
categorical values with color (/python/discrete-color/)
This document explains the following four continuous-color-related concepts:
discrete color
sequences (/python/discrete-color/)
template
(/python/templates/)
Plotly Express (/python/plotly-express/)
built-in color scales (/python/builtin-colorscales)
Most  functions accept a color argument which automatically assigns data values to continuous color if the data is numeric. If
the data contains strings, the color will automatically be considered . This means that
numeric strings must be parsed to be used for continuous color, and conversely, numbers used as category codes must be converted to strings.
Plotly Express (/python/plotly-express/)
discrete (also known as categorical or qualitative) (/python/discrete-color/)
For example, in the tips dataset, the size column contains numbers:
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 1/17

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()
Converting this column to strings is very straightforward:
import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str)
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="String 'size' values mean discrete colors" )
fig.show()
If you have stringified numbers you can convert back just as easily:10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
10 20 30 40 50246810size
2
3
4
1
6
5String 'size' values mean discrete colors
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 2/17

--- Página 3 ---
Colorscales in Dashimport plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str)
df["size"] = df["size"].astype(float)
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 3/17

--- Página 4 ---
Color Scales in Plotly ExpressSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
By default,  will use the color scale from the active 's layout.colorscales.sequential attribute, and
the default active template is plotly which uses the Plasma color scale. You can choose any of the , however, or define
your own.
Plotly Express (/python/plotly-express/)
template (/python/templates/)
built-in color scales (/python/builtin-colorscales/)
Here is an example that creates a scatter plot using Plotly Express, with points colored using the Viridis color scale.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
colorscales = px.colors.named_colorscales()
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive color scale'),
    html.P("Select your palette:"),
    dcc.Dropdown(
        id='dropdown',
        options=colorscales,
        value='viridis'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def change_colorscale(scale):
    df = px.data.iris() # replace with your own data source
 fi tt(DOWNLOAD
Interactive color scale
Select your palette:
viridis ×
2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 4/17

--- Página 5 ---
Reversing a built-in color scaleimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" ,
                 color="sepal_length" , color_continuous_scale =px.colors.sequential .Viridis)
fig.show()
It is also possible to specify color scales by name. Here is an example that specifies the Inferno color scale by name, as a string
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" ,
                 color="sepal_length" , color_continuous_scale ='Inferno' )
fig.show()
You can reverse a  by appending _r to its name, for color scales given either as a string or a plotly object.
built-in color scale (/python/builtin-colorscales/)2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 5/17

--- Página 6 ---
Explicitly Constructing a Color scaleimport plotly.express  as px
df = px.data.gapminder ().query("year == 2007" ).sort_values (by="lifeExp" )
fig = px.bar(df, y="continent" , x="pop", color="lifeExp" , orientation ="h",
             color_continuous_scale ='Bluered_r' , hover_name ="country" )
fig.show()
import plotly.express  as px
data = [[1, .3, .5, .9],
        [.3, .1, .4, 1],
        [.2, .8, .9, .3]]
fig = px.imshow(data, color_continuous_scale =px.colors.sequential .Cividis_r )
fig.show()
The Plotly Express color_continuous_scale argument accepts explicitly-constructed color scales as well:0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BAfricaAsiaAmericasEuropeOceania
404550556065707580lifeExp
popcontinent
0 1 2 32.521.510.50−0.5
0.10.20.30.40.50.60.70.80.91
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 6/17

--- Página 7 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" ,
                 color_continuous_scale =["red", "green", "blue"])
fig.show()
The example above provided a list of CSS colors to construct a scale, which inferred the reference points to be evenly spaced, but specific reference points can be
provided as well. The following example has the same result:
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" ,
                 color_continuous_scale =[(0, "red"), (0.5, "green"), (1, "blue")])
fig.show()2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
2 2.5 3 3.5 4 4.54.555.566.577.58
4.555.566.577.5sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 7/17

--- Página 8 ---
Constructing a Discrete or Discontinuous Color Scale
Explicitly setting a Color RangeYou can create a discrete color scale, with discontinuous color, by setting the same reference point twice in a row. This is useful for example with chart types that
don't support discrete colors, like . See below for how to customize tick text.
Parallel Coordinates plots (/python/parallel-coordinates-plot/)
import plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, color="species_id" ,
                             color_continuous_scale =[(0.00, "red"),   (0.33, "red"),
                                                     (0.33, "green"), (0.66, "green"),
                                                     (0.66, "blue"),  (1.00, "blue")])
fig.show()
When using the range of the input data as the color range is inappropriate, for example when producing many figures which must have comparable color ranges, or
to clip the color range to account for outliers, the Plotly Express range_color argument can be used. Here we clip the top of the color range above the lower range of
the data and extend it below the lower range of the data:
11.522.53species_id
4.555.566.577.5sepal_length
7.9
4.322.533.54sepal_width
4.4
2123456petal_length
6.9
10.511.522.5petal_width
2.5
0.111.21.41.61.822.22.42.62.83species_id
3
1
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 8/17

--- Página 9 ---
Setting the Midpoint of a Color Range for a Diverging Color scaleimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , range_color =[5,8])
fig.show()
Diverging color scales have a well-defined midpoint color, and are best-used when that midpoint is mapped to a meaningful data value. The
color_continuous_midpoint argument to most Plotly Express functions is used for this. It cannot be used with range_color because setting it forces the color range to
be centered on the midpoint while including the entire dataset. This means that for asymmetric data distributions, not all colors in the color scale will appear in the
figure.
For example, a diverging color scale could be used to highlight points with a higher and lower value than the median in a choropleth map like this:2 2.5 3 3.5 4 4.54.555.566.577.58
55.566.577.58sepal_length
sepal_widthsepal_length
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 9/17

--- Página 10 ---
Hiding or Customizing the Plotly Express Color Barimport plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
avg_lifeExp  = (df['lifeExp' ]*df['pop']).sum()/df['pop'].sum()
fig = px.choropleth (df, locations ="iso_alpha" , color="lifeExp" ,
                    color_continuous_scale =px.colors.diverging .BrBG,
                    color_continuous_midpoint =avg_lifeExp ,
                    title="World Average Life Expectancy in 2007 in years was %.1f" % avg_lifeExp )
fig.show()
Plotly Express binds all traces to , rather than using trace-specific color axes. This means that the color bar can
configured there, for example it can be hidden:
layout.coloraxis (/python/reference/layout/coloraxis/)405060708090lifeExpWorld Average Life Expectancy in 2007 in years was 68.9
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 10/17

--- Página 11 ---
import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", title="No color bar on this density plot" )
fig.update_layout (coloraxis_showscale =False)
fig.show()
You can also configure the title, size, placement and tick marks and labels on a color bar:
0 10 20 30 40 500246810No color bar on this density plot
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 11/17

--- Página 12 ---
Customizing Tick Text on Discrete Color Barsimport plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", title="Customized color bar on this density plot" )
fig.update_layout (coloraxis_colorbar =dict(
    title=dict(text="Number of Bills per Cell" ),
    thicknessmode ="pixels" , thickness =50,
    lenmode="pixels" , len=200,
    yanchor="top", y=1,
    ticks="outside" , ticksuffix =" bills" ,
    dtick=5
))
fig.show()
This is the same example as the Parallel Coordinates plot above, with customized tick text for species:
0 10 20 30 40 500246810
0 bills5 bills10 bills15 bills20 bills25 bills30 billsNumber of Bills per CellCustomized color bar on this density plot
total_billtip
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 12/17

--- Página 13 ---
Customizing Tick Text on Logarithmic Color Barsimport plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, dimensions =["sepal_length" , "sepal_width" , "petal_length" , "petal_width" ],
                             color="species_id" , range_color =[0.5, 3.5],
                             color_continuous_scale =[(0.00, "red"),   (0.33, "red"),
                                                     (0.33, "green"), (0.66, "green"),
                                                     (0.66, "blue"),  (1.00, "blue")])
fig.update_layout (coloraxis_colorbar =dict(
    title=dict(text="Species" ),
    tickvals =[1,2,3],
    ticktext =["setosa" ,"versicolor" ,"virginica" ],
    lenmode="pixels" , len=100,
))
fig.show()
You can customize text on a logarithmic color bar to make it more readable:
setosaversicolorvirginicaSpecies
4.555.566.577.5sepal_length
7.9
4.322.533.54sepal_width
4.4
2123456petal_length
6.9
10.511.522.5petal_width
2.5
0.1
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 13/17

--- Página 14 ---
Using Label Aliases on Colorbarsimport plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, y="lifeExp" , x="pop", color=np.log10(df["pop"]), hover_name ="country" , log_x=True)
fig.update_layout (coloraxis_colorbar =dict(
    title=dict(text="Population" ),
    tickvals =[6,7,8,9],
    ticktext =["1M", "10M", "100M", "1B"],
))
fig.show()
New in 5.14
Using labelalias you can replace some labels on the colorbar with alternative values. In this example, the colorbar has five tickvals. Using labelalias, instead of
displaying all labels as the numbers in tickvals, we swap out three of the labels for text.2 51M2 510M2 5100M2 51B240455055606570758085
1M10M100M1BPopulation
poplifeExp
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 14/17

--- Página 15 ---
import plotly.graph_objects  as go
import urllib.request  as request
import json
# Load heatmap data
response  = request.urlopen(
    "https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json" )
dataset = json.load(response )
# Create and show figure
fig = go.Figure()
fig.add_trace (go.Heatmap(
    z=dataset["z"],
    colorbar =dict(
        title=dict(
            text="Surface Heat" ,
            side="top",
        ),
        tickmode ="array",
        tickvals =[2, 25, 50, 75, 100],
        labelalias ={100: "Hot", 50: "Mild", 2: "Cold"},
        ticks="outside"
    )
))
fig.show()
0 10 20 30 40010203040
Cold25Mild75HotSurface Heat
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 15/17

--- Página 16 ---
Custom Discretized Heatmap Color scale with Graph Objects
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Heatmap(
    z=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]],
    colorscale =[
        # Let first 10% (0.1) of the values have color rgb(0, 0, 0)
        [0, "rgb(0, 0, 0)" ],
        [0.1, "rgb(0, 0, 0)" ],
        # Let values between 10-20% of the min and max of z
        # have color rgb(20, 20, 20)
        [0.1, "rgb(20, 20, 20)" ],
        [0.2, "rgb(20, 20, 20)" ],
        # Values between 20-30% of the min and max of z
        # have color rgb(40, 40, 40)
        [0.2, "rgb(40, 40, 40)" ],
        [0.3, "rgb(40, 40, 40)" ],
        [0.3, "rgb(60, 60, 60)" ],
        [0.4, "rgb(60, 60, 60)" ],
        [0.4, "rgb(80, 80, 80)" ],
        [0.5, "rgb(80, 80, 80)" ],
        [0.5, "rgb(100, 100, 100)" ],
        [0.6, "rgb(100, 100, 100)" ],
        [0.6, "rgb(120, 120, 120)" ],
        [0.7, "rgb(120, 120, 120)" ],
        [0.7, "rgb(140, 140, 140)" ],
        [0.8, "rgb(140, 140, 140)" ],
        [0.8, "rgb(160, 160, 160)" ],
        [0.9, "rgb(160, 160, 160)" ],
        [0.9, "rgb(180, 180, 180)" ],
        [1.0, "rgb(180, 180, 180)" ]
    ],
    colorbar =dict(
        tick0=0,
        dtick=1
    )
))
fig.show()
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 16/17

--- Página 17 ---
Color scale for Scatter Plots with Graph Objects
import plotly.graph_objects  as go
fig = go.Figure()
# Create list from 0 to 39 to use as x, y, and color
values = list(range(40))
fig.add_trace (go.Scatter(
    x=values,
    y=values,
    marker=dict(
        size=16,
        cmax=39,
        cmin=0,
        color=values,
        colorbar =dict(
            title=dict(text="Colorbar" )
        ),
        colorscale ="Viridis"
    ),
    mode="markers" ))
fig.show()
0 2 4 6 8−0.4−0.200.20.4
0123456789
16/07/2025, 06:07 Continuous color scales and color bars in Python
https://plotly.com/python/colorscales/ 17/17</content>
      </file>
      <file name="Creating and updating figures in Python.pdf" path="pyvy_2x1/Creating and updating figures in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Figures As Dictionaries &gt;  &gt;
Creating and Updating Figures
Creating and Updating Figures in Python
Creating and Updating Figures with Plotly's Python graphing library
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/creating-
and-updating-figures.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The plotly Python package exists to create, manipulate and  graphical figures (i.e. charts, plots, maps and diagrams) represented by 
. The rendering process uses the  under the
hood although Python developers using this module very rarely need to interact with the Javascript library directly, if ever. Figures can be represented in Python either
as dicts or as instances of the plotly.graph_objects.Figure class, and are serialized as text in  before being passed to
Plotly.js.
render (/python/renderers/)
data
structures also referred to as figures (/python/figure-structure/)
Plotly.js JavaScript library (https://plotly.com/javascript/)
JavaScript Object Notation (JSON) (https://json.org/)
Note: the recommended entry-point into the plotly package is the ,
which consists of Python functions which return fully-populated plotly.graph_objects.Figure objects. This page exists to document the structure of the data
structure that these objects represent for users who wish to understand more about how to customize them, or assemble them from other
plotly.graph_objects components.
high-level plotly.express module, also known as Plotly Express (/python/plotly-express/)
At a low level, figures can be represented as dictionaries and displayed using functions from the plotly.io module. The fig dictionary in the example below describes a
figure. It contains a single bar trace and a title.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 1/29

--- Página 2 ---
Figures as Graph Objects
1. Graph objects provide precise data validation. If you provide an invalid property name or an invalid property value as the key to a graph object, an exception
will be raised with a helpful error message describing the problem. This is not the case if you use plain Python dictionaries and lists to build your figures.
2. Graph objects contain descriptions of each valid property as Python docstrings, with a .
You can use these docstrings in the development environment of your choice to learn about the available properties as an alternative to consulting the online
.
3. Properties of graph objects can be accessed using both dictionary-style key lookup (e.g. fig["layout"]) or class-style property access (e.g. fig.layout).
4. Graph objects support higher-level convenience functions for making updates to already constructed figures (.update_layout(), .add_trace() etc) as described
below.
5. Graph object constructors and update methods accept "magic underscores" (e.g. go.Figure(layout_title_text="The Title") rather than
dict(layout=dict(title=dict(text="The Title")))) for more compact code, as described below.
6. Graph objects support attached rendering (.show()) and exporting functions (.write_image()) that automatically invoke the appropriate functions from 
.fig = dict({
    "data": [{"type": "bar",
              "x": [1, 2, 3],
              "y": [1, 3, 2]}],
    "layout" : {"title": {"text": "A Figure Specified By Python Dictionary" }}
})
# To display the figure defined by this dict, use the low-level plotly.io.show function
import plotly.io  as pio
pio.show(fig)
The  called
 that may be used to represent figures, with a top-level class plotly.graph_objects.Figure.
plotly.graph_objects module provides an automatically-generated hierarchy of classes (https://plotly.com/python-api-reference/plotly.graph_objects.html)
"graph objects" (/python/graph-objects/)
Note that the recommended alternative to working with Python dictionaries is to 
and to manipulate the resulting plotly.graph_objects.Figure objects as described in this page, wherever possible, rather than to assemble figures bottom-up
from underlying graph objects. See .
create entire figures at once using Plotly Express (/python/plotly-express/)
"When to use Graph Objects" (/python/graph-objects/)
Graph objects have several benefits compared to plain Python dictionaries.
full API reference available (https://plotly.com/python-api-reference/)
Full Reference (/python/reference/index/)
the
plotly.io module (https://plotly.com/python-api-reference/plotly.io.html)
Below you can find an example of one way that the figure in the example above could be specified using a graph object instead of a dictionary.0.5 1 1.5 2 2.5 3 3.500.511.522.53A Figure Specified By Python Dictionary
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 2/29

--- Página 3 ---
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],
    layout=go.Layout(
        title=go.layout.Title(text="A Figure Specified By A Graph Object" )
    )
)
fig.show()
You can also create a graph object figure from a dictionary representation by passing the dictionary to the go.Figure constructor.0.5 1 1.5 2 2.5 3 3.500.511.522.53A Figure Specified By A Graph Object
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 3/29

--- Página 4 ---
Converting Graph Objects To Dictionaries and JSONimport plotly.graph_objects  as go
dict_of_fig  = dict({
    "data": [{"type": "bar",
              "x": [1, 2, 3],
              "y": [1, 3, 2]}],
    "layout" : {"title": {"text": "A Figure Specified By A Graph Object With A Dictionary" }}
})
fig = go.Figure(dict_of_fig )
fig.show()
Graph objects can be turned into their Python dictionary representation using the fig.to_dict() method. You can also retrieve the JSON string representation of a graph
object using the fig.to_json() method.
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],
    layout=go.Layout(height=600, width=800)
)
fig.layout.template  = None # to slim down the output
print("Dictionary Representation of A Graph Object: \n\n" + str(fig.to_dict()))
print("\n\n")
print("JSON Representation of A Graph Object: \n\n" + str(fig.to_json()))
print("\n\n")0.5 1 1.5 2 2.5 3 3.500.511.522.53A Figure Specified By A Graph Object With A Dictionary
Dictionary Representation of A Graph Object:
{'data': [{'x': [1, 2, 3], 'y': [1, 3, 2], 'type': 'bar'}], 'layout': {'height': 600, 'width': 800}}
JSON Representation of A Graph Object:
{"data":[{"x":[1,2,3],"y":[1,3,2],"type":"bar"}],"layout":{"height":600,"width":800}}
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 4/29

--- Página 5 ---
Representing Figures in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import json
fig = px.line(
    x=["a","b","c"], y=[1,3,2], # replace with your own data source
    title="sample figure", height=325
)
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Displaying figure structure as JSON'),
    dcc.Graph(id="graph", figure=fig),
    dcc.Clipboard(target_id="structure"),
    html.Pre(
        id='structure',
        style={
            'border': 'thin lightgrey solid',
            'overflowY': 'scroll',
            'height': '275px'
        }
    ),
])DOWNLOAD

Displaying figure structure as JSON
{
  "data": [
    {
      "hovertemplate": "x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;",
      "legendgroup": "",
      "line": {
        "color": "#636efa",
        "dash": "solid"
      },
      "marker": {
        "symbol": "circle"
}a b c11.522.53sample figure
xy
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 5/29

--- Página 6 ---
Creating Figures
Plotly Express
Graph Objects Figure ConstructorThis section summarizes several ways to create new graph object figures with the plotly.py graphing library.
The recommended way to create figures and populate them is to use  but this page documents various other options
for completeness
Plotly Express (/python/plotly-express/)
 (included as the plotly.express module) is a high-level data visualization API that produces fully-populated graph
object figures in single function-calls.
Plotly Express (https://plot.ly/python/plotly-express/)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , title="A Plotly Express Figure" )
# If you print the figure, you'll see that it's just a regular figure with data and layout
# print(fig)
fig.show()
As demonstrated above, you can build a complete figure by passing trace and layout specifications to the plotly.graph_objects.Figure constructor. These trace and
layout specifications can be either dictionaries or graph objects.
In the following example, the traces are specified using graph objects and the layout is specified as a dictionary.2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginicaA Plotly Express Figure
sepal_widthsepal_length
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 6/29

--- Página 7 ---
Figure Factoriesimport plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],
    layout=dict(title=dict(text="A Figure Specified By A Graph Object" ))
)
fig.show()
 (included in plotly.py in the plotly.figure_factory module) are functions that produce graph object figures, often to satisfy the
needs of specialized domains. Here's an example of using the create_quiver() figure factory to construct a graph object figure that displays a 2D quiver plot.
Figure factories (/python/figure-factories)0.5 1 1.5 2 2.5 3 3.500.511.522.53A Figure Specified By A Graph Object
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 7/29

--- Página 8 ---
Make Subplotsimport numpy as np
import plotly.figure_factory  as ff
x1,y1 = np.meshgrid (np.arange(0, 2, .2), np.arange(0, 2, .2))
u1 = np.cos(x1)*y1
v1 = np.sin(x1)*y1
fig = ff.create_quiver (x1, y1, u1, v1)
fig.show()
The plotly.subplots.make_subplots() function produces a graph object figure that is preconfigured with a grid of subplots that traces can be added to. The add_trace()
function will be discussed more below.0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 8/29

--- Página 9 ---
Updating Figures
Adding Tracesfrom plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_trace (go.Scatter(y=[4, 2, 1], mode="lines"), row=1, col=1)
fig.add_trace (go.Bar(y=[2, 1, 3]), row=1, col=2)
fig.show()
Regardless of how a graph object figure was constructed, it can be updated by adding additional traces to it and modifying its properties.
New traces can be added to a graph object figure using the add_trace() method. This method accepts a graph object trace (an instance of go.Scatter, go.Bar, etc.) and
adds it to the figure. This allows you to start with an empty figure, and add traces to it sequentially. The append_trace() method does the same thing, although it does
not return the figure.0 0.5 1 1.5 211.522.533.54
0 1 200.511.522.53 trace 0
trace 1
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 9/29

--- Página 10 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(x=[1, 2, 3], y=[1, 3, 2]))
fig.show()
You can also add traces to a figure produced by a figure factory or Plotly Express.0.5 1 1.5 2 2.5 3 3.500.511.522.53
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 10/29

--- Página 11 ---
Adding Traces To Subplotsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 title="Using The add_trace() method With A Plotly Express Figure" )
fig.add_trace (
    go.Scatter(
        x=[2, 4],
        y=[4, 8],
        mode="lines",
        line=go.scatter.Line(color="gray"),
        showlegend =False)
)
fig.show()
If a figure was created using plotly.subplots.make_subplots(), then supplying the row and col arguments to add_trace() can be used to add a trace to a particular
subplot.2 2.5 3 3.5 4 4.544.555.566.577.58 species
setosa
versicolor
virginicaUsing The add_trace() method With A Plotly Express Figure
sepal_widthsepal_length
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 11/29

--- Página 12 ---
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_trace (go.Scatter(y=[4, 2, 1], mode="lines"), row=1, col=1)
fig.add_trace (go.Bar(y=[2, 1, 3]), row=1, col=2)
fig.show()
This also works for figures created by Plotly Express using the facet_row and or facet_col arguments.0 0.5 1 1.5 211.522.533.54
0 1 200.511.522.53 trace 0
trace 1
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 12/29

--- Página 13 ---
Add Trace Convenience Methodsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , facet_col ="species" ,
                 title="Adding Traces To Subplots Witin A Plotly Express Figure" )
reference_line  = go.Scatter(x=[2, 4],
                            y=[4, 8],
                            mode="lines",
                            line=go.scatter.Line(color="gray"),
                            showlegend =False)
fig.add_trace (reference_line , row=1, col=1)
fig.add_trace (reference_line , row=1, col=2)
fig.add_trace (reference_line , row=1, col=3)
fig.show()
As an alternative to the add_trace() method, graph object figures have a family of methods of the form add_{trace} (where {trace} is the name of a trace type) for
constructing and adding traces of each trace type.
Here is the previous subplot example, adapted to add the scatter trace using fig.add_scatter() and to add the bar trace using fig.add_bar().2 3 444.555.566.577.58
2 3 4 2 3 4species
setosa
versicolor
virginicaAdding Traces To Subplots Witin A Plotly Express Figure
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 13/29

--- Página 14 ---
Magic Underscore Notationfrom plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_scatter (y=[4, 2, 1], mode="lines", row=1, col=1)
fig.add_bar(y=[2, 1, 3], row=1, col=2)
fig.show()
To make it easier to work with nested properties, graph object constructors and many graph object methods support magic underscore notation.
This allows you to reference nested properties by joining together multiple nested property names with underscores.
For example, specifying the figure title in the figure constructor without magic underscore notation requires setting the layout argument to dict(title=dict(text="A
Chart")).
Similarly, setting the line color of a scatter trace requires setting the marker property to dict(color="crimson").0 0.5 1 1.5 211.522.533.54
0 1 200.511.522.53 trace 0
trace 1
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 14/29

--- Página 15 ---
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scatter(y=[1, 3, 2], line=dict(color="crimson" ))],
    layout=dict(title=dict(text="A Graph Objects Figure Without Magic Underscore Notation" ))
)
fig.show()
With magic underscore notation, you can accomplish the same thing by passing the figure constructor a keyword argument named layout_title_text, and by passing
the go.Scatter constructor a keyword argument named line_color.
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scatter(y=[1, 3, 2], line_color ="crimson" )],
    layout_title_text ="A Graph Objects Figure With Magic Underscore Notation"
)
fig.show()0 0.5 1 1.5 211.522.53A Graph Objects Figure Without Magic Underscore Notation
0 0.5 1 1.5 211.522.53A Graph Objects Figure With Magic Underscore Notation
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 15/29

--- Página 16 ---
Updating Figure LayoutsMagic underscore notation is supported throughout the graph objects API, and it can often significantly simplify operations involving deeply nested properties.
Note: When you see keyword arguments with underscores passed to a graph object constructor or method, it is almost always safe to assume that it is an
application of magic underscore notation. We have to say "almost always" rather than "always" because there are a few property names in the plotly
schema that contain underscores: error_x, error_y, error_z, copy_xstyle, copy_ystyle, copy_zstyle, paper_bgcolor, and plot_bgcolor. These were added back
in the early days of the library (2012-2013) before we standardized on banning underscores from property names.
Graph object figures support an update_layout() method that may be used to update multiple nested properties of a figure's layout.
Here is an example of updating the text and font size of a figure's title using update_layout().
import plotly.graph_objects  as go
fig = go.Figure(data=go.Bar(x=[1, 2, 3], y=[1, 3, 2]))
fig.update_layout (title_text ="Using update_layout() With Graph Object Figures" ,
                  title_font_size =30)
fig.show()
Note that the following update_layout() operations are equivalent:0.5 1 1.5 2 2.5 3 3.500.511.522.53Using update_layout() With Graph Object Figures
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 16/29

--- Página 17 ---
Updating Tracesfig.update_layout (title_text ="update_layout() Syntax Example" ,
                  title_font_size =30)
fig.update_layout (title_text ="update_layout() Syntax Example" ,
                  title_font =dict(size=30))
fig.update_layout (title=dict(text="update_layout() Syntax Example" ),
                             font=dict(size=30))
fig.update_layout ({"title": {"text": "update_layout() Syntax Example" ,
                             "font": {"size": 30}}})
fig.update_layout (title=go.layout.Title(text="update_layout() Syntax Example" ,
                                        font=go.layout.title.Font(size=30)))
Graph object figures support an update_traces() method that may be used to update multiple nested properties of one or more of a figure's traces.
To show some examples, we will start with a figure that contains bar and scatter traces across two subplots.0.511.522.533.500.511.522.53update_layout() Syntax Example
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 17/29

--- Página 18 ---
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_scatter (y=[4, 2, 3.5], mode="markers" ,
                marker=dict(size=20, color="LightSeaGreen" ),
                name="a", row=1, col=1)
fig.add_bar(y=[2, 1, 3],
            marker=dict(color="MediumPurple" ),
            name="b", row=1, col=1)
fig.add_scatter (y=[2, 3.5, 4], mode="markers" ,
                marker=dict(size=20, color="MediumPurple" ),
                name="c", row=1, col=2)
fig.add_bar(y=[1, 3, 2],
            marker=dict(color="LightSeaGreen" ),
            name="d", row=1, col=2)
fig.show()
Note that both scatter and bar traces have a marker.color property to control their coloring. Here is an example of using update_traces() to modify the color of all
traces.0 1 200.511.522.533.54
0 1 200.511.522.533.54a
b
c
d
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 18/29

--- Página 19 ---
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_scatter (y=[4, 2, 3.5], mode="markers" ,
                marker=dict(size=20, color="LightSeaGreen" ),
                name="a", row=1, col=1)
fig.add_bar(y=[2, 1, 3],
            marker=dict(color="MediumPurple" ),
            name="b", row=1, col=1)
fig.add_scatter (y=[2, 3.5, 4], mode="markers" ,
                marker=dict(size=20, color="MediumPurple" ),
                name="c", row=1, col=2)
fig.add_bar(y=[1, 3, 2],
            marker=dict(color="LightSeaGreen" ),
            name="d", row=1, col=2)
fig.update_traces (marker=dict(color="RoyalBlue" ))
fig.show()
The update_traces() method supports a selector argument to control which traces should be updated. Only traces with properties that match the selector will be
updated. Here is an example of using a selector to only update the color of the bar traces.0 1 200.511.522.533.54
0 1 200.511.522.533.54a
b
c
d
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 19/29

--- Página 20 ---
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_scatter (y=[4, 2, 3.5], mode="markers" ,
                marker=dict(size=20, color="LightSeaGreen" ),
                name="a", row=1, col=1)
fig.add_bar(y=[2, 1, 3],
            marker=dict(color="MediumPurple" ),
            name="b", row=1, col=1)
fig.add_scatter (y=[2, 3.5, 4], mode="markers" ,
                marker=dict(size=20, color="MediumPurple" ),
                name="c", row=1, col=2)
fig.add_bar(y=[1, 3, 2],
            marker=dict(color="LightSeaGreen" ),
            name="d", row=1, col=2)
fig.update_traces (marker=dict(color="RoyalBlue" ),
                  selector =dict(type="bar"))
fig.show()
Magic underscore notation can be used in the selector to match nested properties. Here is an example of updating the color of all traces that were formally colored
"MediumPurple".0 1 200.511.522.533.54
0 1 200.511.522.533.54a
b
c
d
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 20/29

--- Página 21 ---
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_scatter (y=[4, 2, 3.5], mode="markers" ,
                marker=dict(size=20, color="LightSeaGreen" ),
                name="a", row=1, col=1)
fig.add_bar(y=[2, 1, 3],
            marker=dict(color="MediumPurple" ),
            name="b", row=1, col=1)
fig.add_scatter (y=[2, 3.5, 4], mode="markers" ,
                marker=dict(size=20, color="MediumPurple" ),
                name="c", row=1, col=2)
fig.add_bar(y=[1, 3, 2],
            marker=dict(color="LightSeaGreen" ),
            name="d", row=1, col=2)
fig.update_traces (marker_color ="RoyalBlue" ,
                  selector =dict(marker_color ="MediumPurple" ))
fig.show()
For figures with subplots, the update_traces() method also supports row and col arguments to control which traces should be updated. Only traces in the specified
subplot row and column will be updated. Here is an example of updating the color of all traces in the second subplot column.0 1 200.511.522.533.54
0 1 200.511.522.533.54a
b
c
d
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 21/29

--- Página 22 ---
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2)
fig.add_scatter (y=[4, 2, 3.5], mode="markers" ,
                marker=dict(size=20, color="LightSeaGreen" ),
                name="a", row=1, col=1)
fig.add_bar(y=[2, 1, 3],
            marker=dict(color="MediumPurple" ),
            name="b", row=1, col=1)
fig.add_scatter (y=[2, 3.5, 4], mode="markers" ,
                marker=dict(size=20, color="MediumPurple" ),
                name="c", row=1, col=2)
fig.add_bar(y=[1, 3, 2],
            marker=dict(color="LightSeaGreen" ),
            name="d", row=1, col=2)
fig.update_traces (marker=dict(color="RoyalBlue" ),
                  col=2)
fig.show()
The update_traces() method can also be used on figures produced by figure factories or Plotly Express. Here's an example of updating the regression lines produced
by Plotly Express to be dotted.0 1 200.511.522.533.54
0 1 200.511.522.533.54a
b
c
d
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 22/29

--- Página 23 ---
Overwrite Existing Properties When Using Update Methodsimport pandas as pd
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 facet_col ="species" , trendline ="ols", title="Using update_traces() With Plotly Express Figures" )
fig.update_traces (
    line=dict(dash="dot", width=4),
    selector =dict(type="scatter" , mode="lines"))
fig.show()
update_layout() and update_traces() have an overwrite keyword argument, defaulting to False, in which case updates are applied recursively to the existing nested
property structure. When set to True, the prior value of existing properties is overwritten with the provided value.
In the example below, the red color of markers is overwritten when updating marker in update_traces() with overwrite=True. Note that setting instead marker_opacity
with the magic underscore would not overwrite marker_color because properties would be overwritten starting only at the level of marker.opacity.2 3 44.555.566.577.58
2 3 4 2 3 4species
setosa
versicolor
virginicaUsing update_traces() With Plotly Express Figures
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 23/29

--- Página 24 ---
Conditionally Updating Tracesimport plotly.graph_objects  as go
fig = go.Figure(go.Bar(x=[1, 2, 3], y=[6, 4, 9],
                       marker_color ="red")) # will be overwritten below
fig.update_traces (overwrite =True, marker={"opacity" : 0.4})
fig.show()
Suppose the updates that you want to make to a collection of traces depend on the current values of certain trace properties. The update_traces() method cannot
handle this situation, but the for_each_trace() method can!
As its first argument, the for_each_trace() method accepts a function that accepts and updates one trace at a time. Like update_traces(), for_each_trace() also accepts
selector, row, and col arguments to control which traces should be considered.
Here is an example of using for_each_trace() to convert the only markers for the "setosa" to square symbols in a Plotly Express Figure.
Note that this is possible because Plotly Express figures are made up of a separate trace for each column in the input data frame
0.5 1 1.5 2 2.5 3 3.50123456789
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 24/29

--- Página 25 ---
Updating Figure Axesimport pandas as pd
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 title="Conditionally Updating Traces In A Plotly Express Figure With for_each_trace()" )
fig.for_each_trace (
    lambda trace: trace.update(marker_symbol ="square" ) if trace.name == "setosa"  else (),
)
fig.show()
Graph object figures support update_xaxes() and update_yaxes() methods that may be used to update multiple nested properties of one or more of a figure's axes.
Here is an example of using update_xaxes() to disable the vertical grid lines across all subplots in a figure produced by Plotly Express.2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginicaConditionally Updating Traces In A Plotly Express Figure With for_each_trace()
sepal_widthsepal_length
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 25/29

--- Página 26 ---
Other Update Methods
the update_layout_images() method in order to ,
update_annotations() in order to ,
and update_shapes() in order to .
Chaining Figure Operations
a faceted scatter plot with OLS trend lines using Plotly Express,
sets the title font size using update_layout(),
disables vertical grid lines using update_xaxes(),
updates the width and dash pattern of the trend lines using update_traces(),
and then displays the figure using show().import pandas as pd
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 facet_col ="species" , title="Using update_xaxes() With A Plotly Express Figure" )
fig.update_xaxes (showgrid =False)
fig.show()
There are also for_each_xaxis() and for_each_yaxis() methods that are analogous to the for_each_trace() method described above. For non-cartesian subplot types (e.g.
polar), there are additional update_{type} and for_each_{type} methods (e.g. update_polar(), for_each_polar()).
Figures created with the plotly.py graphing library also support:
update background layout images (/python/images/)
update annotations (/python/text-and-annotations/#multiple-annotations)
update shapes (/python/shapes/)
All of the figure update operations described above are methods that return a reference to the figure being modified. This makes it possible the chain multiple figure
modification operations together into a single expression.
Here is an example of a chained expression that creates:2 3 44.555.566.577.58
2 3 4 2 3 4species
setosa
versicolor
virginicaUsing update_xaxes() With A Plotly Express Figure
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 26/29

--- Página 27 ---
Property Assignmentimport plotly.express  as px
df = px.data.iris()
(px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
            facet_col ="species" , trendline ="ols",
            title="Chaining Multiple Figure Operations With A Plotly Express Figure" )
 .update_layout (title_font_size =24)
 .update_xaxes (showgrid =False)
 .update_traces (
     line=dict(dash="dot", width=4),
     selector =dict(type="scatter" , mode="lines"))
).show()
Trace and layout properties can be updated using property assignment syntax. Here is an example of setting the figure title using property assignment.
import plotly.graph_objects  as go
fig = go.Figure(data=go.Bar(x=[1, 2, 3], y=[1, 3, 2]))
fig.layout.title.text = "Using Property Assignment Syntax With A Graph Object Figure"
fig.show()2 3 44.555.566.577.58
2 3 4 2 3 4species
setosa
versicolor
virginicaChaining Multiple Figure Operations With A Plotly Express Figure
sepal_width sepal_width sepal_widthsepal_lengthspecies=setosa species=versicolor species=virginica
0.5 1 1.5 2 2.5 3 3.500.511.522.53Using Property Assignment Syntax With A Graph Object Figure
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 27/29

--- Página 28 ---
What About Dash?And here is an example of updating the bar outline using property assignment.
import plotly.graph_objects  as go
fig = go.Figure(data=go.Bar(x=[1, 2, 3], y=[1, 3, 2]))
fig.data[0].marker.line.width = 4
fig.data[0].marker.line.color = "black"
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter0.5 1 1.5 2 2.5 3 3.500.511.522.53
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 28/29

--- Página 29 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
naries
Using16/07/2025, 06:03 Creating and updating figures in Python
https://plotly.com/python/creating-and-updating-figures/ 29/29</content>
      </file>
      <file name="Dash Testing _ Dash for Python Documentation _ Plotly.pdf" path="pyvy_2x1/Dash Testing _ Dash for Python Documentation _ Plotly.pdf" type="pdf">
        <content>--- Página 1 ---
S tar 23,446
Dash Python  &gt; Dash Testing
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. Sign up for early access
now.
 Dash Testing
dash.testing provides custom Dash pytest  fixtures and a set of testing APIs for unit and end-to-end testing.
This tutorial shows how to write and run tests for a Dash app.
Installing dash.testing
Install dash.testing with:
python -m pip install dash [testing]
In some shells (for example, Zsh), you may need to escape the opening bracket, [:
python -m pip install dash\ [testing]
Unit Tests
New in Dash 2.6
dash.testing supports unit testing of callbacks. Use callback unit tests to confirm that a callback's outputs are
as expected.
In the following example, we write two tests for our app. We have an app, app.py, that has two callbacks. The
update callback outputs to an html.Div the number of times btn-1 and btn-2 have been clicked. The
display callback uses callback_context  to determine which input triggered the callback, adds the id to a
string, and outputs it to an html.Div.
app.py
from  dash import  Dash, callback, html, Input, Outp ut, ctx, callback
app = Dash()
app.layout = html.Div([
    html.Button( 'Button 1' , id='btn-1' ),
    html.Button( 'Button 2' , id='btn-2' ),
    html.Button( 'Button 3' , id='btn-3' ),
    html.Div( id='container' ),
    html.Div( id='container-no-ctx' )
])
@callback(
    Output( 'container-no-ctx' , 'children' ),
    Input( 'btn-1' , 'n_clicks' ),
    Input( 'btn-2' , 'n_clicks' ))
def update (btn1, btn2 ):
    return  f'button 1: {btn1}  &amp; button 2: {btn2} '16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 1/10

--- Página 2 ---
In the test file, test_app_callbacks.py, we create two test cases, test_update_callback and
test_display_callback.
Run the tests with the command:
pytest
Notes:
Our app is a regular app. We don't need to add anything extra to app.py for our tests.
In the test file, test_app_callbacks.py, we import the callback functions to test, with from app import
display, update.
The first test case, test_update_callback, calls the update function with the values 1 and 0 and
stores the result in the variable output.
Looking at our app ( app.py), we can see these inputs are the values of n_clicks for each of the buttons:
@callback(
    Output( 'container-no-ctx' , 'children' ),
    Input( 'btn-1' , 'n_clicks' ),
    Input( 'btn-2' , 'n_clicks' ))
def update (btn1, btn2 ):
    return  f'button 1: {btn1}  &amp; button 2: {btn2} '
The test function then uses assert to confirm that the output is as expected, that it is equal to 'button
1: 1 &amp; button 2: 0'.
Mocking Callback Context
The second test case uses callback_context. To test the callback, we need to mock callback_context.
To do this, we need the following additional imports:@callback( Output( 'container' ,'children' ),
              Input( 'btn-1' , 'n_clicks' ),
              Input( 'btn-2' , 'n_clicks' ),
              Input( 'btn-3' , 'n_clicks' ))
def display (btn1, btn2, btn3 ):
    button_clicked = ctx.triggered _id
    return  f'You last clicked button with ID {button_clicked} '
if __name__ == '__main__' :
    app.run(debug= True )
from  contextvars import  copy_context
from  dash._callback_context import  context_value
from  dash._utils import  AttributeDict
# Import the names of callback fun ctions you want to test
from  app import  display, update
def test_update_callback ():
    output = update( 1, 0)
    assert  output == 'button 1: 1 &amp; button 2: 0'
def test_display_callback ():
    def run_callback ():
        context_value. set(AttributeDict(**{ "triggered_inputs" : [{ "prop_id" : "btn-1-ctx-example.
        return  display( 1, 0, 0)
    ctx = copy_context()
    output = ctx.run(run_callback)
    assert  output == f'You last clicked button with ID btn-1-ctx-example'16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 2/10

--- Página 3 ---
from  contextvars import  copy_context
from  dash._callback_context import  context_value
from  dash._utils import  AttributeDict
In the example:
We use contextvars.copy_context  to create a copy of the current context and save it to the variable
ctx.
We then use ctx.run to call our run_callback function in that context and save it to the output
variable.
Within the run_callback function, we use context_value.set to define which inputs trigger the
callback in our test, and call the display callback. context_value.set takes an AttributeDict (from
dash._utils).
The final part of the test checks if the output equals 'You last clicked button with ID btn-1-
ctx-example'.
End-to-End Tests
dash.testing also supports end-to-end tests. End-to-end tests run programmatically, start a real browser
session, and click through the Dash app UI. They are slower to run than unit tests and more complex to set up but
more closely mimic the end user's experience.
If you're running end-to-end tests, you'll also need to install a WebDriver , unless you're planning on running
your tests with a Selenium Grid . Your tests will use either your locally installed WebDriver or the remote
WebDriver on your grid to interact with the browser. See the Running Tests  section below for details on how to
run tests using a Selenium Grid.
Installing a WebDriver
We recommend the ChromeDriver WebDriver, which we use for dash end-to-end tests. Install ChromeDriver by
following the ChromeDriver Getting Started Guide . Ensure you install the correct version of ChromeDriver
for the version of Chrome you have installed.
Note: Mozilla Firefox geckodriver  is also supported. To run your tests with geckodriver, you'll need to add a
flag when running tests. See the Running Tests  section below for details on running tests with geckodriver.
Note: The Gecko (Marionette)  driver from Mozilla is not fully compatible with Selenium specifications. Some features may
not work as expected.
Example - Basic Test
Here we create a test case where the browser driver opens the app, waits for an element with the id
nully-wrapper to be displayed, confirms its text equals "0", and that there are no errors in the browser
console.
# 1. imports of your dash app
import  dash
from  dash import  html
# 2. give each testcase a test cas e ID, and pass the fixture
# dash_duo as a function argument
def test_001_child_with_0 (dash_duo ):
    # 3. define your app inside the te st function
    app = dash.Dash()
    app.layout = html.Div( id="nully-wrapper" , children= 0)
    # 4. host the app locally in a thr ead, all dash server configs could be
    # passed after the first app argum ent
    dash_duo.start_server(app)
    # 5. use wait_for_* if your target  element is the result of a callback,
    # keep in mind even the initial re ndering can trigger callbacks
    dash_duo.wait_for_text_to_equa l("#nully-wrapper" , "0", timeout= 4)
    # 6. use this form if its present is expected at the action point
    assert  dash_duo.find_element( "#nully-wrapper" ).text == "0"16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 3/10

--- Página 4 ---
Notes:
1. For most test scenarios, you don't need to import any modules for the test; just import what you need for
the Dash app itself.
2. A test case is a regular Python function. The function name follows this pattern: test_{tcid}_{test
title}. The tcid (test case ID) is an abbreviation pattern of mmffddd =&gt; module + file + three
digits. The tcid facilitates the test selection by just running pytest -k {tcid}. Its naming
convention also helps code navigation with modern editors.
3. Here we just define our app inside a test function. All the rules still apply as in your app file.
4. We start the test by calling the start_server API from dash_duo. When the test starts:
1. The defined app is hosted inside a light Python threading.Thread.
2. A Selenium WebDriver is initialized and navigates to the local server URL using server_url.
3. We first wait until the Flask server is responsive to an HTTP request, and then make sure the Dash
app is fully rendered inside the browser.
5. A test case is composed of preparation, actions, and checkpoints. Both #5 and #6 are doing the same check
in this example; we are expecting that the defined Div component's text is identical to children. #5 will
wait for the expected state to be reached within a 4 seconds timeout. It's a safer way to write the action
steps when you are doing an element check related to callbacks, as it normally happens under Dash context:
the element is already present in the DOM, but not necessarily the props.
6. The find_element API call has an implicit global timeout of two seconds set at the driver level, i.e. the
driver waits at most two seconds to find the element by the locator, HOWEVER  it will compare the text as
soon as the driver returns an element. The API find_element('#nully-wrapper') is a shortcut to
driver.find_element_by_css_selector('#nully-wrapper').
7. Unlike unittest, pytest allows you to use the standard Python assert for verifying expectations and
values. It also puts more introspection information into the assertion failure message by overriding the
assert behavior. It's good practice to expose your acceptance criteria  directly in the test case rather than
wrapping the assert inside another helper API, also to write these messages with SHOULD/SHOULD NOT
without failure confusion. By looking at the test name, the app definition, the actions, and the checkpoints,
reviewers should figure out easily the purpose of the test.
8. We use Percy  as our Visual Regression Testing tool. It's a good alternative to assertions when your
checkpoint is about the graphical aspects of a Dash App, such as the whole layout or a dcc.Graph
component. We integrate the Percy service with a PERCY_TOKEN variable, so the regression result is only
available in Plotly's CircleCI setup.
Example – Deployed Dash App
Use the dash_br fixture to test a deployed app. Set dash_br.server_url to the URL of the app:
Running Tests
There are many ways to run your tests, and you can change how your tests run by adding flags to the pytest
command.
All Tests    # 7. to make the checkpoint more r eadable, you can describe the
    # acceptance criterion as an asser t message after the comma.
    assert  dash_duo.get_logs() == [], "browser console should contain no  error"
    # 8. visual testing with percy sna pshot
    dash_duo.percy_snapshot( "test_001_child_with_0-layout" )
def test_002_nav_bar (dash_br ):
    dash_br.server_url = "https://dash-example-index.heroku app.com/"
    dash_br.wait_for_text_to_equal (".navbar-brand" , "Dash Example Index" , timeout= 20)
    assert  dash_br.find_element( ".navbar-brand" ).text == "Dash Example Index"16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 4/10

--- Página 5 ---
You can run all tests in the current working directory (and its subdirectories) with:
pytest
Any tests in .py files with names that start with test_  or end with _test  are run.
Specific Tests
In the Basic Test  example above, we gave our test case a test case ID, 001. We can use this to run that specific
test:
pytest -k 001
WebDriver Options
There are different ways to configure your WebDriver when running end-to-end tests.
With an Alternative Web Driver
ChromeDriver is the default WebDriver, but dash.testing also supports geckodriver for Firefox. Add the --
webdriver Firefox flag when running tests to use it:
pytest --webdriver Firefox -k 001
In Headless Mode
You can run tests in headless  mode, if you don't need to see the tests in a browser UI:
pytest --headless -k 001
Using a Selenium Grid
You can use Selenium Grid to run tests across multiple machines. To run tests with a local hosted grid at
http://localhost:4444/wd/hu:
pytest --remote -k 001
http://localhost:4444/wd/hu is the default value. To add an different remote, use the --remote-url flag:
pytest --webdriver Firefox --remot e-url https://grid_provider_endpoints
Note: If you set --remote-url, and the value is different to the default value,
http://localhost:4444/wd/hu, you don't need to include the --remote flag.
Caveats
We can't guarantee that the above examples work with every Selenium Grid. There may be limitations because of
how your network is configured. For example, because of:
A different hosting OS
How docker-compose is configured
If you encounter issues, it may be because you need to do some auxiliary WebDriver options tuning to run the
tests. Here are some things to try:16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 5/10

--- Página 6 ---
Change the default logging level with --log-cli-level DEBUG.
Customize your browser options. There is a back door for browser option customization by a
pytest_setup_options hook defined in plugin.py. The example below is to use the headless mode
with Chrome WebDriver in Windows. There is a workaround by adding --disable-gpu in the options.
from  selenium.webdriver.chrome. options import Options
def pytest_setup_options ():
options  = Options()
options.add_argument( '--disable-gpu' )
return  options
Fixtures
To avoid accidental name collision with other pytest plugins, all Dash test fixtures start with the prefix dash.
dash_br A standalone WebDriver wrapped with high-level Dash testing APIs. This is suitable for testing a
Dash App in a deployed environment (Dash for Python or R), i.e. when your Dash App is accessible from a
URL.
dash_duo The default fixture for Dash Python integration tests, it contains a thread_server and a
WebDriver wrapped with high-level Dash testing APIs.
dash_thread_server Start your Dash App locally in a Python threading.Thread, which is lighter and
faster than a process.
dash_process_server This is close to your production/deployed environment. Start your Dash App with
waitress(by default if raw_command is not provided) in a Python subprocess. You can control the
process runner with two supplemental arguments. To run the application with alternative deployment
options, use the raw_command argument; to extend the timeout if your application needs more than the
default three seconds to launch, use the start_timeout argument. Note: You need to configur e your
PYTHONPATH so that the Dash app sour ce file is dir ectly importable .
APIs
Selenium Overview
Both dash_duo and dash_br expose the Selenium WebDriver via the property driver, e.g.
dash_duo.driver, which gives you full access to the Python Selenium API . (Note that this is not the official
Selenium documentation site, but has someho w become the de facto Python community r eference ) One of the core
components of Selenium testing is finding the web element  with a locator, and performing some actions like
click or send_keys on it, and waiting to verify if the expected state is met after those actions. The check is
considered as an acceptance criterion, for which you can write in a standard Python assert statement.
Element Locators
There are several strategies to locate elements ; CSS selector and XPATH are the two most versatile ways. We
recommend using the CSS Selector  in most cases due to its better performance and robustness  across
browsers. If you are new to using CSS Selectors, these SauceLab tips  are a great start. Also, remember that
Chrome Dev Tools Console  is always your good friend and playground.
Waits
This link  covers this topic nicely. For impatient readers, a quick take away is quoted as follows: The Selenium
WebDriver provides two types of waits:
explicit wait  Makes WebDriver wait for a certain condition to occur before proceeding further with
execution. All our APIs with wait_for_* falls into this category.
implicit wait  Makes WebDriver poll the DOM for a certain amount of time when trying to locate an element.
We set a global two-second timeout at the driver level. Note  all custom wait conditions ar e defined in
dash.testing.wait and ther e are two e xtra APIs until and until_not which ar e similar to the e xplicit wait16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 6/10

--- Página 7 ---
with W ebDriver, but the y are not binding to W ebDriver conte xt, i.e. the y abstr act a mor e generic mechanism to poll
and wait for certain condition to happen
Browser APIs
This section lists a minimal set of browser testing APIs. They are convenient shortcuts to Selenium APIs and have
been approved in our daily integration tests. The following table might grow as we start migrating more legacy
tests in the near future. But we have no intention to build a comprehensive list, the goal is to make writing Dash
tests concise and error-free. Please feel free to submit a community PR to add any missing ingredient, we would
be happy to accept that if it's adequate for Dash testing.
API Description
find_element(selector)return the first found element by the CSS selector,
shortcut to
driver.find_element_by_css_selector. note
that this API will r aise e xceptions if not found, the
find_elements API r eturns an empty list instead
find_elements(selector)return a list of all elements matching by the CSS
selector, shortcut to
driver.find_elements_by_css_selector
multiple_click(selector, clicks)find the element with the CSS selector and clicks it
with number of clicks
wait_for_element(selector, timeout=None)shortcut to wait_for_element_by_css_selector
the long version is kept for back compatibility.
timeout if not set, equals to the fixture's
wait_timeout
wait_for_element_by_css_selector(selector,
timeout=None)explicit wait until the element is present, shortcut to
WebDriverWait with
EC.presence_of_element_located
wait_for_element_by_id(element_id,
timeout=None)explicit wait until the element is present, shortcut to
WebDriverWait with
EC.presence_of_element_located
wait_for_style_to_equal(selector, style,
value, timeout=None)explicit wait until the element's style has expected
value. shortcut to WebDriverWait with custom wait
condition style_to_equal. timeout if not set,
equals to the fixture's wait_timeout
wait_for_text_to_equal(selector, text,
timeout=None)explicit wait until the element's text equals the
expected text. shortcut to WebDriverWait with
custom wait condition text_to_equal. timeout if
not set, equals to the fixture's wait_timeout
wait_for_contains_text(selector, text,
timeout=None)explicit wait until the element's text contains the
expected text. shortcut to WebDriverWait with
custom wait condition contains_text condition.
timeout if not set, equals to the fixture's
wait_timeout
wait_for_class_to_equal(selector,
classname, timeout=None)explicit wait until the element's class has expected
value. timeout if not set, equals to the fixture's
wait_timeout. shortcut to WebDriverWait with
custom class_to_equal condition.
wait_for_contains_class(selector,
classname, timeout=None)explicit wait until the element's classes contains the
expected classname. timeout if not set, equals to the
fixture's wait_timeout. shortcut to WebDriverWait
with custom contains_class condition.
wait_for_page(url=None, timeout=10) navigate to the url in webdriver and wait until the
dash renderer is loaded in browser. use server_url16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 7/10

--- Página 8 ---
API Description
if url is None
toggle_window()switch between the current working window and the
newly opened one.
switch_window(idx)switch to window by window index. shortcut to
driver.switch_to.window. raise BrowserError if
no second window present in browser
open_new_tab(url=None)open a new tab in browser with window name new
window. url if not set, equals to server_url
percy_snapshot(name,
wait_for_callbacks=False)visual test API shortcut to percy_runner.snapshot.
it also combines the snapshot name with the actual
python versions. The wait_for_callbacks
parameter controls whether the snapshot is taken
only after all callbacks have fired; the default is False.
visit_and_snapshot(resource_path, hook_id,
wait_for_callbacks=True,
assert_check=True)This method automates a common task during dash-
docs testing: the URL described by resource_path is
visited, and completion of page loading is assured by
waiting until the element described by hook_id is
fetched. Once hook_id is available,
visit_and_snapshot acquires a snapshot of the
page and returns to the main page.
wait_for_callbacks controls if the snapshot is
taken until all dash callbacks are fired, default True.
assert_check is a switch to enable/disable an
assertion that there is no devtools error alert icon.
take_snapshot(name)hook method to take a snapshot while Selenium test
fails. the snapshot is placed under
/tmp/dash_artifacts in Linux or %TEMP in windows
with a filename combining test case name and the
running Selenium session id
zoom_in_graph_by_ratio(elem_or_selector,
start_fraction=0.5, zoom_box_fraction=0.2,
compare=True)zoom out a graph (provided with either a Selenium
WebElement or CSS selector) with a zoom box fraction
of component dimension, default start at middle with
a rectangle of 1/5 of the dimension use compare to
control if we check the SVG get changed
click_at_coord_fractions(elem_or_selector,
fx, fy)Use ActionChains to click a Selenium WebElement at
a location a given fraction of the way fx between its
left (0) and right (1) edges, and fy between its top (0)
and bottom (1) edges.
get_logs()return a list of SEVERE level logs after last reset time
stamps (default to 0, resettable by
reset_log_timestamp. Chrome only
clear_input() simulate key press to clear the input
driverproperty exposes the Selenium WebDriver as fixture
property
session_idproperty returns the Selenium session_id, shortcut to
driver.session_id
server_urlset the server_url as setter so the Selenium is aware of
the local server port, it also implicitly calls
wait_for_page. return the server_url as property
download_pathproperty returns the download_path, note that dash
fixtures are initialized with a temporary path from
pytest tmpdir16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 8/10

--- Página 9 ---
Dash APIs
This section enumerates a full list of Dash App related properties and APIs apart from the previous browser ones.
API Description
devtools_error_count_locatorproperty returns the selector of the error count number
in the devtool UI
dash_entry_locatorproperty returns the selector of react entry point, it can
be used to verify if an Dash app is loaded
dash_outerhtml_domproperty returns the BeautifulSoup parsed Dash DOM
from outerHTML
dash_innerhtml_domproperty returns the BeautifulSoup parsed Dash DOM
from innerHTML
redux_state_pathsproperty returns the
window.store.getState().paths
redux_state_rqsproperty returns
window.store.getState().requestQueue
window_store property returns window.store
get_local_storage(store_id="local")get the value of local storage item by the id, default is
local
get_session_storage(session_id="session")get the value of session storage item by the id, default is
session
clear_local_storage() shortcut to window.localStorage.clear()
clear_session_storage() shortcut to window.sessionStorage.clear()
clear_storage() clears both local and session storages
Debugging
Verify Your Test Environment
If you run the integration in a virtual environment, make sure you are getting the latest commit in the master
branch from each component, and that the installed pip versions are correct. Note: We have some enhancement
initiatives tr acking in this issue
Run the CI Job Locally
The CircleCI Local CLI  is a handy tool to execute some jobs locally. It gives you an earlier warning before even
pushing your commits to remote. For example, it's always recommended to pass lint and unit tests job first on
your local machine. So we can make sure there are no simple mistakes in the commit.
# install the cli (first time only)
$ curl -fLSs https://circle.ci/cli |  bash &amp;&amp; circleci version
# run at least the lint &amp; unit test  job on both python 2 and 3
# note: the current config requires all tests pass on python 2.7, 3.6 and 3.7.
$ circleci local  execute --job lint-unit-27 &amp;&amp; $ c ircleci local  execute --job lint-unit-37
Increase the Verbosity of pytest Logging Level
pytest --log-cli-level DEBUG -k bsly00116/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 9/10

--- Página 10 ---
Products
Dash
Consulting and TrainingPricing
Enterprise PricingAbout Us
Careers
Resources
BlogSupport
Community Support
Graphing DocumentationJoin our mailing
list
Sign up to stay in the loop with
all things Plotly — from Dash
Club to product updates,
webinars, and more!
SUBSCRIBE
Copyright © 2025 Plotly. All rights reserved. Terms of Service Privacy PolicyYou can get more logging information from Selenium WebDriver, Flask server, and our test APIs.
14:05:41 | DEBUG | selenium.webdri ver.remote.remote_connection:388 | DELETE http://127.0.0.1:53
14:05:41 | DEBUG | urllib3.connect ionpool:393 | http://127.0.0.1:53672 "DELETE /session/87b6f1e
14:05:41 | DEBUG | selenium.webdri ver.remote.remote_connection:440 | Finished Request
14:05:41 | INFO | dash.testing.app lication_runners:80 | killing the app runner
14:05:41 | DEBUG | urllib3.connect ionpool:205 | Starting new HTTP connection (1): localhost:805
14:05:41 | DEBUG | urllib3.connect ionpool:393 | http://localhost:8050 "GET /_stop-3ef0e64e86884
Selenium Snapshots
If you run your tests with CircleCI dockers (locally with CircleCI CLI and/or remotely with CircleCI). Inside a
docker run or VM instance where there is no direct access to the video card, there is a known limitation that you
cannot see anything from the Selenium browser on your screen. Automation developers use Xvfb  as a
workaround to solve this issue. It enables you to run graphical applications without a display (e.g., browser tests
on a CI server) while also having the ability to take screenshots. We implemented an automatic hook at the test
report stage, it checks if a test case failed with a Selenium test fixture. Before tearing down every instance, it will
take a snapshot at the moment where your assertion is False or having a runtime error. refer to Browser
APIs  Note: you can also check the snapshot dir ectly in Cir cleCI web page under Artifacts Tab
Percy Snapshots
There are two customized pytest arguments to tune Percy runner: 1. --nopercyfinalize disables the Percy
finalize in dash fixtures. This is required if you run your tests in parallel, then you add an extra percy finalize
--all step at the end. For more details, please visit Percy Documents . 2. --percy-assets lets Percy know
where to collect additional assets such as CSS files.
Dash Python  &gt; Dash Testing16/07/2025, 06:12 Dash Testing | Dash for Python Documentation | Plotly
https://dash.plotly.com/testing 10/10</content>
      </file>
      <file name="Dendrograms in Python.pdf" path="pyvy_2x1/Dendrograms in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Dendrogram
Set Color Threshold &gt;  &gt;
Dendrograms
Dendrograms in Python
How to make a dendrogram in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/dendrogram.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a diagram representing a tree. The  called create_dendrogram
performs  on data and represents the resulting tree. Values on the tree depth axis
correspond to distances between clusters.
dendrogram (https://en.wikipedia.org/wiki/Dendrogram)
figure factory (/python/figure-factories/)
hierarchical clustering (https://en.wikipedia.org/wiki/Hierarchical_clustering)
Dendrogram plots are commonly used in computational biology to show the clustering of genes or samples, sometimes in the margin of heatmaps.
import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
X = np.random.rand(15, 12) # 15 samples, with 12 dimensions each
fig = ff.create_dendrogram (X)
fig.update_layout (width=800, height=500)
fig.show()
1156101213714480132900.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Dendrograms in Python
https://plotly.com/python/dendrogram/ 1/6

--- Página 2 ---
Set Orientation and Add Labelsimport plotly.figure_factory  as ff
import numpy as np
X = np.random.rand(15, 10) # 15 samples, with 10 dimensions each
fig = ff.create_dendrogram (X, color_threshold =1.5)
fig.update_layout (width=800, height=500)
fig.show()
1947381112056141321000.511.52
16/07/2025, 05:59 Dendrograms in Python
https://plotly.com/python/dendrogram/ 2/6

--- Página 3 ---
Plot a Dendrogram with a Heatmapimport plotly.figure_factory  as ff
import numpy as np
X = np.random.rand(10, 12)
names = ['Jack', 'Oxana', 'John', 'Chelsea' , 'Mark', 'Alice', 'Charlie' , 'Rob', 'Lisa', 'Lily']
fig = ff.create_dendrogram (X, orientation ='left', labels=names)
fig.update_layout (width=800, height=800)
fig.show()
See also the .
Dash Bio demo (https://dash-bio.plotly.host/dash-clustergram/)0 0.5 1 1.5 2Jack
Alice
Charlie
Lisa
Oxana
Mark
John
Rob
Chelsea
Lily
16/07/2025, 05:59 Dendrograms in Python
https://plotly.com/python/dendrogram/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial.distance  import pdist, squareform
# get data
data = np.genfromtxt ("http://files.figshare.com/2133304/ExpRawData_E_TABM_84_A_AFFY_44.tab" ,
                     names=True,usecols=tuple(range(1,30)),dtype=float, delimiter ="\t")
data_array  = data.view((float, len(data.dtype.names)))
data_array  = data_array .transpose ()
labels = data.dtype.names
# Initialize figure by creating upper dendrogram
fig = ff.create_dendrogram (data_array , orientation ='bottom' , labels=labels)
for i in range(len(fig['data'])):
    fig['data'][i]['yaxis'] = 'y2'
# Create Side Dendrogram
dendro_side  = ff.create_dendrogram (data_array , orientation ='right')
for i in range(len(dendro_side ['data'])):
    dendro_side ['data'][i]['xaxis'] = 'x2'
# Add Side Dendrogram Data to Figure
for data in dendro_side ['data']:
    fig.add_trace (data)
# Create Heatmap
dendro_leaves  = dendro_side ['layout' ]['yaxis']['ticktext' ]
dendro_leaves  = list(map(int, dendro_leaves ))
data_dist  = pdist(data_array )
heat_data  = squareform (data_dist )
heat_data  = heat_data [dendro_leaves ,:]
heat_data  = heat_data [:,dendro_leaves ]
heatmap = [
    go.Heatmap(
        x = dendro_leaves ,
        y = dendro_leaves ,
        z = heat_data ,
        colorscale  = 'Blues'
    )
]
heatmap[0]['x'] = fig['layout' ]['xaxis']['tickvals' ]
heatmap[0]['y'] = dendro_side ['layout' ]['yaxis']['tickvals' ]
# Add Heatmap Data to Figure
for data in heatmap:
    fig.add_trace (data)
# Edit Layout
fig.update_layout ({'width':800, 'height' :800,
                         'showlegend' :False, 'hovermode' : 'closest' ,
                         })
# Edit xaxis
fig.update_layout (xaxis={'domain' : [.15, 1],
                                  'mirror' : False,
                                  'showgrid' : False,
                                  'showline' : False,
                                  'zeroline' : False,
                                  'ticks':""})
# Edit xaxis2
fig.update_layout (xaxis2={'domain' : [0, .15],
                                   'mirror' : False,
                                   'showgrid' : False,
                                   'showline' : False,
                                   'zeroline' : False,
                                   'showticklabels' : False,
                                   'ticks':""})
# Edit yaxis
fig.update_layout (yaxis={'domain' : [0, .85],
                                  'mirror' : False,
                                  'showgrid' : False,
                                  'showline' : False,
                                  'zeroline' : False,
16/07/2025, 05:59 Dendrograms in Python
https://plotly.com/python/dendrogram/ 4/6

--- Página 5 ---
Reference                                  'showticklabels' : False,
                                  'ticks': ""
                        })
# Edit yaxis2
fig.update_layout (yaxis2={'domain' :[.825, .975],
                                   'mirror' : False,
                                   'showgrid' : False,
                                   'showline' : False,
                                   'zeroline' : False,
                                   'showticklabels' : False,
                                   'ticks':""})
# Plot!
fig.show()
For more info on ff.create_dendrogram(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_dendrogram.html)
r07r06r11r08r14r15h43h62h18h17h32h42h29h45h39h36c11c07c01c15c14ol5ol3ol4ol1ol2ob1oh1oh2050100150200250300
16/07/2025, 05:59 Dendrograms in Python
https://plotly.com/python/dendrogram/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 05:59 Dendrograms in Python
https://plotly.com/python/dendrogram/ 6/6</content>
      </file>
      <file name="Discrete colors in Python.pdf" path="pyvy_2x1/Discrete colors in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Discrete vs Continuous Color
Discrete Color Concepts
color sequences are lists of colors to be mapped onto discrete data values. No interpolation occurs when using color sequences, unlike with 
, and each color is used as-is. Color sequence defaults depend on the layout.colorway attribute of the active 
, and can be explicitly specified using the color_discrete_sequence argument for many  functions.
legends are visible representations of the mapping between colors and data values. Legend markers also change shape when used with various kinds of
traces, such as symbols or lines for scatter-like traces.  under the layout.legend attribute. Legends are the discrete
equivalent of 
Discrete Color with Plotly Express &gt;  &gt;
Discrete Colors
Discrete Colors in Python
How to use and configure discrete color sequences, also known as categorical or qualitative color scales.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/discrete-color.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In the same way as the X or Y position of a mark in cartesian coordinates can be used to represent continuous values (i.e. amounts or moments in time) or categories
(i.e. labels), color can be used to represent continuous or discrete data. This page is about using color to represent categorical data using discrete colors, but Plotly
can also .
represent continuous values with color (/python/colorscales/)
This document explains the following discrete-color-related concepts:
continuous color
scales (/python/colorscales/)
template
(/python/templates/)
Plotly Express (/python/plotly-express/)
Legends are configurable (/python/legend/)
continuous color bars (/python/colorscales/)
Most Plotly Express functions accept a color argument which automatically assigns data values to discrete colors if the data is non-numeric. If the data is numeric,
the color will automatically be considered . This means that numeric strings must be parsed to be used for continuous color, and
conversely, numbers used as category codes must be converted to strings.
continuous (/python/colorscales/)
For example, in the tips dataset, the smoker column contains strings:
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 1/12

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" ,
                 title="String 'smoker' values mean discrete colors" )
fig.show()
The size column, however, contains numbers:
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()
Converting this column to strings is very straightforward, but note that the ordering in the legend is not sequential by default (see below for how to control discrete
order):10 20 30 40 50246810smoker
No
YesString 'smoker' values mean discrete colors
total_billtip
10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 2/12

--- Página 3 ---
import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str)
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="String 'size' values mean discrete colors" )
fig.show()
Converting a string column to a numeric one is also quite straightforward:
import plotly.express  as px
df = px.data.tips()
df["size"] = df["size"].astype(str) #convert to string
df["size"] = df["size"].astype(float) #convert back to numeric
fig = px.scatter(df, x="total_bill" , y="tip", color="size",
                 title="Numeric 'size' values mean continuous color" )
fig.show()10 20 30 40 50246810size
2
3
4
1
6
5String 'size' values mean discrete colors
total_billtip
10 20 30 40 50246810
123456sizeNumeric 'size' values mean continuous color
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 3/12

--- Página 4 ---
Discrete Colors in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Interactive color mode option with Dash"),
    html.P("Color mode:"),
    dcc.RadioItems(
        id='color-mode',
        value='discrete',
        options=['discrete', 'continuous'],
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("color-mode", "value"))
def generate_chart(mode):
    df = px.data.tips() # replace with your own data source
    if mode == 'discrete':
        df["size"] = df["size"].astype(str)
lDOWNLOAD
Interactive color mode option with Dash
Color mode:
discrete
continuous
10 20 30 40 50246810'size' values mean using DISCRETE colors
size
2
3
4
1
6
5
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 4/12

--- Página 5 ---
Color Sequences in Plotly Express
By default, Plotly Express will use the color sequence from the active 's layout.colorway attribute, and the default active template is
plotly which uses the plotly color sequence. You can choose any of the following built-in qualitative color sequences from the px.colors.qualitative module, however,
or define your own.
template (/python/templates/)
import plotly.express  as px
fig = px.colors.qualitative .swatches ()
fig.show()
Color sequences in the px.colors.qualitative module are stored as lists of CSS colors:
import plotly.express  as px
print(px.colors.qualitative .Plotly)
Here is an example that creates a scatter plot using Plotly Express, with points colored using the built-in qualitative G10 color sequence.VividSafePrismPastelBoldAntiqueSet3Pastel2Set2Dark2Pastel1Set1Light24Dark24AlphabetT10G10D3Plotlyplotly.colors.qualitative
['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3', '#FF6692', '#B6E880', '#FF97FF', '#FECB52']
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 5/12

--- Página 6 ---
Explicitly Constructing a Color Sequenceimport plotly.express  as px
df = px.data.gapminder ()
fig = px.line(df, y="lifeExp" , x="year", color="continent" , line_group ="country" ,
              line_shape ="spline" , render_mode ="svg",
             color_discrete_sequence =px.colors.qualitative .G10,
             title="Built-in G10 color sequence" )
fig.show()
The Plotly Express color_discrete_sequence argument accepts explicitly-constructed color sequences as well, as lists of CSS colors:
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.bar(df, y="continent" , x="pop", color="continent" , orientation ="h", hover_name ="country" ,
             color_discrete_sequence =["red", "green", "blue", "goldenrod" , "magenta" ],
             title="Explicit color sequence"
            )
fig.show()1960 1970 1980 1990 2000304050607080continent
Asia
Europe
Africa
Americas
OceaniaBuilt-in G10 color sequence
yearlifeExp
0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BOceaniaAmericasAfricaEuropeAsiacontinent
Asia
Europe
Africa
Americas
OceaniaExplicit color sequence
popcontinent
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 6/12

--- Página 7 ---
Directly Mapping Colors to Data ValuesWarning: If your color sequence is has fewer colors than the number of unique values in the column you are mapping to color, the colors will cycle through and repeat,
possibly leading to ambiguity:
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="day",
             color_discrete_sequence =["red", "blue"],
             title="&lt;b&gt;Ambiguous!&lt;/b&gt; Explicit color sequence cycling because it is too short"
            )
fig.show()
The example above assigned colors to data values on a first-come-first-served basis, but you can directly map colors to data values if this is important to your
application with color_discrete_map. Note that this does not change the order in which values appear in the figure or legend, as can be controlled below:10 20 30 40 50246810day
Sun
Sat
Thur
FriAmbiguous! Explicit color sequence cycling because it is too short
total_billtip
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 7/12

--- Página 8 ---
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.bar(df, y="continent" , x="pop", color="continent" , orientation ="h", hover_name ="country" ,
             color_discrete_map ={
                "Europe" : "red",
                "Asia": "green",
                "Americas" : "blue",
                "Oceania" : "goldenrod" ,
                "Africa" : "magenta" },
             title="Explicit color mapping" )
fig.show()
If your data set already contains valid CSS colors which you wish to use directly, you can pass the special value "identity" to color_discrete_map, in which case the
legend is hidden by default, and the color does not appear in the hover label:
import plotly.express  as px
fig = px.bar(x=["a","b","c"], y=[1,3,2], color=["red", "goldenrod" , "#00D"], color_discrete_map ="identity" )
fig.show()0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BOceaniaAmericasAfricaEuropeAsiacontinent
Asia
Europe
Africa
Americas
OceaniaExplicit color mapping
popcontinent
a b c00.511.522.53
xy
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 8/12

--- Página 9 ---
Controlling Discrete Color Order
Plotly Express lets you specify an ordering over categorical variables with category_orders, which will apply to colors and legends as well as symbols, 
 and . This can be used with either color_discrete_sequence or color_discrete_map.
axes
(/python/axes/)
facets (/python/facet-plots/)
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.bar(df, y="continent" , x="pop", color="continent" , orientation ="h", hover_name ="country" ,
             color_discrete_sequence =["red", "green", "blue", "goldenrod" , "magenta" ],
             category_orders ={"continent" : ["Oceania" , "Europe" , "Asia", "Africa" , "Americas" ]},
             title="Explicit color sequence with explicit ordering"
            )
fig.show()
0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BAmericasAfricaAsiaEuropeOceaniacontinent
Oceania
Europe
Asia
Africa
AmericasExplicit color sequence with explicit ordering
popcontinent
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 9/12

--- Página 10 ---
Using Sequential Scales as Discrete Sequencesimport plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.bar(df, y="continent" , x="pop", color="continent" , orientation ="h", hover_name ="country" ,
             color_discrete_map ={
                "Europe" : "red",
                "Asia": "green",
                "Americas" : "blue",
                "Oceania" : "goldenrod" ,
                "Africa" : "magenta" },
             category_orders ={"continent" : ["Oceania" , "Europe" , "Asia", "Africa" , "Americas" ]},
             title="Explicit color mapping with explicit ordering"
            )
fig.show()
In most cases, discrete/qualitative/categorical data values have no meaningful natural ordering, such as in the continents example used above. In some cases,
however, there is a meaningful order, and in this case it can be helpful and appealing to use part of a continuous scale as a discrete sequence, as in the following 
:
wind
rose chart (/python/wind-rose-charts/)0 0.5B 1B 1.5B 2B 2.5B 3B 3.5B 4BAmericasAfricaAsiaEuropeOceaniacontinent
Oceania
Europe
Asia
Africa
AmericasExplicit color mapping with explicit ordering
popcontinent
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 10/12

--- Página 11 ---
What About Dash?import plotly.express  as px
df = px.data.wind()
fig = px.bar_polar (df, r="frequency" , theta="direction" , color="strength" ,
                   color_discrete_sequence = px.colors.sequential .Plasma_r ,
                   title="Part of a continuous color scale used as a discrete sequence"
                  )
fig.show()
This works because just like in px.colors.qualitative, all  are stored as lists of CSS colors:
built-in continuous color scales (/python/builtin-colorscales/)
import plotly.express  as px
print(px.colors.sequential .Plasma)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterN
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
0246810strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+Part of a continuous color scale used as a discrete sequence
['#0d0887', '#46039f', '#7201a8', '#9c179e', '#bd3786', '#d8576b', '#ed7953', '#fb9f3a', '#fdca26', '#f0f921']
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 11/12

--- Página 12 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ence
ues16/07/2025, 06:08 Discrete colors in Python
https://plotly.com/python/discrete-color/ 12/12</content>
      </file>
      <file name="Displaying figures in Python.pdf" path="pyvy_2x1/Displaying figures in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Displaying Figures
1. Using the renderers framework in the context of a script or notebook (the main topic of this page)
2. Using  in a web app context
3. Using a  in an 
4. By  and loading that file in a browser immediately or later
5. By  such as PNG, JPEG, SVG, PDF or EPS and loading the
resulting file in any viewer
Displaying Figures Using The renderers Framework &gt;  &gt;
Displaying Figures
Displaying Figures in Python
Displaying Figures using Plotly's Python graphing library
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/renderers.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly's Python graphing library, plotly.py, gives you a wide range of options for how and where to display your figures.
In general, there are five different approaches you can take in order to display plotly figures:
Dash (https://dash.plot.ly)
FigureWidget rather than a Figure (https://plotly.com/python/figurewidget/)
ipywidgets context (https://ipywidgets.readthedocs.io/en/stable/)
exporting to an HTML file (https://plotly.com/python/interactive-html-export/)
rendering the figure to a static image file using Kaleido (https://plotly.com/python/static-image-export/)
Each of the first three approaches is discussed below.
The renderers framework is a flexible approach for displaying plotly.py figures in a variety of contexts. To display a figure using the renderers framework, you call the
.show() method on a graph object figure, or pass the figure to the plotly.io.show function. With either approach, plotly.py will display the figure using the current
default renderer(s).
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 1/11

--- Página 2 ---
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with fig.show()"
)
fig.show()
In most situations, you can omit the call to .show() and allow the figure to display itself.
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displaying Itself"
)
fig−0.5 0 0.5 1 1.5 2 2.500.511.522.53A Figure Displayed with fig.show()
−0.5 0 0.5 1 1.5 2 2.500.511.522.53A Figure Displaying Itself
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 2/11

--- Página 3 ---
Setting The Default Renderer
Overriding The Default RendererTo be precise, figures will display themselves using the current default renderer when the two following conditions are true. First, the last expression in a
cell must evaluate to a figure. Second, plotly.py must be running from within an IPython kernel.
In many contexts, an appropriate renderer will be chosen automatically and you will not need to perform any additional configuration. These contexts
include the classic , , 
, , 
 notebooks,  notebooks, and the .
Jupyter Notebook (https://jupyter.org/)
JupyterLab (https://jupyterlab.readthedocs.io/en/stable/)
Visual Studio Code notebooks
(https://code.visualstudio.com/docs/python/jupyter-support)
Google Colaboratory (https://colab.research.google.com/notebooks/intro.ipynb)
Kaggle
(https://www.kaggle.com/kernels)
Azure (https://notebooks.azure.com/)
Python interactive shell (https://www.python.org/shell/)
Additional contexts are supported by choosing a compatible renderer including the , 
, , and more.
IPython console (https://docs.spyder-ide.org/ipythonconsole.html)
QtConsole
(https://qtconsole.readthedocs.io/en/stable/)
Spyder (https://www.spyder-ide.org/)
Next, we will show how to configure the default renderer. After that, we will describe all of the built-in renderers and discuss why you might choose to use each one.
Note: The renderers framework is a generalization of the plotly.offline.iplot and plotly.offline.plot functions that were the recommended way to display
figures prior to plotly.py version 4. These functions have been reimplemented using the renderers framework and are still supported for backward
compatibility, but they will not be discussed here.
The current and available renderers are configured using the plotly.io.renderers configuration object. Display this object to see the current default renderer and the
list of all available renderers.
import plotly.io  as pio
pio.renderers
The default renderer that you see when you display pio.renderers might be different than what is shown here. This is because plotly.py attempts to autodetect an
appropriate renderer at startup. You can change the default renderer by assigning the name of an available renderer to the pio.renderers.default property. For
example, to switch to the 'browser' renderer, which opens figures in a tab of the default web browser, you would run the following.
Note: Default renderers persist for the duration of a single session, but they do not persist across sessions. If you are working in an IPython kernel, this
means that default renderers will persist for the life of the kernel, but they will not persist across kernel restarts.
import plotly.io  as pio
pio.renderers .default = "browser"
It is also possible to set the default renderer using a system environment variable. At startup, plotly.py checks for the existence of an environment variable named
PLOTLY_RENDERER. If this environment variable is set to the name of an available renderer, this renderer is set as the default.
It is also possible to override the default renderer temporarily by passing the name of an available renderer as the renderer keyword argument to the show() method.
Here is an example of displaying a figure using the svg renderer (described below) without changing the default renderer.Renderers configuration
-----------------------
Default renderer: 'notebook_connected'
Available renderers:
['plotly_mimetype', 'jupyterlab', 'nteract', 'vscode',
'notebook', 'notebook_connected', 'kaggle', 'azure', 'colab',
'cocalc', 'databricks', 'json', 'png', 'jpeg', 'jpg', 'svg',
'pdf', 'browser', 'firefox', 'chrome', 'chromium', 'iframe',
'iframe_connected', 'sphinx_gallery', 'sphinx_gallery_png']
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 3/11

--- Página 4 ---
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with the 'svg' Renderer"
)
fig.show(renderer ="svg")
−0.5 0 0.5 1 1.5 2 2.500.511.522.53A Figure Displayed with the 'svg' Renderer
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 4/11

--- Página 5 ---
Built-in Renderers
Interactive RenderersIn this section, we will describe the built-in renderers so that you can choose the one(s) that best suit your needs.
Interactive renderers display figures using the plotly.js JavaScript library and are fully interactive, supporting pan, zoom, hover tooltips, etc.
notebook
This renderer is intended for use in the classic  (not JupyterLab). The full plotly.js JavaScript library bundle is added to
the notebook the first time a figure is rendered, so this renderer will work without an Internet connection.
Jupyter Notebook (https://jupyter.org/install.html)
This renderer is a good choice for notebooks that will be exported to HTML files (Either using  or the
"Download as HTML" menu action) because the exported HTML files will work without an Internet connection.
nbconvert (https://nbconvert.readthedocs.io/en/latest/)
Note: Adding the plotly.js bundle to the notebook adds a few megabytes to the notebook size. If you can count on always having an Internet connection,
you may want to consider using the notebook_connected renderer if notebook size is a constraint.
notebook_connected
This renderer is the same as notebook renderer, except the plotly.js JavaScript library bundle is loaded from an online CDN location. This saves a few megabytes in
notebook size, but an Internet connection is required in order to display figures that are rendered this way.
This renderer is a good choice for notebooks that will be shared with  since users must have an active Internet connection to
access nbviewer in the first place.
nbviewer (https://nbviewer.jupyter.org/)
kaggle and azure
These are aliases for notebook_connected because this renderer is a good choice for use with  and 
.
Kaggle kernels (https://www.kaggle.com/docs/notebooks)
Azure
Notebooks (https://notebooks.azure.com/)
colab
This is a custom renderer for use with .
Google Colab (https://colab.research.google.com)
browser
This renderer will open a figure in a browser tab using the default web browser. This renderer can only be used when the Python kernel is running locally on the same
machine as the web browser, so it is not compatible with Jupyter Hub or online notebook services.
Implementation Note 1: In this context, the "default browser" is the browser that is chosen by the Python 
 module.
webbrowser
(https://docs.python.org/3.7/library/webbrowser.html)
Implementation Note 2: The browser renderer works by setting up a single use local webserver on a local port. Since the webserver is shut down as soon as
the figure is served to the browser, the figure will not be restored if the browser is refreshed.
firefox, chrome, and chromium
These renderers are the same as the browser renderer, but they force the use of a particular browser.
iframe and iframe_connected
These renderers write figures out as standalone HTML files and then display  elements that reference these
HTML files. The iframe renderer will include the plotly.js JavaScript bundle in each HTML file that is written, while the iframe_connected renderer includes only a
reference to an online CDN location from which to load plotly.js. Consequently, the iframe_connected renderer outputs files that are smaller than the iframe renderer,
but it requires an Internet connection while the iframe renderer can operate offline.
iframe (https://www.w3schools.com/html/html_iframe.asp)
This renderer may be useful when working with notebooks than contain lots of large figures. When using the notebook or notebook_connected renderer, all of the
data for all of the figures in a notebook are stored inline in the notebook itself. If this would result in a prohibitively large notebook size, an iframe or
iframe_connected renderer could be used instead. With the iframe renderers, the figure data are stored in the individual HTML files rather than in the notebook itself,
resulting in a smaller notebook size.
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 5/11

--- Página 6 ---
Static Image RenderersImplementation Note: The HTML files written by the iframe renderers are stored in a subdirectory named iframe_figures. The HTML files are given names
based on the execution number of the notebook cell that produced the figure. This means that each time a notebook kernel is restarted, any prior HTML
files will be overwritten. This also means that you should not store multiple notebooks using an iframe renderer in the same directory, because this could
result in figures from one notebook overwriting figures from another notebook.
plotly_mimetype
The plotly_mimetype renderer creates a specification of the figure (called a MIME-type bundle), and requests that the current user interface displays it. User interfaces
that support this renderer include , , and the Visual Studio Code 
.
JupyterLab (https://jupyterlab.readthedocs.io/en/stable/)
nteract (https://nteract.io/)
notebook
interface (https://code.visualstudio.com/docs/python/jupyter-support)
jupyterlab, nteract, and vscode
These are aliases for plotly_mimetype since this renderer is a good choice when working in JupyterLab, nteract, and the Visual Studio Code notebook interface. Note
that in VSCode Notebooks, the version of Plotly.js that is used to render is provided by the 
 and often trails the latest version by several weeks, so the latest features of plotly may not be available in
VSCode right away. The situation is similar for Nteract.
vscode-python extension
(https://code.visualstudio.com/docs/languages/python)
A set of renderers is provided for displaying figures as static images. See the  page for more
information on getting set up.
Static Image Export (https://plot.ly/python/static-image-export/)
png, jpeg, and svg
These renderers display figures as static .png, .jpeg, and .svg files, respectively. These renderers are useful for user interfaces that do not support inline HTML output,
but do support inline static images. Examples include the , , and the
PyCharm .
QtConsole (https://qtconsole.readthedocs.io/en/stable/)
Spyder (https://www.spyder-ide.org/)
notebook interface (https://www.jetbrains.com/help/pycharm/jupyter-notebook-support.html)
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with the 'png' Renderer"
)
fig.show(renderer ="png")
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 6/11

--- Página 7 ---
Other Miscellaneous Renderers
Multiple Renderers
Customizing Built-In RenderersPDF
This renderer displays figures as static PDF files. This is especially useful for notebooks that will be exported to PDF files using the LaTeX export capabilities of
.
nbconvert (https://nbconvert.readthedocs.io/en/latest/)
JSON
In editors that support it (JupyterLab, nteract, and the Visual Studio Code notebook interface), this renderer displays the JSON representation of a figure in a
collapsible interactive tree structure. This can be very useful for examining the structure of complex figures.
You can specify that multiple renderers should be used by joining their names on "+" characters. This is useful when writing code that needs to support multiple
contexts. For example, if a notebook specifies a default renderer string of "notebook+plotly_mimetype+pdf"then this notebook would be able to run in the classic
Jupyter Notebook, in JupyterLab, and it would support being exported to PDF using nbconvert.
Most built-in renderers have configuration options to customize their behavior. To view a description of a renderer, including its configuration options, access the
renderer object using dictionary-style key lookup on the plotly.io.renderers configuration object and then display it. Here is an example of accessing and displaying the
png renderer.
import plotly.io  as pio
png_renderer  = pio.renderers ["png"]
png_renderer
From this output, you can see that the png renderer supports 3 properties: width, height, and scale. You can customize these properties by assigning new values to
them.
Here is an example that customizes the png renderer to change the resulting image size, sets the png renderer as the default, and then displays a figure.PngRenderer(width=None, height=None, scale=None, engine='auto')
Renderer to display figures as static PNG images.  This renderer requires
either the kaleido package or the orca command-line utility and is broadly
compatible across IPython environments (classic Jupyter Notebook, JupyterLab,
QtConsole, VSCode, PyCharm, etc) and nbconvert targets (HTML, PDF, etc.).
mime type: 'image/png'
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 7/11

--- Página 8 ---
Displaying figures in Dashimport plotly.io  as pio
png_renderer  = pio.renderers ["png"]
png_renderer .width = 500
png_renderer .height = 500
pio.renderers .default = "png"
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with the 'png' Renderer"
)
fig.show()
You can also override the values of renderer parameters temporarily by passing them as keyword arguments to the show() method. For example
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Bar(y=[2, 1, 3])],
    layout_title_text ="A Figure Displayed with the 'png' Renderer"
)
fig.show(renderer ="png", width=800, height=300)
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 8/11

--- Página 9 ---
Displaying Figures Using ipywidgetsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
Plotly figures can be displayed in  contexts using plotly.graph_objects.FigureWidget objects. FigureWidget is a
figure graph object (just like plotly.graph_objects.Figure), so you can add traces to it and update it just like a regular Figure. But FigureWidget is also an ipywidgets
object, which means that you can display it alongside other ipywidgets to build user interfaces right in the notebook.
ipywidgets (https://ipywidgets.readthedocs.io/en/stable/)
See the  for more information on integrating plotly.py figures with ipywidgets.
Plotly FigureWidget Overview (https://plot.ly/python/figurewidget/)
It is important to note that FigureWidget does not use the renderers framework discussed above, so you should not use the plotly.io.show function on FigureWidget
objects.

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import numpy as np
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive plot with custom data source'),
    dcc.Graph(id="graph"),
    html.P("Number of bars:"),
    dcc.Slider(id="slider", min=2, max=10, value=4, step=1),
])
@app.callback(
    Output("graph", "figure"),
    Input("slider", "value"))
def update_bar_chart(size):
    data = np.random.normal(3, 2, size=size) # replace with your own data source
    fig = go.Figure(
        data=[go.Bar(y=data)],
        layout_title_text="Native Plotly rendering in Dash"
    )
    return fig
 (db T )DOWNLOAD
Interactive plot with custom data source
Number of bars:−0.5 0 0.5 1 1.5 2 2.5 3 3.50123456Native Plotly rendering in Dash
2 3 4 5 6 7 8 9 10
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 9/11

--- Página 10 ---
Performance
What About Dash?No matter the approach chosen to display a figure,  is first (automatically, internally) serialized
into a JSON string before being transferred from the Python context to the browser (or  or 
).
the figure data structure (https://plotly.com/python/figure-structure/)
to an HTML file first (https://plotly.com/python/interactive-html-export/)
to
Kaleido for static image export (https://plotly.com/python/static-image-export/)
New in v5.0
The default JSON serialization mechanism can be slow for figures with many data points or with large numpy arrays or data frames. If 
 is installed, plotly will use that instead of the built-in json package, which can lead to 5-10x speedups for large figures.
the orjson package
(https://github.com/ijl/orjson)
Once a figure is serialized to JSON, it must be rendered by a browser, either immediately in the user's browser, at some later point if the figure is exported to HTML, or
immediately in Kaleido's internal headless browser for static image export. Rendering time is generally proportional to the total number of data points in the figure,
the number of traces and the number of subplots. In situations where rendering performance is slow, we recommend considering 
 to exploit GPU-accelerated rendering in the browser, or 
before using px.imshow() to render the figure.
the use of plotly WebGL traces
(/python/webgl-vs-svg/)
using the Datashader library to do Python-side rendering (/python/datashader/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers) Support
Community Support (https://community.plot.ly/)
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 10/11

--- Página 11 ---
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
rers16/07/2025, 06:03 Displaying figures in Python
https://plotly.com/python/renderers/ 11/11</content>
      </file>
      <file name="Distplots in Python.pdf" path="pyvy_2x1/Distplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Combined statistical representations with px.histogram &gt;  &gt;
Distplots
Distplots in Python
How to make interactive Distplots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/distplot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Several representations of statistical distributions are available in plotly, such as , 
,  (see ). It is also
possible to combine several representations in the same plot.
histograms (https://plotly.com/python/histograms/)
violin plots
(https://plotly.com/python/violin/)
box plots (https://plotly.com/python/box-plots/)
the complete list here (https://plotly.com/python/statistical-charts/)
For example, the plotly.express function px.histogram can add a subplot with a different statistical representation than the histogram, given by the parameter
marginal.  is the easy-to-use, high-level interface to Plotly, which 
and produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", marginal ="rug",
                   hover_data =df.columns)
fig.show()
10 20 30 40 50020406080sex
Female
Male
total_billsum of tip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 1/14

--- Página 2 ---
Combined statistical representations in Dashimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex",
                   marginal ="box", # or violin, rug
                   hover_data =df.columns)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)10 20 30 40 50020406080sex
Female
Male
total_billsum of tip
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 2/14

--- Página 3 ---
Combined statistical representations with distplot figure factory
Basic DistplotSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
The distplot  displays a combination of statistical representations of numerical data, such as histogram, kernel density
estimation or normal curve, and rug plot.
figure factory (/python/figure-factories/)
A histogram, a kde plot and a rug plot are displayed.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Analysis of the restaurant's revenue"),
    html.P("Select Distribution:"),
    dcc.RadioItems(
        id='distribution',
        options=['box', 'violin', 'rug'],
        value='box', inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("distribution", "value"))
def display_graph(distribution):
    df = px.data.tips() # replace with your own data source
    fig = px.histogram(
        df, x="total_bill", y="tip", color="sex",
        marginal=distribution, range_x=[-5, 60],
 h dtdf l )DOWNLOAD
Analysis of the restaurant's revenue
Select Distribution:
boxviolinrug
0 10 20 30 40 50 60020406080sex
Female
Male
total_billsum of tip
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 3/14

--- Página 4 ---
Plot Multiple Datasetsimport plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
x = np.random.randn(1000)
hist_data  = [x]
group_labels  = ['distplot' ] # name of the dataset
fig = ff.create_distplot (hist_data , group_labels )
fig.show()
00.10.20.30.4
−3 −2 −1 0 1 2 3 4distplot
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 4/14

--- Página 5 ---
Use Multiple Bin Sizesimport plotly.figure_factory  as ff
import numpy as np
# Add histogram data
x1 = np.random.randn(200) - 2
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 2
x4 = np.random.randn(200) + 4
# Group data together
hist_data  = [x1, x2, x3, x4]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' , 'Group 4' ]
# Create distplot with custom bin_size
fig = ff.create_distplot (hist_data , group_labels , bin_size =.2)
fig.show()
Different bin sizes are used for the different datasets with the bin_size argument.
00.20.40.6
−4 −2 0 2 4 6 8Group 4
Group 3
Group 2
Group 1
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 5/14

--- Página 6 ---
Customize Rug Text, Colors &amp; Titleimport plotly.figure_factory  as ff
import numpy as np
# Add histogram data
x1 = np.random.randn(200)-2
x2 = np.random.randn(200)
x3 = np.random.randn(200)+2
x4 = np.random.randn(200)+4
# Group data together
hist_data  = [x1, x2, x3, x4]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' , 'Group 4' ]
# Create distplot with custom bin_size
fig = ff.create_distplot (hist_data , group_labels , bin_size =[.1, .25, .5, 1])
fig.show()
00.20.40.6
−4 −2 0 2 4 6Group 4
Group 3
Group 2
Group 1
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 6/14

--- Página 7 ---
Plot Normal Curveimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(26)
x2 = np.random.randn(26) + .5
group_labels  = ['2014', '2015']
rug_text_one  = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                'u', 'v', 'w', 'x', 'y', 'z']
rug_text_two  = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj',
                'kk', 'll', 'mm', 'nn', 'oo', 'pp', 'qq', 'rr', 'ss', 'tt',
                'uu', 'vv', 'ww', 'xx', 'yy', 'zz']
rug_text  = [rug_text_one , rug_text_two ] # for hover in rug plot
colors = ['rgb(0, 0, 100)' , 'rgb(0, 200, 200)' ]
# Create distplot with custom bin_size
fig = ff.create_distplot (
    [x1, x2], group_labels , bin_size =.2,
    rug_text =rug_text , colors=colors)
fig.update_layout (title_text ='Customized Distplot' )
fig.show()
00.20.40.60.81
−1.5 −1 −0.5 0 0.5 1 1.5 2 2.52015
2014
Customized Distplot
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 7/14

--- Página 8 ---
Plot Only Curve and Rugimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200)
x2 = np.random.randn(200) + 2
group_labels  = ['Group 1' , 'Group 2' ]
colors = ['slategray' , 'magenta' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot ([x1, x2], group_labels , bin_size =.5,
                         curve_type ='normal' , # override default 'kde'
                         colors=colors)
# Add title
fig.update_layout (title_text ='Distplot with Normal Distribution' )
fig.show()
00.10.20.30.4
−2 −1 0 1 2 3 4 5Group 2
Group 1
Distplot with Normal Distribution
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 8/14

--- Página 9 ---
Plot Only Hist and Rugimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 1
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 1
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#333F44' , '#37AA9C' , '#94F3E4' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot (hist_data , group_labels , show_hist =False, colors=colors)
# Add title
fig.update_layout (title_text ='Curve and Rug Plot' )
fig.show()
00.10.20.30.4
−4 −3 −2 −1 0 1 2 3Group 3
Group 2
Group 1Curve and Rug Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 9/14

--- Página 10 ---
Plot Hist and Rug with Different Bin Sizesimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 1
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 1
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#835AF1' , '#7FA6EE' , '#B8F7D4' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot (hist_data , group_labels , colors=colors, bin_size =.25,
                         show_curve =False)
# Add title
fig.update_layout (title_text ='Hist and Rug Plot' )
fig.show()
00.10.20.30.40.5
−4 −3 −2 −1 0 1 2 3 4Group 3
Group 2
Group 1
Hist and Rug Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 10/14

--- Página 11 ---
Plot Only Hist and Curveimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 2
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 2
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#393E46' , '#2BCDC1' , '#F66095' ]
fig = ff.create_distplot (hist_data , group_labels , colors=colors,
                         bin_size =[0.3, 0.2, 0.1], show_curve =False)
# Add title
fig.update(layout_title_text ='Hist and Rug Plot' )
fig.show()
00.10.20.30.40.50.6
−4 −2 0 2 4Group 3
Group 2
Group 1
Hist and Rug Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 11/14

--- Página 12 ---
Distplot with Pandasimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 2
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 2
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#A56CC1' , '#A6ACEC' , '#63F5EF' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot (hist_data , group_labels , colors=colors,
                         bin_size =.2, show_rug =False)
# Add title
fig.update_layout (title_text ='Hist and Curve Plot' )
fig.show()
−4 −2 0 2 400.10.20.30.40.5 Group 3
Group 2
Group 1
Hist and Curve Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 12/14

--- Página 13 ---
Reference
What About Dash?import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df = pd.DataFrame ({'2012': np.random.randn(200),
                   '2013': np.random.randn(200)+1})
fig = ff.create_distplot ([df[c] for c in df.columns], df.columns, bin_size =.25)
fig.show()
For more info on ff.create_distplot(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_distplot.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
00.10.20.30.40.50.6
−3 −2 −1 0 1 2 3 42013
2012
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 13/14

--- Página 14 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ns with
ns in
ns with
Sizes16/07/2025, 06:00 Distplots in Python
https://plotly.com/python/distplot/ 14/14</content>
      </file>
      <file name="Figure factories in Python.pdf" path="pyvy_2x1/Figure factories in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)plotly.figure_factory
, deprecated by 
, deprecated by regular 
, mostly deprecated by  except for KDE plots, which px.histogram doesn't support yet
, deprecated by 
Reference &gt;  &gt;
Figure Factories
Figure Factories in Python
Figure Factories are dedicated functions for creating very specific types of plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/figure-
factories.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The plotly.figure_factory module contains dedicated functions for creating very specific types of plots that were at the time of their creation difficult to create with
 and prior to the existence of . As new functionality gets added to 
 and to Plotly Express, certain Figure Factories become unnecessary and are therefore deprecated as "legacy", but remain in the module
for backwards-compatibility reasons.
graph objects (/python/graph-objects/)
Plotly Express (/python/plotly-express/)
Plotly.js
(https://plotly.com/javascript/)
The following types of plots are still difficult to create with Graph Objects or Plotly Express and therefore the corresponding Figure Factories are not deprecated:
Dendrograms (/python/dendrogram/)
Hexagonal Binning Tile Map (/python/hexbin-mapbox/)
Quiver Plots (/python/quiver-plots/)
Streamline Plots (/python/streamline-plots/)
Tables (/python/figure-factory-table/)
Ternary Contour Plots (/python/ternary-contour/)
Triangulated Surface Plots (/python/trisurf/)
Deprecated "legacy" Figure Factories include:
Annotated Heatmaps (/python/annotated-heatmap/)
heatmaps with px.imshow() (/python/heatmaps/)
County Choropleth Maps (/python/county-choropleth/)
Choropleth maps with GeoJSON input (/python/choropleth-maps/)
Distplots (/python/distplot/)
px.histogram (/python/histograms/)
Gantt Charts (/python/gantt/)
px.timeline (/python/gantt/)
For more information about the contents of plotly.figure_factory, including deprecated methods, please refer to our 
.
API Reference documentation
(https://plotly.com/python-api-reference/plotly.figure_factory.html)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:09 Figure factories in Python
https://plotly.com/python/figure-factories/ 1/2

--- Página 2 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:09 Figure factories in Python
https://plotly.com/python/figure-factories/ 2/2</content>
      </file>
      <file name="Figure factory tables in Python.pdf" path="pyvy_2x1/Figure factory tables in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Table
Add Links &gt;  &gt; Figure
Factory Tables
Figure Factory Tables in Python
How to make tables in Python with Plotly's Figure Factory.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/figure-
factory-table.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Tables can be created using a , or by using a  as detailed in this page.
table trace type (/python/table/)
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig = ff.create_table (data_matrix )
fig.show()
Country Year Population
United States 2000 282200000
Canada 2000 27790000
United States 2005 295500000
Canada 2005 32310000
United States 2010 309000000
Canada 2010 34000000
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 1/8

--- Página 2 ---
Use LaTeXimport plotly.figure_factory  as ff
data_matrix  = [['User', 'Language' , 'Chart Type' , '# of Views' ],
               ['&lt;a href="https://plotly.com/~empet/folder/home"&gt;empet&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/python/"&gt;Python&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~empet/8614/"&gt;Network Graph&lt;/a&gt;' ,
                298],
               ['&lt;a href="https://plotly.com/~Grondo/folder/home"&gt;Grondo&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/matlab/"&gt;Matlab&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Grondo/42/"&gt;Subplots&lt;/a&gt;' ,
                356],
               ['&lt;a href="https://plotly.com/~Dreamshot/folder/home"&gt;Dreamshot&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/"&gt;Bubble Map&lt;/a&gt;' ,
                262],
               ['&lt;a href="https://plotly.com/~FiveThirtyEight/folder/home"&gt;FiveThirtyEight&lt;/a&gt;' ,
                '&lt;a href="https://help.plot.ly/tutorials/"&gt;Web App&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~FiveThirtyEight/30/"&gt;Scatter&lt;/a&gt;' ,
                692],
               ['&lt;a href="https://plotly.com/~cpsievert/folder/home"&gt;cpsievert&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/r/"&gt;R&lt;/a&gt;' ,
                '&lt;a href="https://plotly.com/~cpsievert/1130/"&gt;Surface&lt;/a&gt;' ,
                302]]
fig = ff.create_table (data_matrix )
fig.show()
import plotly.figure_factory  as ff
data_matrix  = [['Name', 'Equation' ],
               ['Pythagorean Theorem' , '$a^{2}+b^{2}=c^{2}$'],
               ['Euler\'s Formula' , '$F-E+V=2$' ],
               ['The Origin of Complex Numbers' , '$i^{2}=-1$'],
               ['Einstein \'s Theory of Relativity' , '$E=m c^ {2}$']]
fig =  ff.create_table (data_matrix )
fig.show()
User Language Chart Type # of Views
empet
Python
Network Graph
298
Grondo
Matlab
Subplots
356
Dreamshot
Web App
Bubble Map
262
FiveThirtyEight
Web App
Scatter
692
cpsievert
R
Surface
302
Name Equation
Pythagorean Theorem
Euler's Formula
The Origin of Complex Numbers
Einstein's Theory of Relativity
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 2/8

--- Página 3 ---
Use a Pandas Dataframe
Modify Row Heightimport plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[100:120]
fig =  ff.create_table (df_sample )
fig.show()
The default row height is 30 pixels. Set height_constant if you'd like to change the height of each row.
import plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig =  ff.create_table (data_matrix , height_constant =20)
fig.show()
country year pop continent lifeExp gdpPercap
Bangladesh 1972 70759295.0 Asia 45.252 630.2336265
Bangladesh 1977 80428306.0 Asia 46.923 659.8772322
Bangladesh 1982 93074406.0 Asia 50.009 676.9818656
Bangladesh 1987 103764241.0 Asia 52.819 751.9794035
Bangladesh 1992 113704579.0 Asia 56.018 837.8101643
Bangladesh 1997 123315288.0 Asia 59.412 972.7700352
Bangladesh 2002 135656790.0 Asia 62.013 1136.39043
Bangladesh 2007 150448339.0 Asia 64.062 1391.253792
Belgium 1952 8730405.0 Europe 68.0 8343.105127
Belgium 1957 8989111.0 Europe 69.24 9714.960623
Belgium 1962 9218400.0 Europe 70.25 10991.20676
Belgium 1967 9556500.0 Europe 70.94 13149.04119
Belgium 1972 9709100.0 Europe 71.44 16672.14356
Belgium 1977 9821800.0 Europe 72.8 19117.97448
Belgium 1982 9856303.0 Europe 73.93 20979.84589
Belgium 1987 9870200.0 Europe 75.35 22525.56308
Belgium 1992 10045622.0 Europe 76.46 25575.57069
Belgium 1997 10199787.0 Europe 77.53 27561.19663
Belgium 2002 10311970.0 Europe 78.32 30485.88375
Belgium 2007 10392226.0 Europe 79.441 33692.60508
Country Year Population
United States 2000 282200000
Canada 2000 27790000
United States 2005 295500000
Canada 2005 32310000
United States 2010 309000000
Canada 2010 34000000
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 3/8

--- Página 4 ---
Custom Table Colors
Custom Font Colorsimport plotly.figure_factory  as ff
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
df_sample  = df[400:410]
colorscale  = [[0, '#4d004c' ],[.5, '#f2e5ff' ],[1, '#ffffff' ]]
fig =  ff.create_table (df_sample , colorscale =colorscale )
fig.show()
import plotly.figure_factory  as ff
text = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]
colorscale  = [[0, '#272D31' ],[.5, '#ffffff' ],[1, '#ffffff' ]]
font=['#FCFCFC' , '#00EE00' , '#008B00' , '#004F00' , '#660000' , '#CD0000' , '#FF3030' ]
fig = ff.create_table (text, colorscale =colorscale , font_colors =font)
fig.layout.width=250
fig.show()
country year pop continent lifeExp gdpPercap
Czech Republic 1972 9862158.0 Europe 70.29 13108.4536
Czech Republic 1977 10161915.0 Europe 70.71 14800.16062
Czech Republic 1982 10303704.0 Europe 70.96 15377.22855
Czech Republic 1987 10311597.0 Europe 71.58 16310.4434
Czech Republic 1992 10315702.0 Europe 72.4 14297.02122
Czech Republic 1997 10300707.0 Europe 74.01 16048.51424
Czech Republic 2002 10256295.0 Europe 75.51 17596.21022
Czech Republic 2007 10228744.0 Europe 76.486 22833.30851
Denmark 1952 4334000.0 Europe 70.78 9692.385245
Denmark 1957 4487831.0 Europe 71.81 11099.65935
Team Rank
A 1
B 2
C 3
D 4
E 5
F 6
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 4/8

--- Página 5 ---
Change Font Size
Tables with Graphsimport plotly.figure_factory  as ff
data_matrix  = [['Country' , 'Year', 'Population' ],
               ['United States' , 2000, 282200000 ],
               ['Canada' , 2000, 27790000 ],
               ['United States' , 2005, 295500000 ],
               ['Canada' , 2005, 32310000 ],
               ['United States' , 2010, 309000000 ],
               ['Canada' , 2010, 34000000 ]]
fig = ff.create_table (data_matrix , index=True)
# Make text size larger
for i in range(len(fig.layout.annotations )):
    fig.layout.annotations [i].font.size = 20
fig.show()
Country Year Population
United States 2000 282200000
Canada 2000 27790000
United States 2005 295500000
Canada 2005 32310000
United States 2010 309000000
Canada 2010 34000000
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 5/8

--- Página 6 ---
import plotly.graph_objs  as go
import plotly.figure_factory  as ff
# Add table data
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['LA Kings' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
# Initialize a figure with ff.create_table(table_data)
fig = ff.create_table (table_data , height_constant =60)
# Add graph data
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'LA Kings' , 'Ottawa Senators' ]
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]
# Make traces for graph
fig.add_trace (go.Scatter(x=teams, y=GFPG,
                    marker=dict(color='#0099ff' ),
                    name='Goals For&lt;br&gt;Per Game' ,
                    xaxis='x2', yaxis='y2'))
fig.add_trace (go.Scatter(x=teams, y=GAPG,
                    marker=dict(color='#404040' ),
                    name='Goals Against&lt;br&gt;Per Game' ,
                    xaxis='x2', yaxis='y2'))
fig.update_layout (
    title_text  = '2016 Hockey Stats' ,
    margin = {'t':50, 'b':100},
    xaxis = {'domain' : [0, .5]},
    xaxis2 = {'domain' : [0.6, 1.]},
    yaxis2 = {'anchor' : 'x2', 'title': 'Goals'}
)
fig.show()
Montréal CanadiensDallas StarsNY RangersBoston BruinsChicago BlackhawksLA KingsOttawa Senators22.22.42.62.833.23.43.6Goals For
Per Game
Goals Against
Per Game2016 Hockey Stats
GoalsTeam Wins Losses Ties
Montréal
Canadiens18 4 0
Dallas Stars18 5 0
NY Rangers16 5 0
Boston
Bruins13 8 0
Chicago
Blackhawks13 8 0
LA Kings 13 8 0
Ottawa
Senators12 5 0
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 6/8

--- Página 7 ---
import plotly.graph_objs  as go
import plotly.figure_factory  as ff
# Add table data
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
# Initialize a fig with ff.create_table(table_data)
fig = ff.create_table (table_data , height_constant =60)
# Add graph data
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'Ottawa Senators' ]
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]
fig.add_trace (go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#0099ff' ),
                name='Goals For&lt;br&gt;Per Game' ))
fig.add_trace (go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#404040' ),
                name='Goals Against&lt;br&gt;Per Game' ))
fig.update_layout (
    title_text  = '2016 Hockey Stats' ,
    height = 800,
    margin = {'t':75, 'l':50},
    yaxis = {'domain' : [0, .45]},
    xaxis2 = {'anchor' : 'y2'},
    yaxis2 = {'domain' : [.6, 1], 'anchor' : 'x2', 'title': 'Goals'}
)
fig.show()
Montréal CanadiensDallas Stars NY Rangers Boston BruinsChicago BlackhawksOttawa Senators00.511.522.533.5 Goals For
Per Game
Goals Against
Per Game2016 Hockey StatsGoals
Team Wins Losses Ties
Montréal
Canadiens18 4 0
Dallas Stars 18 5 0
NY Rangers 16 5 0
Boston
Bruins13 8 0
Chicago
Blackhawks13 8 0
Ottawa
Senators12 5 0
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 7/8

--- Página 8 ---
Reference
What About Dash?For more info on ff.create_table(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_table.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 05:59 Figure factory tables in Python
https://plotly.com/python/figure-factory-table/ 8/8</content>
      </file>
      <file name="Formatting ticks in Python.pdf" path="pyvy_2x1/Formatting ticks in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Tickmode - Linear
Tickmode - Array &gt;  &gt;
Formatting Ticks
Formatting Ticks in Python
How to format axes ticks in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/tick-
formatting.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
If "linear", the placement of the ticks is determined by a starting position tick0 and a tick step dtick
import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
))
fig.update_layout (
    xaxis = dict(
        tickmode  = 'linear' ,
        tick0 = 0.5,
        dtick = 0.75
    )
)
fig.show()
If "array", the placement of the ticks is set via tickvals and the tick text is ticktext.0.51.2522.753.54.2555.756.57.2588.759.510.251111.7512.5304050607080
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 1/9

--- Página 2 ---
Dynamic tickmode in Dashimport plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
))
fig.update_layout (
    xaxis = dict(
        tickmode  = 'array',
        tickvals  = [1, 3, 5, 7, 9, 11],
        ticktext  = ['One', 'Three', 'Five', 'Seven', 'Nine', 'Eleven' ]
    )
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)One Three Five Seven Nine Eleven304050607080
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 2/9

--- Página 3 ---
Using Tickformat AttributeSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
For more formatting types, see: 
https://github.com/d3/d3-format/blob/master/README.md#locale_format (https://github.com/d3/d3-
format/blob/master/README.md#locale_format)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live tick formatting'),
    dcc.Checklist(
        id='tick',
        options=[{'label': 'Enable linear ticks',
                  'value': 'linear'}],
        value=['linear']
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("tick", "value"))
def display_figure(tick_mode):
    fig = go.Figure(go.Scatter( # replace with your own data source
        x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5,
             77.8, 74.1, 62.6, 45.3, 39.9]
 ))DOWNLOAD
Live tick formatting
Enable linear ticks
0.51.2522.753.54.2555.756.57.2588.759.510.251111.7512.5304050607080
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 3/9

--- Página 4 ---
Using Tickformat Attribute - Date/Timeimport plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]
))
fig.update_layout (yaxis_tickformat  = '%')
fig.show()
For more date/time formatting types, see: 
https://github.com/d3/d3-time-format/blob/master/README.md (https://github.com/d3/d3-time-
format/blob/master/README.md)2 4 6 8 10 123000.000000%4000.000000%5000.000000%6000.000000%7000.000000%8000.000000%
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 4/9

--- Página 5 ---
Using Exponentformat Attributeimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(go.Scatter(
    x = df['Date'],
    y = df['AAPL.High' ],
))
fig.update_layout (
    title = 'Time Series with Custom Date-Time Format' ,
    xaxis_tickformat  = '%d %B (%a)&lt;br&gt;%Y'
)
fig.show()
01 April (Wed)
201501 July (Wed)
201501 October (Thu)
201501 January (Fri)
201601 April (Fri)
201601 July (Fri)
201601 October (Sat)
201601 January (Sun)
201790100110120130Time Series with Custom Date-Time Format
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 5/9

--- Página 6 ---
Tickformatstops to customize for different zoom levelsimport plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    y = [68000, 52000, 60000, 20000, 95000, 40000, 60000, 79000, 74000, 42000, 20000, 90000]
))
fig.update_layout (
    yaxis = dict(
        showexponent  = 'all',
        exponentformat  = 'e'
    )
)
fig.show()
2 4 6 8 10 120.2e+50.3e+50.4e+50.5e+50.6e+50.7e+50.8e+50.9e+51e+5
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 6/9

--- Página 7 ---
Placing ticks and gridlines between categoriesimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(go.Scatter(
    x = df['Date'],
    y = df['mavg']
))
fig.update_layout (
    xaxis_tickformatstops  = [
        dict(dtickrange =[None, 1000], value="%H:%M:%S.%L ms" ),
        dict(dtickrange =[1000, 60000], value="%H:%M:%S s" ),
        dict(dtickrange =[60000, 3600000], value="%H:%M m" ),
        dict(dtickrange =[3600000, 86400000 ], value="%H:%M h" ),
        dict(dtickrange =[86400000 , 604800000 ], value="%e. %b d"),
        dict(dtickrange =[604800000 , "M1"], value="%e. %b w"),
        dict(dtickrange =["M1", "M12"], value="%b '%y M" ),
        dict(dtickrange =["M12", None], value="%Y Y")
    ]
)
fig.show()
Apr '15 M Jul '15 M Oct '15 M Jan '16 M Apr '16 M Jul '16 M Oct '16 M Jan '17 M95100105110115120125130
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 7/9

--- Página 8 ---
Reference
What About Dash?import plotly.graph_objects  as go
fig = go.Figure(go.Bar(
    x = ["apples" , "oranges" , "pears"],
    y = [1, 2, 3]
))
fig.update_xaxes (
    showgrid =True,
    ticks="outside" ,
    tickson="boundaries" ,
    ticklen=20
)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/layout/xaxis/ (https://plotly.com/python/reference/layout/xaxis/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyterapples oranges pears00.511.522.53
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 8/9

--- Página 9 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
me
fferent16/07/2025, 06:05 Formatting ticks in Python
https://plotly.com/python/tick-formatting/ 9/9</content>
      </file>
      <file name="Fundamentals in Python.pdf" path="pyvy_2x1/Fundamentals in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Plotly Python Open Source Graphing Library Fundamentals
Plotly's Python graphing library makes interactive, publication-quality graphs online. Tutorials and tips about fundamental features of Plotly's python API.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/figure-
structure/)
The Figure Data
Structure
(/python/creating-and-
updating-figures/)
Creating and Updating
Figures
(/python/renderers/)
Displaying Figures
(/python/plotly-express/)
Plotly Express
(https://dash.plotly.com/)
Analytical Apps with
Dash
(/python/static-image-
export/)
Static Image Export
(/python/templates/)
Theming and templates
(/python/v6-migration/)
Changes in Version 6
(/python/orca-
management/)
Orca Management
(/python/configuration-
options/)
Configuration
(/python/setting-graph-
size/)
Setting Graph Size
(/python/tick-
formatting/)
Formatting Ticks
(/python/figure-labels/)
Setting the Font, Title,
Legend Entries, and Axis
Titles
(/python/axes/)
Axes
(/python/legend/)
Legends
(/python/multiple-axes/)
Multiple Axes
(/python/subplots/)
Subplots
(/python/graphing-
multiple-chart-types/)
Multiple Chart Types
(/python/px-arguments/)
Plotly Express
Arguments
(/python/marker-style/)
Styling Markers
(/python/colorscales/)
Continuous Color Scales
and Color Bars
(/python/text-and-
annotations/)
Text and Annotations
(/python/hover-text-and-
formatting/)
Hover Text and
Formatting
(/python/images/)
Images
(/python/shapes/)
(/python/ipython-vs-
python/)
(/python/troubleshooting/)
(/python/builtin-
colorscales/)
(/python/discrete-color/)
(/python/styling-plotly-
express/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
https://plotly.com/python/plotly-fundamentals/ 1/4

--- Página 2 ---
Plotly Express in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to get
the code and run python app.py.
Get started with 
and learn how to effortlessly  &amp;  apps like this with 
.
Shapes
IPython vs Python
Troubleshooting
Built-in Continuous
Color Scales
Discrete Colors
Styling Plotly Express
Figures
(/python/interactive-
html-export/)
Interactive HTML Export
(/python/pandas-
backend/)
Pandas Plotting Backend
(/python/figure-
factories/)
Figure Factories
(/python/wide-form/)
Plotly Express Wide-
Form Support
(/python/graph-objects/)
Graph Objects
(/python/figure-
introspection/)
Introspecting Figures
(/python/horizontal-
vertical-shapes/)
Horizontal and Vertical
Lines and Rectangles
(/python/selections/)
Selections
(/python/v4-migration/)
Version 4 Migration
Guide
(/python/static-image-
generation-changes/)
Static Image Generation
Changes in Plotly.py 6.1
(/python/css-colors/)
Supported CSS Colors
Dash (https://plotly.com/dash/)
the official Dash docs (https://dash.plotly.com/installation?
_gl=1*161lfje*_gcl_au*NzY3MDkzNTIwLjE3NTIwMjEzODI.*_ga*MTYzMDA0ODc1NC4xNzUyMDIxMzgy*_ga_6G7EE0JNSC*czE3NTI2NTI0ODUkbzckZzEkdDE3NTI2NTcwMTIkajI
style (https://plotly.com/dash/design-kit/)
deploy (https://plotly.com/dash/app-manager/)
Dash Enterprise
(https://plotly.com/dash/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
https://plotly.com/python/plotly-fundamentals/ 2/4

--- Página 3 ---

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Analysis of Iris data using scatter matrix'),
    dcc.Dropdown(
        id="dropdown",
        options=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'],
        value=['sepal_length', 'sepal_width'],
        multi=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def update_bar_chart(dims):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter_matrix(
        df, dimensions=dims, color="species")
    return figDOWNLOAD
Analysis of Iris data using scatter matrix
×sepal_length
×sepal_width ×
45678
4 5 6 7 8234
2 3 4
species
setosa
versicolor
virginica
sepal_length sepal_widthsepal_length sepal_width
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
https://plotly.com/python/plotly-fundamentals/ 3/4

--- Página 4 ---
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:12 Fundamentals in Python
https://plotly.com/python/plotly-fundamentals/ 4/4</content>
      </file>
      <file name="Gantt charts in Python.pdf" path="pyvy_2x1/Gantt charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Gantt Charts and Timelines with plotly.express &gt;  &gt; Gantt
Charts
Gantt Charts in Python
How to make Gantt Charts in Python with Plotly. Gantt Charts use horizontal bars to represent the start and end times of tasks.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Basic Charts (/python/basic-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/gantt.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a type of bar chart that illustrates a project schedule. The chart lists the tasks to be performed on the
vertical axis, and time intervals on the horizontal axis. The width of the horizontal bars in the graph shows the duration of each activity.
Gantt chart (https://en.wikipedia.org/wiki/Gantt_chart)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.timeline (introduced in version 4.9) each data point is represented as a horizontal bar with a
start and end point specified as dates.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The px.timeline function by default sets the X-axis to be of type=date, so it can be configured like any .
time-series chart (/python/time-series/)
Plotly Express also supports a .
general-purpose px.bar function for bar charts (/python/bar-charts/)
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task")
fig.update_yaxes (autorange ="reversed" ) # otherwise tasks are listed from the bottom up
fig.show()
Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job CJob BJob ATask
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 1/8

--- Página 2 ---
px.timeline supports  as above, or  as follows.
discrete color (/python/discrete-color/)
continuous color (/python/colorscales/)
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Resource" )
fig.update_yaxes (autorange ="reversed" )
fig.show()
Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job CJob BJob AResource
Alex
MaxTask
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 2/8

--- Página 3 ---
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Completion_pct =50),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Completion_pct =25),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Completion_pct =75)
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Task", color="Completion_pct" )
fig.update_yaxes (autorange ="reversed" )
fig.show()
It is also possible to have multiple bars on the same horizontal line, say by resource:
Note: When setting color to the same value as y, autorange should not be set to reverse, so as to list the value of the Y axis in the same order as the legend entries.Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job CJob BJob A
3040506070Completion_pctTask
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 3/8

--- Página 4 ---
Deprecated Figure Factoryimport plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Resource" , color="Resource" )
fig.show()
Prior to the introduction of plotly.express.timeline() in version 4.9, the recommended way to make Gantt charts was to use the now-deprecated create_gantt()
, as follows:
figure
factory (/python/figure-factories/)Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009MaxAlexResource
Alex
MaxResource
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 4/8

--- Página 5 ---
Group Tasks Togetherimport plotly.figure_factory  as ff
df = [dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' ),
      dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' ),
      dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' )]
fig = ff.create_gantt (df)
fig.show()
The following example shows how to use the now-deprecated create_gantt()  to color tasks by a numeric variable.
figure factory (/python/figure-factories/)Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job AJob BJob C1w1m6mYTD1yallGantt Chart
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 5/8

--- Página 6 ---
Color by Numeric Variableimport plotly.figure_factory  as ff
df = [dict(Task="Job-1", Start='2017-01-01' , Finish='2017-02-02' , Resource ='Complete' ),
      dict(Task="Job-1", Start='2017-02-15' , Finish='2017-03-15' , Resource ='Incomplete' ),
      dict(Task="Job-2", Start='2017-01-17' , Finish='2017-02-17' , Resource ='Not Started' ),
      dict(Task="Job-2", Start='2017-01-17' , Finish='2017-02-17' , Resource ='Complete' ),
      dict(Task="Job-3", Start='2017-03-10' , Finish='2017-03-20' , Resource ='Not Started' ),
      dict(Task="Job-3", Start='2017-04-01' , Finish='2017-04-20' , Resource ='Not Started' ),
      dict(Task="Job-3", Start='2017-05-18' , Finish='2017-06-18' , Resource ='Not Started' ),
      dict(Task="Job-4", Start='2017-01-14' , Finish='2017-03-14' , Resource ='Complete' )]
colors = {'Not Started' : 'rgb(220, 0, 0)' ,
          'Incomplete' : (1, 0.9, 0.16),
          'Complete' : 'rgb(0, 255, 100)' }
fig = ff.create_gantt (df, colors=colors, index_col ='Resource' , show_colorbar =True,
                      group_tasks =True)
fig.show()
The following example shows how to use the now-deprecated create_gantt()  to color tasks by a numeric variable.
figure factory (/python/figure-factories/)Jan 2017 Feb 2017 Mar 2017 Apr 2017 May 2017 Jun 2017Job-4Job-3Job-2Job-1Complete
Not Started
Incomplete1w1m6mYTD1yallGantt Chart
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 6/8

--- Página 7 ---
Reference
What About Dash?import plotly.figure_factory  as ff
df = [dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Complete =10),
      dict(Task="Job B", Start='2008-12-05' , Finish='2009-04-15' , Complete =60),
      dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Complete =95)]
fig = ff.create_gantt (df, colors='Viridis' , index_col ='Complete' , show_colorbar =True)
fig.show()
For more info on ff.create_gantt(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_gantt.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterDec 2008 Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009Job AJob BJob C1w1m6mYTD1yall
020406080100Gantt Chart
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 7/8

--- Página 8 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:00 Gantt charts in Python
https://plotly.com/python/gantt/ 8/8</content>
      </file>
      <file name="Graph objects in Python.pdf" path="pyvy_2x1/Graph objects in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt;
Graph Objects
Graph Objects in Python
Python classes that represent parts of a figure.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/graph-
objects.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 1/6

--- Página 2 ---
What Are Graph Objects?
Graph Objects Compared to Dictionaries
1. Graph objects provide precise data validation. If you provide an invalid property name or an invalid property value as the key to a graph object, an exception
will be raised with a helpful error message describing the problem. This is not the case if you use plain Python dictionaries and lists to build your figures.
2. Graph objects contain descriptions of each valid property as Python docstrings, with a .
You can use these docstrings in the development environment of your choice to learn about the available properties as an alternative to consulting the online
.
3. Properties of graph objects can be accessed using both dictionary-style key lookup (e.g. fig["layout"]) or class-style property access (e.g. fig.layout).
4. Graph objects support higher-level convenience functions for making updates to already constructed figures (.update_layout(), .add_trace() etc).
5. Graph object constructors and update methods accept "magic underscores" (e.g. go.Figure(layout_title_text="The Title") rather than
dict(layout=dict(title=dict(text="The Title")))) for more compact code.
6. Graph objects support attached rendering (.show()) and exporting functions (.write_image()) that automatically invoke the appropriate functions from 
.
When to use Graph Objects vs Plotly ExpressThe figures created, manipulated and rendered by the plotly Python library are  which are
automatically serialized to JSON for rendering by the Plotly.js JavaScript library. These trees are composed of named nodes called "attributes", with their structure
defined by the Plotly.js figure schema, which is available in .
The plotly.graph_objects module (typically imported as go) contains an 
 which represent non-leaf nodes in this figure schema. The term "graph objects" refers to instances of
these classes.
represented by tree-like data structures (/python/figure-structure/)
machine-readable form (https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json)
automatically-generated hierarchy of Python classes (https://plotly.com/python-api-
reference/plotly.graph_objects.html#graph-objects)
The primary classes defined in the plotly.graph_objects module are  and
an , which both represent entire figures. Instances of these classes have many convenience
methods for Pythonically  (e.g. .update_layout() or .add_trace(), which all accept 
) as well as  (e.g. .show()) and
 (e.g. .to_json() or .write_image() or .write_html()).
Figure (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html)
ipywidgets-compatible variant called FigureWidget (/python/figurewidget/)
manipulating their attributes (/python/creating-and-updating-figures/)
"magic
underscore" notation (/python/creating-and-updating-figures/#magic-underscore-notation)
rendering them (/python/renderers/)
exporting them to various formats (/python/static-image-export/)
Note: the functions in , which is the recommended entry-point into the plotly library, are all built on top of graph
objects, and all return instances of plotly.graph_objects.Figure.
Plotly Express (/python/plotly-express/)
Every non-leaf attribute of a figure is represented by an instance of a class in the plotly.graph_objects hierarchy. For example, a figure fig can have an attribute
layout.margin, which contains attributes t, l, b and r which are leaves of the tree: they have no children. The field at fig.layout is an object of class
 and fig.layout.margin is an object of class
plotly.graph_objects.layout.Margin which represents the margin node, and it has fields t, l, b and r, containing the values of the respective leaf-nodes. Note that
specifying all of these values can be done without creating intermediate objects using 
: go.Figure(layout_margin=dict(t=10, b=10, r=10, l=10)).
plotly.graph_objects.Layout (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Layout.html)
"magic underscore" notation (/python/creating-and-updating-figures/#magic-
underscore-notation)
The objects contained in the list which is the , and can be of one of more than 40 possible
types, each of which has a corresponding class in plotly.graph_objects. For example, traces of type scatter are represented by instances of the class
plotly.graph_objects.Scatter. This means that a figure constructed as go.Figure(data=[go.Scatter(x=[1,2], y=[3,4)]) will have the JSON representation {"data": [{"type":
"scatter", "x": [1,2], "y": [3,4]}]}.
value of the attribute data are called "traces" (/python/figure-structure/)
Graph objects have several benefits compared to plain Python dictionaries:
full API reference available (https://plotly.com/python-api-reference/)
Full Reference (/python/reference/index/)
the
plotly.io module (https://plotly.com/python-api-reference/plotly.io.html)
The recommended way to create figures is using the , 
, which all return instances of plotly.graph_objects.Figure, so every figure produced with the plotly library actually uses graph objects
under the hood, unless manually constructed out of dictionaries.
functions in the plotly.express module (https://plotly.com/python-api-reference/)
collectively known as Plotly
Express (/python/plotly-express/)
That said, certain kinds of figures are not yet possible to create with Plotly Express, such as figures that use certain 3D trace-types like  or
. In addition, certain figures are cumbersome to create by starting from a figure created with Plotly Express, for example
figures with , , or  with multiple
different types of traces. To construct such figures, it can be easier to start from an empty plotly.graph_objects.Figure object (or one configured with subplots via the
) and progressively add traces and update attributes as above. Every plotly documentation page lists the Plotly Express
option at the top if a Plotly Express function exists to make the kind of chart in question, and then the graph objects version below.
mesh (/python/3d-mesh/)
isosurface (/python/3d-isosurface-plots/)
subplots of different types (/python/mixed-subplots/)
dual-axis plots (/python/multiple-axes/)
faceted plots (/python/facet-plots/)
make_subplots() function (/python/subplots/)
Note that the figures produced by Plotly Express in a single function-call are , and to 
 using the update_* and add_* methods.
easy to customize at creation-time (/python/styling-plotly-express/)
manipulate
after creation (/python/creating-and-updating-figures/)
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 2/6

--- Página 3 ---
Comparing Graph Objects and Plotly Express
The figures produced by Plotly Express can always be built from the ground up using graph objects, but this approach typically takes 5-100 lines of code rather than
1.
Here is a simple example of how to produce the same figure object from the same data, once with Plotly Express and once without. Note that 
 like  can accept a DataFrame as their first argument with column names passed to the x and
y arguments, while  like 
 require the data values to be passed directly to the x and y arguments as a tuple, list, NumPy array, or Pandas Series.
Plotly Express functions
(/python-api-reference/plotly.express.html)
px.bar() (/python/bar-charts/)
Graph Objects functions (/python-api-reference/plotly.graph_objects.html)
go.Bar() (/python/bar-charts/#basic-bar-charts-with-
plotlygraphobjects)
The data in this example is in "long form" but  and the line-count savings from Plotly Express over
graph objects are comparable. More complex figures such as , , 
 or  require many more lines of figure-specific graph objects code, whereas switching from one
representation to another with Plotly Express usually involves changing just a few characters.
Plotly Express also accepts data in "wide form" (/python/wide-form/)
sunbursts (/python/sunburst-charts/)
parallel coordinates (/python/parallel-coordinates-plot/)
facet
plots (/python/facet-plots/)
animations (/python/animations/)
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 3/6

--- Página 4 ---
import pandas as pd
df = pd.DataFrame ({
  "Fruit": ["Apples" , "Oranges" , "Bananas" , "Apples" , "Oranges" , "Bananas" ],
  "Contestant" : ["Alex", "Alex", "Alex", "Jordan" , "Jordan" , "Jordan" ],
  "Number Eaten" : [2, 1, 3, 1, 3, 2],
})
# Plotly Express
import plotly.express  as px
fig = px.bar(df, x="Fruit", y="Number Eaten" , color="Contestant" , barmode="group")
fig.show()
# Graph Objects
import plotly.graph_objects  as go
fig = go.Figure()
for contestant , group in df.groupby("Contestant" ):
    fig.add_trace (go.Bar(x=group["Fruit"], y=group["Number Eaten" ], name=contestant ,
      hovertemplate ="Contestant= %s&lt;br&gt;Fruit= %%{x}&lt;br&gt;Number Eaten= %%{y}&lt;extra&gt;&lt;/extra&gt;" % contestant ))
fig.update_layout (legend_title_text  = "Contestant" )
fig.update_xaxes (title_text ="Fruit")
fig.update_yaxes (title_text ="Number Eaten" )
fig.show()
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 4/6

--- Página 5 ---
 Apples Oranges Bananas00.511.522.53Contestant
Alex
Jordan
FruitNumber Eaten
Apples Oranges Bananas00.511.522.53 Contestant
Alex
Jordan
FruitNumber Eaten
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
naries
y
y16/07/2025, 06:09 Graph objects in Python
https://plotly.com/python/graph-objects/ 6/6</content>
      </file>
      <file name="Heatmaps in Python.pdf" path="pyvy_2x1/Heatmaps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)1. Matrix Heatmaps accept a 2-dimensional matrix or array of data and visualizes it directly. This type of heatmap is the subject of this page.
2. Density Heatmaps accept data as a list and visualizes aggregated quantities like counts or sums of this data. Please refer to the 
 for this kind of figure.
Heatmaps with Plotly Express &gt;  &gt;
Heatmaps
Heatmaps in Python
How to make Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/heatmaps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The term "heatmap" usually refers to a Cartesian plot with data visualized as colored rectangular tiles, which is the subject of this page. It is also sometimes used to
refer to .
actual maps with density data displayed as color intensity (/python/tile-density-heatmaps/)
Plotly supports two different types of colored-tile heatmaps:
2D Histogram documentation
(/python/2D-Histogram/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.imshow, each value of the input array or data frame is represented as a heatmap pixel.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The px.imshow() function can be used to display heatmaps (as well as full-color images, as its name suggests). It accepts both array-like objects like lists of lists and
numpy or xarray arrays, as well as supported .
DataFrame objects (/python/px-arguments#supported-dataframes)
For more examples using px.imshow, including examples of faceting and animations, as well as full-color image display, see the 
.
the imshow documentation
page (/python/imshow)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 1/13

--- Página 2 ---
Displaying Text on Heatmapsimport plotly.express  as px
fig = px.imshow([[1, 20, 30],
                 [20, 1, 60],
                 [30, 60, 1]])
fig.show()
import plotly.express  as px
df = px.data.medals_wide (indexed=True)
fig = px.imshow(df)
fig.show()
New in v5.5
You can add the values to the figure as text using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting
string will control the output format.
0 1 22.521.510.50−0.5
102030405060
gold silver bronzeCanadaChinaSouth Korea
81012141618202224
medalnation
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 2/13

--- Página 3 ---
Heatmaps in Dashimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 3/13

--- Página 4 ---
Controlling Aspect RatioSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
By default, px.imshow() produces heatmaps with square tiles, but setting the aspect argument to "auto" will instead fill the plotting area with the heatmap, using non-
square tiles.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Olympic medals won by countries'),
    dcc.Graph(id="graph"),
    html.P("Medals included:"),
    dcc.Checklist(
        id='medals',
        options=["gold", "silver", "bronze"],
        value=["gold", "silver"],
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("medals", "value"))
def filter_heatmap(cols):
    df = px.data.medals_wide(indexed=True) # replace with your own data source
    fig = px.imshow(df[cols])
    return figDOWNLOAD
Olympic medals won by countries
Medals included:
gold
silver
bronze
gold silverCanadaChinaSouth Korea
1012141618202224
medalnation
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 4/13

--- Página 5 ---
Customizing the axes and labels on a heatmapimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True, aspect="auto")
fig.show()
You can use the x, y and labels arguments to customize the display of a heatmap, and use .update_xaxes() to move the x axis tick labels to the top:
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 5/13

--- Página 6 ---
Display an xarray image with px.imshowimport plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="Day of Week" , y="Time of Day" , color="Productivity" ),
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes (side="top")
fig.show()
 are labeled arrays (with labeled axes and coordinates). If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays (http://xarray.pydata.org/en/stable/)
Monday Tuesday Wednesday Thursday Friday
EveningAfternoonMorning
1020304050607080ProductivityDay of WeekTime of Day
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 6/13

--- Página 7 ---
Basic Heatmap with plotly.graph_objectsimport plotly.express  as px
import xarray as xr
# Load xarray from dataset included in the xarray tutorial
airtemps  = xr.tutorial .open_dataset ('air_temperature' ).air.sel(lon=250.0)
fig = px.imshow(airtemps .T, color_continuous_scale ='RdBu_r' , origin='lower')
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Heatmap class from plotly.graph_objects (/python/graph-
objects/)
import plotly.graph_objects  as go
fig = go.Figure(data=go.Heatmap(
                    z=[[1, 20, 30],
                      [20, 1, 60],
                      [30, 60, 1]]))
fig.show()
Jan 2013Apr 2013Jul 2013Oct 2013Jan 2014Apr 2014Jul 2014Oct 2014203040506070
2402602803004xDaily Air temperature at
sigma level 995 [degK]
timelat
−0.5 0 0.5 1 1.5 2 2.5−0.500.511.522.5
102030405060
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 7/13

--- Página 8 ---
Heatmap with Categorical Axis Labels
In this example we also show how to ignore  when we have missing values in the data by setting the
 to False.
hovertext (https://plotly.com/python/hover-text-and-formatting/)
hoverongaps (https://plotly.com/python/reference/heatmap/#heatmap-hoverongaps)
import plotly.graph_objects  as go
fig = go.Figure(data=go.Heatmap(
                   z=[[1, None, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
                   x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                   y=['Morning' , 'Afternoon' , 'Evening' ],
                   hoverongaps  = False))
fig.show()
Monday Tuesday Wednesday Thursday FridayMorningAfternoonEvening
−1001020304050607080
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 8/13

--- Página 9 ---
Heatmap with Unequal Block Sizes
import plotly.graph_objects  as go
import numpy as np
# Build the rectangles as a heatmap
# specify the edges of the heatmap squares
phi = (1 + np.sqrt(5) )/2. # golden ratio
xe = [0, 1, 1+(1/(phi**4)), 1+(1/(phi**3)), phi]
ye = [0, 1/(phi**3), 1/phi**3+1/phi**4, 1/(phi**2), 1]
z = [ [13,3,3,5],
      [13,2,1,5],
      [13,10,11,12],
      [13,8,8,8]
    ]
fig = go.Figure(data=go.Heatmap(
          x = np.sort(xe),
          y = np.sort(ye),
          z = z,
          type = 'heatmap' ,
          colorscale  = 'Viridis' ))
# Add spiral line plot
def spiral(th):
    a = 1.120529
    b = 0.306349
    r = a*np.exp(-b*th)
    return (r*np.cos(th), r*np.sin(th))
theta = np.linspace (-np.pi/13,4*np.pi,1000); # angle
(x,y) = spiral(theta)
fig.add_trace (go.Scatter(x= -x+x[0], y= y-y[0],
     line =dict(color='white',width=3)))
axis_template  = dict(range = [0,1.6], autorange  = False,
             showgrid  = False, zeroline  = False,
             linecolor  = 'black', showticklabels  = False,
             ticks = '' )
fig.update_layout (margin = dict(t=200,r=200,b=200,l=200),
    xaxis = axis_template ,
    yaxis = axis_template ,
    showlegend  = False,
    width = 700, height = 700,
    autosize  = False )
fig.show()
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 9/13

--- Página 10 ---
24681012
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 10/13

--- Página 11 ---
Heatmap with Datetime Axis
Text on Heatmap Pointsimport plotly.graph_objects  as go
import datetime
import numpy as np
np.random.seed(1)
programmers  = ['Alex','Nicole' ,'Sara','Etienne' ,'Chelsea' ,'Jody','Marianne' ]
base = datetime .datetime .today()
dates = base - np.arange(180) * datetime .timedelta (days=1)
z = np.random.poisson(size=(len(programmers ), len(dates)))
fig = go.Figure(data=go.Heatmap(
        z=z,
        x=dates,
        y=programmers ,
        colorscale ='Viridis' ))
fig.update_layout (
    title=dict(text='GitHub commits per day' ),
    xaxis_nticks =36)
fig.show()
In this example we add text to heatmap points using texttemplate. We use the values from the text attribute for the text. We also adjust the font size using textfont.
Jan 12
2025Jan 19Jan 26Feb 2Feb 9Feb 16Feb 23Mar 2Mar 9Mar 16Mar 23Mar 30Apr 6Apr 13Apr 20Apr 27May 4May 11May 18May 25Jun 1Jun 8Jun 15Jun 22Jun 29Jul 6AlexNicoleSaraEtienneChelseaJodyMarianne
012345GitHub commits per day
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 11/13

--- Página 12 ---
Heatmap and datashader
Referenceimport plotly.graph_objects  as go
fig = go.Figure(data=go.Heatmap(
                    z=[[1, 20, 30],
                      [20, 1, 60],
                      [30, 60, 1]],
                    text=[['one', 'twenty' , 'thirty' ],
                          ['twenty' , 'one', 'sixty'],
                          ['thirty' , 'sixty', 'one']],
                    texttemplate ="%{text}",
                    textfont ={"size":20}))
fig.show()
Arrays of rasterized values build by datashader can be visualized using plotly's heatmaps, as shown in the .
plotly and datashader tutorial (/python/datashader/)
See  or 
 for more information and chart attribute options!
function reference for px.(imshow) (https://plotly.com/python-api-reference/generated/plotly.express.imshow)
https://plotly.com/python/reference/heatmap/
(https://plotly.com/python/reference/heatmap/)
one twenty thirtytwenty one sixtythirty sixty one
−0.5 0 0.5 1 1.5 2 2.5−0.500.511.522.5
102030405060
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 12/13

--- Página 13 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
a
show
ects
els16/07/2025, 06:00 Heatmaps in Python
https://plotly.com/python/heatmaps/ 13/13</content>
      </file>
      <file name="Hexbin mapbox in Python.pdf" path="pyvy_2x1/Hexbin mapbox in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Count Hexbin
Count Hexbin with Minimum Count and Opacity &gt;  &gt; Hexbin
Mapbox
Hexbin Mapbox in Python
How to make a map with Hexagonal Binning of data in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/hexbin-
mapbox.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page details the use of a . For more examples with Choropleth maps, see .
figure factory (/python/figure-factories/)
this page (/python/choropleth-maps/)
In order to use mapbox styles that require a mapbox token, set the token with plotly.express. You can also use styles that do not require a mapbox token. See more
information on .
this page (/python/mapbox-layers/)
import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Point Count" },
)
fig.update_layout (margin=dict(b=0, t=0, l=0, r=0))
fig.show()
05101520Point Count
(https://www.mapbox.com/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 1/7

--- Página 2 ---
Display the Underlying Dataimport plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1,
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 2/7

--- Página 3 ---
Compute the Mean Value per Hexbinimport plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1, color_continuous_scale ="Viridis" ,
    show_original_data =True,
    original_data_marker =dict(size=4, opacity=0.6, color="deeppink" )
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 3/7

--- Página 4 ---
Compute the Sum Value per Hexbinimport plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Average Peak Hour" },
    color="peak_hour" , agg_func =np.mean, color_continuous_scale ="Icefire" , range_color =[0,23]
)
fig.show()
05101520Average Peak Hour
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 4/7

--- Página 5 ---
Hexbin with Animationimport plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Summed Car.Hours" },
    color="car_hours" , agg_func =np.sum, color_continuous_scale ="Magma"
)
fig.show()
5k10k15kSummed Car.Hours
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 5/7

--- Página 6 ---
Referenceimport plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
np.random.seed(0)
N = 500
n_frames  = 12
lat = np.concatenate ([
    np.random.randn(N) * 0.5 + np.cos(i / n_frames  * 2 * np.pi) + 10
    for i in range(n_frames )
])
lon = np.concatenate ([
    np.random.randn(N) * 0.5 + np.sin(i / n_frames  * 2 * np.pi)
    for i in range(n_frames )
])
frame = np.concatenate ([
    np.ones(N, int) * i for i in range(n_frames )
])
fig = ff.create_hexbin_mapbox (
    lat=lat, lon=lon, nx_hexagon =15, animation_frame =frame,
    color_continuous_scale ="Cividis" , labels={"color": "Point Count" , "frame": "Period" },
    opacity=0.5, min_count =1,
    show_original_data =True, original_data_marker =dict(opacity=0.6, size=4, color="deeppink" )
)
fig.update_layout (margin=dict(b=0, t=0, l=0, r=0))
fig.layout.sliders[0].pad.t=20
fig.layout.updatemenus [0].pad.t=40
fig.show()
For more info on Plotly maps, see: .
For more info on using colorscales with Plotly see: 
For more info on ff.create_annotated_heatmap(), see the 
https://plotly.com/python/maps (https://plotly.com/python/maps)
https://plotly.com/python/heatmap-and-contour-colorscales/ (https://plotly.com/python/heatmap-and-contour-
colorscales/)
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_hexbin_mapbox.html#plotly.figure_factory.create_hexbin_mapbox)
Period=0
0123456789101151015202530354045Point Count
▶ ◼
(https://www.mapbox.com/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
and
in
n16/07/2025, 05:59 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 7/7</content>
      </file>
      <file name="Horizontal and vertical lines and rectangles in Python.pdf" path="pyvy_2x1/Horizontal and vertical lines and rectangles in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Horizontal and Vertical Lines and Rectangles &gt;  &gt; Horizontal
and Vertical Lines and Rectangles
Horizontal and Vertical Lines and Rectangles in Python
How to add annotated horizontal and vertical lines in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/horizontal-vertical-shapes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
introduced in plotly 4.12
Horizontal and vertical lines and rectangles that span an entire plot can be added via the add_hline, add_vline, add_hrect, and add_vrect methods of
plotly.graph_objects.Figure. Shapes added with these methods are added as  (as shown when doing print(fig), for example). These
shapes are fixed to the endpoints of one axis, regardless of the range of the plot, and fixed to data coordinates on the other axis. The following shows some
possibilities, try panning and zooming the resulting figure to see how the shapes stick to some axes:
layout shapes (/python/shapes)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="petal_length" , y="petal_width" )
fig.add_hline (y=0.9)
fig.add_vrect (x0=0.9, x1=2)
fig.show()
These shapes can be styled by passing the same arguments as are accepted by add_shape:1 2 3 4 5 6 700.511.522.5
petal_lengthpetal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 1/8

--- Página 2 ---
Horizontal and vertical lines in Dashimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="petal_length" , y="petal_width" )
fig.add_vline (x=2.5, line_width =3, line_dash ="dash", line_color ="green")
fig.add_hrect (y0=0.9, y1=2.6, line_width =0, fillcolor ="red", opacity=0.2)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1 2 3 4 5 6 700.511.522.5
petal_lengthpetal_width
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 2/8

--- Página 3 ---
Adding Text AnnotationsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
 can optionally be added to an autoshape using the annotation_text keyword argument, and positioned using the
annotation_position argument:
Text annotations (/python/text-and-annotations)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Iris plot an interactive horizontal line'),
    html.P("↓↓↓ try downloading the plot ↓↓↓ ", style={"text-align": "right", "font-weight": "bold"}),
    dcc.Graph(id="graph"),
    html.P("Position of hline"),
    dcc.Slider(
        id='slider-position',
        min=1, max=7, value=2.5, step=0.1,
        marks={1: '1', 7: '7'}
    )
])
@app.callback(
    Output("graph", "figure"),
    Input("slider-position", "value"))
def display_graph(pos_x):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter(
 df "tll th" "tlidth")DOWNLOAD
Iris plot an interactive horizontal line
↓↓↓ try downloading the plot ↓↓↓
Position of hline1 2 3 4 5 6 700.511.522.5
petal_lengthpetal_width
1 7
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 3/8

--- Página 4 ---
import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_hline (y=1, line_dash ="dot",
              annotation_text ="Jan 1, 2018 baseline" , 
              annotation_position ="bottom right" )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , 
              annotation_text ="decline" , annotation_position ="top left" ,
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()
Extra formatting of the annotation can be done using magic-underscores prefixed by annotation_ or by passing a dict or go.layout.Annotation instance to the
annotation argument:Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 20190.60.811.21.41.61.82
company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
Jan 1, 2018 baselinedecline
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 4/8

--- Página 5 ---
Adding to Multiple Facets / Subplotsimport plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_hline (y=1, line_dash ="dot",
              annotation_text ="Jan 1, 2018 baseline" , 
              annotation_position ="bottom right" ,
              annotation_font_size =20,
              annotation_font_color ="blue"
             )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , 
              annotation_text ="decline" , annotation_position ="top left" ,
              annotation =dict(font_size =20, font_family ="Times New Roman" ),
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()
The same line or box can be added to multiple  or  by setting the row and/or col to "all". The default row and
col values are "all".
subplots (/python/subplots/)
facets (/python/facet-plots/)Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 20190.60.811.21.41.61.82
company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
Jan 1, 2018 baselinedecline
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 5/8

--- Página 6 ---
Text Labels on Shapesimport plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df, facet_col ="company" , facet_col_wrap =2)
fig.add_hline (y=1, line_dash ="dot", row=3, col="all",
              annotation_text ="Jan 1, 2018 baseline" , 
              annotation_position ="bottom right" )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , row="all", col=1,
              annotation_text ="decline" , annotation_position ="top left" ,
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()
New in 5.14
, introduced in version 5.14, is now the recommended way to add text to shapes. The above
examples using add_hline, add_vrect, add_hrect, and add_vline that add annotations can be rewritten to use label.
Text labels on shapes (/python/shapes/#addingtextlabelstoshapes)Jan 2018 Jul 2018 Jan 2019 Jul 201911.52
Jan 2018 Jul 2018 Jan 2019 Jul 201911.5211.52
company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
date datevalue value value
company=NFLX company=MSFTcompany=AMZN company=FBcompany=GOOG company=AAPL
Jan 1, 2018 baseline Jan 1, 2018 baseline
declinedeclinedecline
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 6/8

--- Página 7 ---
Referenceimport plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_hline (
    y=1,
    line_dash ="dot",
    label=dict(
        text="Jan 1 2018 Baseline" ,
        textposition ="end",
        font=dict(size=20, color="blue"),
        yanchor="top",
    ),
)
fig.add_vrect (
    x0="2018-09-24" ,
    x1="2018-12-18" ,
    label=dict(
        text="Decline" ,
        textposition ="top center" ,
        font=dict(size=20, family="Times New Roman" ),
    ),
    fillcolor ="green",
    opacity=0.25,
    line_width =0,
)
fig.show()
With , you can also add text labels to shapes other than lines and rectangles, and the labels can
be added automatically to shapes drawn by the user.
text labels on shapes (/python/shapes/#adding-text-labels-to-shapes)
More details are available about  and .
layout shapes (/python/shapes/)
annotations (/python/text-and-annotations)
Reference documentation is also available for 
, 
, 
, 
.
add_hline (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html?
highlight=add_hline#plotly.graph_objects.Figure.add_hline)
add_vline (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html?
highlight=add_vline#plotly.graph_objects.Figure.add_vline)
add_hrect (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html?
highlight=add_hrect#plotly.graph_objects.Figure.add_hrect)
add_vrect (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html?
highlight=add_vrect#plotly.graph_objects.Figure.add_vrect)Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 20190.60.811.21.41.61.82
Jan 1 2018 Baseline
Declinecompany
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 7/8

--- Página 8 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ectangles
h16/07/2025, 06:11 Horizontal and vertical lines and rectangles in Python
https://plotly.com/python/horizontal-vertical-shapes/ 8/8</content>
      </file>
      <file name="Hover text and formatting in Python.pdf" path="pyvy_2x1/Hover text and formatting in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Hover Labels
Hovermode closest (default mode)
Hovermode x or y &gt;  &gt; Hover
Text and Formatting
Hover Text and Formatting in Python
How to use hover text and formatting in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/hover-
text-and-formatting.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
One of the most deceptively-powerful features of interactive visualization using Plotly is the ability for the user to reveal more information about a data point by
moving their mouse cursor over the point and having a hover label appear.
There are three hover modes available in Plotly. The default setting is layout.hovermode='closest', wherein a single hover label appears for the point directly
underneath the cursor.
import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="layout.hovermode='closest' (the default)" )
fig.update_traces (mode="markers+lines" )
fig.show()
If layout.hovermode='x' (or 'y'), a single hover label appears per trace, for points at the same x (or y) value as the cursor. If multiple points in a given trace exist at the
same coordinate, only one will get a hover label. In the line plot below we have forced markers to appear, to make it clearer what can be hovered over, and we have
disabled the built-in Plotly Express hovertemplate by setting it to None, resulting in a more compact hover label per point:1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealandlayout.hovermode='closest' (the default)
yearlifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 1/22

--- Página 2 ---
Unified hovermodeimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="layout.hovermode='x'" )
fig.update_traces (mode="markers+lines" , hovertemplate =None)
fig.update_layout (hovermode ="x")
fig.show()
If layout.hovermode='x unified' (or 'y unified'), a single hover label appear, describing one point per trace, for points at the same x (or y) value as the cursor. If multiple
points in a given trace exist at the same coordinate, only one will get an entry in the hover label. In the line plot below we have forced markers to appear, to make it
clearer what can be hovered over, and we have disabled the built-in Plotly Express hovertemplate by setting it to None, resulting in a more compact entry per point in
the hover label:1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealandlayout.hovermode='x'
yearlifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 2/22

--- Página 3 ---
Control hovermode with Dashimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="layout.hovermode='x unified'" )
fig.update_traces (mode="markers+lines" , hovertemplate =None)
fig.update_layout (hovermode ="x unified" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Change the hovermode below and try hovering over the points:1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New Zealandlayout.hovermode='x unified'
yearlifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 3/22

--- Página 4 ---
Selecting a hovermode in a figure created with plotly.graph_objectsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
The hovermode is a property of the figure layout, so you can select a hovermode no matter how you created the figure, either with plotly.express or with
plotly.graph_objects. Below is an example with a figure created with plotly.graph_objects. If you're not familiar with the structure of plotly figures, you can read 
.
the
tutorial on creating and updating plotly figures (/python/creating-and-updating-figures/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Life expectancy plot with a selectable hover mode'),
    html.P("Select hovermode:"),
    dcc.RadioItems(
        id='hovermode',
        inline=True,
        options=['x', 'x unified', 'closest'],
        value='closest'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("hovermode", "value"))
def update_hovermode(mode):
    df = px.data.gapminder().query("continent=='Oceania'") # replace with your own data source
    fig = px.line(
 df " " "lifE" l " t"DOWNLOAD
Life expectancy plot with a selectable hover mode
Select hovermode:
xx unifiedclosest
1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New ZealandHover over points to see the change
yearlifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 4/22

--- Página 5 ---
Hover on Subplotsimport plotly.graph_objects  as go
import numpy as np
t = np.linspace (0, 2 * np.pi, 100)
fig = go.Figure()
fig.add_trace (go.Scatter(x=t, y=np.sin(t), name='sin(t)' ))
fig.add_trace (go.Scatter(x=t, y=np.cos(t), name='cost(t)' ))
fig.update_layout (hovermode ='x unified' )
fig.show()
New in 5.21
Use hoversubplots to define how hover effects expand to additional subplots. With hoversubplots=axis, hover effects are included on stacked subplots using the same
axis when hovermode is set to x, x unified, y, or y unified.0 1 2 3 4 5 6−1−0.500.51 sin(t)
cost(t)
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 5/22

--- Página 6 ---
Customizing Hover Label Appearanceimport plotly.graph_objects  as go
import pandas as pd
from plotly import data
df = data.stocks()
layout = dict(
    hoversubplots ="axis",
    title=dict(text="Stock Price Changes" ),
    hovermode ="x",
    grid=dict(rows=3, columns=1),
)
data = [
    go.Scatter(x=df["date"], y=df["AAPL"], xaxis="x", yaxis="y", name="Apple"),
    go.Scatter(x=df["date"], y=df["GOOG"], xaxis="x", yaxis="y2", name="Google" ),
    go.Scatter(x=df["date"], y=df["AMZN"], xaxis="x", yaxis="y3", name="Amazon" ),
]
fig = go.Figure(data=data, layout=layout)
fig.show()
Hover label text and colors default to trace colors in hover modes other than unified, and can be globally set via the layout.hoverlabel attributes. Hover label
appearance can also be controlled per trace in &lt;trace&gt;.hoverlabel.11.21.41.6
0.911.11.2
Jan 2018Apr 2018Jul 2018 Oct 2018Jan 2019Apr 2019Jul 2019 Oct 201911.21.41.6Apple
Google
AmazonStock Price Changes
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 6/22

--- Página 7 ---
Customizing Hover text with Plotly Expressimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="Custom layout.hoverlabel formatting" )
fig.update_traces (mode="markers+lines" )
fig.update_layout (
    hoverlabel =dict(
        bgcolor="white",
        font_size =16,
        font_family ="Rockwell"
    )
)
fig.show()
Plotly Express functions automatically add all the data being plotted (x, y, color etc) to the hover label. Many Plotly Express functions also support configurable hover
text. The hover_data argument accepts a list of column names to be added to the hover tooltip, or a dictionary for advanced formatting (see the next section). The
hover_name property controls which column is displayed in bold as the tooltip title.
Here is an example that creates a scatter plot using Plotly Express with custom hover data and a custom hover name.1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New ZealandCustom layout.hoverlabel formatting
yearlifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 7/22

--- Página 8 ---
Disabling or customizing hover of columns in plotly express
False to remove the column from the hover data (for example, if one wishes to remove the column of the x argument)
True to add a different column, with default formatting
a formatting string starting with : for numbers , and |
for dates in , for example :.3f, |%a.import plotly.express  as px
df_2007 = px.data.gapminder ().query("year==2007" )
fig = px.scatter(df_2007, x="gdpPercap" , y="lifeExp" , log_x=True,
                 hover_name ="country" , hover_data =["continent" , "pop"])
fig.show()
hover_data can also be a dictionary. Its keys are existing columns of the dataframe argument, or new labels. For an existing column, the values can be
d3-format's syntax (https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_forma)
d3-time-format's syntax (https://github.com/d3/d3-time-format)
It is also possible to pass new data as values of the hover_data dict, either as list-like data, or inside a tuple, which first element is one of the possible values described
above for existing columns, and the second element correspond to the list-like data, for example (True, [1, 2, 3]) or (':.1f', [1.54, 2.345]).
These different cases are illustrated in the following example.345678910002 345678910k2 345640455055606570758085
gdpPercaplifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 8/22

--- Página 9 ---
Customizing hover text with a hovertemplateimport plotly.express  as px
import numpy as np
df = px.data.iris()
fig = px.scatter(df, x='petal_length' , y='sepal_length' , facet_col ='species' , color='species' ,
                 hover_data ={'species' :False, # remove species from hover data
                             'sepal_length' :':.2f', # customize hover for column of y attribute
                             'petal_width' :True, # add other column, default formatting
                             'sepal_width' :':.2f', # add other column, customized formatting
                             # data not in dataframe, default formatting
                             'suppl_1' : np.random.random(len(df)),
                             # data not in dataframe, customized formatting
                             'suppl_2' : (':.3f', np.random.random(len(df)))
                            })
fig.update_layout (height=300)
fig.show()
To customize the tooltip on your graph you can use the  attribute of graph_objects
traces, which is a template string used for rendering the information that appear on hoverbox. This template string can include variables in %{variable} format,
numbers in , and date in 
. In the example below, the empty &lt;extra&gt;&lt;/extra&gt; tag removes the part of the hover where the trace name is usually
displayed in a contrasting color. The &lt;extra&gt; tag can be used to display other parts of the hovertemplate, it is not reserved for the trace name.
hovertemplate (https://plotly.com/python/reference/pie/#pie-hovertemplate)
d3-format's syntax (https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format)
d3-time-format's syntax
(https://github.com/d3/d3-time-format)
Note that a hovertemplate customizes the tooltip text, while a  customizes the text that
appears on your chart.
texttemplate (https://plotly.com/python/reference/pie/#pie-texttemplate)
Set the horizontal alignment of the text within tooltip with .
hoverlabel.align (https://plotly.com/python/reference/layout/#layout-hoverlabel-align)2 4 645678
2 4 6 2 4 6species
setosa
versicolor
virginica
petal_length petal_length petal_lengthsepal_lengthspecies=setosa species=versicolor species=virginica
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 9/22

--- Página 10 ---
import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    x = [1,2,3,4,5],
    y = [2.02825,1.63728,6.83839,4.8485,4.73463],
    hovertemplate  =
    '&lt;i&gt;Price&lt;/i&gt;: $% {y:.2f}'+
    '&lt;br&gt;&lt;b&gt;X&lt;/b&gt;: % {x}&lt;br&gt;'+
    '&lt;b&gt;%{text}&lt;/b&gt;',
    text = ['Custom text {}'.format(i + 1) for i in range(5)],
    showlegend  = False))
fig.add_trace (go.Scatter(
    x = [1,2,3,4,5],
    y = [3.02825,2.63728,4.83839,3.8485,1.73463],
    hovertemplate  = 'Price: %{y:$.2f}&lt;extra&gt;&lt;/extra&gt;' ,
    showlegend  = False))
fig.update_layout (
    hoverlabel_align  = 'right',
    title = "Set hover text with hovertemplate" )
fig.show()
1 1.5 2 2.5 3 3.5 4 4.5 5234567Set hover text with hovertemplate
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 10/22

--- Página 11 ---
Modifying the hovertemplate of a plotly express figureimport plotly.graph_objects  as go
fig = go.Figure(go.Pie(
    name = "",
    values = [2, 5, 3, 2.5],
    labels = ["R", "Python" , "Java Script" , "Matlab" ],
    text = ["textA", "TextB", "TextC", "TextD"],
    hovertemplate  = "%{label}: &lt;br&gt;Popularity: % {percent}  &lt;/br&gt; % {text}"
))
fig.show()
plotly.express automatically sets the hovertemplate but you can modify it using the update_traces method of the generated figure. It helps to print the hovertemplate
generated by plotly.express in order to be able to modify it. One can also revert to the default hover information of traces by setting the hovertemplate to None.TextB
40%TextC
24%
TextD
20%
textA
16%Python
Java Script
Matlab
R
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 11/22

--- Página 12 ---
Specifying the formatting and labeling of custom fields in a Plotly Express figure
using a hovertemplateimport plotly.express  as px
df_2007 = px.data.gapminder ().query("year==2007" )
fig = px.scatter(df_2007, x="gdpPercap" , y="lifeExp" , log_x=True, color='continent'
                )
print("plotly express hovertemplate:" , fig.data[0].hovertemplate )
fig.update_traces (hovertemplate ='GDP: %{x} &lt;br&gt;Life Expectancy: % {y}') #
fig.update_traces (hovertemplate =None, selector ={'name':'Europe' }) # revert to default hover
print("user_defined hovertemplate:" , fig.data[0].hovertemplate )
fig.show()
This example adds custom fields to a Plotly Express figure using the custom_data parameter and then adds a hover template that applies d3 formats to each element
of the customdata[n] array and uses HTML to customize the fonts and spacing.plotly express hovertemplate: continent=Asia&lt;br&gt;gdpPercap=%{x}&lt;br&gt;lifeExp=%{y}&lt;extra&gt;&lt;/extra&gt;
user_defined hovertemplate: GDP: %{x} &lt;br&gt;Life Expectancy: %{y}
345678910002 345678910k2 345640455055606570758085continent
Asia
Europe
Africa
Americas
Oceania
gdpPercaplifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 12/22

--- Página 13 ---
# %%
import plotly.graph_objects  as go
import plotly.express  as px
import pandas as pd
import math
import numpy as np
data = px.data.gapminder ()
df = data[data['year']==2007]
df = df.sort_values (['continent' , 'country' ])
df.rename(columns={"gdpPercap" :'GDP per capita' , "lifeExp" :'Life Expectancy (years)' }, inplace=True)
fig=px.scatter(df,
               x='GDP per capita' ,
               y='Life Expectancy (years)' ,
               color='continent' ,
               size=np.sqrt(df['pop']),
               # Specifying data to make available to the hovertemplate
               # The px custom_data parameter has an underscore, while the analogous graph objects customdata parameter has no underscore.
               # The px custom_data parameter is a list of column names in the data frame, while the graph objects customdata parameter expects a da
ta frame or a numpy array.
               custom_data =['country' , 'continent' , 'pop'],
)
# Plotly express does not have a hovertemplate parameter in the graph creation function, so we apply the template with update_traces
fig.update_traces (
    hovertemplate  =
                "&lt;b&gt;%{customdata[0]} &lt;/b&gt;&lt;br&gt;"  +
                "&lt;b&gt;%{customdata[1]} &lt;/b&gt;&lt;br&gt;&lt;br&gt;"  +
                "GDP per Capita: %{x:$,.0f}&lt;br&gt;"  +
                "Life Expectation: % {y:.0f}&lt;br&gt;" +
                "Population: % {customdata[2]:,.0f} " +
                "&lt;extra&gt;&lt;/extra&gt;" ,
    mode='markers' ,
    marker={'sizemode' :'area',
            'sizeref' :10},
)
fig.update_layout (
        xaxis={
            'type':'log'},
        )
fig.show()
2 345678910002 345678910k2 345674050607080continent
Africa
Americas
Asia
Europe
Oceania
GDP per capitaLife Expectancy (years)
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 13/22

--- Página 14 ---
Hover Templates with Mixtures of Period data
Advanced Hover TemplateNew in v5.0
When  with mixed-sized periods (i.e. quarterly and monthly) in conjunction
with x or x unified hovermodes and using hovertemplate, the xhoverformat attribute can be used to control how each period's X value is displayed, and the special %
{xother} hover-template directive can be used to control how the X value is displayed for points that do not share the exact X coordinate with the point that is being
hovered on. %{xother} will return an empty string when the X value is the one being hovered on, otherwise it will return (%{x}). The special %{_xother}, %{xother_} and
%{_xother_} variations will display with spaces before, after or around the parentheses, respectively.
displaying periodic data (https://plotly.com/python/time-series/#displaying-period-data)
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["2020-01-01" , "2020-04-01" , "2020-07-01" ],
    y=[1000, 1500, 1700],
    xperiod="M3",
    xperiodalignment ="middle" ,
    xhoverformat ="Q%q",
    hovertemplate ="%{y}%{_xother} "
))
fig.add_trace (go.Scatter(
    x=["2020-01-01" , "2020-02-01" , "2020-03-01" ,
      "2020-04-01" , "2020-05-01" , "2020-06-01" ,
      "2020-07-01" , "2020-08-01" , "2020-09-01" ],
    y=[1100,1050,1200,1300,1400,1700,1500,1400,1600],
    xperiod="M1",
    xperiodalignment ="middle" ,
    hovertemplate ="%{y}%{_xother} "
))
fig.update_layout (hovermode ="x unified" )
fig.show()
This produces the same graphic as in "Specifying the formatting and labeling of custom fields in a Plotly Express figure using a hovertemplate" above, but does so with
the customdata and text parameters of graph_objects. It shows how to specify columns from a dataframe to include in the customdata array using the df[["col_i",
"col_j"]] subsetting notation. It then references those variables using e.g. %{customdata[0]} in the hovertemplate. It includes comments about major differences
between the parameters used by graph_objects and plotly.express.Jan 2020Feb 2020Mar 2020Apr 2020May 2020Jun 2020Jul 2020Aug 2020Sep 2020Oct 2020020040060080010001200140016001800
trace 0
trace 1
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 14/22

--- Página 15 ---
import plotly.graph_objects  as go
import plotly.express  as px
import pandas as pd
import math
data = px.data.gapminder ()
df_2007 = data[data['year']==2007]
df_2007 = df_2007.sort_values (['continent' , 'country' ])
bubble_size  = []
for index, row in df_2007.iterrows ():
    bubble_size .append(math.sqrt(row['pop']))
df_2007['size'] = bubble_size
continent_names  = ['Africa' , 'Americas' , 'Asia', 'Europe' , 'Oceania' ]
continent_data  = {continent :df_2007.query("continent == ' %s'" %continent )
                              for continent  in continent_names }
fig = go.Figure()
for continent_name , df in continent_data .items():
    fig.add_trace (
        go.Scatter(
            x=df['gdpPercap' ],
            y=df['lifeExp' ],
            marker_size =df['size'],
            text=df['continent' ],
            name=continent_name ,
            # The next three parameters specify the hover text
            # Text supports just one customized field per trace
            # and is implemented here with text=df['continent'],
            # Custom data supports multiple fields through numeric indices in the hovertemplate
            # In we weren't using the text parameter in our example,
            # we could instead add continent as a third customdata field.
            customdata =df[['country' ,'pop']],
            hovertemplate =
                "&lt;b&gt;%{customdata[0]} &lt;/b&gt;&lt;br&gt;"  +
                "&lt;b&gt;%{text}&lt;/b&gt;&lt;br&gt;&lt;br&gt;"  +
                "GDP per Capita: %{x:$,.0f}&lt;br&gt;"  +
                "Life Expectancy: % {y:.0f}&lt;br&gt;" +
                "Population: % {customdata[1]:,.0f} " +
                "&lt;extra&gt;&lt;/extra&gt;" ,
        ))
fig.update_traces (
    mode='markers' ,
    marker={'sizemode' :'area',
            'sizeref' :10})
fig.update_layout (
    xaxis={
        'title':'GDP per capita' ,
        'type':'log'},
    yaxis={'title':'Life Expectancy (years)' })
fig.show()
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 15/22

--- Página 16 ---
Adding other data to the hover with customdata and a hovertemplate
go traces have a customdata argument in which you can add an array, which outer dimensions should have the same dimensions as the plotted data. You can then
use customdata inside a hovertemplate to display the value of customdata.
2 345678910002 345678910k2 345674050607080Africa
Americas
Asia
Europe
Oceania
GDP per capitaLife Expectancy (years)
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 16/22

--- Página 17 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
np.random.seed(0)
z1, z2, z3 = np.random.random((3, 7, 7))
customdata  = np.dstack((z2, z3))
fig = make_subplots (1, 2, subplot_titles =['z1', 'z2'])
fig.add_trace (go.Heatmap(
    z=z1,
    customdata =np.dstack((z2, z3)),
    hovertemplate ='&lt;b&gt;z1:% {z:.3f}&lt;/b&gt;&lt;br&gt;z2:% {customdata[0]:.3f}  &lt;br&gt;z3: % {customdata[1]:.3f}  ',
    coloraxis ="coloraxis1" , name=''),
    1, 1)
fig.add_trace (go.Heatmap(
    z=z2,
    customdata =np.dstack((z1, z3)),
    hovertemplate ='z1:%{customdata[0]:.3f}  &lt;br&gt;&lt;b&gt;z2:% {z:.3f}&lt;/b&gt;&lt;br&gt;z3: % {customdata[1]:.3f}  ',
    coloraxis ="coloraxis1" , name=''),
    1, 2)
fig.update_layout (title_text ='Hover to see the value of z1, z2 and z3 together' )
fig.show()
0 2 4 60123456
0 2 4 60123456
0.20.40.60.8Hover to see the value of z1, z2 and z3 together
z1 z2
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 17/22

--- Página 18 ---
Setting the Hover Template in Tile Maps
Controlling Hover Text with graph_objects and hoverinfoimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    name = "",
    mode = "markers+text+lines" ,
    lon = [-75, -80, -50],
    lat = [45, 20, -20],
    marker = {'size': 20, 'symbol' : ["bus", "harbor" , "airport" ]},
    hovertemplate  =
    "&lt;b&gt;%{marker.symbol}  &lt;/b&gt;&lt;br&gt;&lt;br&gt;"  +
    "longitude: % {lon}&lt;br&gt;" +
    "latitude: % {lat}&lt;br&gt;" ))
fig.update_layout (
    map = {
        'style': "outdoors" , 'zoom': 1},
    showlegend  = False)
fig.show()
Prior to the addition of hovertemplate, hover text was controlled via the now-deprecated hoverinfo attribute.
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 18/22

--- Página 19 ---
Spike linesimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[2, 1, 6, 4, 4],
    hovertext =["Text A" , "Text B" , "Text C" , "Text D" , "Text E" ],
    hoverinfo ="text",
    marker=dict(
        color="green"
    ),
    showlegend =False
))
fig.show()
Plotly supports "spike lines" which link a point to the axis on hover, and can be configured per axis.1 1.5 2 2.5 3 3.5 4 4.5 5123456
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 19/22

--- Página 20 ---
import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="Spike lines active" )
fig.update_traces (mode="markers+lines" )
fig.update_xaxes (showspikes =True)
fig.update_yaxes (showspikes =True)
fig.show()
Spike lines can be styled per axis as well, and the cursor distance setting can be controlled via layout.spikedistance.1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New ZealandSpike lines active
yearlifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 20/22

--- Página 21 ---
Reference
What About Dash?import plotly.express  as px
df = px.data.gapminder ().query("continent=='Oceania'" )
fig = px.line(df, x="year", y="lifeExp" , color="country" , title="Styled Spike Lines" )
fig.update_traces (mode="markers+lines" )
fig.update_xaxes (showspikes =True, spikecolor ="green", spikesnap ="cursor" , spikemode ="across" )
fig.update_yaxes (showspikes =True, spikecolor ="orange" , spikethickness =2)
fig.update_layout (spikedistance =1000, hoverdistance =100)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter1950 1960 1970 1980 1990 2000 201070727476788082
country
Australia
New ZealandStyled Spike Lines
yearlifeExp
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 21/22

--- Página 22 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
reated
ce
Express
olumns
lotly
ng of
 ure using
Period
h
Maps
bjects16/07/2025, 06:07 Hover text and formatting in Python
https://plotly.com/python/hover-text-and-formatting/ 22/22</content>
      </file>
      <file name="Images in Python.pdf" path="pyvy_2x1/Images in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Add a Background Image &gt;  &gt;
Images
Images in Python
How to add images to charts as background images or logos.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/images.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In this page we explain how to add static, non-interactive images as background, logo or annotation images to a figure. For exploring image data in interactive charts,
see the .
tutorial on displaying image data (/python/imshow)
A background image can be added to the layout of a figure with fig.add_layout_image or by setting the images parameter of go.Layout. The source attribute of a
go.layout.Image can be the URL of an image, or a PIL Image object (from PIL import Image; img = Image.open('filename.png')).
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 1/11

--- Página 2 ---
Add a Logoimport plotly.graph_objects  as go
# Create figure
fig = go.Figure()
# Add trace
fig.add_trace (
    go.Scatter(x=[0, 0.5, 1, 2, 2.2], y=[1.23, 2.5, 0.42, 3, 1])
)
# Add images
fig.add_layout_image (
        dict(
            source="https://images.plot.ly/language-icons/api-home/python-logo.png" ,
            xref="x",
            yref="y",
            x=0,
            y=3,
            sizex=2,
            sizey=2,
            sizing="stretch" ,
            opacity=0.5,
            layer="below")
)
# Set templates
fig.update_layout (template ="plotly_white" )
fig.show()
See more examples of !
adding logos to charts (https://plotly.com/python/logos/)
0 0.5 1 1.5 20.511.522.53
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 2/11

--- Página 3 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (
    go.Bar(
        x=["-35.3", "-15.9", "-15.8", "-15.6", "-11.1",
           "-9.6", "-9.2", "-3.5", "-1.9", "-0.9",
           "1.0", "1.4", "1.7", "2.0", "2.8", "6.2",
           "8.1", "8.5", "8.5", "8.6", "11.4", "12.5",
           "13.3", "13.7", "14.4", "17.5", "17.7",
           "18.9", "25.1", "28.9", "41.4"],
        y=["Designers, musicians, artists, etc." ,
           "Secretaries and administrative assistants" ,
           "Waiters and servers" , "Archivists, curators, and librarians" ,
           "Sales and related" , "Childcare workers, home car workers, etc." ,
           "Food preparation occupations" , "Janitors, maids, etc." ,
           "Healthcare technicians, assistants. and aides" ,
           "Counselors, social and religious workers" ,
           "Physical, life and social scientists" , "Construction" ,
           "Factory assembly workers" , "Machinists, repairmen, etc." ,
           "Media and communications workers" , "Teachers" ,
           "Mechanics, repairmen, etc." , "Financial analysts and advisers" ,
           "Farming, fishing and forestry workers" ,
           "Truck drivers, heavy equipment operator, etc." , "Accountants and auditors" ,
           "Human resources, management analysts, etc." , "Managers" ,
           "Lawyers and judges" , "Engineers, architects and surveyors" ,
           "Nurses" , "Legal support workers" ,
           "Computer programmers and system admin." , "Police officers and firefighters" ,
           "Chief executives" , "Doctors, dentists and surgeons" ],
        marker=go.bar.Marker(
            color="rgb(253, 240, 54)" ,
            line=dict(color="rgb(0, 0, 0)" ,
                      width=2)
        ),
        orientation ="h",
    )
)
# Add image
fig.add_layout_image (
    dict(
        source="https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png" ,
        xref="paper", yref="paper",
        x=1, y=1.05,
        sizex=0.2, sizey=0.2,
        xanchor="right", yanchor="bottom"
    )
)
# update layout properties
fig.update_layout (
    autosize =False,
    height=800,
    width=700,
    bargap=0.15,
    bargroupgap =0.1,
    barmode="stack",
    hovermode ="x",
    margin=dict(r=20, l=300, b=75, t=125),
    title=("Moving Up, Moving Down&lt;br&gt;"  +
           "&lt;i&gt;Percentile change in income between childhood and adulthood&lt;/i&gt;" ),
)
fig.show()
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 3/11

--- Página 4 ---
Label Spectroscopy Data by Adding Multiple Images
-35.3-15.8-11.1-9.2-1.91.01.72.88.18.612.513.717.518.928.9Designers, musicians, artists, etc.Secretaries and administrative assistantsWaiters and serversArchivists, curators, and librariansSales and relatedChildcare workers, home car workers, etc.Food preparation occupationsJanitors, maids, etc.Healthcare technicians, assistants. and aidesCounselors, social and religious workersPhysical, life and social scientistsConstructionFactory assembly workersMachinists, repairmen, etc.Media and communications workersTeachersMechanics, repairmen, etc.Financial analysts and advisersFarming, fishing and forestry workersTruck drivers, heavy equipment operator, etc.Accountants and auditorsHuman resources, management analysts, etc.ManagersLawyers and judgesEngineers, architects and surveyorsNursesLegal support workersComputer programmers and system admin.Police officers and firefightersChief executivesDoctors, dentists and surgeons
Moving Up, Moving Down
Percentile change in income between childhood and adulthood
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 4/11

--- Página 5 ---
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
from scipy.signal  import savgol_filter
# Simulate spectroscopy data
def simulated_absorption (mu, sigma, intensity ):
    data = [np.random.normal(mu[i], sigma[i], intensity [i]) for i in range(len(mu))]
    hists = [np.histogram (d, 1000, range=(200, 500), density=True) for d in data]
    ys = [y for y, x in hists]
    s = savgol_filter (np.max(ys, axis=0), 41, 3)
    return hists[0][1], s
mus = [[290, 240, 260], [330, 350]]
sigmas = [[4, 6, 10], [5, 4]]
intensities  = [[100000, 300000, 700000], [40000, 20000]]
simulated_absorptions  = [simulated_absorption (m, s, i) for m, s, i in
                         zip(mus, sigmas, intensities )]
# Create figure
fig = go.Figure()
# Create traces from data
names = ["Benzene" , "Naphthalene" ]
for (x, y), n in zip(simulated_absorptions , names):
    fig.add_trace (go.Scatter(x=x, y=y, name=n))
# Add images
fig.add_layout_image (
    dict(
        source="https://raw.githubusercontent.com/michaelbabyn/plot_data/master/benzene.png" ,
        x=0.75,
        y=0.65,
    ))
fig.add_layout_image (dict(
        source="https://raw.githubusercontent.com/michaelbabyn/plot_data/master/naphthalene.png" ,
        x=0.9,
        y=0.3,
        )
)
fig.update_layout_images (dict(
        xref="paper",
        yref="paper",
        sizex=0.3,
        sizey=0.3,
        xanchor="right",
        yanchor="bottom"
))
# Add annotations
fig.update_layout (
    annotations =[
        dict(
            x=93.0 / 300,
            y=0.07 / 0.1,
            xref="paper",
            yref="paper",
            showarrow =True,
            arrowhead =0,
            opacity=0.5,
            ax=250,
            ay=-40,
        ),
        dict(
            x=156.0 / 300,
            y=0.04 / 0.1,
            xref="paper",
            yref="paper",
            showarrow =True,
            arrowhead =0,
            opacity=0.5,
            ax=140,
            ay=-10,
        )
    ]
)
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 5/11

--- Página 6 ---
Zoom on Static Images# Configure axes
fig.update_xaxes (title_text ="Wavelength" )
fig.update_yaxes (title_text ="Absorption" , hoverformat =".3f")
# Configure other layout properties
fig.update_layout (
    title_text ="Absorption Frequencies of Benzene and Naphthalene" ,
    height=500,
    width=900,
    template ="plotly_white"
)
fig.show()
200 250 300 350 400 45000.020.040.060.080.1
Benzene
NaphthaleneAbsorption Frequencies of Benzene and Naphthalene
WavelengthAbsorption
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 6/11

--- Página 7 ---
import plotly.graph_objects  as go
# Create figure
fig = go.Figure()
# Constants
img_width  = 1600
img_height  = 900
scale_factor  = 0.5
# Add invisible scatter trace.
# This trace is added to help the autoresize logic work.
fig.add_trace (
    go.Scatter(
        x=[0, img_width  * scale_factor ],
        y=[0, img_height  * scale_factor ],
        mode="markers" ,
        marker_opacity =0
    )
)
# Configure axes
fig.update_xaxes (
    visible=False,
    range=[0, img_width  * scale_factor ]
)
fig.update_yaxes (
    visible=False,
    range=[0, img_height  * scale_factor ],
    # the scaleanchor attribute ensures that the aspect ratio stays constant
    scaleanchor ="x"
)
# Add image
fig.add_layout_image (
    dict(
        x=0,
        sizex=img_width  * scale_factor ,
        y=img_height  * scale_factor ,
        sizey=img_height  * scale_factor ,
        xref="x",
        yref="y",
        opacity=1.0,
        layer="below",
        sizing="stretch" ,
        source="https://raw.githubusercontent.com/michaelbabyn/plot_data/master/bridge.jpg" )
)
# Configure other layout
fig.update_layout (
    width=img_width  * scale_factor ,
    height=img_height  * scale_factor ,
    margin={"l": 0, "r": 0, "t": 0, "b": 0},
)
# Disable the autosize on double click because it adds unwanted margins around the image
# More detail: https://plotly.com/python/configuration-options/
fig.show(config={'doubleClick' : 'reset'})
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 7/11

--- Página 8 ---
Annotating layout image with shapes
define a dragmode corresponding to a drawing tool ('drawline','drawopenpath', 'drawclosedpath', 'drawcircle', or 'drawrect')
add  corresponding to the drawing tools you wish to use.introduced in plotly 4.7
It can be useful to add shapes to a layout image, for highlighting an object, drawing bounding boxes as part of a machine learning training set, or identifying seeds for
a segmentation algorithm.
In order to enable shape drawing, you need to
modebar buttons (/python/configuration-options#add-optional-shapedrawing-buttons-to-modebar)
The style of new shapes is specified by the newshape layout attribute. Shapes can be selected and modified after they have been drawn. More details and examples
are given in the .
tutorial on shapes (/python/shapes#drawing-shapes-on-cartesian-plots)
Drawing or modifying a shape triggers a relayout event, which .
can be captured by a callback inside a Dash application (https://dash.plotly.com/interactive-graphing)
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 8/11

--- Página 9 ---
Images Placed Relative to Axesimport plotly.graph_objects  as go
fig = go.Figure()
# Add image
img_width  = 1600
img_height  = 900
scale_factor  = 0.5
fig.add_layout_image (
        x=0,
        sizex=img_width ,
        y=0,
        sizey=img_height ,
        xref="x",
        yref="y",
        opacity=1.0,
        layer="below",
        source="https://raw.githubusercontent.com/michaelbabyn/plot_data/master/bridge.jpg"
)
fig.update_xaxes (showgrid =False, range=(0, img_width ))
fig.update_yaxes (showgrid =False, scaleanchor ='x', range=(img_height , 0))
# Line shape added programatically
fig.add_shape (
    type='line', xref='x', yref='y',
    x0=650, x1=1080, y0=380, y1=180, line_color ='cyan'
)
# Set dragmode and newshape properties; add modebar buttons
fig.update_layout (
    dragmode ='drawrect' ,
    newshape =dict(line_color ='cyan'),
    title_text ='Drag to add annotations - use modebar to change drawing tool'
)
fig.show(config={'modeBarButtonsToAdd' :['drawline' ,
                                        'drawopenpath' ,
                                        'drawclosedpath' ,
                                        'drawcircle' ,
                                        'drawrect' ,
                                        'eraseshape'
                                       ]})
Using xref='x domain' or yref='y domain', images can be placed relative to axes. As an example, the following shows how to put an image in the top corner of a subplot
(try panning and zooming the resulting figure):
0 200 400 600 800 1000 1200 1400 16009008007006005004003002001000Drag to add annotations - use modebar to change drawing tool
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 9/11

--- Página 10 ---
Referenceimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , facet_col ="species" )
# sources of images
sources = [
    "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Iris_setosa_var._setosa_ %282595031014% 29.jpg/360px-Iris_setosa_var._setosa_ %282595031
014%29.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Iris_versicolor_quebec_1.jpg/320px-Iris_versicolor_quebec_1.jpg" ,
    "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Iris_virginica_2.jpg/480px-Iris_virginica_2.jpg" ,
]
# add images
for col, src in enumerate (sources):
    fig.add_layout_image (
        row=1,
        col=col + 1,
        source=src,
        xref="x domain" ,
        yref="y domain" ,
        x=1,
        y=1,
        xanchor="right",
        yanchor="top",
        sizex=0.2,
        sizey=0.2,
    )
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/layout/images/ (https://plotly.com/python/reference/layout/images/)5 6 7 822.533.544.5
5 6 7 8 5 6 7 8
sepal_length sepal_length sepal_lengthsepal_widthspecies=setosa species=versicolor species=virginica
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 10/11

--- Página 11 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
Multiple
es16/07/2025, 06:07 Images in Python
https://plotly.com/python/images/ 11/11</content>
      </file>
      <file name="Installation _ Dash for Python Documentation _ Plotly.pdf" path="pyvy_2x1/Installation _ Dash for Python Documentation _ Plotly.pdf" type="pdf">
        <content>--- Página 1 ---
S tar 23,448
Dash Python  &gt; Installation
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. Sign up for early access
now.
 Dash Installation
In your terminal, install dash.
pip install dash
This also brings along the plotly graphing library. This library is under active development, so install and
upgrade frequently.
We also recommend installing Pandas , which is required by Plotly Express  and used in many of our examples.
pip install pandas
With Dash installed, you can run the examples in the documentation in an app.py file with python app.py, or
in a Jupyter Notebook.
These docs are running dash version 3.1.1.
Sign up for Dash Club → Two free cheat sheets  plus updates from Chris Parmer and Adam Schroeder delivered to
your inbox every two months. Includes tips and tricks, community apps, and deep dives into the Dash architecture.
Join now.
Ready? Now, let's see an example of a minimal Dash app !
Write, deploy, and scale Dash apps on Dash Enterprise.
Learn More | Pricing | Dash Enterprise Dem o | Dash Enterprise O verview
Dash Python  &gt; Installation
16/07/2025, 06:11 Installation | Dash for Python Documentation | Plotly
https://dash.plotly.com/installation?_gl=1*161lfje*_gcl_au*NzY3MDkzNTIwLjE3NTIwMjEzODI.*_ga*MTYzMDA0ODc1NC4xNzUyMDIxMzgy*_ga_… 1/2

--- Página 2 ---
Products
Dash
Consulting and TrainingPricing
Enterprise PricingAbout Us
Careers
Resources
BlogSupport
Community Support
Graphing DocumentationJoin our mailing
list
Sign up to stay in the loop with
all things Plotly — from Dash
Club to product updates,
webinars, and more!
SUBSCRIBE
Copyright © 2025 Plotly. All rights reserved. Terms of Service Privacy Policy16/07/2025, 06:11 Installation | Dash for Python Documentation | Plotly
https://dash.plotly.com/installation?_gl=1*161lfje*_gcl_au*NzY3MDkzNTIwLjE3NTIwMjEzODI.*_ga*MTYzMDA0ODc1NC4xNzUyMDIxMzgy*_ga_… 2/2</content>
      </file>
      <file name="Interactive html export in Python.pdf" path="pyvy_2x1/Interactive html export in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Interactive vs Static Export
Saving to an HTML file
Controlling the size of the HTML file
Inserting Plotly Output into HTML using a Jinja2 Template &gt;  &gt;
Interactive HTML Export
Interactive HTML Export in Python
Plotly allows you to save interactive HTML versions of your figures to your local disk.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/interactive-html-export.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly figures are interactive when viewed in a web browser: you can hover over data points, pan and zoom axes, and show and hide traces by clicking or double-
clicking on the legend. You can export figures either to  or you can export them to
HTML files which can be opened in a browser. This page explains how to do the latter.
static image file formats like PNG, JPEG, SVG or PDF (/python/static-image-export/)
Any figure can be saved as an HTML file using the write_html method. These HTML files can be opened in any web browser to access the fully interactive figure.
import plotly.express  as px
fig = px.scatter(x=range(10), y=range(10))
fig.write_html ("path/to/file.html" )
By default, the resulting HTML file is a fully self-contained HTML file which can be uploaded to a web server or shared via email or other file-sharing mechanisms. The
downside to this approach is that the file is very large (5Mb+) because it contains an inlined copy of the Plotly.js library required to make the figure interactive. This
can be controlled via the include_plotlyjs argument (see below).
You can insert Plotly output and text related to your data into HTML templates using Jinja2. Use .to_html to send the HTML to a Python string variable rather than
using write_html to send the HTML to a disk file. Use the full_html=False option to output just the code necessary to add a figure to a template. We don't want to
output a full HTML page, as the template will define the rest of the page's structure — for example, the page's HTML and BODY tags. First create an HTML template file
containing a Jinja {{ variable }}. In this example, we customize the HTML in the template file by replacing the Jinja variable {{ fig }} with our graphic fig.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
sing a16/07/2025, 06:09 Interactive html export in Python
https://plotly.com/python/interactive-html-export/ 1/5

--- Página 2 ---
HTML export in Dash&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8" /&gt;   &lt;!--It is necessary to use the UTF-8 encoding with plotly graphics to get e.g. negative signs to render correctly -
-&gt;
&lt;meta name="viewport"  content="width=device-width, initial-scale=1.0"  /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Here's a Plotly graph! &lt;/h1&gt;
{{ fig }}
&lt;p&gt;And here's some text after the graph. &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt; 
 
Then use the following Python to replace {{ fig }} in the template with HTML that will display the Plotly figure "fig":
import plotly.express  as px
from jinja2 import Template
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
output_html_path =r"/path/to/output.html"
input_template_path  = r"/path/to/template.html"
plotly_jinja_data  = {"fig":fig.to_html(full_html =False)}
#consider also defining the include_plotlyjs parameter to point to an external Plotly.js as described above
with open(output_html_path , "w", encoding ="utf-8") as output_file :
    with open(input_template_path ) as template_file :
        j2_template  = Template (template_file .read())
        output_file .write(j2_template .render(plotly_jinja_data ))
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
sing a16/07/2025, 06:09 Interactive html export in Python
https://plotly.com/python/interactive-html-export/ 2/5

--- Página 3 ---
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html
import plotly.express as px
from base64 import b64encode
import io
app = Dash(__name__)
buffer = io.StringIO()
df = px.data.iris() # replace with your own data source
fig = px.scatter(
    df, x="sepal_width", y="sepal_length",
    color="species")
fig.write_html(buffer)
html_bytes = buffer.getvalue().encode()
encoded = b64encode(html_bytes).decode()
app.layout = html.Div([
    html.H4('Simple plot export options'),
    html.P("↓↓↓ try downloading the plot as PNG ↓↓↓ ", style={"text-align": "right", "font-weight": "bold"}),
    dcc.Graph(id="graph", figure=fig),
    html.A(
        html.Button("Download as HTML"),
        id="download",
 hf"dttt/htlb 64" ddDOWNLOAD
Simple plot export options
↓↓↓ try downloading the plot as PNG ↓↓↓
DOWNLOAD AS HTML2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
sing a16/07/2025, 06:09 Interactive html export in Python
https://plotly.com/python/interactive-html-export/ 3/5

--- Página 4 ---
Full Parameter Documentation
What About Dash?import plotly.graph_objects  as go
help(go.Figure.write_html )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Help on function write_html in module plotly.basedatatypes:
write_html(self, *args, **kwargs)
Write a figure to an HTML file representation
Parameters
----------
file: str or writeable
A string representing a local file path or a writeable object
(e.g. a pathlib.Path object or an open file descriptor)
config: dict or None (default None)
Plotly.js figure config options
autoplay:bool(default=True)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
sing a16/07/2025, 06:09 Interactive html export in Python
https://plotly.com/python/interactive-html-export/ 4/5

--- Página 5 ---
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
sing a16/07/2025, 06:09 Interactive html export in Python
https://plotly.com/python/interactive-html-export/ 5/5</content>
      </file>
      <file name="Introspecting figures in Python.pdf" path="pyvy_2x1/Introspecting figures in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)The Figure Lifecycle
Introspecting Plotly Express Figures &gt;  &gt;
Introspecting Figures
Introspecting Figures in Python
How to dig into and learn more about the figure data structure.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/figure-
introspection.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
As explained in the , when building a figure object with Plotly.py, it is not necessary to populate every
possible attribute. At render-time, figure objects (whether generated via  or ) are
passed from Plotly.py to , which is the Javascript library responsible for turning JSON descriptions of figures into graphical representations.
Figure Data Structure documentation (/python/figure-structure/)
Plotly Express (/python/plotly-express/)
Graph Objects (/python/graph-objects/)
Plotly.js (/javascript/)
As part of this rendering process, Plotly.js will determine, based on the attributes that have been set, which other attributes require values in order to draw the figure.
Plotly.js will then apply either static or dynamic defaults to all of the remaining required attributes and render the figure. A good example of a static default would be
the text font size: if unspecified, the default value is always the same. A good example of a dynamic default would be the range of an axis: if unspecified, the default
will be computed based on the range of the data in traces associated with that axis.
Figure objects created by  have a number of attributes automatically set, and these can be introspected using the Python
print() function, or in JupyterLab, the special fig.show("json") renderer, which gives an interactive drilldown interface with search:
Plotly Express (/python/plotly-express/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 1/8

--- Página 2 ---
Accessing Javascript-Computed Defaultsimport plotly.express  as px
fig = px.scatter(x=[10, 20], y=[20, 10], height=400, width=400)
fig.show()
print(fig)
We can learn more about the attributes Plotly Express has set for us with the Python help() function:
help(fig.data[0].__class__ .mode)
new in 4.10
The .full_figure_for_development() method provides Python-level access to the default values computed by Plotly.js. This method requires 
, which is easy to install and also used for .
the Kaleido package
(/python/static-image-export/)
static image export (/python/static-image-export/)
By way of example, here is an extremely simple figure created with  (although it could have been made with 
 as well just like above) where we have disabled the default template for maximum readability. Note how in this figure the text labels on the
markers are clipped, and sit on top of the markers.
Graph Objects (/python/graph-objects/)
Plotly Express
(/python/plotly-express/)10 15 20101214161820
xy
Figure({
'data': [{'hovertemplate': 'x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;',
'legendgroup': '',
'marker': {'color': '#636efa', 'symbol': 'circle'},
'mode': 'markers',
'name': '',
'orientation': 'v',
'showlegend': False,
'type': 'scatter',
'x': {'bdata': 'ChQ=', 'dtype': 'i1'},
'xaxis': 'x',
'y': {'bdata': 'FAo=', 'dtype': 'i1'},
'yaxis':'y'}]
Help on property:
Determines the drawing mode for this scatter trace. If the
provided `mode` includes "text" then the `text` elements appear
at the coordinates. Otherwise, the `text` elements appear on
hover. If there are less than 20 points and the trace is not
stacked then the default is "lines+markers". Otherwise,
"lines".
The 'mode' property is a flaglist and may be specified
as a string containing:
- Any combination of ['lines', 'markers', 'text'] joined with '+' characters
(eg'lines+markers')
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 2/8

--- Página 3 ---
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scatter(
        mode="markers+text" ,
        x=[10,20],
        y=[20, 10],
        text=["Point A" , "Point B" ]
    )],
    layout=dict(height=400, width=400, template ="none")
)
fig.show()
Let's print this figure to see the very small JSON object that is passed to Plotly.js as input:
print(fig)
Now let's look at the "full" figure after Plotly.js has computed the default values for every necessary attribute.
Heads-up: the full figure is quite long and intimidating, and this page is meant to help demystify things so please read on!
Please also note that the .full_figure_for_development() function is really meant for interactive learning and debugging, rather than production use, hence its name
and the warning it produces by default, which you can see below, and which can be suppressed with warn=False.Point A
Point B
10 15 20101214161820
Figure({
'data': [{'mode': 'markers+text', 'text': ['Point A', 'Point B'], 'type': 'scatter', 'x': [10, 20], 'y': [20, 10]}],
'layout': {'height': 400, 'template': '...', 'width': 400}
})
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 3/8

--- Página 4 ---
Learning About Attributesfull_fig  = fig.full_figure_for_development ()
print(full_fig )
As you can see, Plotly.js does a lot of work filling things in for us! Let's look at the examples described at the top of the page of static and dynamic defaults. If we look
just at layout.font and layout.xaxis.range we can see that the static default font size is 12 and that the dynamic default range is computed to be a bit beyond the data
range which was 10-20:
print("full_fig.layout.font.size: " , full_fig .layout.font.size)
print("full_fig.layout.xaxis.range: " , full_fig .layout.xaxis.range)
What else can we use this full_fig for? Let's start by looking at the first entry of the data
print(full_fig .data[0])
We see that this is an instance of go.Scatter (as expected, given the input) and that it has an attribute we've maybe never heard of called cliponaxis which by default
seems to be set to True in this case. Let's find out more about this attribute using the built-in Python help() function/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/io/_kaleido.py:747: UserWarning:
full_figure_for_development is not recommended or necessary for production use in most circumstances. 
To suppress this warning, set warn=False
Figure({
'data': [{'cliponaxis': True,
'error_x': {'visible': False},
'error_y': {'visible': False},
'fill': 'none',
'hoverinfo': 'x+y+z+text',
'hoverlabel': {'align': 'auto',
'font': {'family': 'Arial, sans-serif',
'lineposition': 'none',
'shadow': 'none',
'size': 13,
'style': 'normal',
'textcase':'normal'
full_fig.layout.font.size:  12
full_fig.layout.xaxis.range:  (9.244604316546763, 20.755395683453237)
Scatter({
'cliponaxis': True,
'error_x': {'visible': False},
'error_y': {'visible': False},
'fill': 'none',
'hoverinfo': 'x+y+z+text',
'hoverlabel': {'align': 'auto',
'font': {'family': 'Arial, sans-serif',
'lineposition': 'none',
'shadow': 'none',
'size': 13,
'style': 'normal',
'textcase':'normal'
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 4/8

--- Página 5 ---
help(go.Scatter.cliponaxis )
Aha! This explains why in our original figure above, the text was cut off by the edge of the plotting area! Let's try forcing that to False, and let's also use the attribute
textposition which we see in the full figure is by default set to "middle center" to get our text off of our markers:
fig.update_traces (cliponaxis =False, textposition ="top right" )
fig.show()
We can use this technique (of making a figure, and querying Plotly.js for the "full" version of that figure, and then exploring the attributes that are automatically set for
us) to learn more about the range of possibilities that the figure schema makes available. We can drill down into layout attributes also:
help(go.layout.XAxis.autorange )Help on property:
Determines whether or not markers and text nodes are clipped
about the subplot axes. To show markers and text nodes above
axis lines and tick labels, make sure to set `xaxis.layer` and
`yaxis.layer` to *below traces*.
The 'cliponaxis' property must be specified as a bool
(either True, or False)
Returns
-------
bool
Point A
Point B
10 15 20101214161820
Help on property:
Determines whether or not the range of this axis is computed in
relation to the input data. See `rangemode` for more info. If
`range` is provided and it has a value for both the lower and
upper bound, `autorange` is set to False. Using "min" applies
autorange only to set the minimum. Using "max" applies
autorange only to set the maximum. Using *min reversed* applies
autorange only to set the minimum on a reversed axis. Using
*max reversed* applies autorange only to set the maximum on a
reversed axis. Using "reversed" applies autorange on both ends
and reverses the axis direction.
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 5/8

--- Página 6 ---
More about Layout
In the figure we introspected above, we had added , and Plotly.js automatically filled in for us the xaxis and yaxis values of
that trace object to be x and y, and then also filled out the corresponding layout.xaxis and layout.yaxis objects for us, complete with their 
.
a scatter trace (/python/line-and-scatter/)
extensive set of defaults for
gridlines, tick labels and so on (/python/axes/)
If we create a figure with  instead, however, Plotly.js will fill in a totally different set of objects in layout,
corresponding to 
.
a scattergeo trace (/python/scatter-plots-on-maps/)
a geo subplot, with all of its defaults for whether or not to show rivers, lakes, country borders, coastlines etc (https://plotly.com/python/map-
configuration/)
import plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scattergeo (
        mode="markers+text" ,
        lat=[10, 20],
        lon=[20, 10],
        text=["Point A" , "Point B" ]
    )],
    layout=dict(height=400, width=400,
                margin=dict(l=0,r=0,b=0,t=0),
                template ="none")
)
fig.show()
full_fig  = fig.full_figure_for_development ()
print(full_fig )
If I then set showrivers=True and re-query the full figure, I see that new keys have appeared in the layout.geo object for rivercolor and riverwidth, showing the
dynamic nature of these defaults.Point APoint B
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/io/_kaleido.py:747: UserWarning:
full_figure_for_development is not recommended or necessary for production use in most circumstances. 
To suppress this warning, set warn=False
Figure({
'data': [{'fill': 'none',
'geo': 'geo',
'hoverinfo': 'lon+lat+location+text',
'hoverlabel': {'align': 'auto',
'font': {'family': 'Arial, sans-serif',
'lineposition': 'none',
'shadow': 'none',
'size': 13,
'style': 'normal',
'textcase': 'normal',
'variant': 'normal',
'weight':'normal'}
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 6/8

--- Página 7 ---
Reference
What About Dash?fig.update_geos (showrivers =True)
full_fig  = fig.full_figure_for_development ()
print(full_fig .layout.geo)
You can learn more about  (and read about its 
) or about .
all the available attributes in the plotly figure schema (/python/reference/)
high-level structure (/python/figure-
structure/)
all the classes and functions in the plotly module (/python-api-reference/)
 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/io/_kaleido.py:747: UserWarning:
full_figure_for_development is not recommended or necessary for production use in most circumstances. 
To suppress this warning, set warn=False
layout.Geo({
'bgcolor': '#fff',
'center': {'lat': 0, 'lon': 0},
'coastlinecolor': '#444',
'coastlinewidth': 1,
'domain': {'x': [0, 1], 'y': [0, 1]},
'fitbounds': False,
'framecolor': '#444',
'framewidth': 1,
'lataxis': {'dtick': 10, 'range': [-90, 90], 'showgrid': False, 'tick0': 0},
'lonaxis': {'dtick': 30, 'range': [-180, 180], 'showgrid': False, 'tick0': 0},
'projection': {'rotation': {'lat': 0, 'lon': 0, 'roll': 0}, 'scale': 1, 'type': 'equirectangular'},
'resolution':110
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 7/8

--- Página 8 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
aults16/07/2025, 06:10 Introspecting figures in Python
https://plotly.com/python/figure-introspection/ 8/8</content>
      </file>
      <file name="Ipython vs python in Python.pdf" path="pyvy_2x1/Ipython vs python in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)What is the difference between IPython and Python?
Jupyter Notebook &gt;  &gt;
IPython vs Python
IPython vs Python in Python
Discussion of key differences between IPython and Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/ipython-
vs-python.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
While these two names are quite similar, they refer to entirely different things.
 is a general-purpose programming language. It was created in the late 1980s by Guido van Rossum. It is now one of the most
popular languages in the world. It is routinely used by system administrators and web developers. Also, many scientists are using Python thanks to libraries such as
NumPy, SciPy, pandas, and matplotlib. The ease of use of Python and its dynamic nature make it a very productive language.
 is an interactive command-line terminal for Python. It was created by Fernando Perez in 2001. IPython offers an enhanced read-eval-
print loop (REPL) environment particularly well adapted to scientific computing.
Python (https://www.python.org/)
IPython (https://ipython.org/)
In other words, IPython is a powerful interface to the Python language. But it is certainly not the only one. Besides IPython, the most common way to use Python is to
write scripts, files with the .py extension.
A script contains a list of commands to execute in order. It runs from start to finish and display some output. On the contrary, with IPython, you generally write one
command at a time and you get the results instantly. This is a completely different way of working with Python. When analyzing data or running computational
models, you need this sort of interactivity to explore them efficiently.
In 2011, IPython introduced a new tool named the Notebook. Inspired by scientific programs like Mathematica or Sage, the Notebook offers a modern and powerful
web interface to Python.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
hon and16/07/2025, 06:08 Ipython vs python in Python
https://plotly.com/python/ipython-vs-python/ 1/3

--- Página 2 ---
What About Dash?
Compared to the original IPython terminal, the Notebook offers a more convenient text editor, the possibility to write rich text, and improved graphical capabilities.
Also, since it is a web interface, it can integrate many of the existing web libraries for data visualization, including plotly.js.
In 2015, the IPython developers made a major code reorganization of their ever-growing project. The Notebook is now called the Jupyter Notebook. This interface can
be used not only with Python but with dozens of other languages such as R and Julia. IPython is now the name of the Python backend (aka kernel).
In conclusion, IPython and Jupyter are great interfaces to the Python language. If you're learning Python, using the IPython terminal or the Jupyter Notebook is highly
recommended.
This was a guest article written by Cyrille Rossant, author of Learning IPython for Interactive Computing and Data Visualization, second edition and IPython Interactive
Computing and Visualization Cookbook.
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
hon and16/07/2025, 06:08 Ipython vs python in Python
https://plotly.com/python/ipython-vs-python/ 2/3

--- Página 3 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
hon and16/07/2025, 06:08 Ipython vs python in Python
https://plotly.com/python/ipython-vs-python/ 3/3</content>
      </file>
      <file name="Legends in Python.pdf" path="pyvy_2x1/Legends in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Trace Types, Legends and Color Bars
Legends with Plotly Express &gt;  &gt;
Legends
Legends in Python
How to configure and style the legend in Plotly with Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/legend.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 of most types and shapes can be optionally associated with a single legend item in the . Whether or not a
given trace or shape appears in the legend is controlled via the showlegend attribute. Traces which are their own subplots (see above) do not support this, with the
exception of traces of type pie and funnelarea for which every distinct color represented in the trace gets a separate legend item. Users may show or hide traces by
clicking or double-clicking on their associated legend item. Traces that support legend items and shapes also support the legendgroup attribute, and all traces and
shapes with the same legend group are treated the same way during click/double-click interactions.
Traces (/python/figure-structure)
legend (/python/legend/)
The fact that legend items are linked to traces means that when using , a figure must have one trace per color in order to get a
meaningful legend.  to make this easy.
discrete color (/python/discrete-color/)
Plotly Express has robust support for discrete color (/python/discrete-color/)
Traces which support  can also be associated with color axes in the layout via the coloraxis attribute. Multiple traces can be
linked to the same color axis. Color axes have a legend-like component called color bars. Alternatively, color axes can be configured within the trace itself.
continuous color (/python/colorscales/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Plotly Express functions will create one  per animation frame for each unique combination of data values mapped to discrete color,
symbol, line-dash, facet-row and/or facet-column. Traces' legendgroup and showlegend attributed are set such that only one legend item appears per unique
combination of discrete color, symbol and/or line-dash. The legend title is automatically set, and can be overrided with the labels keyword argument:
trace (/python/figure-structure)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 1/28

--- Página 2 ---
Legend Orderimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex", symbol="smoker" , facet_col ="time",
          labels={"sex": "Gender" , "smoker" : "Smokes" })
fig.show()
By default, Plotly Express lays out legend items in the order in which values appear in the underlying data. Every Plotly Express function also includes a
category_orders keyword argument which can be used to control , but beyond that can also
control the order in which legend items appear, and .
the order in which categorical axes are drawn (/python/categorical-axes/)
the order in which facets are laid out (/python/facet-plots/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="group", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.show()0 20 40246810
0 20 40Gender, Smokes
Female, No
Female, Yes
Male, No
Male, Yes
total_bill total_billtiptime=Dinner time=Lunch
Thur Fri Sat Sun0100200300400500600700800900
Thur Fri Sat Sunsmoker
Yes
No
day daytotal_billsex=Male sex=Female
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 2/28

--- Página 3 ---
When using stacked bars, the bars are stacked from the bottom in the same order as they appear in the legend, so it can make sense to set layout.legend.traceorder
to "reversed" to get the legend and stacks to match:
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="stack", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.update_layout (legend_traceorder ="reversed" )
fig.show()
When using  rather than Plotly Express, legend items will appear in the order that traces appear in the data:
plotly.graph_objects (/python/graph-objects/)Thur Fri Sat Sun020040060080010001200
Thur Fri Sat Sunsmoker
No
Yes
day daytotal_billsex=Male sex=Female
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 3/28

--- Página 4 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(name="first", x=["a", "b"], y=[1,2]))
fig.add_trace (go.Bar(name="second" , x=["a", "b"], y=[2,1]))
fig.add_trace (go.Bar(name="third", x=["a", "b"], y=[1,2]))
fig.add_trace (go.Bar(name="fourth" , x=["a", "b"], y=[2,1]))
fig.show()
New in 5.16
If you have shapes that are configured to appear in a legend, these are displayed after all traces:a b00.511.52 first
second
third
fourth
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 4/28

--- Página 5 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(name="first", x=["a", "b"], y=[1, 2]))
fig.add_trace (go.Bar(name="second" , x=["a", "b"], y=[2, 1]))
fig.add_shape (
    name="first shape" ,
    showlegend =True,
    type="rect",
    xref="paper",
    line=dict(dash="dash"),
    x0=0.85,
    x1=0.95,
    y0=0,
    y1=1.5,
)
fig.add_trace (go.Bar(name="third", x=["a", "b"], y=[1, 2]))
fig.add_trace (go.Bar(name="fourth" , x=["a", "b"], y=[2, 1]))
fig.show()
The legendrank attribute of a trace or shape can be used to control its placement in the legend. The default legendrank for traces and shapes is 1000. When all traces
and shapes have the same legendrank, traces appear in the order they appear in the data, followed by shapes in the order they are defined.
Any trace or shape can be pulled up to the top of the legend if it is the only one with a legend rank less than 1000 and pushed to the bottom if it is the only one with a
rank greater than 1000.
In this example, we add a legendrank for each trace and shape, giving the shape the lowest rank so it appears first, and moving the first trace defined to the bottom of
the legend by giving it the highest rank.a b00.511.52 first
second
third
fourth
first shape
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 5/28

--- Página 6 ---
Showing and Hiding the Legendimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(name="fourth" , x=["a", "b"], y=[2,1], legendrank =5))
fig.add_trace (go.Bar(name="second" , x=["a", "b"], y=[2,1], legendrank =4))
fig.add_trace (go.Bar(name="first", x=["a", "b"], y=[1,2], legendrank =2))
fig.add_trace (go.Bar(name="third", x=["a", "b"], y=[1,2], legendrank =3))
fig.add_shape (
    legendrank =1,
    showlegend =True,
    type="line",
    xref="paper",
    line=dict(dash="5px"),
    x0=0.05,
    x1=0.45,
    y0=1.5,
    y1=1.5,
)
fig.show()
By default the legend is displayed on Plotly charts with multiple traces, and this can be explicitly set with the layout.showlegend attribute.a b00.511.52 shape 0
first
third
second
fourth
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 6/28

--- Página 7 ---
Legend Positioningimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="total_bill" , color="time",
                  title="Total Bill by Sex, Colored by Time" )
fig.update_layout (showlegend =False)
fig.show()
Legends have an anchor point, which can be set to a point within the legend using layout.legend.xanchor and layout.legend.yanchor. The coordinate of the anchor can
be positioned with layout.legend.x and layout.legend.y in . Note that the plot margins will grow so as to accommodate
the legend. The legend may also be placed within the plotting area.
paper coordinates (/python/figure-structure/)Female Male050010001500200025003000Total Bill by Sex, Colored by Time
sexsum of total_bill
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 7/28

--- Página 8 ---
Legends in Dashimport plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , color="continent" ,
    size="pop", size_max =45, log_x=True)
fig.update_layout (legend=dict(
    yanchor="top",
    y=0.99,
    xanchor="left",
    x=0.01
))
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
2 345678910002 345678910k2 345640455055606570758085continent
Asia
Europe
Africa
Americas
Oceania
gdpPercaplifeExp
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 8/28

--- Página 9 ---
Horizontal LegendsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
The layout.legend.orientation attribute can be set to "h" for a horizontal legend. Here we also position it above the plotting area.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive legend position with Dash'),
    html.P("Select legend position:"),
    dcc.RadioItems(
        id='xanchor', value=0, inline=True,
        options=[{'label': 'left', 'value': 0},
                 {'label': 'right', 'value': 1}]
    ),
    dcc.RadioItems(
        id='yanchor', value=1, inline=True,
        options=[{'label': 'top', 'value': 1},
                 {'label': 'bottom', 'value': 0}],
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("xanchor", "value"),
    Input("yanchor", "value"))
dfdifl d( )DOWNLOAD
Interactive legend position with Dash
Select legend position:
leftright
topbottom
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
gdpPercaplifeExp
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 9/28

--- Página 10 ---
Horizontal Legend Entry Widthimport plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , color="continent" ,
    size="pop", size_max =45, log_x=True)
fig.update_layout (legend=dict(
    orientation ="h",
    yanchor="bottom" ,
    y=1.02,
    xanchor="right",
    x=1
))
fig.show()
New in 5.11
Set the width of horizontal legend entries by setting entrywidth. Here we set it to 70 pixels. Pixels is the default unit for entrywidth, but you can set it to be a fraction of
the plot width using entrywidthmode='fraction'.
2 345678910002 345678910k2 345640455055606570758085continent Asia
 Europe
 Africa
 Americas
 Oceania
gdpPercaplifeExp
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 10/28

--- Página 11 ---
Styling Legendsimport plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , color="continent" ,
    size="pop", size_max =45, log_x=True)
fig.update_layout (legend=dict(
    orientation ="h",
    entrywidth =70,
    yanchor="bottom" ,
    y=1.02,
    xanchor="right",
    x=1
))
fig.show()
Legends support many styling options.
2 345678910002 345678910k2 345640455055606570758085continent Asia
 Europe
 Africa
 Americas
 Oceania
gdpPercaplifeExp
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 11/28

--- Página 12 ---
Legends with Graph Objects
Legend Item Namesimport plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , color="continent" ,
    size="pop", size_max =45, log_x=True)
fig.update_layout (
    legend=dict(
        x=0,
        y=1,
        traceorder ="reversed" ,
        title_font_family ="Times New Roman" ,
        font=dict(
            family="Courier" ,
            size=12,
            color="black"
        ),
        bgcolor="LightSteelBlue" ,
        bordercolor ="Black",
        borderwidth =2
    )
)
fig.show()
When creating figures using  without using , legends must be manually configured using
some of the options below.
graph objects (/python/graph-objects/)
Plotly Express (/python/plotly-express/)
For traces, legend items appear per trace, and the legend item name is taken from the trace's name attribute.
2 345678910002 345678910k2 345640455055606570758085continent
Oceania
Americas
Africa
Europe
Asia
gdpPercaplifeExp
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 12/28

--- Página 13 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    name="Positive"
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
    name="Negative"
))
fig.show()
By default, for shapes, legend items are disabled. Set showlegend=True on a shape for it to display a legend item. The name that appears for the shape in the legend
is the shape's name if it is provided. If no name is provided, the shape label's text is used. If neither is provided, the legend item appears as "shape \". For example,
"shape 1".1 1.5 2 2.5 3 3.5 4 4.5 511.522.533.544.55Positive
Negative
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 13/28

--- Página 14 ---
Legend titlesimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    name="Positive"
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
    name="Negative"
))
fig.add_shape (
    showlegend =True,
    type="rect",
    x0=2,
    x1=4,
    y0=4.5,
    y1=5,
)
fig.show()
1 1.5 2 2.5 3 3.5 4 4.5 511.522.533.544.55Positive
Negative
shape 0
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 14/28

--- Página 15 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    name="Increasing"
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
    name="Decreasing"
))
fig.update_layout (legend_title_text ='Trend')
fig.show()
1 1.5 2 2.5 3 3.5 4 4.5 511.522.533.544.55Trend
Increasing
Decreasing
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 15/28

--- Página 16 ---
Hiding Legend Items
Hiding the Trace Initiallyimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    showlegend =False
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
))
fig.update_layout (showlegend =True)
fig.show()
Traces and shapes have a visible attribute. If set to legendonly, the trace or shape is hidden from the graph implicitly. Click on the name in the legend to display the
hidden trace or shape.1 1.5 2 2.5 3 3.5 4 4.5 511.522.533.544.55trace 1
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 16/28

--- Página 17 ---
Size of Legend Itemsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
    visible='legendonly'
))
fig.show()
In this example  attribute determines the legend items symbols remain constant,
regardless of how tiny/huge the bubbles would be in the graph.
itemsizing (https://plotly.com/python/reference/layout/#layout-legend-itemsizing)1 1.5 2 2.5 3 3.5 4 4.5 511.522.533.544.55trace 0
trace 1
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 17/28

--- Página 18 ---
Grouped Legend Itemsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    mode='markers' ,
    marker={'size':10}
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
    mode='markers' ,
    marker={'size':100}
))
fig.update_layout (legend= {'itemsizing' : 'constant' })
fig.show()
Grouping legend items together by setting the legendgroup attribute of traces causes their legend entries to be next to each other, and clicking on any legend entry in
the group will show or hide the whole group. The legendgrouptitle attribute can be used to give titles to groups.1 2 3 4 50123456trace 0
trace 1
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 18/28

--- Página 19 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[2, 1, 3],
    legendgroup ="group",  # this can be any string, not just "group"
    legendgrouptitle_text ="First Group Title" ,
    name="first legend group" ,
    mode="markers" ,
    marker=dict(color="Crimson" , size=10)
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[2, 2, 2],
    legendgroup ="group",
    name="first legend group - average" ,
    mode="lines",
    line=dict(color="Crimson" )
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[4, 9, 2],
    legendgroup ="group2" ,
    legendgrouptitle_text ="Second Group Title" ,
    name="second legend group" ,
    mode="markers" ,
    marker=dict(color="MediumPurple" , size=10)
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[5, 5, 5],
    legendgroup ="group2" ,
    name="second legend group - average" ,
    mode="lines",
    line=dict(color="MediumPurple" )
))
fig.update_layout (title=dict(text="Try Clicking on the Legend Items!" ))
fig.show()
You can also hide entries in grouped legends, preserving the grouped show/hide behaviour. This is what Plotly Express does with its legends.1 1.5 2 2.5 3123456789First Group Title
first legend group
first legend group - average
Second Group Title
second legend group
second legend group - averageTry Clicking on the Legend Items!
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 19/28

--- Página 20 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[2, 1, 3],
    legendgroup ="group",  # this can be any string, not just "group"
    name="first legend group" ,
    mode="markers" ,
    marker=dict(color="Crimson" , size=10)
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[2, 2, 2],
    legendgroup ="group",
    name="first legend group - average" ,
    mode="lines",
    line=dict(color="Crimson" ),
    showlegend =False,
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[4, 9, 2],
    legendgroup ="group2" ,
    name="second legend group" ,
    mode="markers" ,
    marker=dict(color="MediumPurple" , size=10)
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[5, 5, 5],
    legendgroup ="group2" ,
    name="second legend group - average" ,
    mode="lines",
    line=dict(color="MediumPurple" ),
    showlegend =False
))
fig.update_layout (title=dict(text="Try Clicking on the Legend Items!" ))
fig.show()
1 1.5 2 2.5 3123456789first legend group
second legend groupTry Clicking on the Legend Items!
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 20/28

--- Página 21 ---
Indent Legend Entries
Group click toggle behaviorNew in 5.20
To indent legend entries, set indenation on layout.legend to a number of pixels. In the following example, we indent legend entries by 10 pixels.
import plotly.graph_objects  as go
from plotly import data
df = data.iris()
fig = go.Figure(
    [
        go.Scatter(
            x=df[df["species" ] == species]["sepal_width" ],
            y=df[df["species" ] == species]["sepal_length" ],
            mode="markers" ,
            name=species,
        )
        for species in df["species" ].unique()
    ],
    layout=dict(
        legend=dict(
            title=dict(
                text="Species" ,
            ),
            indentation =10
        )
    ),
)
fig.show()
New in v5.3
You can also define the toggle behavior for when a user clicks an item in a group. Here we set the groupclick for the legend to toggleitem. This toggles the visibility of
just the item clicked on by the user. Set to togglegroup and it toggles the visibility of all items in the same group as the item clicked on.2 2.5 3 3.5 4 4.54.555.566.577.58 Species
setosa
versicolor
virginica
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 21/28

--- Página 22 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[2, 1, 3],
    legendgroup ="group",  # this can be any string, not just "group"
    legendgrouptitle_text ="First Group Title" ,
    name="first legend group" ,
    mode="markers" ,
    marker=dict(color="Crimson" , size=10)
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[2, 2, 2],
    legendgroup ="group",
    name="first legend group - average" ,
    mode="lines",
    line=dict(color="Crimson" )
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[4, 9, 2],
    legendgroup ="group2" ,
    legendgrouptitle_text ="Second Group Title" ,
    name="second legend group" ,
    mode="markers" ,
    marker=dict(color="MediumPurple" , size=10)
))
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[5, 5, 5],
    legendgroup ="group2" ,
    name="second legend group - average" ,
    mode="lines",
    line=dict(color="MediumPurple" )
))
fig.update_layout (title=dict(text="Try Clicking on the Legend Items!" ))
fig.update_layout (legend=dict(groupclick ="toggleitem" ))
fig.show()
1 1.5 2 2.5 3123456789First Group Title
first legend group
first legend group - average
Second Group Title
second legend group
second legend group - averageTry Clicking on the Legend Items!
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 22/28

--- Página 23 ---
Legend items for continuous fields (2D and 3D)
Traces corresponding to 2D fields (e.g. go.Heatmap, go.Histogram2d) or 3D fields (e.g. go.Isosurface, go.Volume, go.Cone) can also appear in the legend. They come
with legend icons corresponding to each trace type, which are colored using the same colorscale as the trace.
The example below explores a vector field using several traces. Note that you can click on legend items to hide or to select (with a double click) a specific trace. This
will make the exploration of your data easier!
import numpy as np
import plotly.graph_objects  as go
# Define vector and scalar fields
x, y, z = np.mgrid[0:1:8j, 0:1:8j, 0:1:8j]
u =    np.sin(np.pi*x) * np.cos(np.pi*z)
v = -2*np.sin(np.pi*y) * np.cos(2*np.pi*z)
w = np.cos(np.pi*x)*np.sin(np.pi*z) + np.cos(np.pi*y)*np.sin(2*np.pi*z)
magnitude  = np.sqrt(u**2 + v**2 + w**2)
mask1 = np.logical_and (y&gt;=.4, y&lt;=.6)
mask2 = y&gt;.6
fig = go.Figure(go.Isosurface (
                      x=x.ravel(), y=y.ravel(), z=z.ravel(),
                      value=magnitude .ravel(),
                      isomin=1.9, isomax=1.9,
                      colorscale ="BuGn",
                      name='isosurface' ))
fig.add_trace (go.Cone(x=x[mask1], y=y[mask1], z=z[mask1],
                      u=u[mask1], v=v[mask1], w=w[mask1],
                      colorscale ="Blues",
                      name='cones'
))
fig.add_trace (go.Streamtube (
                      x=x[mask2], y=y[mask2], z=z[mask2],
                      u=u[mask2], v=v[mask2], w=w[mask2],
                      colorscale ="Reds",
                      name='streamtubes'
))
# Update all traces together
fig.update_traces (showlegend =True, showscale =False)
fig.update_layout (width=600, title_text ='Exploration of a vector field using several traces' )
fig.show()
isosurface
cones
streamtubesExploration of a vector field using several traces
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 23/28

--- Página 24 ---
Adding Multiple Legends
New in 5.15
By default, all traces and shapes appear on one legend. To have multiple legends, specify an alternative legend for a trace or shape using the legend property. For a
second legend, set legend="legend2". Specify more legends with legend="legend3", legend="legend4" and so on.
In this example, the last two scatter traces display on the second legend, "legend2". On the figure's layout, we then position and style each legend.
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 24/28

--- Página 25 ---
import plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
df_germany  = df.loc[(df.country.isin(["Germany" ]))]
df_france  = df.loc[(df.country.isin(["France" ]))]
df_uk = df.loc[(df.country.isin(["United Kingdom" ]))]
df_averages_europe  = (
    df.loc[(df.continent .isin(["Europe" ]))].groupby(by="year").mean(numeric_only =True)
)
df_averages_americas  = (
    df.loc[(df.continent .isin(["Americas" ]))].groupby(by="year").mean(numeric_only =True)
)
fig = go.Figure(
    data=[
        go.Scatter(x=df_germany .year, y=df_germany .gdpPercap , name="Germany" ),
        go.Scatter(x=df_france .year, y=df_france .gdpPercap , name="France" ),
        go.Scatter(x=df_uk.year, y=df_uk.gdpPercap , name="UK"),
        go.Scatter(
            x=df_averages_europe .index,
            y=df_averages_europe .gdpPercap ,
            name="Europe" ,
            legend="legend2" ,
        ),
        go.Scatter(
            x=df_averages_americas .index,
            y=df_averages_americas .gdpPercap ,
            name="Americas" ,
            legend="legend2" ,
        ),
    ],
    layout=dict(
        title=dict(
            text="GDP Per Capita"
        ),
        legend=dict(
            title=dict(
                text="By country"
            ),
            xref="container" ,
            yref="container" ,
            y=0.65,
            bgcolor="Orange"
        ),
        legend2=dict(
            title=dict(
                text="By continent"
            ),
            xref="container" ,
            yref="container" ,
            y=0.85,
            bgcolor="Gold"
        ),
    ),
)
fig.show()
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 25/28

--- Página 26 ---
Positioning Legends
In the previous example, we position the second legend by specifying x and y values. By default, these values are based on the width and height of the plot area. It is
also possible to specify values that reference the container width and height by setting "xref=container" and "yref="container" (the default values are "xref=paper" and
"yref="paper"). When set to "container", the margin grows so the legend and plot don't overlap.1950 1960 1970 1980 1990 2000 20105k10k15k20k25k30k35k
By country
Germany
France
UKBy continent
Europe
AmericasGDP Per Capita
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 26/28

--- Página 27 ---
Referenceimport plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
df_germany  = df.loc[(df.country.isin(["Germany" ]))]
df_france  = df.loc[(df.country.isin(["France" ]))]
df_uk = df.loc[(df.country.isin(["United Kingdom" ]))]
fig = go.Figure(
    data=[
        go.Scatter(x=df_germany .year, y=df_germany .gdpPercap , name="Germany" ),
        go.Scatter(x=df_france .year, y=df_france .gdpPercap , name="France" ),
        go.Scatter(x=df_uk.year, y=df_uk.gdpPercap , name="UK"),
    ],
    layout=dict(
        title=dict(text="GDP Per Capita" ),
        legend={
            "x": 0.9,
            "y": 0.9,
            "xref": "container" ,
            "yref": "container" ,
            "bgcolor" : "Gold",
        },
    ),
)
fig.show()
See  for more information!
https://plotly.com/python/reference/layout/#layout-legend (https://plotly.com/python/reference/layout/#layout-legend)1950 1960 1970 1980 1990 2000 201010k15k20k25k30k35kGermany
France
UKGDP Per Capita
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 27/28

--- Página 28 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
(2D and16/07/2025, 06:05 Legends in Python
https://plotly.com/python/legend/ 28/28</content>
      </file>
      <file name="Multiple axes in Python.pdf" path="pyvy_2x1/Multiple axes in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Multiple Y Axes and Plotly Express
Two Y Axes &gt;  &gt;
Multiple Axes
Multiple Axes in Python
How to make a graph with multiple axes (dual y-axis plots, plots with secondary axes) in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/multiple-
axes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Note: At this time, Plotly Express does not support multiple Y axes on a single figure. To make such a figure, use the 
function in conjunction with  as documented below.
make_subplots() (/python/subplots/)
graph objects (/python/graph-objects/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 1/13

--- Página 2 ---
Multiple axes in Dashimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
# Create figure with secondary y-axis
fig = make_subplots (specs=[[{"secondary_y" : True}]])
# Add traces
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name="yaxis data" ),
    secondary_y =False,
)
fig.add_trace (
    go.Scatter(x=[2, 3, 4], y=[4, 5, 6], name="yaxis2 data" ),
    secondary_y =True,
)
# Add figure title
fig.update_layout (
    title_text ="Double Y Axis Example"
)
# Set x-axis title
fig.update_xaxes (title_text ="xaxis title" )
# Set y-axes titles
fig.update_yaxes (title_text ="&lt;b&gt;primary&lt;/b&gt; yaxis title" , secondary_y =False)
fig.update_yaxes (title_text ="&lt;b&gt;secondary&lt;/b&gt; yaxis title" , secondary_y =True)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1 1.5 2 2.5 3 3.5 44045505560
44.555.56yaxis data
yaxis2 dataDouble Y Axis Example
xaxis titleprimary yaxis title
secondary yaxis title
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 2/13

--- Página 3 ---
Multiple Y-Axes SubplotsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
from plotly.subplots import make_subplots
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive data-scaling using the secondary axis'),
    html.P("Select red line's Y-axis:"),
    dcc.RadioItems(
        id='radio',
        options=['Primary', 'Secondary'],
        value='Secondary'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("radio", "value"))
def display_(radio_value):
    # Create figure with secondary y-axis
 fi k blt( [[{" d "T }]])DOWNLOAD
Interactive data-scaling using the secondary axis
Select red line's Y-axis:
Primary
Secondary
1 1.5 2 2.5 3 3.5 44045505560
44.555.56 yaxis data
yaxis2 dataDouble Y Axis Example
xaxis titleprimary yaxis title
secondary yaxis title
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 3/13

--- Página 4 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2,
                    specs=[[{"secondary_y" : True}, {"secondary_y" : True}],
                           [{"secondary_y" : True}, {"secondary_y" : True}]])
# Top left
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name="yaxis data" ),
    row=1, col=1, secondary_y =False)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name="yaxis2 data" ),
    row=1, col=1, secondary_y =True,
)
# Top right
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name="yaxis3 data" ),
    row=1, col=2, secondary_y =False,
)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name="yaxis4 data" ),
    row=1, col=2, secondary_y =True,
)
# Bottom left
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name="yaxis5 data" ),
    row=2, col=1, secondary_y =False,
)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name="yaxis6 data" ),
    row=2, col=1, secondary_y =True,
)
# Bottom right
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[2, 52, 62], name="yaxis7 data" ),
    row=2, col=2, secondary_y =False,
)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name="yaxis8 data" ),
    row=2, col=2, secondary_y =True,
)
fig.show()
1 1.5 2 2.5 30204060
4045505560
1 1.5 2 2.5 30204060
4045505560
1 1.5 2 2.5 30204060
4045505560
1 1.5 2 2.5 30204060
4045505560yaxis data
yaxis2 data
yaxis3 data
yaxis4 data
yaxis5 data
yaxis6 data
yaxis7 data
yaxis8 data
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 4/13

--- Página 5 ---
Multiple Axes
Low-level API for creating a figure with multiple axes
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 5/13

--- Página 6 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6],
    name="yaxis1 data"
))
fig.add_trace (go.Scatter(
    x=[2, 3, 4],
    y=[40, 50, 60],
    name="yaxis2 data" ,
    yaxis="y2"
))
fig.add_trace (go.Scatter(
    x=[4, 5, 6],
    y=[40000, 50000, 60000],
    name="yaxis3 data" ,
    yaxis="y3"
))
fig.add_trace (go.Scatter(
    x=[5, 6, 7],
    y=[400000, 500000, 600000],
    name="yaxis4 data" ,
    yaxis="y4"
))
# Create axis objects
fig.update_layout (
    xaxis=dict(
        domain=[0.3, 0.7]
    ),
    yaxis=dict(
        title=dict(
            text="yaxis title" ,
            font=dict(
                color="#1f77b4"
            )
        ),
    ),
    yaxis2=dict(
        title=dict(
            text="yaxis2 title" ,
            font=dict(
                color="#ff7f0e"
            )
        ),
        anchor="free",
        overlaying ="y",
        side="left",
        position =0.15
    ),
    yaxis3=dict(
        title=dict(
            text="yaxis3 title" ,
            font=dict(
                color="#d62728"
            )
        ),
        anchor="x",
        overlaying ="y",
        side="right"
    ),
    yaxis4=dict(
        title=dict(
            text="yaxis4 title" ,
            font=dict(
                color="#9467bd"
            )
        ),
        anchor="free",
        overlaying ="y",
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 6/13

--- Página 7 ---
Automatically Shifting Axes        side="right",
        position =0.85
    )
)
# Update layout properties
fig.update_layout (
    title_text ="multiple y-axes example" ,
    width=800,
)
fig.show()
New in 5.12
To automatically reposition axes to avoid overlap with other axes with the same overlaying value, set autoshift=True. For autoshift to work on an axis, you'll also need
to set anchor="free" on that axis.2 4 644.555.56
4045505560
40k45k50k55k60k
400k450k500k550k600kyaxis1 data
yaxis2 data
yaxis3 data
yaxis4 datamultiple y-axes exampleyaxis titleyaxis2 title
yaxis3 title
yaxis4 title
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 7/13

--- Página 8 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6], name="yaxis data" ))
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[40, 50, 60], name="yaxis2 data" , yaxis="y2"))
fig.add_trace (
    go.Scatter(x=[4, 5, 6], y=[1000, 2000, 3000], name="yaxis3 data" , yaxis="y3")
)
fig.add_trace (
    go.Scatter(x=[3, 4, 5], y=[400, 500, 600], name="yaxis4 data" , yaxis="y4")
)
fig.update_layout (
    xaxis=dict(
        domain=[0.25, 0.75]
    ),
    yaxis=dict(
        title=dict(
            text="yaxis title"
        )
    ),
    yaxis2=dict(
        title=dict(
            text="yaxis2 title"
        ),
        overlaying ="y",
        side="right"
    ),
    yaxis3=dict(
        title=dict(
            text="yaxis3 title"
        ),
        anchor="free",
        overlaying ="y",
        autoshift =True
    ),
    yaxis4=dict(
        title=dict(
            text="yaxis4 title"
        ),
        anchor="free",
        overlaying ="y",
        autoshift =True
    ),
)
fig.update_layout (
    title_text ="Shifting y-axes with autoshift" ,
)
fig.show()
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 8/13

--- Página 9 ---
Shift Axes by a Specific Number of Pixels
New in 5.12
Set a shift value on an axis to shift an axis by that number of pixels. A positive value shifts an axis to the right. A negative value shifts it to the left. Here, we shift yaxis4
100 pixels further to the left.2 4 644.555.56
4045505560
10001500200025003000
400450500550600yaxis data
yaxis2 data
yaxis3 data
yaxis4 dataShifting y-axes with autoshiftyaxis title
yaxis2 titleyaxis3 titleyaxis4 title
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 9/13

--- Página 10 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6], name="yaxis data" ))
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[40, 50, 60], name="yaxis2 data" , yaxis="y2"))
fig.add_trace (
    go.Scatter(x=[4, 5, 6], y=[1000, 2000, 3000], name="yaxis3 data" , yaxis="y3")
)
fig.add_trace (
    go.Scatter(x=[3, 4, 5], y=[400, 500, 600], name="yaxis4 data" , yaxis="y4")
)
fig.update_layout (
    xaxis=dict(
        domain=[0.25, 0.75]
    ),
    yaxis=dict(
        title=dict(
            text="yaxis title"
        )
    ),
    yaxis2=dict(
        title=dict(
            text="yaxis2 title"
        ),
        overlaying ="y",
        side="right"
    ),
    yaxis3=dict(
        title=dict(
            text="yaxis3 title"
        ),
        anchor="free",
        overlaying ="y",
        autoshift =True
    ),
    yaxis4=dict(
        title=dict(
            text="yaxis4 title"
        ),
        anchor="free",
        overlaying ="y",
        autoshift =True,
        shift=-100
    ),
)
fig.update_layout (
    title_text ="Shifting y-axes by a specific number of pixels" ,
)
fig.show()
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 10/13

--- Página 11 ---
Sync Axes Ticks
New in 5.13
With overlayed axes, each axis by default has its own number of ticks. You can sync the number of ticks on a cartesian axis with another one it overlays by setting
tickmode="sync". In this example, we sync the ticks on the "Total bill amount" axis with the "Total number of diners" axis that it overlays.2 4 644.555.56
4045505560
10001500200025003000
400450500550600yaxis data
yaxis2 data
yaxis3 data
yaxis4 dataShifting y-axes by a specific number of pixelsyaxis title
yaxis2 titleyaxis3 titleyaxis4 title
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 11/13

--- Página 12 ---
import plotly.graph_objects  as go
from plotly.data  import tips
df = tips()
summed_values  = df.groupby(by="day", as_index =False).sum(numeric_only =True)
day_order_mapping  = {"Thur": 0, "Fri": 1, "Sat": 2, "Sun": 3}
summed_values ["order"] = summed_values ["day"].apply(lambda day: day_order_mapping [day])
summed_values  = summed_values .sort_values (by="order")
days_of_week  = summed_values ["day"].values
total_bills  = summed_values ["total_bill" ].values
number_of_diners  = summed_values ["size"].values
fig = go.Figure(
    data=go.Bar(
        x=days_of_week ,
        y=number_of_diners ,
        name="Total number of diners" ,
        marker=dict(color="paleturquoise" ),
    )
)
fig.add_trace (
    go.Scatter(
        x=days_of_week ,
        y=total_bills ,
        yaxis="y2",
        name="Total bill amount" ,
        marker=dict(color="crimson" ),
    )
)
fig.update_layout (
    legend=dict(orientation ="h"),
    yaxis=dict(
        title=dict(text="Total number of diners" ),
        side="left",
        range=[0, 250],
    ),
    yaxis2=dict(
        title=dict(text="Total bill amount" ),
        side="right",
        range=[0, 2000],
        overlaying ="y",
        tickmode ="sync",
    ),
)
fig.show()
Thur Fri Sat Sun050100150200250
0400800120016002000
Total number of diners Total bill amountTotal number of diners
Total bill amount
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 12/13

--- Página 13 ---
Reference
What About Dash?All of the y-axis properties are found here: . For more
information on creating subplots see the  section.
https://plotly.com/python/reference/layout/yaxis/ (https://plotly.com/python/reference/layout/yaxis/)
Subplots in Python (/python/subplots/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
Pixels16/07/2025, 06:06 Multiple axes in Python
https://plotly.com/python/multiple-axes/ 13/13</content>
      </file>
      <file name="Multiple chart types in Python.pdf" path="pyvy_2x1/Multiple chart types in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Chart Types versus Trace Types
Multiple Trace Types with Plotly Express &gt;  &gt;
Multiple Chart Types
Multiple Chart Types in Python
How to design figures with multiple chart types in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/graphing-
multiple-chart-types.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly's  supports defining  of  (e.g. 
, , ,  etc) with attached traces of 
 (e.g. scatter, bar, choropleth, surface etc). This means that Plotly figures are not constrained to representing a fixed set of "chart
types" such as scatter plots only or bar charts only or line charts only: any subplot can contain multiple traces of different types.
figure data structure (/python/figure-structure/)
subplots (/python/subplots/)
various types (/python/mixed-subplots/)
cartesian
(/python/axes/)
polar (/python/polar-chart/)
3-dimensional (/python/3d-charts/)
maps (/python/maps/)
various compatible types
(/python/figure-structure/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Plotly Express exposes a number of functions such as px.scatter() and px.choropleth() which generally speaking only contain traces of the same type, with exceptions
made for  and .
trendlines (/python/linear-fits/)
marginal distribution plots (/python/marginal-plots/)
Figures produced with Plotly Express functions support the add_trace() method documented below, just like figures created with 
 so it is easy to start with a Plotly Express figure containing only traces of a given type, and add traces of another type.
graph objects (/python/graph-
objects/)
import plotly.express  as px
fruits = ["apples" , "oranges" , "bananas" ]
fig = px.line(x=fruits, y=[1,3,2], color=px.Constant ("This year" ),
             labels=dict(x="Fruit", y="Amount" , color="Time Period" ))
fig.add_bar(x=fruits, y=[2,1,3], name="Last year" )
fig.show()
apples oranges bananas00.511.522.53Time Period
This year
Last year
FruitAmount
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 1/7

--- Página 2 ---
Grouped Bar and Scatter Chart
New in 5.12
In this example, we display individual data points with a grouped scatter chart and show averages using a grouped bar chart. offsetgroup links the bar trace for
smoker with the scatter trace for smoker, and the bar trace for non-smoker with the scatter trace for non-smoker. If you deselect a trace using the legend, other
traces maintain the position of the traces they are linked to.
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 2/7

--- Página 3 ---
import plotly.graph_objects  as go
from plotly import data
df = data.tips()[data.tips()["day"] == "Sun"]
mean_values_df  = df.groupby(by=["sex", "smoker" ], as_index =False).mean(
    numeric_only =True
)
smoker_mean  = mean_values_df [mean_values_df .smoker == "Yes"].sort_values (
    by="tip", ascending =False
)
non_smoker_mean  = mean_values_df [mean_values_df .smoker == "No"].sort_values (
    by="tip", ascending =False
)
smoker = df[df.smoker == "Yes"].sort_values (by="tip", ascending =False)
non_smoker  = df[df.smoker == "No"].sort_values (by="tip", ascending =False)
fig = go.Figure(
    layout=dict(
        xaxis=dict(categoryorder ="category descending" ),
        yaxis=dict(range=[0, 7]),
        scattermode ="group",
        legend=dict(groupclick ="toggleitem" ),
    )
)
fig.add_trace (
    go.Bar(
        x=smoker_mean .sex,
        y=smoker_mean .tip,
        name="Average" ,
        marker_color ="IndianRed" ,
        offsetgroup ="smoker" ,
        legendgroup ="smoker" ,
        legendgrouptitle_text ="Smoker" ,
    )
)
fig.add_trace (
    go.Scatter(
        x=smoker.sex,
        y=smoker.tip,
        mode="markers" ,
        name="Individual tips" ,
        marker=dict(color="LightSlateGrey" , size=5),
        offsetgroup ="smoker" ,
        legendgroup ="smoker" ,
    )
)
fig.add_trace (
    go.Bar(
        x=non_smoker_mean .sex,
        y=non_smoker_mean .tip,
        name="Average" ,
        marker_color ="LightSalmon" ,
        offsetgroup ="non-smoker" ,
        legendgroup ="non-smoker" ,
        legendgrouptitle_text ="Non-Smoker" ,
    )
)
fig.add_trace (
    go.Scatter(
        x=non_smoker .sex,
        y=non_smoker .tip,
        mode="markers" ,
        name="Individual tips" ,
        marker=dict(color="LightSteelBlue" , size=5),
        offsetgroup ="non-smoker" ,
        legendgroup ="non-smoker" ,
    )
)
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 3/7

--- Página 4 ---
Line Chart and a Bar Chartfig.show()
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (
    go.Scatter(
        x=[0, 1, 2, 3, 4, 5],
        y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]
    ))
fig.add_trace (
    go.Bar(
        x=[0, 1, 2, 3, 4, 5],
        y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]
    ))
fig.show()Male Female01234567
Smoker
Average
Individual tips
Non-Smoker
Average
Individual tips
0 1 2 3 4 5−1−0.500.511.5trace 0
trace 1
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 4/7

--- Página 5 ---
A Contour and Scatter Plot of the Method of Steepest Descent
Trace Zorderimport plotly.graph_objects  as go
# Load data
import json
import urllib
response  = urllib.request.urlopen(
    "https://raw.githubusercontent.com/plotly/datasets/master/steepest.json" )
data = json.load(response )
# Create figure
fig = go.Figure()
fig.add_trace (
    go.Contour(
        z=data["contour_z" ][0],
        y=data["contour_y" ][0],
        x=data["contour_x" ][0],
        ncontours =30,
        showscale =False
    )
)
fig.add_trace (
    go.Scatter(
        x=data["trace_x" ],
        y=data["trace_y" ],
        mode="markers+lines" ,
        name="steepest" ,
        line=dict(
            color="black"
        )
    )
)
fig.show()
New in 5.21
You can move a trace in front of or behind another trace by setting its zorder. All traces have a default zorder of 0. In the following example, we set zorder on the bar
trace to 1 to move it in front of the scatter trace.−1 −0.5 0 0.5 1−1−0.500.51
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 5/7

--- Página 6 ---
Referenceimport plotly.graph_objects  as go
x = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
y_bar = [10, 15, 7, 10, 17, 15, 14, 20, 16, 19, 15, 17]
y_area = [12, 13, 10, 14, 15, 13, 16, 18, 15, 17, 14, 16]
area_trace  = go.Scatter(
    x=x,
    y=y_area,
    fill="tozeroy" ,
    mode="lines+markers" ,
    name="Area Trace with default `zorder` of 0" ,
    line=dict(color="lightsteelblue" ),
)
bar_trace  = go.Bar(
    x=x,
    y=y_bar,
    name="Bar Trace with `zorder` of 1" ,
    zorder=1,
    marker=dict(color="lightslategray" ),
)
fig = go.Figure(data=[area_trace , bar_trace ])
fig.show()
See  for more information and attribute options!
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)JanFebMarAprMayJunJulAugSepOctNovDec05101520 Area Trace with default  of 0
Bar Trace with  of 1
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
ethod of16/07/2025, 06:06 Multiple chart types in Python
https://plotly.com/python/graphing-multiple-chart-types/ 7/7</content>
      </file>
      <file name="Orca management in Python.pdf" path="pyvy_2x1/Orca management in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview
What is orca?
Installing orca
conda
$ conda install -c plotly plotly-orca==1.2.1 psutil requests
npm + pip
$ npm install -g electron@1.8.4 orca $ pip install psutil requests
Standalone Binaries + pip
$ pip install psutil requests &gt;  &gt; Orca
Management
Orca Management in Python
This section covers the low-level details of how plotly.py uses orca to perform static image generation.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/orca-
management.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Orca support in Plotly.py is deprecated and will be removed after September 2025. See the  for
details on using Kaleido for static image generation.
Static Image Export page (/python/static-image-export/)
This section covers the lower-level details of how plotly.py can use orca to perform static image generation.
Please refer to the  section for general information on creating static images from plotly.py figures.
Static Image Export (/python/static-image-export/)
Orca is an  application that inputs plotly figure specifications and converts them into static images. Orca can run as a command-line
utility or as a long-running server process. In order to provide the fastest possible image export experience, plotly.py launches orca in server mode, and
communicates with it over a local port. See  for more information.
Electron (https://electronjs.org/)
https://github.com/plotly/orca (https://github.com/plotly/orca)
By default, plotly.py launches the orca server process the first time an image export operation is performed, and then leaves it running until the main Python process
exits. Because of this, the first image export operation in an interactive session will typically take a couple of seconds, but then all subsequent export operations will
be significantly faster, since the server is already running.
There are 3 general approaches to installing orca and its Python dependencies.
Using the  package manager, you can install these dependencies in a single command:
conda (https://conda.io/docs/)
Note: Even if you do not want to use conda to manage your Python dependencies, it is still useful as a cross platform tool for managing native libraries and command-
line utilities (e.g. git, wget, graphviz, boost, gcc, nodejs, cairo, etc.). For this use-case, start with  (~60MB) and tell the
installer to add itself to your system PATH. Then run conda install plotly-orca==1.2.1 and the orca executable will be available system wide.
Miniconda (https://conda.io/miniconda.html)
You can use the  package manager to install orca (and its electron dependency), and then use pip to install psutil:
npm (https://www.npmjs.com/get-npm)
If you are unable to install conda or npm, you can install orca as a precompiled binary for your operating system. Follow the instructions in the orca 
 to install orca and add it to your system PATH. Then use pip to install psutil.
README
(https://github.com/plotly/orca)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 1/9

--- Página 2 ---
Install orca on Google Colab
Create a Figure!pip install plotly&gt;=4.7.1
!wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca
!chmod +x /usr/local/bin/orca
!apt-get install xvfb libgtk2.0-0 libgconf-2-4 
 
Once this is done you can use this code to make, show and export a figure:
import plotly.graph_objects  as go
fig = go.Figure( go.Scatter(x=[1,2,3], y=[1,3,2] ) )
fig.write_image ("fig1.svg" )
fig.write_image ("fig1.png" )
The files can then be downloaded with:
from google.colab  import files
files.download ('fig1.svg' )
files.download ('fig1.png' )
Now let's create a simple scatter plot with 100 random points of varying color and size.
  1
  2
  3
  4
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 2/9

--- Página 3 ---
configimport plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
# Generate scatter plot data
N = 100
x = np.random.rand(N)
y = np.random.rand(N)
colors = np.random.rand(N)
sz = np.random.rand(N) * 30
# Build and display figure
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x,
    y=y,
    mode="markers" ,
    marker={"size": sz,
            "color": colors,
            "opacity" : 0.6,
            "colorscale" : "Viridis"
            }
))
fig.show()
We can use the plotly.io.orca.config object to view the current orca configuration settings.
0 0.2 0.4 0.6 0.8 100.20.40.60.81
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 3/9

--- Página 4 ---
statusimport plotly.io  as pio
pio.orca.config
We can use the plotly.io.orca.status object to see the current status of the orca server
import plotly.io  as pio
pio.orca.status
Since no image export operations have been performed yet, the orca server is not yet running.
Let's export this figure as an SVG image, and record the runtime.orca configuration
------------------
server_url: None
executable: orca
port: None
timeout: None
default_width: None
default_height: None
default_scale: 1
default_format: png
mathjax: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js
topojson: None
mapbox_access_token: None
use_xvfb: auto
constants
---------
plotlyjs: /home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/package_data/plotly.min.js
config_file: /home/circleci/.plotly/.orca
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 4/9

--- Página 5 ---
%%time
import plotly.io  as pio
from IPython.display  import SVG, display
img_bytes  = pio.to_image (fig, format="svg")
display(SVG(img_bytes ))
By checking the status object again, we see that the orca server is now running
import plotly.io  as pio
pio.orca.status
Let's perform this same export operation again, now that the server is already running.
0 0.2 0.4 0.6 0.8 100.20.40.60.81
CPU times: user 44.2 ms, sys: 23.6 ms, total: 67.8 ms
Wall time: 3.62 s
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 5/9

--- Página 6 ---
Shutdown the Server%%time
import plotly.io  as pio
from IPython.display  import SVG, display
img_bytes  = pio.to_image (fig, format="svg")
display(SVG(img_bytes ))
The difference in runtime is dramatic. Starting the server and exporting the first image takes a couple seconds, while exporting an image with a running server is
much faster.
By default, the orca server will continue to run until the main Python process exits. It can also be manually shut down by calling the plotly.io.orca.shutdown_server()
function. Additionally, it is possible to configure the server to shut down automatically after a certain period of inactivity. See the timeout configuration parameter
below for more information.
Regardless of how the server is shut down, it will start back up automatically the next time an image export operation is performed.
import plotly.io  as pio
pio.orca.shutdown_server ()
pio.orca.status
0 0.2 0.4 0.6 0.8 100.20.40.60.81
CPU times: user 37.6 ms, sys: 14.9 ms, total: 52.5 ms
Wall time: 2.79 s
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 6/9

--- Página 7 ---
import plotly.io  as pio
img_bytes  = pio.to_image (fig, format="svg")
display(SVG(img_bytes ))
import plotly.io  as pio
pio.orca.status
0 0.2 0.4 0.6 0.8 100.20.40.60.81
orca status
-----------
state: unvalidated
executable: None
version: None
port: None
pid: None
command: None
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 7/9

--- Página 8 ---
Configuring the Executable
Other Configuration Settings
server_url: The URL to an externally running instance of Orca. When this is set, plotly.py will not launch an orca server process and instead use the one
provided.
port: The specific port to use to communicate with the orca server, or None if the port will be chosen automatically.
timeout: The number of seconds of inactivity required before the orca server is shut down. For example, if timeout is set to 20, then the orca server will
shutdown once is has not been used for at least 20 seconds. If timeout is set to None (the default), then the server will not be automatically shut down due to
inactivity.
default_width: The default pixel width to use on image export.
default_height: The default pixel height to use on image export.
default_scale: The default image scale factor applied on image export.
default_format: The default image format used on export. One of "png", "jpeg", "webp", "svg", "pdf", or "eps".
mathjax: Location of the MathJax bundle needed to render LaTeX characters. Defaults to a CDN location. If fully offline export is required, set this to a local
MathJax bundle.
topojson: Location of the topojson files needed to render choropleth traces. Defaults to a CDN location. If fully offline export is required, set this to a local
directory containing the .
mapbox_access_token: Mapbox access token required to render scattermapbox traces.
use_xvfb: Whether to call orca using  on Linux. Xvfb is needed for orca to work in a
Linux environment if an X11 display server is not available. By default, plotly.py will automatically use Xvfb if it is installed, and no active X11 display server is
detected. This can be set to True to force the use of Xvfb, or it can be set to False to disable the use of Xvfb.By default, plotly.py searches the PATH for an executable named orca and checks that it is a valid plotly orca executable. If plotly.py is unable to find the executable,
you'll get an error message that looks something like this:
----------------------------------------------------------------------------
ValueError:
The orca executable is required in order to export figures as static images,
but it could not be found on the system path.
Searched for executable 'orca' on the following path:
    /anaconda3/envs/plotly_env/bin
    /usr/local/bin
    /usr/bin
    /bin
    /usr/sbin
    /sbin
If you haven 't installed orca yet, you can do so using conda as follows:
    $ conda install -c plotly plotly-orca== 1.2.1
Alternatively, see other installation methods in the orca project README at
https://github.com/plotly/orca.
After installation is complete, no further configuration should be needed.
If you have installed orca, then for some reason plotly.py was unable to
locate it. In this case, set the `plotly.io.orca.config.executable`
property to the full path to your orca executable. For example:
    &gt;&gt;&gt; plotly.io.orca.config.executable = '/path/ to/orca'
After updating this executable property, try the export operation again.
If it is successful then you may want to save this configuration so that it
will be applied automatically in future sessions. You can do this as follows:
    &gt;&gt;&gt; plotly.io.orca.config.save()
If you're still having trouble, feel free to ask for help on the forums at
https://community.plotly.com/c/api/python
---------------------------------------------------------------------------- 
 
If this happens, follow the instructions in the error message and specify the full path to you orca executable using the plotly.io.orca.config.executable configuration
property.
In addition to the executable property, the plotly.io.orca.config object can also be used to configure the following options:
Plotly.js topojson files (https://github.com/plotly/plotly.js/tree/master/dist/topojson)
Xvfb (https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml)
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 8/9

--- Página 9 ---
Saving Configuration Settings
What About Dash?Configuration options can optionally be saved to the ~/.plotly/ directory by calling the plotly.io.config.save() method. Saved setting will be automatically loaded at the
start of future sessions.
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:04 Orca management in Python
https://plotly.com/python/orca-management/ 9/9</content>
      </file>
      <file name="Pandas plotting backend in Python.pdf" path="pyvy_2x1/Pandas plotting backend in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Introduction &gt;  &gt; Pandas
Plotting Backend
Pandas Plotting Backend in Python
Plotly Express can be used as a Pandas .plot() backend.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/pandas-backend.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The popular  data analysis and manipulation tool provides 
, which have historically produced matplotlib plots. Since version 0.25, Pandas has
provided a mechanism to use different backends, and as of version 4.8 of plotly, you can now use a  backend for
Pandas plotting. This means you can now produce interactive plots directly from a data frame, without even needing to import Plotly.
Pandas (https://pandas.pydata.org/)
plotting functions on its DataFrame and Series objects
(https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html)
Plotly Express-powered (/python/plotly-express/)
To activate this backend, you will need to , and then just need to set pd.options.plotting.backend to "plotly" and call
.plot() to get a plotly.graph_objects.Figure object back, just like if you had called Plotly Express directly:
have Plotly installed (/python/getting-started/)
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot()
fig.show()
This functionality wraps  and so you can use any of the 
. Since what you get back is a regular Figure object, you can use any of the update mechanisms supported by these objects to apply 
 or further customize , , , , 
 etc.  is also supported.
Plotly Express (/python/plotly-express/)
styling options available to Plotly Express methods (/python/styling-
plotly-express/)
templates
(/python/templates/)
axes (/python/axes/)
colors (/python/colorscales/)
legends (/python/legend/)
fonts (/python/figure-labels/)
hover labels
(/python/hover-text-and-formatting/)
Faceting (/python/facet-plots/)0 0.5 1 1.5 211.522.53variable
a
b
indexvalue
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 1/10

--- Página 2 ---
A Note on API Compatibilityimport pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot(title="Pandas Backend Example" , template ="simple_white" ,
              labels=dict(index="time", value="money", variable ="option" ))
fig.update_yaxes (tickprefix ="$")
fig.show()
The Plotly plotting backend for Pandas is not intended to be a drop-in replacement for the default; it does not implement all or even most of the same
keyword arguments, such as subplots=True etc.
The Plotly plotting backend for Pandas is a more convenient way to invoke certain  functions by chaining a .plot() call without
having to import Plotly Express directly. Plotly Express, as of version 4.8 with  in addition to its robust long-form data
support, implements behaviour for the x and y keywords that are very similar to the matplotlib backend.
Plotly Express (/python/plotly-express/)
wide-form data support (/python/wide-form/)
In practice, this means that the following two ways of making a chart are identical and support the same additional arguments, because they call the same underlying
code:0 0.5 1 1.5 2$1$1.5$2$2.5$3 option
a
bPandas Backend Example
timemoney
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 2/10

--- Página 3 ---
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
# using Plotly Express via the Pandas backend
fig1 = df.plot.bar()
fig1.show()
# using Plotly Express directly
import plotly.express  as px
fig2 = px.bar(df)
fig2.show()
To achieve a similar effect to subplots=True, for example, the  can be used, the same was as they
work when directly calling :
Plotly Express facet_row and facet_col options (/python/facet-plots/)
Plotly Express with wide-form data (/python/wide-form/)0 1 2012345variable
a
b
indexvalue
0 1 2012345variable
a
b
indexvalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 3/10

--- Página 4 ---
Supported Methodsimport pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot.bar(facet_row ="variable" )
fig.show()
The Plotly backend supports the following kinds of Pandas plots: scatter, line, area, bar, barh, hist and box, via the call pattern df.plot(kind='scatter') or df.plot.scatter().
These delegate to the corresponding Plotly Express functions. In addition, the following are valid options to the kind argument of df.plot(): violin, strip, funnel,
density_heatmap, density_contour and imshow, even though the call pattern df.plot.violin() is not supported for these kinds of charts, per the Pandas API.−0.5 0 0.5 1 1.5 2 2.501230123variable
a
b
indexvalue valuevariable=b variable=a
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 4/10

--- Página 5 ---
import pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed(1)
df = pd.DataFrame (dict(
    a=np.random.normal(loc=1, scale=2, size=100),
    b=np.random.normal(loc=2, scale=1, size=100)
))
fig = df.plot.scatter(x="a", y="b")
fig.show()
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot.line()
fig.show()−4 −2 0 2 401234
ab
0 0.5 1 1.5 211.522.53variable
a
b
indexvalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 5/10

--- Página 6 ---
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot.area()
fig.show()
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot.bar()
fig.show()0 0.5 1 1.5 2012345variable
a
b
indexvalue
0 1 2012345variable
a
b
indexvalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 6/10

--- Página 7 ---
import pandas as pd
pd.options.plotting .backend = "plotly"
df = pd.DataFrame (dict(a=[1,3,2], b=[3,2,1]))
fig = df.plot.barh()
fig.show()
import pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed(1)
df = pd.DataFrame (dict(
    a=np.random.normal(loc=1, scale=2, size=100),
    b=np.random.normal(loc=2, scale=1, size=100)
))
fig = df.plot.hist()
fig.show()0 1 2 3 4 5012variable
a
b
valueindex
−4−3−2−1012345051015202530variable
a
b
valuecount
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 7/10

--- Página 8 ---
Series and DataFrame functions: hist and boxplotimport pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed(1)
df = pd.DataFrame (dict(
    a=np.random.normal(loc=1, scale=2, size=100),
    b=np.random.normal(loc=2, scale=1, size=100)
))
fig = df.plot.box()
fig.show()
The Pandas plotting API also exposes .hist() on DataFrames and Series objects, and .boxplot() on DataFrames, which can also be used with the Plotly backend.a b−4−3−2−1012345
variablevalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 8/10

--- Página 9 ---
What about Cufflinks?
What About Dash?import pandas as pd
import numpy as np
pd.options.plotting .backend = "plotly"
np.random.seed(1)
df = pd.DataFrame (dict(
    a=np.random.normal(loc=1, scale=2, size=100),
    b=np.random.normal(loc=2, scale=1, size=100)
))
fig = df.boxplot()
fig.show()
There also exists an independent third-party wrapper library around Plotly called , which provides similar
functionality (with an API closer to that of Pandas' default matplotlib backend) by adding a .iplot() method to Pandas dataframes, as it was developed before Pandas
supported configurable backends. Issues and questions regarding Cufflinks should be 
.
Cufflinks (https://github.com/santosjorge/cufflinks)
raised in the Cufflinks repository
(https://github.com/santosjorge/cufflinks/issues/new)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupytera b−4−3−2−1012345
variablevalue
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 9/10

--- Página 10 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
st and16/07/2025, 06:09 Pandas plotting backend in Python
https://plotly.com/python/pandas-backend/ 10/10</content>
      </file>
      <file name="Plotly express arguments in Python.pdf" path="pyvy_2x1/Plotly express arguments in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Data for the Examples
carshare - Each row represents the availability of car-sharing services near the centroid of a zone in Montreal over a month-long period.
election - Each row represents voting results for an electoral district in the 2013 Montreal mayoral election.
iris - Each row represents a flower. &gt;  &gt; Plotly
Express Arguments
Plotly Express Arguments in Python
Input data arguments accepted by Plotly Express functions
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/px-
arguments.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly Express (px) is the high-level interface to Plotly and provides functions for generating charts. px functions support data provided in a number of different
formats (long, wide, and mixed) and as different types of objects, including pandas and Polars dataframes.
The examples on this page use datasets available in the data package in px. px.data contains functions that when called return a dataset as a dataframe. Some of the
datasets included in px.data are:
To access the iris dataset, we call its function and assign it to a variable:
import plotly.express  as px
df = px.data.iris()
df.head()
By default px.data functions return a pandas DataFrame object, but you can specify an alternative dataframe type using return_type. pandas, polars, pyarrow, modin,
and cuDF are supported return types.
df = px.data.iris(return_type ='polars' )
df.head()sepal_lengthsepal_widthpetal_lengthpetal_widthspeciesspecies_id
05.1 3.5 1.4 0.2 setosa1
14.9 3.0 1.4 0.2 setosa1
24.7 3.2 1.3 0.2 setosa1
34.6 3.1 1.5 0.2 setosa1
45.0 3.6 1.4 0.2 setosa1
shape: (5, 6)
sepal_lengthsepal_widthpetal_lengthpetal_widthspeciesspecies_id
f64 f64 f64 f64 str i64
5.1 3.5 1.4 0.2 "setosa"1
4.9 3.0 1.4 0.2 "setosa"1
4.7 3.2 1.3 0.2 "setosa"1
4.6 3.1 1.5 0.2 "setosa"1
5.0 3.6 1.4 0.2 "setosa"1
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 1/12

--- Página 2 ---
Long, Wide, and Mixed-Form Data
long-form data has one row per observation, and one column per variable. This is suitable for storing and displaying multivariate data i.e. with dimension
greater than 2. This format is sometimes called "tidy".
wide-form data has one row per value of one of the first variable, and one column per value of the second variable. This is suitable for storing and displaying
2-dimensional data.
mixed-form data is a hybrid of long-form and wide-form data, with one row per value of one variable, and some columns representing values of another,
and some columns representing more variables. See the  for examples of how to use Plotly Express to
visualize this kind of data.There are three common conventions for storing column-oriented data, usually in a data frame with column names:
wide-form documentation (/python/wide-form/)
Every Plotly Express function can operate on long-form data (other than px.imshow which operates only on wide-form input), and in addition, the following 2D-
Cartesian functions can operate on wide-form and mixed-form data: px.scatter, px.line, px.area, px.bar, px.histogram, px.violin, px.box, px.strip, px.funnel,
px.density_heatmap and px.density_contour.
By way of example here is the same data, represented in long-form first, and then in wide-form:
import plotly.express  as px
long_df = px.data.medals_long ()
long_df
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df
Plotly Express can produce the same plot from either form:nationmedalcount
0South Koreagold24
1China gold10
2Canadagold9
3South Koreasilver13
4China silver15
5Canadasilver12
6South Koreabronze11
7China bronze8
8Canadabronze12
nationgoldsilverbronze
0South Korea241311
1China 10158
2Canada91212
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 2/12

--- Página 3 ---
import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()
You might notice that y-axis and legend labels are slightly different for the second plot: they are "value" and "variable", respectively, and this is also reflected in the
hoverlabel text. Note that the labels "medal" and "count" do not appear in the wide-form data frame, so in this case, you must supply these yourself, or 
. You can :
you can use a
data frame with named row- and column-indexes (/python/wide-form/)
rename these labels with the labels argument (/python/styling-plotly-express/)South Korea China Canada01020304050medal
gold
silver
bronzeLong-Form Input
nationcount
South Korea China Canada01020304050variable
gold
silver
bronzeWide-Form Input
nationvalue
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 3/12

--- Página 4 ---
Dataframe Input
Supported DataFrame Types
Additional Dependencies Required
Plotly Express requires NumPy. You can install it with pip install numpy if it's not installed by the dataframe library you are using.
To use , you'll also need to have pandas installed.
To use PySpark dataframes, you'll need to have pandas installed. To use dataframes that support the dataframe interchange protocol, you'll need to have
PyArrow installed.
Example: Using a Pandas DataFrame with px.barimport plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input, relabelled" ,
            labels={"value": "count", "variable" : "medal"})
fig.show()
Many more examples of wide-form and messy data input can be found in our .
detailed wide-form support documentation (/python/wide-form/)
The first argument of every px function is data_frame. If you provide a dataframe as a px function's first argument, you can then specify column names as strings from
the dataframe as other arguments.
px functions natively support pandas, Polars, and PyArrow dataframes. px uses  to provide this native dataframe
support. Other types of dataframes that are currently supported by Narwhals, for example cuDF and Modin, may also work with px.
Narwhals (https://narwhals-dev.github.io/narwhals/)
You can also pass dataframes that are not natively supported, but which support the 
.
dataframe interchange protocol (https://data-apis.org/dataframe-
protocol/latest/)
PySpark dataframes are also supported and are converted to pandas dataframes internally by Plotly Express.
trendlines (/python/linear-fits/)
Here, we create a pandas DataFrame, pass it to px.bar as its first argument, and then use the "sepal_length" column for the x-axis and the "sepal_width" for the y-axis.South Korea China Canada01020304050medal
gold
silver
bronzeWide-Form Input, relabelled
nationcount
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 4/12

--- Página 5 ---
Example: Polars DataFrame with px.barimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
px provides native support for dataframe types other than pandas, including Polars:
import plotly.express  as px
df = px.data.iris(return_type ='polars' )
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 5/12

--- Página 6 ---
Using the Index of a Dataframe
Using Columns from Multiple DataframesIf the dataframe you are using has an index, it is also possible to use that index as an argument. In the following example, the index is used for the hover data.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x=df.sepal_length , y=df.sepal_width , size=df.petal_length ,
                 hover_data =[df.index])
fig.show()
You can also use columns from multiple dataframes in one px function, as long as all the dataframe columns you use have the same length. In this example, we pass
df1 as the data_frame argument to px.bar and then us a column from df2 for the y argument.
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5
sepal_lengthsepal_width
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 6/12

--- Página 7 ---
Using labels to pass namesimport plotly.express  as px
import pandas as pd
df1 = pd.DataFrame (dict(time=[10, 20, 30], sales=[10, 8, 30]))
df2 = pd.DataFrame (dict(market=[4, 2, 5]))
fig = px.bar(df1, x="time", y=df2.market, color="sales")
fig.show()
The labels argument can be used to override the names used for axis titles, legend entries and hovers.
import plotly.express  as px
import pandas as pd
df = px.data.gapminder ()
gdp = df['pop'] * df['gdpPercap' ]
fig = px.bar(df, x='year', y=gdp, color='continent' , labels={'y':'gdp'},
             hover_data =['country' ],
             title='Evolution of world GDP' )
fig.show()5 10 15 20 25 30 35012345
1015202530sales
timey
1950 1960 1970 1980 1990 2000010T20T30T40T50T60Tcontinent
Asia
Europe
Africa
Americas
OceaniaEvolution of world GDP
yeargdp
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 7/12

--- Página 8 ---
Input Data as array-like columns: NumPy arrays, lists...## Other Input Data
px arguments can also be array-like objects such as lists, NumPy arrays, in both long-form or wide-form (for certain functions).
import plotly.express  as px
# List arguments
fig = px.line(x=[1, 2, 3, 4], y=[3, 5, 4, 8])
fig.show()
List arguments can also be passed in as a list of lists, which triggers , with the downside that the resulting traces will
need to be manually renamed via fig.data[&lt;n&gt;].name = "name".
wide-form data processing (/python/wide-form/)1 1.5 2 2.5 3 3.5 4345678
xy
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 8/12

--- Página 9 ---
Passing dictionaries or array-likes as the data_frame argumentimport plotly.express  as px
# List arguments in wide form
series1 = [3, 5, 4, 8]
series2 = [5, 4, 8, 3]
fig = px.line(x=[1, 2, 3, 4], y=[series1, series2])
fig.show()
The data_frame argument can also accept a dict or array in addition to DataFrame objects. Using a dictionary can be a convenient way to pass column names used in
axis titles, legend entries and hovers without creating a dataframe.
import plotly.express  as px
import numpy as np
N = 10000
np.random.seed(0)
fig = px.density_contour (dict(effect_size =5 + np.random.randn(N),
                              waiting_time =np.random.poisson(size=N)),
                         x="effect_size" , y="waiting_time" )
fig.show()1 1.5 2 2.5 3 3.5 4345678variable
wide_variable_0
wide_variable_1
xvalue
1 2 3 4 5 6 7 8 9−1012345678
effect_sizewaiting_time
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 9/12

--- Página 10 ---
Integer column names
Mixing dataframes and other typesTo pass a dict or an array (such as a NumPy ndarray) to the data_frame parameter, you'll need to have pandas installed, because plotly.express internally converts the
dict or array to a pandas DataFrame.
When the data_frame argument is a NumPy array, column names are integer corresponding to the columns of the array. In this case, keyword names are used in axis,
legend and hovers. This is also the case for a pandas DataFrame with integer column names. Use the labels argument to override these names.
import numpy as np
import plotly.express  as px
ar = np.arange(100).reshape((10, 10))
fig = px.scatter(ar, x=2, y=6, size=1, color=5)
fig.show()
It is possible to mix dataframe columns, NumPy arrays and lists as arguments. Remember that the only column names to be used correspond to columns in the
data_frame argument, use labels to override names displayed in axis titles, legend entries or hovers.
0 20 40 60 80020406080100
1020304050607080905
26
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 10/12

--- Página 11 ---
What About Dash?import plotly.express  as px
import numpy as np
import pandas as pd
df = px.data.gapminder ()
gdp = np.log(df['pop'] * df['gdpPercap' ])  # NumPy array
fig = px.bar(df, x='year', y=gdp, color='continent' , labels={'y':'log gdp' },
             hover_data =['country' ],
             title='Evolution of world GDP' )
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter1950 1960 1970 1980 1990 20000500100015002000250030003500continent
Asia
Europe
Africa
Americas
OceaniaEvolution of world GDP
yearlog gdp
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 11/12

--- Página 12 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
e with
.bar
rames
umPy
s the16/07/2025, 06:06 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 12/12</content>
      </file>
      <file name="Plotly express in Python.pdf" path="pyvy_2x1/Plotly express in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview &gt;  &gt;
Plotly Express
Plotly Express in Python
Plotly Express is a terse, consistent, high-level API for creating figures.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/plotly-
express.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The plotly.express module (usually imported as px) contains functions that can create entire figures at once, and is referred to as Plotly Express or PX. Plotly Express is
a built-in part of the plotly library, and is the recommended starting point for creating most common figures. Every Plotly Express function uses 
 internally and returns a plotly.graph_objects.Figure instance. Throughout the plotly documentation, you will find the Plotly Express way of
building figures at the top of any applicable page, followed by a section on how to use graph objects to build similar figures. Any figure created in a single function call
with Plotly Express could be created using graph objects alone, but with between 5 and 100 times more code.
graph objects
(/python/graph-objects/)
Plotly Express provides . The API for these
functions was carefully designed to be as consistent and easy to learn as possible, making it easy to switch from a scatter plot to a bar chart to a histogram to a
sunburst chart throughout a data exploration session. Scroll down for a gallery of Plotly Express plots, each made in a single function call.
more than 30 functions for creating different types of figures (https://plotly.com/python-api-reference/plotly.express.html)
Here is a talk from the  that gives a good introduction to Plotly Express and :
SciPy 2021 conference (https://www.scipy2021.scipy.org/)
Dash (https://dash.plotly.com/)
Data Visualization as The First and Last Mile of Data Scien Data Visualization as The First and Last Mile of Data Scien ……
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 1/23

--- Página 2 ---
Basics: , , , , 
, 
Part-of-Whole: , , , , 
1D Distributions: , , , , 
2D Distributions: , 
Matrix or Image Input: 
3-Dimensional: , 
Multidimensional: , , 
Tile Maps: , , , 
Outline Maps: , , 
Polar Charts: , , 
Ternary Charts: , 
High-Level Features
A single entry point into plotly: just import plotly.express as px and get access to 
, plus 
 and 
. Every PX function returns a plotly.graph_objects.Figure object, so you can edit it using all the same methods like 
.
Sensible, Overridable Defaults: PX functions will infer sensible defaults wherever possible, and will always let you override them.
Flexible Input Formats: PX functions , from lists and dicts to 
 to  to .
Automatic Trace and Layout configuration: PX functions will create one  per animation frame for each unique combination
of data values mapped to discrete color, symbol, line-dash, facet-row and/or facet-column. Traces' 
 are set such that only one legend item appears per unique combination of discrete color, symbol and/or line-dash. Traces
are automatically linked to a correctly-configured .
Automatic Figure Labelling: PX functions  based in the input DataFrame or xarray,
and provide .
Automatic Hover Labels: PX functions populate the hover-label using the labels mentioned above, and provide 
.
Styling Control: PX functions , and support commonly-needed
 to precisely control categorical variables.
Uniform Color Handling: PX functions automatically switch between  and  based
on the input type.
Faceting: the 2D-cartesian plotting functions support 
.
Marginal Plots: the 2D-cartesian plotting functions support  with the marginal, marginal_x and marginal_y
arguments.
A Pandas backend: the 2D-cartesian plotting functions are available as  so you can call them via
df.plot().
Trendlines: px.scatter supports .
Animations: many PX functions support .
Automatic WebGL switching: for sufficiently large scatter plots, PX will automatically 
.
Plotly Express in DashPlotly Express currently includes the following functions:
scatter (/python/line-and-scatter/)
line (/python/line-charts/)
area (/python/filled-area-plots/)
bar (/python/bar-charts/)
funnel (/python/funnel-
charts/)
timeline (https://plotly.com/python/gantt/)
pie (/python/pie-charts/)
sunburst (/python/sunburst-charts/)
treemap (/python/treemaps/)
icicle (/python/icicle-charts/)
funnel_area
(/python/funnel-charts/)
histogram (/python/histograms/)
box (/python/box-plots/)
violin (/python/violin/)
strip (/python/strip-charts/)
ecdf (/python/ecdf-plots/)
density_heatmap (/python/2D-Histogram/)
density_contour (/python/2d-histogram-contour/)
imshow (/python/imshow/)
scatter_3d (/python/3d-scatter-plots/)
line_3d (/python/3d-line-plots/)
scatter_matrix (/python/splom/)
parallel_coordinates (/python/parallel-coordinates-plot/)
parallel_categories (/python/parallel-categories-
diagram/)
scatter_map (/python/tile-scatter-maps/)
line_map (/python/lines-on-tile-maps/)
choropleth_map (/python/tile-county-choropleth/)
density_map
(/python/tile-density-heatmaps/)
scatter_geo (/python/scatter-plots-on-maps/)
line_geo (/python/lines-on-maps/)
choropleth (/python/choropleth-maps/)
scatter_polar (/python/polar-chart/)
line_polar (/python/polar-chart/)
bar_polar (/python/wind-rose-charts/)
scatter_ternary (/python/ternary-plots/)
line_ternary (/python/ternary-plots/)
The Plotly Express API in general offers the following features:
all the plotting functions (https://plotly.com/python-api-
reference/plotly.express.html)
built-in demo datasets under px.data (https://plotly.com/python-api-reference/generated/plotly.data.html#module-
plotly.data)
built-in color scales and sequences under px.color (https://plotly.com/python-api-reference/generated/plotly.colors.html#module-
plotly.colors)
update_layout and add_trace
(https://plotly.com/python/creating-and-updating-figures/#updating-figures)
accept input in a variety of formats (/python/px-arguments/)
long-form or wide-form DataFrames
(/python/wide-form/)
numpy arrays and xarrays (/python/imshow/)
GeoPandas GeoDataFrames (/python/maps/)
trace (/python/figure-structure)
legendgroup and showlegend attributes
(https://plotly.com/python/legend/)
subplot of the appropriate type (/python/figure-structure)
label axes, legends and colorbars (https://plotly.com/python/figure-labels/)
extra control with the labels argument (/python/styling-plotly-express/)
extra control with the hover_name and
hover_data arguments (/python/hover-text-and-formatting/)
read styling information from the default figure template (/python/styling-plotly-express/)
cosmetic controls like category_orders and color_discrete_map (/python/styling-plotly-express/)
continuous (/python/colorscales/)
categorical color (/python/discrete-color/)
row, column and wrapped facetting with facet_row, facet_col and facet_col_wrap arguments
(/python/facet-plots/)
marginal distribution plots (/python/marginal-plots/)
a Pandas plotting backend (/python/pandas-backend/)
built-in trendlines with accessible model output (/python/linear-fits/)
simple animation support via the animation_frame and animation_group arguments (/python/animations/)
use WebGL for hardware-accelerated rendering
(https://plotly.com/python/webgl-vs-svg/)
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 2/23

--- Página 3 ---
Gallery
Scatter, Line, Area and Bar ChartsThe following set of figures is just a sampling of what can be done with Plotly Express.
Read more about  and .
scatter plots (/python/line-and-scatter/)
discrete color (/python/discrete-color/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Analysis of Iris data using scatter matrix'),
    dcc.Dropdown(
        id="dropdown",
        options=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'],
        value=['sepal_length', 'sepal_width'],
        multi=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("dropdown", "value"))
def update_bar_chart(dims):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter_matrix(
        df, dimensions=dims, color="species")
    return figDOWNLOAD
Analysis of Iris data using scatter matrix
×sepal_length
×sepal_width ×
45678
4 5 6 7 8234
2 3 4
species
setosa
versicolor
virginica
sepal_length sepal_widthsepal_length sepal_width
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 3/23

--- Página 4 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.show()
Read more about  and  and .
trendlines (/python/linear-fits/)
templates (/python/templates/)
marginal distribution plots (https://plotly.com/python/marginal-plots/)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , marginal_y ="violin" ,
           marginal_x ="box", trendline ="ols", template ="simple_white" )
fig.show()
Read more about .
error bars (/python/error-bars/)2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
2 2.5 3 3.5 4 4.545678species
setosa
versicolor
virginica
sepal_widthsepal_length
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 4/23

--- Página 5 ---
import plotly.express  as px
df = px.data.iris()
df["e"] = df["sepal_width" ]/100
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" , error_x="e", error_y="e")
fig.show()
Read more about .
bar charts (/python/bar-charts/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="sex", y="total_bill" , color="smoker" , barmode="group")
fig.show()2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
Female Male0500100015002000smoker
No
Yes
sextotal_bill
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 5/23

--- Página 6 ---
import plotly.express  as px
df = px.data.medals_long ()
fig = px.bar(df, x="medal", y="count", color="nation" ,
             pattern_shape ="nation" , pattern_shape_sequence =[".", "x", "+"])
fig.show()
Read more about .
facet plots (/python/facet-plots/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="sex", y="total_bill" , color="smoker" , barmode="group", facet_row ="time", facet_col ="day",
       category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "time": ["Lunch", "Dinner" ]})
fig.show()
Read more about .
scatterplot matrices (SPLOMs) (/python/splom/)gold silver bronze051015202530354045
nation
South Korea
China
Canada
medalcount
Male Female0200400600800
Male Female Male Female Male Female0200400600800smoker
No
Yes
sex sex sex sextotal_bill total_billday=Thur day=Fri day=Sat day=Suntime=Dinner time=Lunch
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 6/23

--- Página 7 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df, dimensions =["sepal_width" , "sepal_length" , "petal_width" , "petal_length" ], color="species" )
fig.show()
Read more about  and , as well as 
.
parallel coordinates (/python/parallel-coordinates-plot/)
parallel categories (/python/parallel-categories-diagram/)
continuous color
(/python/colorscales/)
import plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, color="species_id" , labels={"species_id" : "Species" ,
                  "sepal_width" : "Sepal Width" , "sepal_length" : "Sepal Length" ,
                  "petal_width" : "Petal Width" , "petal_length" : "Petal Length" , },
                    color_continuous_scale =px.colors.diverging .Tealrose , color_continuous_midpoint =2)
fig.show()234
45678
012
2 3 4246
456780 1 2 246
species
setosa
versicolor
virginica
sepal_width sepal_length petal_width petal_lengthsepal_width sepal_length petal_width petal_length
11.522.53Species
4.555.566.577.5Sepal Length
7.9
4.322.533.54Sepal Width
4.4
2123456Petal Length
6.9
10.511.522.5Petal Width
2.5
0.111.21.41.61.822.22.42.62.83Species
3
1
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 7/23

--- Página 8 ---
import plotly.express  as px
df = px.data.tips()
fig = px.parallel_categories (df, color="size", color_continuous_scale =px.colors.sequential .Inferno)
fig.show()
Read more about .
hover labels (/python/hover-text-and-formatting/)
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df.query("year==2007" ), x="gdpPercap" , y="lifeExp" , size="pop", color="continent" ,
           hover_name ="country" , log_x=True, size_max =60)
fig.show()
Read more about .
animations (/python/animations/)Femalesex
MaleNosmoker
YesSunday
Sat
Thur
FriDinnertime
Lunch2size
3
4
1
6
5123456size
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
gdpPercaplifeExp
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 8/23

--- Página 9 ---
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , animation_frame ="year", animation_group ="country" ,
           size="pop", color="continent" , hover_name ="country" , facet_col ="continent" ,
           log_x=True, size_max =45, range_x=[100,100000], range_y=[25,90])
fig.show()
Read more about .
line charts (/python/line-charts/)
import plotly.express  as px
df = px.data.gapminder ()
fig = px.line(df, x="year", y="lifeExp" , color="continent" , line_group ="country" , hover_name ="country" ,
        line_shape ="spline" , render_mode ="svg")
fig.show()
Read more about .
area charts (/python/filled-area-plots/)
1002510002510k25100k30405060708090
1002510002510k25100k
1002510002510k25100k
1002510002510k25100k
1002510002510k25100kcontinent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007gdpPercap gdpPercap gdpPercap gdpPercap gdpPercaplifeExpcontinent=Asia continent=Europe continent=Africacontinent=Americascontinent=Oceania
▶ ◼
1960 1970 1980 1990 2000304050607080continent
Asia
Europe
Africa
Americas
Oceania
yearlifeExp
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 9/23

--- Página 10 ---
import plotly.express  as px
df = px.data.gapminder ()
fig = px.area(df, x="year", y="pop", color="continent" , line_group ="country" )
fig.show()
Read more about .
timeline/Gantt charts (/python/gantt/)
import plotly.express  as px
import pandas as pd
df = pd.DataFrame ([
    dict(Task="Job A", Start='2009-01-01' , Finish='2009-02-28' , Resource ="Alex"),
    dict(Task="Job B", Start='2009-03-05' , Finish='2009-04-15' , Resource ="Alex"),
    dict(Task="Job C", Start='2009-02-20' , Finish='2009-05-30' , Resource ="Max")
])
fig = px.timeline (df, x_start="Start", x_end="Finish" , y="Resource" , color="Resource" )
fig.show()
Read more about .
funnel charts (/python/funnel-charts/)1960 1970 1980 1990 200001B2B3B4B5B6Bcontinent
Asia
Europe
Africa
Americas
Oceania
yearpop
Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Jun 2009MaxAlexResource
Alex
MaxResource
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 10/23

--- Página 11 ---
Part to Whole Chartsimport plotly.express  as px
data = dict(
    number=[39, 27.4, 20.6, 11, 2],
    stage=["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "Invoice sent" ])
fig = px.funnel(data, x='number' , y='stage')
fig.show()
Read more about .
pie charts (/python/pie-charts/)
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" ).query("continent == 'Europe'" )
df.loc[df['pop'] &lt; 2.e6, 'country' ] = 'Other countries'  # Represent only large countries
fig = px.pie(df, values='pop', names='country' , title='Population of European continent' )
fig.show()
Read more about .
sunburst charts (/python/sunburst-charts/)39
27.4
20.6
11
2 Invoice sentRequested pricePotential customersDownloadsWebsite visitstage
14.1%12.1%
10.4%
10.4%
9.92%
6.9%6.57%3.8%2.83%1.83%1.82%1.77%1.75%1.73%1.7%1.54%1.4%1.29%1.25%0.933%0.929%0.894%0.79%0.777%0.767%0.701%0.614%0.343%0.168%
Germany
Turkey
France
United Kingdom
Italy
Spain
Poland
Romania
Netherlands
Greece
Portugal
Belgium
Czech Republic
Serbia
Hungary
Sweden
Austria
SwitzerlandPopulation of European continent
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 11/23

--- Página 12 ---
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.sunburst (df, path=['continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ])
fig.show()
Read more about .
treemaps (/python/treemaps/)
import plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.treemap(df, path=[px.Constant ('world'), 'continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ])
fig.show()
Read more about .
icicle charts (/python/icicle-charts/)Asia
AfricaAmericasEuropeOceaniaChinaIndia
Indonesia Pakistan
Bangladesh
Japan
Philippines
Vietnam
Iran
Thailand
Korea, Rep.
Myanmar
Afghanistan
Nepal
Saudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.
Taiwan
Yemen, Rep.
Sri Lanka
Syria
Cambodia
Hong Kong, China
Israel
Jordan
Singapore
West Bank and Gaza
Lebanon
Oman
Mongolia
Kuwait
Bahrain
Nigeria
Egypt
Ethiopia
Congo, Dem. Rep.
South Africa
Sudan
Tanzania
Kenya
Morocco
Algeria
Uganda
Ghana
Mozambique
Madagascar
Cote d'Ivoire
Cameroon
Burkina Faso
Malawi
Niger
Angola
Zimbabwe
Senegal
Mali
Zambia
Tunisia
Chad
Guinea
Somalia
Rwanda
Burundi
BeninSierra LeoneLibyaTogoEritreaCentral African RepublicCongo, Rep.M
auritaniaLiberiaNam
ibiaLesothoGam
biaBotswanaGuinea-BissauGabonM
auritiusSwazilandReunionCom
orosEquatorial GuineaDjiboutiSao Tom
e and PrincipeUnited StatesBrazilMexicoColombiaArgentinaCanadaPeruVenezuelaChileEcuadorGuatemalaCubaDominican RepublicBoliviaHaitiHondurasEl SalvadorParaguayNicaraguaCosta RicaPuerto RicoUruguayPanamaJamaicaTrinidad and TobagoGermanyTurkeyFranceUnited KingdomItalySpainPolandRomaniaNetherlandsGreecePortugalBelgiumCzech RepublicSerbiaHungarySwedenAustriaSwitzerlandBulgariaDenmarkSlovak RepublicFinlandNorwayBosnia and HerzegovinaCroatiaIrelandAlbaniaSloveniaMontenegroIcelandAustraliaNew Zealand
404550556065707580lifeExp
world
Asia Africa Americas
EuropeOceaniaChina
IndiaIndonesiaPakistan
BangladeshJapan
PhilippinesVietnamIran
Thailand
Korea, Rep.
MyanmarAfghanistanNepalSaudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.TaiwanYemen, Rep.
Sri Lanka
SyriaCambodiaHong Kong, China
Israel
JordanSingaporeWest Bank and Gaza
Lebanon
OmanMongolia
KuwaitNigeria Egypt
EthiopiaCongo, Dem. Rep.South Africa
SudanTanzaniaKenyaMorocco
Algeria
Uganda
GhanaMozambique
Madagascar
Cote d'Ivoire
CameroonBurkina FasoMalawiNigerAngola
Zimbabwe
Senegal
Mali
ZambiaTunisiaChadGuinea
SomaliaRwanda Burundi
Benin
Sierra Leone
LibyaTogoEritreaCentral African Republic
Congo, Rep.
MauritaniaLiberia
Namibia
LesothoGambiaBotswana
Guinea-BissauGabon
Mauritius
SwazilandReunionComoros
Equatorial Guinea
DjiboutiUnited States
Brazil Mexico
Colombia
ArgentinaCanada
Peru
VenezuelaChileEcuador
GuatemalaCubaDominican Republic
Bolivia
HaitiHondurasEl Salvador Paraguay
Nicaragua
Costa RicaPuerto Rico
UruguayPanama
Jamaica
Trinidad and Tobago
GermanyTurkeyFrance
United KingdomItaly
SpainPoland
RomaniaNetherlands
Greece
PortugalBelgiumCzech RepublicSerbia
Hungary
Sweden
AustriaSwitzerland Bulgaria
Denmark
Slovak Republic
FinlandNorwayBosnia and Herzegovina
Croatia
IrelandAlbania
Slovenia404550556065707580lifeExp
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 12/23

--- Página 13 ---
Distributionsimport plotly.express  as px
import numpy as np
df = px.data.gapminder ().query("year == 2007" )
fig = px.icicle(df, path=[px.Constant ('world'), 'continent' , 'country' ], values='pop',
                  color='lifeExp' , hover_data =['iso_alpha' ])
fig.show()
Read more about .
histograms (/python/histograms/)
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", marginal ="rug", hover_data =df.columns)
fig.show()
Read more about .
box plots (/python/box-plots/)world Asia
Africa
Americas
Europe
OceaniaChina
India
Indonesia
Pakistan
Bangladesh
Japan
Philippines
Vietnam
Iran
Thailand
Korea, Rep.
Myanmar
Afghanistan
Nepal
Saudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.
Taiwan
Yemen, Rep.
Sri Lanka
Syria
Cambodia
Hong Kong, China
Israel
Jordan
Singapore
West Bank and Gaza
Lebanon
Oman
Mongolia
Kuwait
Bahrain
Nigeria
Egypt
Ethiopia
Congo, Dem. Rep.
South Africa
Sudan
Tanzania
Kenya
Morocco
Algeria
Uganda
Ghana
Mozambique
Madagascar
Cote d'Ivoire
Cameroon
Burkina Faso
Malawi
Niger
Angola
Zimbabwe
Senegal
Mali
Zambia
Tunisia
Chad
Guinea
Somalia
Rwanda
Burundi
Benin
Sierra Leone
Libya
Togo
Eritrea
Central African Republic
Congo, Rep.
Mauritania
Liberia
Namibia
Lesotho
Gambia
Botswana
Guinea-Bissau
Gabon
Mauritius
Swaziland
Reunion
Comoros
Equatorial Guinea
Djibouti
United States
Brazil
Mexico
Colombia
Argentina
Canada
Peru
Venezuela
Chile
Ecuador
Guatemala
Cuba
Dominican Republic
Bolivia
Haiti
Honduras
El Salvador
Paraguay
Nicaragua
Costa Rica
Puerto Rico
Uruguay
Panama
Jamaica
Trinidad and Tobago
Germany
Turkey
France
United Kingdom
Italy
Spain
Poland
Romania
Netherlands
Greece
Portugal
Belgium
Czech Republic
Serbia
Hungary
Sweden
Austria
Switzerland
Bulgaria
Denmark
Slovak Republic
Finland
Norway
Bosnia and Herzegovina
Croatia
Ireland
Albania
Slovenia
Montenegro
Iceland
Australia
New Zealand404550556065707580lifeExp
10 20 30 40 50020406080sex
Female
Male
total_billsum of tip
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 13/23

--- Página 14 ---
import plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="day", y="total_bill" , color="smoker" , notched=True)
fig.show()
Read more about .
violin plots (/python/violin/)
import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="tip", x="smoker" , color="sex", box=True, points="all", hover_data =df.columns)
fig.show()
Read more about .
Empirical Cumulative Distribution Function (ECDF) charts (https://plotly.com/python/ecdf-plots/)Sun Sat Thur Fri1020304050smoker
No
Yes
daytotal_bill
No Yes0246810sex
Female
Male
smokertip
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 14/23

--- Página 15 ---
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex")
fig.show()
Read more about .
strip charts (https://plotly.com/python/strip-charts/)
import plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x="total_bill" , y="time", orientation ="h", color="smoker" )
fig.show()
Read more about .
density contours, also known as 2D histogram contours (/python/2d-histogram-contour/)5 10 15 20 25 30 35 40 45 5000.20.40.60.81sex
Female
Male
total_billprobability
10 20 30 40 50DinnerLunchsmoker
No
Yes
total_billtime
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 15/23

--- Página 16 ---
Images and Heatmapsimport plotly.express  as px
df = px.data.iris()
fig = px.density_contour (df, x="sepal_width" , y="sepal_length" )
fig.show()
Read more about .
density heatmaps, also known as 2D histograms (/python/2D-Histogram/)
import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , marginal_x ="rug", marginal_y ="histogram" )
fig.show()
Read more about .
heatmaps and images (/python/imshow/)1.5 2 2.5 3 3.5 4 4.5 544.555.566.577.58
sepal_widthsepal_length
2 2.5 3 3.5 4 4.544.555.566.577.58
024681012141618count
sepal_widthsepal_length
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 16/23

--- Página 17 ---
Tile Mapsimport plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="Day of Week" , y="Time of Day" , color="Productivity" ),
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes (side="top")
fig.show()
import plotly.express  as px
from skimage import io
img = io.imread('https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Crab_Nebula.jpg/240px-Crab_Nebula.jpg' )
fig = px.imshow(img)
fig.show()
Read more about  and .
tile maps (/python/tile-map-layers/)
point on tile maps (/python/tile-scatter-maps/)
Monday Tuesday Wednesday Thursday Friday
EveningAfternoonMorning
1020304050607080ProductivityDay of WeekTime of Day
0 50 100 150 200200150100500
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 17/23

--- Página 18 ---
import plotly.express  as px
df = px.data.carshare ()
fig = px.scatter_map (df, lat="centroid_lat" , lon="centroid_lon" , color="peak_hour" , size="car_hours" ,
                  color_continuous_scale =px.colors.cyclical .IceFire, size_max =15, zoom=10,
                  map_style ="carto-positron" )
fig.show()
Read more about .
tile map GeoJSON choropleths (/python/tile-county-choropleth/)
import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth_map (df, geojson=geojson, color="Bergeron" ,
                           locations ="district" , featureidkey ="properties.district" ,
                           center={"lat": 45.5517, "lon": -73.7073},
                           map_style ="carto-positron" , zoom=9)
fig.show()
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)05101520peak_hour
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)100020003000400050006000Bergeron
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 18/23

--- Página 19 ---
Outline Maps
Read more about .
outline symbol maps (/python/scatter-plots-on-maps/)
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter_geo (df, locations ="iso_alpha" , color="continent" , hover_name ="country" , size="pop",
               animation_frame ="year", projection ="natural earth" )
fig.show()
Read more about .
choropleth maps (/python/choropleth-maps/)
import plotly.express  as px
df = px.data.gapminder ()
fig = px.choropleth (df, locations ="iso_alpha" , color="lifeExp" , hover_name ="country" , animation_frame ="year", range_color =[20,80])
fig.show()
continent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007▶ ◼
year=1952
19521957196219671972197719821987199219972002200720304050607080lifeExp
▶ ◼
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 19/23

--- Página 20 ---
Polar Coordinates
Read more about .
polar plots (/python/polar-chart/)
import plotly.express  as px
df = px.data.wind()
fig = px.scatter_polar (df, r="frequency" , theta="direction" , color="strength" , symbol="strength" ,
            color_discrete_sequence =px.colors.sequential .Plasma_r )
fig.show()
Read more about .
radar charts (https://plotly.com/python/radar-chart/)
import plotly.express  as px
df = px.data.wind()
fig = px.line_polar (df, r="frequency" , theta="direction" , color="strength" , line_close =True,
            color_discrete_sequence =px.colors.sequential .Plasma_r )
fig.show()
Read more about .
polar bar charts (/python/wind-rose-charts/)N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
00.511.522.5strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+
N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
00.511.522.5strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 20/23

--- Página 21 ---
3D Coordinates
Ternary Coordinatesimport plotly.express  as px
df = px.data.wind()
fig = px.bar_polar (df, r="frequency" , theta="direction" , color="strength" , template ="plotly_dark" ,
            color_discrete_sequence = px.colors.sequential .Plasma_r )
fig.show()
Read more about .
3D scatter plots (/python/3d-scatter-plots/)
import plotly.express  as px
df = px.data.election ()
fig = px.scatter_3d (df, x="Joly", y="Coderre" , z="Bergeron" , color="winner" , size="total", hover_name ="district" ,
                  symbol="result" , color_discrete_map  = {"Joly": "blue", "Bergeron" : "green", "Coderre" :"red"})
fig.show()
Read more about .
ternary charts (/python/ternary-plots/)N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
0246810strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+
winner, result
Joly, plurality
Joly, majority
Coderre, plurality
Coderre, majority
Bergeron, plurality
Bergeron, majority
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 21/23

--- Página 22 ---
What About Dash?import plotly.express  as px
df = px.data.election ()
fig = px.scatter_ternary (df, a="Joly", b="Coderre" , c="Bergeron" , color="winner" , size="total", hover_name ="district" ,
                   size_max =15, color_discrete_map  = {"Joly": "blue", "Bergeron" : "green", "Coderre" :"red"} )
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
00.20.40.60.81
1 0.8 0.6 0.4 0.2 010.80.60.40.20
winner
Joly
Coderre
Bergeron
Joly
Coderre Bergeron
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 22/23

--- Página 23 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:03 Plotly express in Python
https://plotly.com/python/plotly-express/ 23/23</content>
      </file>
      <file name="Plotly express wide-form support in Python.pdf" path="pyvy_2x1/Plotly express wide-form support in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Plotly Express works with Column-oriented, Matrix or Geographic Data
Plotly Express works with Long-, Wide-, and Mixed-Form Data
long-form data has one row per observation, and one column per variable. This is suitable for storing and displaying multivariate data i.e. with dimension
greater than 2. This format is sometimes called "tidy".
wide-form data has one row per value of one of the first variable, and one column per value of the second variable. This is suitable for storing and displaying
2-dimensional data.
mixed-form data is a hybrid of long-form and wide-form data, with one row per value of one variable, and some columns representing values of another,
and some columns representing more variables. &gt;  &gt; Plotly Express
Wide-Form Support
Plotly Express Wide-Form Support in Python
Plotly Express' 2D-Cartesian functions accept data in long-, wide-, and mixed-form.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/wide-form.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly Express provides functions to visualize a variety of types of data. Most functions such as px.bar or px.scatter expect to operate on column-oriented data of the
type you might store in a DataFrame (in either "long" or "wide" format, see below). These functions use Pandas internally to process the data, but also accept other
types of DataFrames as arguments. See the  for more details.
Plotly Express arguments page (/python/px-arguments/)
 you might store in a numpy or xarray array and functions like 
 of the kind you might store in a GeoPandas GeoDataFrame. This page details how to provide a specific form of
column-oriented data to 2D-Cartesian Plotly Express functions, but you can also check out our .
px.imshow operates on matrix-like data (/python/imshow/)
px.choropleth and px.choropleth_mapbox
can operate on geographic data (/python/maps/)
detailed column-input-format documentation (/python/px-arguments/)
Until version 4.8, Plotly Express only operated on long-form (previously called "tidy") data, but now accepts wide-form and mixed-form data as well.
There are three common conventions for storing column-oriented data, usually in a data frame with column names:
Every Plotly Express function can operate on long-form data (other than px.imshow which operates only on wide-form input), and in addition, the following 2D-
Cartesian functions can operate on wide-form and mixed-form data: px.scatter, px.line, px.area, px.bar, px.histogram, px.violin, px.box, px.strip, px.funnel,
px.density_heatmap and px.density_contour.
By way of example here is the same data, represented in long-form first, and then in wide-form:
import plotly.express  as px
long_df = px.data.medals_long ()
long_df
nationmedalcount
0South Koreagold24
1China gold10
2Canadagold9
3South Koreasilver13
4China silver15
5Canadasilver12
6South Koreabronze11
7China bronze8
8Canadabronze12
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 1/21

--- Página 2 ---
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df
Plotly Express can produce the same plot from either form. For the long-form input, x and y are set to the respective column names.
import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
For the wide-form input, we pass in a list of column-names y, which is enough to trigger the wide-form processing mode. Wide-form mode is also the default if
neither x nor y are specified, see section at bottom regarding Wide-Form Defaults.nationgoldsilverbronze
0South Korea241311
1China 10158
2Canada91212
South Korea China Canada01020304050medal
gold
silver
bronzeLong-Form Input
nationcount
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 2/21

--- Página 3 ---
Labeling axes, legends and hover textimport plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()
You might notice that y-axis and legend labels are slightly different for the second plot: they are "value" and "variable", respectively, and this is also reflected in the
hoverlabel text. This is because Plotly Express performed an  to
convert the wide-form data into long-form for plotting, and used the Pandas convention for assign column names to the intermediate long-form data. Note that the
labels "medal" and "count" do not appear in the wide-form data frame, so in this case, you must supply these yourself, (or see below regarding using a data frame
with named row- and column-indexes). You can :
internal Pandas melt() operation (https://pandas.pydata.org/docs/reference/api/pandas.melt.html)
rename these labels with the labels argument (/python/styling-plotly-express/)
import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input, relabelled" ,
            labels={"value": "count", "variable" : "medal"})
fig.show()South Korea China Canada01020304050variable
gold
silver
bronzeWide-Form Input
nationvalue
South Korea China Canada01020304050medal
gold
silver
bronzeWide-Form Input, relabelled
nationcount
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 3/21

--- Página 4 ---
Data Frames with Named IndexesPlotly Express figures created using wide-form data can be :
styled just like any other Plotly Express figure (/python/styling-plotly-express/)
import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ],
             title="Wide-Form Input, styled" ,
             labels={"value": "Medal Count" , "variable" : "Medal", "nation" : "Olympic Nation" },
             color_discrete_map ={"gold": "gold", "silver" : "silver" , "bronze" : "#c96"},
             template ="simple_white"
            )
fig.update_layout (font_family ="Rockwell" , showlegend =False)
fig.show()
Pandas DataFrames support not only column names and "row names" via the value of index, but the indexes themselves can be named. Here is how to assign one
column of the wide sample data frame above as the index, and to name the column index. The result "indexed" sample data frame can also be obtained by calling
px.data.medals_wide(indexed=True)
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df = wide_df.set_index ("nation" )
wide_df.columns.name = "medals"
wide_df
When working with a data frame like the one above, you can pass the index references directly as arguments, to benefit from automatic labelling for everything
except the y axis label, which will default to "values", but this can be overridden with the labels argument as above:South Korea China Canada01020304050Wide-Form Input, styled
Olympic NationMedal Count
medalsgoldsilverbronze
nation
South Korea241311
China 10158
Canada 91212
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 4/21

--- Página 5 ---
import plotly.express  as px
wide_df = px.data.medals_wide (indexed=True)
fig = px.bar(wide_df, x=wide_df.index, y=wide_df.columns)
fig.show()
If you transpose x and y, thereby assigning the columns to x, the orientation will be switched to horizontal:
import plotly.express  as px
wide_df = px.data.medals_wide (indexed=True)
fig = px.bar(wide_df, x=wide_df.columns, y=wide_df.index)
fig.show()South Korea China Canada01020304050medal
gold
silver
bronze
nationvalue
0 10 20 30 40 50South KoreaChinaCanadamedal
gold
silver
bronze
valuenation
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 5/21

--- Página 6 ---
Assigning Inferred Columns to Non-Default Arguments
In the examples above, the columns of the wide data frame are assigned by default as an "inferred" column named variable to the color argument (see section below
for documentation of the default behaviours), but this is not a hard constraint. The variable column can be assigned to any Plotly Express argument, for example to
accomplish faceting, and color can be reassigned to any other value. More generally, when plotting with a data frame without named indexes, you can reassign the
inferred column named variable and value to any argument:
import plotly.express  as px
wide_df = px.data.medals_wide (indexed=False)
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], facet_col ="variable" , color="nation" )
fig.show()
You can also prevent color from getting assigned if you're mapping variable to some other argument:South KoreaChinaCanada0510152025
South KoreaChinaCanadaSouth KoreaChinaCanadanation
South Korea
China
Canada
nation nation nationvaluevariable=gold variable=silver variable=bronze
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 6/21

--- Página 7 ---
Mixed-Form Dataimport plotly.express  as px
wide_df = px.data.medals_wide (indexed=False)
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], facet_col ="variable" , color=px.NO_COLOR )
fig.show()
If using a data frame's named indexes, either explicitly or relying on the defaults, the row-index references (i.e. df.index) or column-index names (i.e. the value of
df.columns.name) must be used:
import plotly.express  as px
wide_df = px.data.medals_wide (indexed=True)
fig = px.bar(wide_df, facet_col ="medal", color=wide_df.index)
fig.show()
In some cases, a data frame is neither clearly long-form nor wide-form, and we can call this "mixed-form". For example, in the data frame below, if it contained only
the experiment columns, the data could be described as wide-form, and if it contained only gender and group it could be described as long-form, but it contains both,
so it is best described as mixed-form data:South KoreaChina Canada0510152025
South KoreaChina CanadaSouth KoreaChina Canada
nation nation nationvaluevariable=gold variable=silver variable=bronze
South KoreaChinaCanada0510152025
South KoreaChinaCanadaSouth KoreaChinaCanadanation
South Korea
China
Canada
nation nation nationvaluemedal=gold medal=silver medal=bronze
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 7/21

--- Página 8 ---
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
mixed_df .head()
We can visualize just the wide-form portion of the data frame easily with a . As a special note, we'll assign the index, which is the
participant ID, to the hover_data, so that hovering over outlier points will identify their row.
violin chart (/python/violin/)
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
fig = px.violin(mixed_df , y=["experiment_1" , "experiment_2" , "experiment_3" ], hover_data =[mixed_df .index])
fig.show()
We are not limited to visualizing only the wide-form portion of the data, however. We can also leverage the long-form portion of the data frame, for example to color
by participant gender and facet by participant group, all without having to manipulate the data frame:experiment_1experiment_2experiment_3gendergroup
participant
0 96.87606593.41794273.033193malecontrol
1 87.301336129.60339566.056554femalecontrol
2 97.691312106.187916103.422709maletreatment
3 102.97815293.81468256.995870femaletreatment
4 87.106993107.01998572.140292malecontrol
experiment_1 experiment_2 experiment_320406080100120140160
variablevalue
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 8/21

--- Página 9 ---
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
fig = px.violin(mixed_df , y=["experiment_1" , "experiment_2" , "experiment_3" ],
                color="gender" , facet_col ="group", hover_data =[mixed_df .index])
fig.show()
In the plots above, the column names provided to y are internally mapped to long-form column called variable, as is apparent in the x-axis labels. We can reassign
variable to another argument as well, in this case we'll assign it to facet_col and reassign group to the x axis. We'll switch to a  for variety.
box plot (/python/box-plots/)
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
fig = px.box(mixed_df , x="group", y=["experiment_1" , "experiment_2" , "experiment_3" ],
                color="gender" , facet_col ="variable" , hover_data =[mixed_df .index])
fig.show()
One interesting thing about a mixed-form data frame like this is that it remains easy to plot, say, one experiment against another, which would require some
preliminary data wrangling if this was represented as a pure long-form dataset:experiment_1experiment_2experiment_3020406080100120140160
experiment_1experiment_2experiment_3gender
male
female
variable variablevaluegroup=control group=treatment
control treatment20406080100120140
control treatment control treatmentgender
male
female
group group groupvaluevariable=experiment_1 variable=experiment_2 variable=experiment_3
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 9/21

--- Página 10 ---
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
fig = px.scatter(mixed_df , x="experiment_1" , y="experiment_2" ,
                color="group", facet_col ="gender" , hover_data =[mixed_df .index])
fig.show()
In fact, we can even visualize the results of every experiment against every other, using a :
scatterplot matrix (/python/splom/)
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
fig = px.scatter_matrix (mixed_df , dimensions =["experiment_1" , "experiment_2" , "experiment_3" ], color="gender" )
fig.show()80 90 100 110 1208090100110120130140
80 90 100 110 120group
control
treatment
experiment_1 experiment_1experiment_2gender=male gender=female
80100120
80100120140
80 100 12050100150
80 100120140 50 100 150
gender
male
female
experiment_1 experiment_2 experiment_3experiment_1 experiment_2 experiment_3
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 10/21

--- Página 11 ---
Wide-Form Defaults
For bar, scatter, line and area charts, the pattern of assigning x=df.index, y=df.columns, color="variable" is so common that if you provide neither x nor y this is the
default behaviour. An exception is made for bar charts when the values are not continuous variables, in which case the default is similar to histograms, with
x=df.columns, color="variable" and y=&lt;constant 1, labeled "count"&gt;.
For violin and box plots, the default is to assign x=variable, y=df.columns and for histograms the default is x=df.columns, color="variable"
These defaults are also filled in if you specify only y (x for histograms) as a list-of-columns. See below for orientation control.
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 11/21

--- Página 12 ---
import plotly.express  as px
wide_df = px.data.medals_wide (indexed=True)
fig = px.bar(wide_df)
fig.show()
fig = px.area(wide_df)
fig.show()
fig = px.line(wide_df)
fig.show()
fig = px.scatter(wide_df)
fig.show()
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 12/21

--- Página 13 ---
South Korea China Canada01020304050medal
gold
silver
bronze
nationvalue
South Korea China Canada01020304050medal
gold
silver
bronze
nationvalue
South Korea China Canada81012141618202224medal
gold
silver
bronze
nationvalue
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 13/21

--- Página 14 ---
South Korea China Canada81012141618202224medal
gold
silver
bronze
nationvalue
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 14/21

--- Página 15 ---
import plotly.express  as px
mixed_df  = px.data.experiment (indexed=True)
wide_df = mixed_df [["experiment_1" , "experiment_2" , "experiment_3" ]]
fig = px.histogram (wide_df)
fig.show()
fig = px.violin(wide_df)
fig.show()
fig = px.box(wide_df)
fig.show()
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 15/21

--- Página 16 ---
40 60 80 100 120 140051015202530354045 variable
experiment_1
experiment_2
experiment_3
valuecount
experiment_1 experiment_2 experiment_320406080100120140160
variablevalue
experiment_1 experiment_2 experiment_320406080100120140
variablevalue
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 16/21

--- Página 17 ---
Orientation Control When Using Defaults
If you specify neither x nor y, you can swap the default behaviour of x and y by setting orientation="h".
If you specify only x as a list-of-columns (y in the case of histograms), then the defaults are filled in as if orientation="h"
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 17/21

--- Página 18 ---
import plotly.express  as px
wide_df = px.data.medals_wide (indexed=True)
fig = px.bar(wide_df, orientation ="h")
fig.show()
fig = px.area(wide_df, x=wide_df.columns)
fig.show()
mixed_df  = px.data.experiment (indexed=True)
wide_df = mixed_df [["experiment_1" , "experiment_2" , "experiment_3" ]]
fig = px.histogram (wide_df, orientation ="h")
fig.show()
fig = px.violin(wide_df, orientation ="h")
fig.show()
fig = px.box(wide_df, orientation ="h")
fig.show()
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 18/21

--- Página 19 ---
0 10 20 30 40 50South KoreaChinaCanadamedal
gold
silver
bronze
valuenation
0 10 20 30 40 50South KoreaChinaCanada
medal
gold
silver
bronze
valuenation
0 5 10 15 20 25 30 35 40 45406080100120140 variable
experiment_1
experiment_2
experiment_3
countvalue
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 19/21

--- Página 20 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter20 40 60 80 100 120 140 160experiment_1experiment_2experiment_3
valuevariable
20 40 60 80 100 120 140experiment_1experiment_2experiment_3
valuevariable
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 20/21

--- Página 21 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
oriented
de- and
xt
-Default
faults16/07/2025, 06:09 Plotly express wide-form support in Python
https://plotly.com/python/wide-form/ 21/21</content>
      </file>
      <file name="Quiver plots in Python.pdf" path="pyvy_2x1/Quiver plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Quiver Plot
Quiver Plot with Points &gt;  &gt;
Quiver Plots
Quiver Plots in Python
How to make a quiver plot in Python. A quiver plot displays velocity vectors a arrows.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/quiver-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Quiver plots can be made using a  as detailed in this page.
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
import numpy as np
x,y = np.meshgrid (np.arange(0, 2, .2), np.arange(0, 2, .2))
u = np.cos(x)*y
v = np.sin(x)*y
fig = ff.create_quiver (x, y, u, v)
fig.show()
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 1/3

--- Página 2 ---
See also
Referenceimport plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
x,y = np.meshgrid (np.arange(-2, 2, .2),
                  np.arange(-2, 2, .25))
z = x*np.exp(-x**2 - y**2)
v, u = np.gradient (z, .2, .2)
# Create quiver figure
fig = ff.create_quiver (x, y, u, v,
                       scale=.25,
                       arrow_scale =.4,
                       name='quiver' ,
                       line_width =1)
# Add points to figure
fig.add_trace (go.Scatter(x=[-.7, .75], y=[0,0],
                    mode='markers' ,
                    marker_size =12,
                    name='points' ))
fig.show()
 for the 3D equivalent of quiver plots.
Cone plot (/python/cone-plot)
For more info on ff.create_quiver(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_quiver.html)−2 −1.5 −1 −0.5 0 0.5 1 1.5−2−1.5−1−0.500.511.5quiver
points
16/07/2025, 05:59 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 05:59 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 3/3</content>
      </file>
      <file name="Selections in Python.pdf" path="pyvy_2x1/Selections in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Adding Selections to Cartesian Subplots &gt;  &gt;
Selections
Selections in Python
How to use selections in Python. Examples of adding and styling selections.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/selections.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
New in 5.10
You can add persistent selections to a rendered figure using the Box Select and Lasso Select tools in the mode bar. To add multiple selections, select Shift when
making new selections. To clear a selection, double-click it. On a subplot you can clear all selections by double-clicking any unselected area of the subplot.
You can also add selections to a figure that displays when it renders using fig.add_selection. Here, we add a rectangular selection with a region between 3.0 and 6.5 on
the x axis and between 3.5 and 5.5 on the y axis.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (x0=3.0, y0=6.5, x1=3.5, y1=5.5)
fig.show()
2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 1/11

--- Página 2 ---
Selections Using a Custom SVG
Styling SelectionsIn the above example, we added a rectangular selection. You can also render a custom SVG for a selection by defining a path that can include single or multiple
polygons. Here, we create a selection with a single polygon path "M2,6.5L4,7.5L4,6Z".
Please note that multiple polygons e.g. "M0,0L0,10L10,10,L10,0Z M2,2L2,8L8,8,L8,2Z" could be used to subtract certain regions from the selection.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (path="M2,6.5L4,7.5L4,6Z" )
fig.show()
In the above example, we added a selection to the figure that is displayed when the figure renders. fig.add_selection accepts additional properties that you can use to
style the selection. Here, we add a color, width, and specify the dash type for the selection.
2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 2/11

--- Página 3 ---
Styling New Selectionsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (
    x0=2.5, y0=6.5, x1=3.5, y1=5.5,
    line=dict(
        color="Crimson" ,
        width=2,
        dash="dash",
    ))
fig.show()
You can style new selections made on the figure by setting properties on newselection. Try making a new selection on the figure to try it out.
2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 3/11

--- Página 4 ---
Fill Color for Active Selectionsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.update_layout (dragmode ='select' ,
                  newselection =dict(line=dict(color='blue')))
fig.show()
You can style the active selection with activeselection. In this example, we set active selections (when created or clicked) to appear with a fillcolor of yellow.2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 4/11

--- Página 5 ---
Selections with Time Seriesimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" )
fig.add_selection (x0=3.0, y0=6.5, x1=3.5, y1=5.5)
fig.update_layout (dragmode ='select' ,
                  activeselection =dict(fillcolor ='yellow' ))
fig.show()
Selections are also supported on time series figures. Here, we add a rectangular selection with a region between the dates 2019-01-01" and "2019-10-01" on the x axis
and between 0.95 and 1.15 on the y axis.
2 2.5 3 3.5 4 4.54.555.566.577.58
sepal_widthsepal_length
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 5/11

--- Página 6 ---
Referencing Selections on Multiple Cartesian Subplotsimport plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x='date', y="GOOG", markers=True)
fig.add_selection (x0="2019-01-01" , y0=0.95, x1="2019-10-01" , y1=1.15)
fig.show()
You can add selections to multiple Cartesian subplots by specifying xref and/or yref. Here, we add one selection on the plot with axis ids x and y2 and two selections
to the the plot with axis ids x and y.
Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2
dateGOOG
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 6/11

--- Página 7 ---
import plotly.graph_objects  as go
import numpy as np
np.random.seed(0)
t = np.linspace (-1, 1.2, 2000)
x = (t**3) + (0.3 * np.random.randn(2000))
y = (t**6) + (0.3 * np.random.randn(2000))
fig = go.Figure()
fig.add_trace (go.Histogram2dContour (
        x = x,
        y = y,
        colorscale  = 'Blues',
        reversescale  = True,
        xaxis = 'x',
        yaxis = 'y'
    ))
fig.add_trace (go.Scatter(
        x = x,
        y = y,
        xaxis = 'x',
        yaxis = 'y',
        mode = 'markers' ,
        marker = dict(
            color = 'rgba(0,0,0,0.3)' ,
            size = 3
        )
    ))
fig.add_trace (go.Histogram (
        y = y,
        xaxis = 'x2',
        marker = dict(
            color = 'rgba(0,0,0,1)'
        )
    ))
fig.add_trace (go.Histogram (
        x = x,
        yaxis = 'y2',
        marker = dict(
            color = 'rgba(0,0,0,1)'
        )
    ))
fig.update_layout (
    autosize  = False,
    xaxis = dict(
        zeroline  = False,
        domain = [0,0.85],
        showgrid  = False
    ),
    yaxis = dict(
        zeroline  = False,
        domain = [0,0.85],
        showgrid  = False
    ),
    xaxis2 = dict(
        zeroline  = False,
        domain = [0.85,1],
        showgrid  = False
    ),
    yaxis2 = dict(
        zeroline  = False,
        domain = [0.85,1],
        showgrid  = False
    ),
    height = 600,
    width = 600,
    bargap = 0,
    hovermode  = 'closest' ,
    showlegend  = False,
    selections  = [
        dict(
            x0 = 0.5,
            x1 = -0.5,
            xref = "x",
            y0 = 190,
            y1= 0,
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 7/11

--- Página 8 ---
Referencing Selections on a Scatterplot Matrix            yref = "y2",
            line = dict(
                color="yellow"
            )
        ),
        dict(
            x0 = -0.2,
            x1 = -1.5,
            xref = "x",
            y0 = 2,
            y1= -1,
            yref = "y",
            line = dict(
                color="yellow"
            )
        ),
        dict(
            path= "M0.75,2.39L0.98,3.38L1.46,3.68L1.80,3.35L2.01,2.51L1.67,1.15L1.18,0.50L0.65,0.66L0.54,0.83L0.49,1.56Z" ,
            xref= 'x',
            yref = 'y',
            line = dict(
                color='yellow'
            )
        )
    ]
)
fig.show()
You can add selections to a scatterplot matrix by specifying xref and/or yref. Here, we add one selection on the plot with axis ids x2 and y2 and another on the plot
with ids x3 and y.
−1 0 1 2−1−0.500.511.522.533.5
050100150050100150200
010203040506070
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 8/11

--- Página 9 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df,
    dimensions =["sepal_length" , "sepal_width" , "petal_length" , "petal_width" ],
    color="species" )
fig.update_layout (
    xaxis = {"matches" : "y"},
    xaxis2 = {"matches" : "y2"},
    xaxis3 = {"matches" : "y3"},
    xaxis4 = {"matches" : "y4"},
    height = 900,
    width = 750,
    dragmode  = 'select' ,
    selections  = [
        dict(
            x0 = 3,
            x1 = 4,
            xref = "x2",
            y0 = 8,
            y1= 6,
            yref = "y"
        ),
        dict(
            x0 = 5,
            x1 = 1,
            xref = "x3",
            y0 = 5,
            y1= 4,
            yref = "y",
        )
    ]
)
fig.show()
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 9/11

--- Página 10 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter45678
234
246
45678012
234 246012
species
setosa
versicolor
virginica
sepal_length sepal_width petal_length petal_widthsepal_length sepal_width petal_length petal_width
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 10/11

--- Página 11 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
plots
plot16/07/2025, 06:11 Selections in Python
https://plotly.com/python/selections/ 11/11</content>
      </file>
      <file name="Setting graph size in Python.pdf" path="pyvy_2x1/Setting graph size in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Adjusting Height, Width, &amp; Margins with Plotly Express
Adjusting graph size with Dash &gt;  &gt;
Setting Graph Size
Setting Graph Size in Python
How to manipulate the graph size, margins and background color.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/setting-
graph-size.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_col ="sex",
                 width=800, height=400)
fig.update_layout (
    margin=dict(l=20, r=20, t=20, b=20),
    paper_bgcolor ="LightSteelBlue" ,
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)0 10 20 30 40 50246810
0 10 20 30 40 50
total_bill total_billtipsex=Female sex=Male
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 1/7

--- Página 2 ---
Adjusting Height, Width, &amp; Margins With Graph ObjectsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
 are the low-level building blocks of figures which you can use instead of Plotly Express for greater control.
Graph objects (/python/graph-objects/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live adjustable graph-size'),
    html.P("Change figure width:"),
    dcc.Slider(id='slider', min=200, max=500, step=25, value=300,
               marks={x: str(x) for x in [200, 300, 400, 500]}),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input('slider', 'value'))
def resize_figure(width):
    df = px.data.tips() # replace with your own data source
    fig = px.scatter(df, x="total_bill", y="tip",
                     facet_col="sex", height=400)
    fig.update_layout(
        margin=dict(l=20, r=20, t=20, b=20),
        paper_bgcolor="LightSteelBlue",)
    fig.update_layout(width=int(width))DOWNLOAD
Live adjustable graph-size
Change figure width:
200 300 400 500
02040246810
02040
total_bill total_billtipsex=Femalesex=Male
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 2/7

--- Página 3 ---
Automatically Adjust Marginsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
))
fig.update_layout (
    autosize =False,
    width=500,
    height=500,
    margin=dict(
        l=50,
        r=50,
        b=100,
        t=100,
        pad=4
    ),
    paper_bgcolor ="LightSteelBlue" ,
)
fig.show()
Set  to True and Plotly will automatically increase the margin size to prevent
ticklabels from being cut off or overlapping with axis titles.
automargin (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-automargin)0 2 4 6 802468
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 3/7

--- Página 4 ---
Automatically Adjust Specific Marginsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["Apples" , "Oranges" , "Watermelon" , "Pears"],
    y=[3, 2, 1, 4]
))
fig.update_layout (
    autosize =False,
    width=500,
    height=500,
    yaxis=dict(
        title=dict(
            text="Y-axis Title" ,
            font=dict(
                size=30
            )
        ),
        ticktext =["Very long label" , "long label" , "3", "label"],
        tickvals =[1, 2, 3, 4],
        tickmode ="array",
    )
)
fig.update_yaxes (automargin =True)
fig.show()
New in 5.10
You can also set automargin for specific sides of the figure. Here, we set automargin on the left and top of the figure.ApplesOrangesWatermelonPearsVery long labellong label3labelY-axis Title
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 4/7

--- Página 5 ---
Setting a Minimum Plot Size with Automarginsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["Apples" , "Oranges" , "Watermelon" , "Pears"],
    y=[3, 2, 1, 4]
))
fig.update_layout (
    autosize =False,
    width=500,
    height=500,
    yaxis=dict(
        title=dict(
            text="Y-axis Title" ,
            font=dict(
                size=30
            )
        ),
        ticktext =["Very long label" , "long label" , "3", "label"],
        tickvals =[1, 2, 3, 4],
        tickmode ="array",
    )
)
fig.update_yaxes (automargin ='left+top' )
fig.show()
New in 5.11
To set a minimum width and height for a plot to be after automargin is applied, use minreducedwidth and minreducedheight. Here we set both to 250.ApplesOrangesWatermelonPearsVery long labellong label3labelY-axis Title
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 5/7

--- Página 6 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["Apples" , "Oranges" , "Watermelon" , "Pears"],
    y=[3, 2, 1, 4]
))
fig.update_layout (
    autosize =False,
    minreducedwidth =250,
    minreducedheight =250,
    width=450,
    height=450,
    yaxis=dict(
        title=dict(
            text="Y-axis Title" ,
            font=dict(
                size=30
            )
        ),
        ticktext =["Label", "Very long label" , "Other label" , "Very very long label" ],
        tickvals =[1, 2, 3, 4],
        tickmode ="array",
    )
)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/layout/ (https://plotly.com/python/reference/layout/)ApplesOrangesWatermelonPearsLabelVery long labelOther labelVery very long labelY-axis Title
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
h Plotly
h Graph
ns16/07/2025, 06:05 Setting graph size in Python
https://plotly.com/python/setting-graph-size/ 7/7</content>
      </file>
      <file name="Setting the font, title, legend entries, and axis titles in Python.pdf" path="pyvy_2x1/Setting the font, title, legend entries, and axis titles in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Automatic Labelling with Plotly Express &gt;  &gt; Setting the Font, Title,
Legend Entries, and Axis Titles
Setting the Font, Title, Legend Entries, and Axis Titles in Python
How to set the global font, title, legend-entries, and axis-titles in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/figure-labels.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
When using Plotly Express, your axes and legend are automatically labelled, and it's easy to override the automation for a customized figure using the labels keyword
argument. The title of your figure is up to you though!
Here's a figure with automatic labels and then the same figure with overridden labels. Note the fact that when overriding labels, the axes, legend title and hover labels
reflect the specified labels automatically.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" ,
                title="Automatic Labels Based on Data Frame Column Names" )
fig.show()
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5species
setosa
versicolor
virginicaAutomatic Labels Based on Data Frame Column Names
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 1/12

--- Página 2 ---
Global and Local Font Specificationimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" ,
                 labels={
                     "sepal_length" : "Sepal Length (cm)" ,
                     "sepal_width" : "Sepal Width (cm)" ,
                     "species" : "Species of Iris"
                 },
                title="Manually Specified Labels" )
fig.show()
You can set the figure-wide font with the layout.font attribute, which will apply to all titles and tick labels, but this can be overridden for specific plot items like
individual axes and legend titles etc. In the following figure, we set the figure-wide font to Courier New in blue, and then override this for certain parts of the figure.4.5 5 5.5 6 6.5 7 7.5 822.533.544.5Species of Iris
setosa
versicolor
virginicaManually Specified Labels
Sepal Length (cm)Sepal Width (cm)
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 2/12

--- Página 3 ---
Set Automargin on the Plot Titleimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" ,
                title="Playing with Fonts" )
fig.update_layout (
    font_family ="Courier New" ,
    font_color ="blue",
    title_font_family ="Times New Roman" ,
    title_font_color ="red",
    legend_title_font_color ="green"
)
fig.update_xaxes (title_font_family ="Arial")
fig.show()
New in 5.14
Set automargin=True to allow the title to push the figure margins. With yref set to paper, automargin=True expands the margins to make the title visible, but doesn't
push outside the container. With yref set to container, automargin=True expands the margins, but the title doesn't overlap with the plot area, tick labels, and axis
titles.4.5 5 5.5 6 6.5 7 7.5 822.533.544.5species
setosa
versicolor
virginicaPlaying with Fonts
sepal_lengthsepal_width
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 3/12

--- Página 4 ---
Fonts and Labels in Dashimport plotly.express  as px
df = px.data.gapminder ().query("continent == 'Oceania'" )
fig = px.line(df, x="year", y="gdpPercap" , color="country" )
fig.update_layout (
    title=dict(text="GDP-per-capita" , font=dict(size=50), automargin =True, yref='paper')
)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash dash-daq, click
"Download" to get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1960 1970 1980 1990 200010k15k20k25k30k35k country
Australia
New ZealandGDP-per-capita
yeargdpPercap
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 4/12

--- Página 5 ---
Manual Labelling with Graph ObjectsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
When using  rather than , you will need to explicitly label traces and axes:
graph objects (/python/graph-objects/)
Plotly Express (/python/plotly-express/)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import plotly.express as px
import dash_daq as daq
app = Dash(__name__)
picker_style = {'float': 'left', 'margin': 'auto'}
app.layout = html.Div([
    html.H4('Interactive color picker with Dash'),
    dcc.Graph(id="graph"),
    daq.ColorPicker(
        id='font', label='Font Color', size=150,
        style=picker_style, value=dict(hex='#119DFF')),
    daq.ColorPicker(
        id='title', label='Title Color', size=150,
        style=picker_style, value=dict(hex='#F71016')),
])
@app.callback(
    Output("graph", 'figure'),
    Input("font", 'value'),
    Input("title", 'value'))
dfdtb ht(ft l titl l)DOWNLOAD
Font Color Title ColorInteractive color picker with Dash
4.5 5 5.5 6 6.5 7 7.5 8234species
setosa
versicolor
virginicaPlaying with Fonts
sepal_lengthsepal_width
#119DFF
HEX#F71016
HEX
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 5/12

--- Página 6 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    name="Name of Trace 1"        # this sets its legend entry
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[1, 0, 3, 2, 5, 4, 7, 6, 8],
    name="Name of Trace 2"
))
fig.update_layout (
    title=dict(
        text="Plot Title"
    ),
    xaxis=dict(
        title=dict(
            text="X Axis Title"
        )
    ),
    yaxis=dict(
        title=dict(
            text="Y Axis Title"
        )
    ),
    legend=dict(
        title=dict(
            text="Legend Title"
        )
    ),
    font=dict(
        family="Courier New, monospace" ,
        size=18,
        color="RebeccaPurple"
    )
)
fig.show()
0 2 4 6 8012345678 Legend Title
Name of Trace 1
Name of Trace 2Plot Title
X Axis TitleY Axis Title
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 6/12

--- Página 7 ---
Configuring Font Variant, Style, and Weight
New in 5.22
You can configure a variant, style, and weight on layout.font. Here, we set the font variant to small-caps.
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 7/12

--- Página 8 ---
import plotly.graph_objects  as go
from plotly import data
df = data.iris()
setosa_df  = df[df["species" ] == "setosa" ]
versicolor_df  = df[df["species" ] == "versicolor" ]
virginica_df  = df[df["species" ] == "virginica" ]
fig = go.Figure(
    data=[
        go.Scatter(
            x=setosa_df ["sepal_width" ],
            y=setosa_df ["sepal_length" ],
            mode="markers" ,
            name="setosa" ,
        ),
        go.Scatter(
            x=versicolor_df ["sepal_width" ],
            y=versicolor_df ["sepal_length" ],
            mode="markers" ,
            name="versicolor" ,
        ),
        go.Scatter(
            x=virginica_df ["sepal_width" ],
            y=virginica_df ["sepal_length" ],
            mode="markers" ,
            name="virginica" ,
        ),
    ],
    layout=go.Layout(
        title=dict(
            text="Plot Title"
        ),
        xaxis=dict(
            title=dict(
                text="X Axis Title"
            )
        ),
        yaxis=dict(
            title=dict(
                text="Y Axis Title"
            )
        ),
        legend=dict(
            title=dict(
                text="Legend Title"
            )
        ),
        font=dict(
            family="Courier New, monospace" ,
            size=18,
            color="RebeccaPurple" ,
            variant="small-caps" ,
        )
    )
)
fig.show()
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 8/12

--- Página 9 ---
Align Plot TitleThe configuration of the legend is discussed in detail in the  page.
Legends (/python/legend/)
The following example shows how to align the plot title in . x sets the x position with respect to
xref from "0" (left) to "1" (right), and y sets the y position with respect to yref from "0" (bottom) to "1" (top). Moreover, you can define xanchor to left,right, or center for
setting the title's horizontal alignment with respect to its x position, and/or yanchor to top, bottom, or middle for setting the title's vertical alignment with respect to its
y position.
layout.title (https://plotly.com/python/reference/layout/#layout-title)2 2.5 3 3.5 4 4.54.555.566.577.58LEGEND T ITLE
SETOSA
VERSICOLOR
VIRGINICAPLOT TITLE
X AXIS T ITLEY AXIS T ITLE
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 9/12

--- Página 10 ---
Adding a Plot Subtitleimport plotly.graph_objects  as go
fig = go.Figure(go.Scatter(
    y=[3, 1, 4],
    x=["Mon", "Tue", "Wed"]))
fig.update_layout (
    title={
        'text': "Plot Title" ,
        'y':0.9,
        'x':0.5,
        'xanchor' : 'center' ,
        'yanchor' : 'top'})
fig.show()
New in 5.23
Add a subtitle to a plot with layout.title.subtitle. In the following example, we set the subtitle's text, and configure the fontcolor and size. By default, if you don't set a
font size for the subtitle, it will be 0.7 of the title font size.Mon Tue Wed11.522.533.54Plot Title
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 10/12

--- Página 11 ---
Referenceimport plotly.graph_objects  as go
from plotly import data
df = data.gapminder ().query("continent == 'Europe' and (year == 1952 or year == 2002)" )
df_pivot  = df.pivot(index="country" , columns="year", values="lifeExp" )
fig = go.Figure(
    [
        go.Bar(
            x=df_pivot .index, y=df_pivot [1952], name="1952", marker_color ="IndianRed"
        ),
        go.Bar(
            x=df_pivot .index, y=df_pivot [2002], name="2002", marker_color ="LightSalmon"
        ),
    ],
    layout=dict(
        title=dict(
            text="Life Expectancy" ,
            subtitle =dict(
                text="Life expectancy by European country in 1952 and in 2002" ,
                font=dict(color="gray", size=13),
            ),
        )
    ),
)
fig.show()
See  for more information!
https://plotly.com/python/reference/layout/ (https://plotly.com/python/reference/layout/)
AlbaniaAustriaBelgiumBosnia and HerzegovinaBulgariaCroatiaCzech RepublicDenmarkFinlandFranceGermanyGreeceHungaryIcelandIrelandItalyMontenegroNetherlandsNorwayPolandPortugalRomaniaSerbiaSlovak RepublicSloveniaSpainSwedenSwitzerlandTurkeyUnited Kingdom020406080 1952
2002Life Expectancy
Life expectancy by European country in 1952 and in 2002
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 11/12

--- Página 12 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ress
ts
Weight16/07/2025, 06:05 Setting the font, title, legend entries, and axis titles in Python
https://plotly.com/python/figure-labels/ 12/12</content>
      </file>
      <file name="Shapes in Python.pdf" path="pyvy_2x1/Shapes in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Adding Lines and Polygons to Figures
1. Trace types in the scatter family (e.g. scatter, scatter3d, scattergeo etc) can be drawn with mode="lines" and optionally support a fill="self" attribute, and so can
be used to draw open or closed shapes on figures.
2. Standalone lines, ellipses and rectangles can be added to figures using fig.add_shape(), and they can be positioned absolutely within the figure, or they can be
positioned relative to the axes of 2d cartesian subplots i.e. in data coordinates.
Traces can optionally support hover labels and can appear in legends.
Shapes can be positioned absolutely or relative to data coordinates in 2d cartesian subplots only.
Traces cannot be positioned absolutely but can be positioned relative to date coordinates in any subplot type.
Traces also support , although there is a 
.
Shape-drawing with Scatter traces &gt;  &gt;
Shapes
Shapes in Python
How to make SVG shapes in python. Examples of lines, circle, rectangle, and path.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/shapes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
As a general rule, there are two ways to add shapes (lines or polygons) to figures:
Note: there are 
 that are fixed to data coordinates in one axis and absolutely positioned in another.
special methods add_hline, add_vline, add_hrect and add_vrect for the common cases of wanting to draw horizontal or vertical lines or rectangles
(/python/horizontal-vertical-shapes/)
The differences between these two approaches are that:
optional text (/python/text-and-annotations/)
textual equivalent to shapes in text annotations (/python/text-and-
annotations/)
There are two ways to draw filled shapes: scatter traces and 
which is mostly useful for the 2d subplots, and defines the shape type to be drawn, and can be rectangle, circle, line, or path (a custom SVG path). You also can use
, scattergeo, 
 to draw filled shapes on any kind of subplots. To set an area to be filled with a solid color, you need to define 
 that connects the endpoints of the trace into a closed shape. If mode=line (default value), then you need to
repeat the initial point of a shape at the end of the sequence to have a closed shape.
layout.shapes (https://plotly.com/python/reference/layout/shapes/#layout-shapes-items-shape-type)
scatterpolar (https://plotly.com/python/polar-chart/#categorical-polar-chart)
scattermapbox (https://plotly.com/python/filled-area-on-mapbox/#filled-
scattermapbox-trace)
Scatter.fill="toself"
(https://plotly.com/python/reference/scatter/#scatter-fill)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 1/33

--- Página 2 ---
Shapes in Dashimport plotly.graph_objects  as go
fig = go.Figure(go.Scatter(x=[0,1,2,0], y=[0,2,0,0], fill="toself" ))
fig.show()
You can have more shapes either by adding  or interrupting the series with None.
more traces (https://plotly.com/python/filled-area-plots/)
import plotly.graph_objects  as go
fig = go.Figure(go.Scatter(x=[0,1,2,0,None,3,3,5,5,3], y=[0,2,0,0,None,0.5,1.5,1.5,0.5,0.5], fill="toself" ))
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)0 0.5 1 1.5 200.511.52
0 1 2 3 4 500.511.52
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 2/33

--- Página 3 ---
Vertical and Horizontal Lines Positioned Relative to the Axis DataSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live data control'),
    dcc.Graph(id="graph"),
    html.P("Change the position of the right-most data point:"),
    html.Button("Move Up", n_clicks=0,
                id='btn-up'),
    html.Button("Move Down", n_clicks=0,
                id='btn-down'),
])
@app.callback(
    Output("graph", "figure"),
    Input("btn-up", "n_clicks"),
    Input("btn-down", "n_clicks"))
def make_shape_taller(n_up, n_down):
    n = n_up-n_down
    fig = go.Figure(go.Scatter(
        x=[1, 0, 2, 1], y=[2, 0, n, 2], # replace with your own data source
        fill="toself"
 ))DOWNLOAD
Live data control
Change the position of the right-most data point:
MOVE UP MOVE DOWN0 0.5 1 1.5 200.511.52
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 3/33

--- Página 4 ---
Lines Positioned Relative to the Plot &amp; to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure()
# Create scatter trace of text labels
fig.add_trace (go.Scatter(
    x=[2, 3.5, 6],
    y=[1, 1.5, 1],
    text=["Vertical Line" ,
          "Horizontal Dashed Line" ,
          "Diagonal dotted Line" ],
    mode="text",
))
# Set axes ranges
fig.update_xaxes (range=[0, 7])
fig.update_yaxes (range=[0, 2.5])
# Add shapes
fig.add_shape (type="line",
    x0=1, y0=0, x1=1, y1=2,
    line=dict(color="RoyalBlue" ,width=3)
)
fig.add_shape (type="line",
    x0=2, y0=2, x1=5, y1=2,
    line=dict(
        color="LightSeaGreen" ,
        width=4,
        dash="dashdot" ,
    )
)
fig.add_shape (type="line",
    x0=4, y0=0, x1=6, y1=2,
    line=dict(
        color="MediumPurple" ,
        width=4,
        dash="dot",
    )
)
fig.update_shapes (dict(xref='x', yref='y'))
fig.show()
Vertical LineHorizontal Dashed Line
Diagonal dotted Line
0 1 2 3 4 5 6 700.511.522.5
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 4/33

--- Página 5 ---
Rectangles Positioned Relative to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure()
# Create scatter trace of text labels
fig.add_trace (go.Scatter(
    x=[2, 6], y=[1, 1],
    text=["Line positioned relative to the plot" ,
          "Line positioned relative to the axes" ],
    mode="text",
))
# Set axes ranges
fig.update_xaxes (range=[0, 8])
fig.update_yaxes (range=[0, 2])
fig.add_shape (type="line",
    xref="x", yref="y",
    x0=4, y0=0, x1=8, y1=1,
    line=dict(
        color="LightSeaGreen" ,
        width=3,
    ),
)
fig.add_shape (type="line",
    xref="paper", yref="paper",
    x0=0, y0=0, x1=0.5,
    y1=0.5,
    line=dict(
        color="DarkOrange" ,
        width=3,
    ),
)
fig.show()
Line positioned relative to the plot Line positioned relative to the axes
0 1 2 3 4 5 6 7 800.511.52
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 5/33

--- Página 6 ---
Rectangle Positioned Relative to the Plot &amp; to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[1.5, 4.5],
    y=[0.75, 0.75],
    text=["Unfilled Rectangle" , "Filled Rectangle" ],
    mode="text",
))
# Set axes properties
fig.update_xaxes (range=[0, 7], showgrid =False)
fig.update_yaxes (range=[0, 3.5])
# Add shapes
fig.add_shape (type="rect",
    x0=1, y0=1, x1=2, y1=3,
    line=dict(color="RoyalBlue" ),
)
fig.add_shape (type="rect",
    x0=3, y0=1, x1=6, y1=2,
    line=dict(
        color="RoyalBlue" ,
        width=2,
    ),
    fillcolor ="LightSkyBlue" ,
)
fig.update_shapes (dict(xref='x', yref='y'))
fig.show()
Unfilled Rectangle Filled Rectangle
0 1 2 3 4 5 6 700.511.522.533.5
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 6/33

--- Página 7 ---
A Rectangle Placed Relative to the Axis Position and Lengthimport plotly.graph_objects  as go
fig = go.Figure()
# Create scatter trace of text labels
fig.add_trace (go.Scatter(
    x=[1.5, 3],
    y=[2.5, 2.5],
    text=["Rectangle reference to the plot" ,
          "Rectangle reference to the axes" ],
    mode="text",
))
# Set axes properties
fig.update_xaxes (range=[0, 4])
fig.update_yaxes (range=[0, 4])
# Add shapes
fig.add_shape (type="rect",
    xref="x", yref="y",
    x0=2.5, y0=0,
    x1=3.5, y1=2,
    line=dict(
        color="RoyalBlue" ,
        width=3,
    ),
    fillcolor ="LightSkyBlue" ,
)
fig.add_shape (type="rect",
    xref="paper", yref="paper",
    x0=0.25, y0=0,
    x1=0.5, y1=0.5,
    line=dict(
        color="LightSeaGreen" ,
        width=3,
    ),
    fillcolor ="PaleTurquoise" ,
)
fig.show()
A shape can be placed relative to an axis's position on the plot by adding the string ' domain' to the axis reference in the xref or yref attributes for shapes. The
following code places a rectangle that starts at 60% and ends at 70% along the x-axis, starting from the left, and starts at 80% and ends at 90% along the y-axis,
starting from the bottom.Rectangle reference to the plot Rectangle reference to the axes
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 7/33

--- Página 8 ---
Highlighting Time Series Regions with Rectangle Shapesimport plotly.graph_objects  as go
import plotly.express  as px
df = px.data.wind()
fig = px.scatter(df, y="frequency" )
fig.update_layout (xaxis=dict(domain=[0, 0.5]), yaxis=dict(domain=[0.25, 0.75]))
# Add a shape whose x and y coordinates refer to the domains of the x and y axes
fig.add_shape (type="rect",
    xref="x domain" , yref="y domain" ,
    x0=0.6, x1=0.7, y0=0.8, y1=0.9,
)
fig.show()
Note: there are 
 that are fixed to data coordinates in one axis and absolutely positioned in another.
special methods add_hline, add_vline, add_hrect and add_vrect for the common cases of wanting to draw horizontal or vertical lines or rectangles
(/python/horizontal-vertical-shapes/)0 50 100012
indexfrequency
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 8/33

--- Página 9 ---
Circles Positioned Relative to the Axis Dataimport plotly.graph_objects  as go
fig = go.Figure()
# Add scatter trace for line
fig.add_trace (go.Scatter(
    x=["2015-02-01" , "2015-02-02" , "2015-02-03" , "2015-02-04" , "2015-02-05" ,
       "2015-02-06" , "2015-02-07" , "2015-02-08" , "2015-02-09" , "2015-02-10" ,
       "2015-02-11" , "2015-02-12" , "2015-02-13" , "2015-02-14" , "2015-02-15" ,
       "2015-02-16" , "2015-02-17" , "2015-02-18" , "2015-02-19" , "2015-02-20" ,
       "2015-02-21" , "2015-02-22" , "2015-02-23" , "2015-02-24" , "2015-02-25" ,
       "2015-02-26" , "2015-02-27" , "2015-02-28" ],
    y=[-14, -17, -8, -4, -7, -10, -12, -14, -12, -7, -11, -7, -18, -14, -14,
       -16, -13, -7, -8, -14, -8, -3, -9, -9, -4, -13, -9, -6],
    mode="lines",
    name="temperature"
))
# Add shape regions
fig.add_vrect (
    x0="2015-02-04" , x1="2015-02-06" ,
    fillcolor ="LightSalmon" , opacity=0.5,
    layer="below", line_width =0,
),
fig.add_vrect (
    x0="2015-02-20" , x1="2015-02-22" ,
    fillcolor ="LightSalmon" , opacity=0.5,
    layer="below", line_width =0,
)
fig.show()
Feb 3
2015Feb 6 Feb 9 Feb 12 Feb 15 Feb 18 Feb 21 Feb 24 Feb 27−18−16−14−12−10−8−6−4
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 9/33

--- Página 10 ---
Highlighting Clusters of Scatter Points with Circle Shapesimport plotly.graph_objects  as go
fig = go.Figure()
# Create scatter trace of text labels
fig.add_trace (go.Scatter(
    x=[1.5, 3.5],
    y=[0.75, 2.5],
    text=["Unfilled Circle" ,
          "Filled Circle" ],
    mode="text",
))
# Set axes properties
fig.update_xaxes (range=[0, 4.5], zeroline =False)
fig.update_yaxes (range=[0, 4.5])
# Add circles
fig.add_shape (type="circle" ,
    xref="x", yref="y",
    x0=1, y0=1, x1=3, y1=3,
    line_color ="LightSeaGreen" ,
)
fig.add_shape (type="circle" ,
    xref="x", yref="y",
    fillcolor ="PaleTurquoise" ,
    x0=3, y0=3, x1=4, y1=4,
    line_color ="LightSeaGreen" ,
)
# Set figure size
fig.update_layout (width=800, height=800)
fig.show()
Unfilled CircleFilled Circle
0 1 2 3 400.511.522.533.544.5
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 10/33

--- Página 11 ---
Venn Diagram with Circle Shapesimport plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
# Generate data
x0 = np.random.normal(2, 0.45, 300)
y0 = np.random.normal(2, 0.45, 300)
x1 = np.random.normal(6, 0.4, 200)
y1 = np.random.normal(6, 0.4, 200)
# Create figure
fig = go.Figure()
# Add scatter traces
fig.add_trace (go.Scatter(x=x0, y=y0, mode="markers" ))
fig.add_trace (go.Scatter(x=x1, y=y1, mode="markers" ))
# Add shapes
fig.add_shape (type="circle" ,
    xref="x", yref="y",
    x0=min(x0), y0=min(y0),
    x1=max(x0), y1=max(y0),
    opacity=0.2,
    fillcolor ="blue",
    line_color ="blue",
)
fig.add_shape (type="circle" ,
    xref="x", yref="y",
    x0=min(x1), y0=min(y1),
    x1=max(x1), y1=max(y1),
    opacity=0.2,
    fillcolor ="orange" ,
    line_color ="orange" ,
)
# Hide legend
fig.update_layout (showlegend =False)
fig.show()
1 2 3 4 5 6 71234567
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 11/33

--- Página 12 ---
import plotly.graph_objects  as go
fig = go.Figure()
# Create scatter trace of text labels
fig.add_trace (go.Scatter(
    x=[1, 1.75, 2.5],
    y=[1, 1, 1],
    text=["$A$", "$A+B$", "$B$"],
    mode="text",
    textfont =dict(
        color="black",
        size=18,
        family="Arail",
    )
))
# Update axes properties
fig.update_xaxes (
    showticklabels =False,
    showgrid =False,
    zeroline =False,
)
fig.update_yaxes (
    showticklabels =False,
    showgrid =False,
    zeroline =False,
)
# Add circles
fig.add_shape (type="circle" ,
    line_color ="blue", fillcolor ="blue",
    x0=0, y0=0, x1=2, y1=2
)
fig.add_shape (type="circle" ,
    line_color ="gray", fillcolor ="gray",
    x0=1.5, y0=0, x1=3.5, y1=2
)
fig.update_shapes (opacity=0.3, xref="x", yref="y")
fig.update_layout (
    margin=dict(l=20, r=20, b=100),
    height=600, width=800,
    plot_bgcolor ="white"
)
fig.show()
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 12/33

--- Página 13 ---
Adding Shapes to Subplots
Adding the Same Shapes to Multiple SubplotsHere we use the different axes (x1, x2) created by make_subplots as reference in order to draw shapes in figure subplots.
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
# Create Subplots
fig = make_subplots (rows=2, cols=2)
fig.add_trace (go.Scatter(x=[2, 6], y=[1,1]), row=1, col=1)
fig.add_trace (go.Bar(x=[1,2,3], y=[4,5,6]), row=1, col=2)
fig.add_trace (go.Scatter(x=[10,20], y=[40,50]), row=2, col=1)
fig.add_trace (go.Bar(x=[11,13,15], y=[8,11,20]), row=2, col=2)
# Add shapes
fig.update_layout (
    shapes=[
        dict(type="line", xref="x", yref="y",
            x0=3, y0=0.5, x1=5, y1=0.8, line_width =3),
        dict(type="rect", xref="x2", yref='y2',
             x0=4, y0=2, x1=5, y1=6),
        dict(type="rect", xref="x3", yref="y3",
             x0=10, y0=20, x1=15, y1=30),
        dict(type="circle" , xref="x4", yref="y4",
             x0=5, y0=12, x1=10, y1=18)])
fig.show()
The same shape can be added to multiple facets by using the 'all' keyword in the row and col arguments. For example2 3 4 5 60.60.81
1 2 3 4 50246
10 15 2020304050
5 10 1505101520trace 0
trace 1
trace 2
trace 3
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 13/33

--- Página 14 ---
SVG Pathsimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_row ="smoker" , facet_col ="sex")
# Adds a rectangle to all facets
fig.add_shape (
    dict(type="rect", x0=25, x1=35, y0=4, y1=6, line_color ="purple" ),
    row="all",
    col="all",
)
# Adds a line to all the rows of the second column
fig.add_shape (
    dict(type="line", x0=20, x1=25, y0=5, y1=6, line_color ="yellow" ), row="all", col=2
)
# Adds a circle to all the columns of the first row
fig.add_shape (
    dict(type="circle" , x0=10, y0=2, x1=20, y1=7), row=1, col="all", line_color ="green"
)
fig.show()
0 10 20 30 40 50246810
0 10 20 30 40 50246810
total_bill total_billtip tipsex=Female sex=Malesmoker=Yes smoker=No
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 14/33

--- Página 15 ---
import plotly.graph_objects  as go
fig = go.Figure()
# Create scatter trace of text labels
fig.add_trace (go.Scatter(
    x=[2, 1, 8, 8],
    y=[0.25, 9, 2, 6],
    text=["Filled Triangle" ,
          "Filled Polygon" ,
          "Quadratic Bezier Curves" ,
          "Cubic Bezier Curves" ],
    mode="text",
))
# Update axes properties
fig.update_xaxes (
    range=[0, 9],
    zeroline =False,
)
fig.update_yaxes (
    range=[0, 11],
    zeroline =False,
)
# Add shapes
fig.update_layout (
    shapes=[
        # Quadratic Bezier Curves
        dict(
            type="path",
            path="M 4,4 Q 6,0 8,4" ,
            line_color ="RoyalBlue" ,
        ),
        # Cubic Bezier Curves
        dict(
            type="path",
            path="M 1,4 C 2,8 6,4 8,8" ,
            line_color ="MediumPurple" ,
        ),
        # filled Triangle
        dict(
            type="path",
            path=" M 1 1 L 1 3 L 4 1 Z" ,
            fillcolor ="LightPink" ,
            line_color ="Crimson" ,
        ),
        # filled Polygon
        dict(
            type="path",
            path=" M 3,7 L2,8 L2,9 L3,10 L4,10 L5,9 L5,8 L4,7 Z" ,
            fillcolor ="PaleTurquoise" ,
            line_color ="LightSeaGreen" ,
        ),
    ]
)
fig.show()
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 15/33

--- Página 16 ---
Shifting Shapes on Categorical Axes
Shifts x0 half way between the center of category "Germany" and the center of the previous category by setting x0shift=-0.5
Shifts x1half way between the center of category "Germany" and the center of the next category by setting x1shift=0.5
Shifts x0 back to the center of the previous category by setting x0shift=-1
Shifts x1forward to the center of the next category by setting x1shift=1New in 5.23
When drawing shapes where xref or yref reference axes of type category or multicategory, you can shift x0, x1, y0, and y1 away from the center of the category using
x0shift, x1shift, y0shift, and y1shift by specifying a value between -1 and 1.
-1 is the center of the previous category, 0 is the center of the referenced category, and 1 is the center of the next category.
In the following example, the x0 and x1 values for both shapes reference category values on the x-axis.
In this example, the first shape:
The second shape:Filled TriangleFilled Polygon
Quadratic Bezier CurvesCubic Bezier Curves
0 1 2 3 4 5 6 7 8 90246810
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 16/33

--- Página 17 ---
import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Europe' and year == 1952" )
fig = go.Figure(
    data=go.Bar(x=df["country" ], y=df["lifeExp" ], marker_color ="LightSalmon" ),
    layout=dict(
        shapes=[
            dict(
                type="rect",
                x0="Germany" ,
                y0=0,
                x1="Germany" ,
                y1=0.5,
                xref="x",
                yref="paper",
                x0shift=-0.5,
                x1shift=0.5,
                line=dict(color="LightGreen" , width=4),
            ),
            dict(
                type="rect",
                x0="Spain",
                y0=0,
                x1="Spain",
                y1=0.5,
                xref="x",
                yref="paper",
                x0shift=-1,
                x1shift=1,
                line=dict(color="MediumTurquoise" , width=4),
            ),
        ]
    ),
)
fig.update_layout (
    title=dict(
        text="GDP per Capita in Europe (1972)"
    ),
    xaxis=dict(
        title=dict(
            text="Country"
        )
    ),
    yaxis=dict(
        title=dict(
            text="GDP per Capita"
        )
    ),
)
fig.show()
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 17/33

--- Página 18 ---
Drawing shapes with a Mouse on Cartesian plots
drag and resize it for lines, rectangles and circles/ellipses
drag and move individual vertices for closed paths
move individual vertices for open paths.introduced in plotly 4.7
You can create layout shapes programmatically, but you can also draw shapes manually by setting the dragmode to one of the shape-drawing modes:
'drawline','drawopenpath', 'drawclosedpath', 'drawcircle', or 'drawrect'. If you need to switch between different shape-drawing or other dragmodes (panning,
selecting, etc.),  in the config to select the
dragmode. If you switch to a different dragmode such as pan or zoom, you will need to select the drawing tool in the modebar to go back to shape drawing.
modebar buttons can be added (/python/configuration-options#add-optional-shapedrawing-buttons-to-modebar)
This shape-drawing feature is particularly interesting for annotating graphs, in particular  or .
image traces (/python/imshow)
layout images (/python/images)
Once you have drawn shapes, you can select and modify an existing shape by clicking on its boundary (note the arrow pointer). Its fillcolor turns to pink to highlight
the activated shape and then you can
An activated shape is deleted by clicking on the eraseshape button.
Drawing or modifying a shape triggers a relayout event, which .
can be captured by a callback inside a Dash application (https://dash.plotly.com/interactive-graphing)
AlbaniaAustriaBelgiumBosnia and HerzegovinaBulgariaCroatiaCzech RepublicDenmarkFinlandFranceGermanyGreeceHungaryIcelandIrelandItalyMontenegroNetherlandsNorwayPolandPortugalRomaniaSerbiaSlovak RepublicSloveniaSpainSwedenSwitzerlandTurkeyUnited Kingdom0204060GDP per Capita in Europe (1972)
CountryGDP per Capita
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 18/33

--- Página 19 ---
Style of user-drawn shapesimport plotly.graph_objects  as go
fig = go.Figure()
text="Click and drag here &lt;br&gt; to draw a rectangle &lt;br&gt;&lt;br&gt; or select another shape &lt;br&gt;in the modebar"
fig.add_annotation (
            x=0.5,
            y=0.5,
            text=text,
            xref="paper",
            yref="paper",
            showarrow =False,
            font_size =20
)
# shape defined programatically
fig.add_shape (editable =True,
              x0=-1, x1=0, y0=2, y1=3,
              xref='x', yref='y')
# define dragmode and add modebar buttons
fig.update_layout (dragmode ='drawrect' )
fig.show(config={'modeBarButtonsToAdd' :['drawline' ,
                                        'drawopenpath' ,
                                        'drawclosedpath' ,
                                        'drawcircle' ,
                                        'drawrect' ,
                                        'eraseshape'
                                       ]})
The layout newshape attribute controls the visual appearance of new shapes drawn by the user. newshape attributes have the same names as layout shapes.
Note on shape opacity: having a new shape's opacity &gt; 0.5 makes it possible to activate a shape by clicking inside the shape (for opacity &lt;= 0.5 you have to click on the
border of the shape), but you cannot start a new shape within an existing shape (which is possible for an opacity &lt;= 0.5).−1 0 1 2 3 4 5 6−101234
Click and drag here 
 to draw a rectangle 
 or select another shape 
in the modebar
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 19/33

--- Página 20 ---
Adding Text Labels to Shapesimport plotly.graph_objects  as go
fig = go.Figure()
text="Click and drag&lt;br&gt; to draw a rectangle &lt;br&gt;&lt;br&gt; or select another shape &lt;br&gt;in the modebar"
fig.add_annotation (
            x=0.5,
            y=0.5,
            text=text,
            xref="paper",
            yref="paper",
            showarrow =False,
            font_size =20
)
# shape defined programatically
fig.add_shape (line_color ='yellow' ,
              fillcolor ='turquoise' ,
              opacity=0.4,
              editable =True,
              x0=0, x1=1, y0=2, y1=3,
              xref='x', yref='y'
)
fig.update_layout (dragmode ='drawrect' ,
                  # style of new shapes
                  newshape =dict(line_color ='yellow' ,
                                fillcolor ='turquoise' ,
                                opacity=0.5))
fig.show(config={'modeBarButtonsToAdd' :['drawline' ,
                                        'drawopenpath' ,
                                        'drawclosedpath' ,
                                        'drawcircle' ,
                                        'drawrect' ,
                                        'eraseshape'
                                       ]})
New in 5.14
Add a text label to a shape by adding a label property to a shape with text. In this example, we add a rect and line shape and add a text label to both.−1 0 1 2 3 4 5 6−101234
Click and drag
 to draw a rectangle 
 or select another shape 
in the modebar
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 20/33

--- Página 21 ---
Styling Text Labelsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_shape (
    type="rect",
    fillcolor ='turquoise' ,
    x0=1,
    y0=1,
    x1=2,
    y1=3,
    label=dict(text="Text in rectangle" )
)
fig.add_shape (
    type="line",
    x0=3,
    y0=0.5,
    x1=5,
    y1=0.8,
    line_width =3,
    label=dict(text="Text above line" )
)
fig.show()
Use the font property to configure the color, size, and family of the label font. In this example, we change the label color of the first rectangle to "DarkOrange", set the
size of the text above the line to 20, and change the font family and set the font size on the second rectangle.−1 0 1 2 3 4 5 6−101234
Text in rectangle
Text above line
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 21/33

--- Página 22 ---
Setting Label Positionimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_shape (
    type="rect",
    fillcolor ='MediumSlateBlue' ,
    x0=1,
    y0=1,
    x1=2,
    y1=3,
    label=dict(text="Text in rectangle" , font=dict(color="DarkOrange" )),
)
fig.add_shape (
    type="line",
    x0=3,
    y0=0.5,
    x1=5,
    y1=0.8,
    line_width =3,
    label=dict(text="Text above line" , font=dict(size=20)),
)
fig.add_shape (
    type="rect",
    fillcolor ='Lavender' ,
    x0=2.5,
    y0=2.5,
    x1=5,
    y1=3.5,
    label=dict(
        text="Text in rectangle 2" , font=dict(family="Courier New, monospace" , size=20)
    ),
)
fig.show()
Set a label's position relative to the shape by setting textposition. The default position for lines is middle. The default position for other shapes is middle center.−1 0 1 2 3 4 5 6−101234
Text in rectangle
Text above lineText in rectangle 2
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 22/33

--- Página 23 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_shape (
    type="rect",
    fillcolor ='Lavender' ,
    x0=0,
    y0=0,
    x1=1.5,
    y1=1.5,
    label=dict(text="Text at middle center" ),
)
fig.add_shape (
    type="rect",
    fillcolor ='Lavender' ,
    x0=3,
    y0=0,
    x1=4.5,
    y1=1.5,
    label=dict(text="Text at top left" , textposition ="top left" ),
)
fig.add_shape (
    type="line",
    line_color ="MediumSlateBlue" ,
    x0=3,
    y0=2,
    x1=5,
    y1=3,
    line_width =3,
    label=dict(text="Text at start" , textposition ="start"),
)
fig.add_shape (
    type="line",
    line_color ="MediumSlateBlue" ,
    x0=0,
    y0=2,
    x1=2,
    y1=3,
    line_width =3,
    label=dict(text="Text at middle" ),
)
fig.show()
−1 0 1 2 3 4 5 6−101234
Text at middle centerText at top leftText at start Text at middle
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 23/33

--- Página 24 ---
Setting Label Angle
Setting Label PaddingUse textangle to rotate a label by setting a value between -180 and 180. The default angle for a label on a line is the angle of the line. The default angle for a label on
other shapes is 0. In this example, in the first shape, the label is at 45 degrees, and in the second, the label is at -45 degrees.
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_shape (
    type="rect",
    fillcolor ='LightGreen' ,
    x0=0,
    y0=0,
    x1=2,
    y1=2,
    label=dict(text="Text at 45" , textangle =45),
)
fig.add_shape (
    type="rect",
    fillcolor ='Gold',
    x0=3,
    y0=0,
    x1=5,
    y1=2,
    label=dict(text="Text at -45" , textangle =-45),
)
fig.show()
padding adds padding between the label and shape. This example shows one line with padding of 30px and another with the default padding, which is 3px.−1 0 1 2 3 4 5 6−101234
Text at 45Text at -45
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 24/33

--- Página 25 ---
Setting Label Anchorsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_shape (
    type="line",
    line_color ="RoyalBlue" ,
    x0=3,
    y0=0,
    x1=5,
    y1=3,
    line_width =3,
    label=dict(text="Label padding of 30px" , padding=30),
)
fig.add_shape (
    type="line",
    line_color ="RoyalBlue" ,
    x0=0,
    y0=0,
    x1=2,
    y1=3,
    line_width =3,
    label=dict(text="Default label padding of 3px" ),
)
fig.show()
xanchor sets a label's horizontal positional anchor and yanchor sets its vertical position anchor. Use xanchor to bind the textposition to the "left", "center" or "right" of
the label text and yanchor to bind textposition to the "top", "middle" or "bottom" of the label text.
In this example, yanchoris set to "top", instead of the default of "bottom" for lines, meaning the text displays below the line.−1 0 1 2 3 4 5 6−101234
Label padding of 30px
Default label padding of 3px
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 25/33

--- Página 26 ---
import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_shape (
    type="rect",
    x0="2018-09-24" ,
    y0=0,
    x1="2018-12-18" ,
    y1=3,
    line_width =0,
    label=dict(text="Decline" , textposition ="top center" , font=dict(size=20)),
    fillcolor ="green",
    opacity=0.25,
)
fig.add_shape (
    type="line",
    x0=min(df.index),
    y0=1,
    x1=max(df.index),
    y1=1,
    line_width =3,
    line_dash ="dot",
    label=dict(
        text="Jan 1 2018 Baseline" ,
        textposition ="end",
        font=dict(size=20, color="blue"),
        yanchor="top",
    ),
)
fig.show()
Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 201900.511.522.53
Decline
Jan 1 2018 Baselinecompany
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 26/33

--- Página 27 ---
Variables in Shape Label Text
xcenter: (x0 + x1) / 2
ycenter: (y0 + y1) / 2
dx: x1 - x0
dy: y1 - y0
width: abs(x1 - x0)
height: abs(y1 - y0)
length (for lines only): sqrt(dx^2 + dy^2)
slope: (y1 - y0) / (x1 - x0)New in 5.15
Use texttemplate to add text with variables to shapes. You have access to raw variables (x0, x1, y0, y1), which use raw data values from the shape definition, and the
following calculated variables:
texttemplate supports d3 number and date formatting.
Add a variable with "%{variable}". This example adds the raw variables x0 and y0 to a rectangle and shows the calculated variables height, slope, length, and width on
three other shapes.
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 27/33

--- Página 28 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_shape (
    type="rect",
    fillcolor ="MediumSlateBlue" ,
    x0=-0.5,
    y0=-0.5,
    x1=1,
    y1=1,
    label=dict(
        texttemplate ="x0 is % {x0:.3f} , y0 is % {y0:.3f} ", font=dict(color="DarkOrange" )
    ),
)
fig.add_shape (
    type="rect",
    fillcolor ="LightGreen" ,
    x0=1,
    y0=1.75,
    x1=2.25,
    y1=3,
    label=dict(texttemplate ="Height: % {height:.3f} ", font=dict(color="DarkOrange" )),
)
fig.add_shape (
    type="line",
    x0=3,
    y0=0.5,
    x1=5,
    y1=1.5,
    line_width =3,
    label=dict(
        texttemplate ="Slope of % {slope:.3f}  and length of % {length:.3f} ",
        font=dict(size=20),
    ),
)
fig.add_shape (
    type="rect",
    fillcolor ="Lavender" ,
    x0=2.5,
    y0=2.5,
    x1=5,
    y1=3.5,
    label=dict(
        texttemplate ="Width: % {width:.3f} ",
        font=dict(family="Courier New, monospace" , size=20),
    ),
)
fig.show()
−1 0 1 2 3 4 5 6−101234
x0 is -0.500, y0 is -0.500Height: 1.250
Slope of 0.500 and length of 2.236Width: 2.500
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 28/33

--- Página 29 ---
Variables in Shape Label Text for New Shapes
New in 5.15
You can also use texttemplate to add text with variables to new shapes drawn on the graph.
In this example, we enable drawing lines on the figure by adding drawline to modeBarButtonsToAdd in config. We then define a texttemplate for shapes that shows
the calculated variable dy. Select Draw line in the modebar to try it out.
import plotly.graph_objects  as go
from plotly import data
df = data.stocks()
fig = go.Figure(
    data=go.Scatter(
        x=df.date,
        y=df.GOOG,
    ),
    layout=go.Layout(
        yaxis=dict(
            title=dict(
                text="Price in USD"
            )),
        newshape =dict(
            label=dict(texttemplate ="Change: % {dy:.2f} ")
        ),
        title=dict(text="Google Share Price 2018/2019" ),
    ),
)
fig.show(
    config={
        "modeBarButtonsToAdd" : [
            "drawline" ,
        ]
    }
)
Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.90.9511.051.11.151.2Google Share Price 2018/2019Price in USD
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 29/33

--- Página 30 ---
Shapes in the Legend
New in 5.16
You can add a shape to the legend by setting showlegend=True on the shape. In this example, we add the second shape to the legend. The name that appears for the
shape in the legend is the shape's name if it is provided. If no name is provided, the shape label's text is used. If neither is provided, the legend item appears as "shape
\". For example, "shape 1".
import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_shape (
    type="rect",
    x0="2018-09-24" ,
    y0=0,
    x1="2018-12-18" ,
    y1=3,
    line_width =0,
    label=dict(text="Decline" , textposition ="top center" , font=dict(size=20)),
    fillcolor ="green",
    opacity=0.25,
)
fig.add_shape (
    showlegend =True,
    type="line",
    x0=min(df.index),
    y0=1,
    x1=max(df.index),
    y1=1,
    line_width =3,
    line_dash ="dot",
    label=dict(
        text="Jan 1 2018 Baseline" ,
        textposition ="end",
        font=dict(size=20, color="blue"),
        yanchor="top",
    ),
)
fig.show()
newshape also supports showlegend. In this example, each new line drawn on the graph appears in the legend.Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 201900.511.522.53
Decline
Jan 1 2018 Baselinecompany
GOOG
AAPL
AMZN
FB
NFLX
MSFT
Jan 1 2018 Baseline
datevalue
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 30/33

--- Página 31 ---
Shape Layerimport plotly.graph_objects  as go
from plotly import data
df = data.stocks()
fig = go.Figure(
    data=go.Scatter(
        x=df.date,
        y=df.AAPL,
        name="Apple"
    ),
    layout=go.Layout(
        yaxis=dict(
            title=dict(text="Price in USD" ),
            ),
        newshape =dict(
            showlegend =True,
            label=dict(texttemplate ="Change: % {dy:.2f} ")
        ),
        title=dict(text="Apple Share Price 2018/2019" ),
    ),
)
fig.show(
    config={
        "modeBarButtonsToAdd" : [
            "drawline" ,
        ]
    }
)
By default, shapes are drawn above traces. You can also configure them to be drawn between traces and gridlines with layer="between" (new in 5.21), or below
gridlines with layer="below".Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.911.11.21.31.41.51.61.7Apple Share Price 2018/2019Price in USD
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 31/33

--- Página 32 ---
import plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df)
fig.add_shape (
    type="rect",
    x0="2018-03-01" ,
    y0=0,
    x1="2018-08-01" ,
    y1=3,
    line_width =0,
    layer="above",
    label=dict(text="Above", textposition ="top center" , font=dict(size=15)),
    fillcolor ="LightGreen" ,
    opacity=0.80,
)
fig.add_shape (
    type="rect",
    x0="2018-10-01" ,
    y0=0,
    x1="2019-03-01" ,
    y1=3,
    line_width =0,
    layer="between" ,
    label=dict(text="Between" , textposition ="top center" , font=dict(size=15)),
    fillcolor ="LightGreen" ,
    opacity=0.80,
)
fig.add_shape (
    type="rect",
    x0="2019-05-01" ,
    y0=0,
    x1="2019-10-01" ,
    y1=3,
    line_width =0,
    layer="below",
    label=dict(text="Below", textposition ="top center" , font=dict(size=15)),
    fillcolor ="LightGreen" ,
    opacity=0.80,
)
fig.show()
Below
 Between
Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 201900.511.522.53
Above company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
datevalue
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 32/33

--- Página 33 ---
Reference
What About Dash?See  for more information and chart attribute options!
https://plotly.com/python/reference/layout/shapes/ (https://plotly.com/python/reference/layout/shapes/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
es
oned
t to the
e Axis
e Plot to
Axis
th
xis Data
nts with
e
artesian
ew16/07/2025, 06:07 Shapes in Python
https://plotly.com/python/shapes/ 33/33</content>
      </file>
      <file name="Static image export in Python.pdf" path="pyvy_2x1/Static image export in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Install Dependencies
Kaleido
Chrome
Write Image to a File &gt;  &gt; Static
Image Export
Static Image Export in Python
Plotly allows you to save static images of your plots. Save the image to your local computer, or embed it inside your Jupyter notebooks as a static image.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/static-
image-export.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page demonstrates how to export interactive Plotly figures to static image formats like PNG, JPEG, SVG, and PDF. If you want to export Plotly figures to HTML to
retain interactivity, see the 
Interactive HTML Export page (/python/interactive-html-export/)
Static image generation requires . Install Kaleido with pip:
Kaleido (https://github.com/plotly/Kaleido)
$ pip install --upgrade kaleido 
 
or with conda:
$ conda install -c conda-forge python -kaleido 
 
It's also possible to generate static images using , though support for Orca will be removed after September 2025. See the 
 page for more details.
Orca (https://github.com/plotly/orca)
Orca
Management (/python/orca-management/)
Kaleido uses Chrome for static image generation. Versions of Kaleido prior to v1 included Chrome as part of the Kaleido package. Kaleido v1 does not include Chrome;
instead, it looks for a compatible version of Chrome (or Chromium) already installed on the machine on which it's running.
If you don't have Chrome installed, you can install it directly from Google following the instructions for your operating system.
Plotly also provides a CLI for installing Chrome from the command line.
Run plotly_get_chrome to install Chrome.
See the Additional Information on Browsers with Kaleido section below for more details on browser compatibility for Kaleido.
Plotly figures have a write_image method to write a figure to a file. write_image supports PNG, JPEG, WebP, SVG, and PDF formats.
To export a figure using write_image, call write_image on the figure, and pass as an argument the filename where you want to save the figure. The file format is
inferred from the extension:
  1
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 1/8

--- Página 2 ---
Raster Formats
Vector Formats
Specify a FormatPNG
import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
fig.write_image ("fig1.png" )
JPEG
...
fig.write_image ("images/fig1.jpeg" )
WebP
...
fig.write_image ("images/fig1.webp" )
SVG
...
fig.write_image ("images/fig1.svg" )
PDF
...
fig.write_image ("images/fig1.pdf" )
EPS (Kaleido&lt;1.0.0)
Kaleido versions earlier than 1.0.0 also support EPS (requires the poppler library). If using Kaleido v1 or later, we recommend PDF or SVG format.
...
fig.write_image ("images/fig1.eps" )
Note: Figures containing WebGL traces (i.e. of type scattergl, contourgl, scatter3d, surface, mesh3d, scatterpolargl, cone, streamtube, splom, or parcoords) that are
exported in a vector format will include encapsulated rasters, instead of vectors, for some parts of the image.
In the earlier example, Plotly inferred the image format from the extension of the filename. You can also specify the format explicitly using the format parameter.
import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
fig.write_image ("fig1", format="png")
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 2/8

--- Página 3 ---
Write Multiple Images
Get Image as BytesKaleido v1 and later
plotly.io provides a write_images function for writing multiple figures to images. Using write_images is faster than calling fig.write_image multiple times.
write_images takes a list of figure objects or dicts representing figures as its first argument, fig. The second argument file is a list of paths to export to. These paths can
be specified as strs or .
pathlib.Path objects (https://docs.python.org/3/library/pathlib.html)
import plotly.graph_objects  as go
import plotly.express  as px
import plotly.io  as pio
fig1 = go.Figure(
    data=go.Scatter(x=[1, 2, 3], y=[4, 5, 6], mode='lines+markers' ),
    layout=go.Layout(title='Line Chart' )
)
fig2 = go.Figure(
    data=go.Bar(x=['A', 'B', 'C'], y=[10, 5, 15]),
    layout=go.Layout(title='Bar Chart' )
)
fig3 = px.pie(
    values=[30, 20, 10, 40],
    names=['A', 'B', 'C', 'D'],
    title='Pie Chart'
)
pio.write_images (
    fig=[fig1, fig2, fig3],
    file=['export_images/line_chart.png' , 'export_images/bar_chart.png' , 'export_images/pie_chart.png' ]
)
As well as exporting to a file, Plotly figures also support conversion to a bytes object. To convert a figure to a PNG bytes object, call the figure's to_image method with
a format
import plotly.express  as px
data_canada  = px.data.gapminder ().query("country == 'Canada'" )
fig = px.bar(data_canada , x='year', y='pop')
img_bytes  = fig.to_image (format="png")
Here's the bytes object displayed using IPython.display.Image:
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 3/8

--- Página 4 ---
Specify Image Dimensions and Scalefrom IPython.display  import Image
Image(img_bytes )
In addition to the image format, the to_image and write_image functions provide arguments to specify the image width and height in logical pixels. They also provide a
scale parameter that can be used to increase (scale &gt; 1) or decrease (scale &lt; 1) the physical resolution of the resulting image.
img_bytes  = fig.to_image (format="png", width=600, height=350, scale=2)
Image(img_bytes )
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 4/8

--- Página 5 ---
Specify Image Export Engine
plotly.io FunctionsThe engine parameter, as well as Orca support, is deprecated in Plotly.py 6.2.0 and will be removed after September 2025.
If kaleido is installed, it will automatically be used to perform image export. If it is not installed, plotly.py will attempt to use orca instead. The engine argument to the
to_image and write_image functions can be used to override this default behavior.
Here is an example of specifying orca for the image export engine:
fig.to_image (format="png", engine="orca")
And, here is an example of specifying that Kaleido should be used:
fig.to_image (format="png", engine="kaleido" )
Previous examples on this page access write_image and to_image as methods on Plotly Figure objects. This functionality is also available via the plotly.io subpackage.
The following example uses the write_image function from plotly.io. The function takes the figure or a dict representing a figure (as shown in the example) as its first
argument.
import plotly.io  as pio
fig = dict({
    "data": [{"type": "bar",
              "x": [1, 2, 3],
              "y": [1, 3, 2]}],
    "layout" : {"title": {"text": "A Figure Specified By Python Dictionary" }}
})
pio.write_image (fig, "fig.png" )
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 5/8

--- Página 6 ---
Image Export Settings (Kaleido)
Available Settings
Set Defaults
Additional Information on Browsers with Kaleido
r"c:\Program Files\Google\Chrome\Application\chrome.exe"
f"c:\Users\{os.environ.get('USER', 'default')}\AppData\"
"Local\Google\Chrome\Application\chrome.exe"As well as configuring height, width, and other settings by passing arguments when calling write_image and to_image, you can also set a single default to be used
throughout the duration of the program.
The following settings are available.
default_width: The default pixel width to use on image export.
default_height: The default pixel height to use on image export.
default_scale: The default image scale factor applied on image export.
default_format: The default image format used on export. One of "png", "jpeg", "webp", "svg", or "pdf". ("eps" support is available with Kaleido v0 only)
mathjax: Location of the MathJax bundle needed to render LaTeX characters. Defaults to a CDN location. If fully offline export is required, set this to a local MathJax
bundle.
plotlyjs: Location of the Plotly.js bundle to use. Can be a local file path or URL. By default, Kaleido uses the Plotly.js bundle included with Plotly.py.
topojson: Location of the topojson files needed to render choropleth traces. Defaults to a CDN location. If fully offline export is required, set this to a local directory
containing the Plotly.js topojson files.
mapbox_access_token: The default Mapbox access token (Kaleido v0 only). Mapbox traces are deprecated. See the 
 page for more details.
MapLibre Migration
(https://plotly.com/python/mapbox-to-maplibre/)
Since Plotly.py 6.1, settings are available on plotly.io.defaults
To set the default_format to "jpeg":
import plotly.io  as pio
pio.defaults .default_format  = "jpeg"
You can also access current defaults. To see the default value for height:
import plotly.io  as pio
pio.defaults .default_height
In earlier versions of Plotly.py, these settings are available on plotly.io.kaleido.scope. This is deprecated since version 6.2. Use plotly.io.defaults instead.
import plotly.io  as pio
# Example using deprecated `plotly.io.kaleido.scope`
pio.kaleido.scope.default_format  = "jpeg"
When exporting images from Plotly.py, Kaleido will attempt to find a version of  or 
 that it can use for the export. It checks in the operating system's PATH for executables with the
following names: "chromium", "chromium-browser", "chrome", "Chrome", "google-chrome" "google-chrome-stable", "Chrome.app", "Google Chrome", "Google
Chrome.app", and "Google Chrome for Testing".
Chrome (https://www.google.com/chrome/index.html)
Chromium
(https://www.chromium.org/getting-involved/download-chromium/)
Kaleido will also check the following locations:
Windows
Linux"
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 6/8

--- Página 7 ---
"/usr/bin/google-chrome-stable"
"/usr/bin/google-chrome"
"/usr/bin/chrome"
"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
What About Dash?Mac OS
Most recent versions of Chrome or Chromium should work with Kaleido. Other Chromium-based browsers may also work, though Kaleido won't discover them
automatically. You can set a browser to use by setting the path to search using an environment variable called BROWSER_PATH. For example:
BROWSER_PATH =/Applications/ Microsoft \ Edge.app/Contents /MacOS/Microsoft \ Edge 
 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
  1
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 7/8

--- Página 8 ---
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
e
s with16/07/2025, 06:04 Static image export in Python
https://plotly.com/python/static-image-export/ 8/8</content>
      </file>
      <file name="Static image generation changes in plotly.py 6.1 in Python.pdf" path="pyvy_2x1/Static image generation changes in plotly.py 6.1 in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; Static Image
Generation Changes in Plotly.py 6.1
Static Image Generation Changes in Plotly.py 6.1 in Python
Details about changes to static image generation in Plotly.py 6.1.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/static-
image-generation-migration.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:11 Static image generation changes in plotly.py 6.1 in Python
https://plotly.com/python/static-image-generation-changes/ 1/3

--- Página 2 ---
Static Image Generation Changes in Plotly.py 6.1
Chrome
Engine Parameter
EPS Format
Config Settings
Multiple Image ExportPlotly.py 6.1 introduces support for Kaleido v1, which  for Plotly figures.
improves static image generation (https://plotly.com/blog/kaleido-the-next-generation/)
While adding support for Kaleido v1, we are deprecating support for earlier versions of Kaleido and support for . Support for Orca
and earlier versions of Kaleido will be removed after September 2025, and we recommend updating to the latest Kaleido. This page documents how to migrate your
Plotly code to Kaleido v1 and outlines the changes in functionality.
Orca (/python/orca-management/)
To migrate from either Orca or Kaleido v0, first install the latest Kaleido with:
pip install --upgrade  kaleido
Kaleido uses Chrome for static image generation. Versions of Kaleido prior to v1 included Chrome as part of the Kaleido package. Kaleido v1 does not include Chrome;
instead, it looks for a compatible version of Chrome (or Chromium) already installed on the machine on which it's running.
See the  on the Static Image Export page for more details on Chome and Kaleido.
Chrome section (/python/static-image-export#chrome)
The engine parameter on static image export methods and functions is deprecated in Plotly.py 6.2 and will be removed after September 2025. Once the engine
parameter is removed, static image generation will use Kaleido v1 if it's installed, or raise an error if it isn't.
You'll need to update your code to remove references to engine. For example, fig.to_image(format="png", engine="orca") or fig.to_image(format="png",
engine="kaleido") needs to be updated to fig.to_image(format="png"). This change applies to: fig.to_image, fig.write_image, plotly.io.to_image, and
plotly.io.write_image.
The eps format is no longer supported in Kaleido v1. If your existing code sets format="eps", you'll need to update it to use another format, for example pdf.
Accessing Kaleido defaults and config settings via plotly.io.kaleido.scope is now deprecated and will be removed after September 2025. You'll need to update any code
that uses plotly.io.kaleido.scope to instead use plotly.io.defaults. For example, to set the default_format to "jpeg":
import plotly.io  as pio
pio.defaults .default_format  = "jpeg"
# Instead of:
# pio.kaleido.scope.default_format = "jpeg"
The mapbox_access_token config setting is not available on plotly.io.defaults because Mapbox maps are deprecated and will be removed in a future version of
Plotly.py. See  for more details.
MapLibre Migration (https://plotly.com/python/mapbox-to-maplibre/)
If you are migrating from Orca, the following config settings do not apply to Kaleido: server_url, port, timeout, and use_xvfb, but other settings, such as default_format,
can be accessed via plotly.io.defaults.
Plotly.py 6.1 includes a write_images function (plotly.io.write_images), which we recommend over write_image when exporting more than one figure. Calling
write_images with a list of figures (or dicts representing figures) to export provides better performance than multiple calls with write_image. See the 
 section for more details.
Write Multiple
Images (/python/static-image-export#write-multiple-images)
16/07/2025, 06:11 Static image generation changes in plotly.py 6.1 in Python
https://plotly.com/python/static-image-generation-changes/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:11 Static image generation changes in plotly.py 6.1 in Python
https://plotly.com/python/static-image-generation-changes/ 3/3</content>
      </file>
      <file name="Streamline plots in Python.pdf" path="pyvy_2x1/Streamline plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)uniformly spaced ranges of x and y values (1D)
2-D velocity values u and v defined on the cross-product (np.meshgrid(x, y)) of x and y.
Basic Streamline Plot &gt;  &gt;
Streamline Plots
Streamline Plots in Python
How to make a streamline plot in Python. A streamline plot displays vector field data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/streamline-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A Streamline plot is a representation based on a 2-D vector field interpreted as a velocity field, consisting of closed curves tangent to the velocity field. In the case of a
stationary velocity field, streamlines coincide with trajectories (see also the 
).
Wikipedia page on streamlines, streaklines and pathlines
(https://en.wikipedia.org/wiki/Streamlines,_streaklines,_and_pathlines)
For the streamline , one needs to provide
figure factory (/python/figure-factories/)
Velocity values are interpolated when determining the streamlines. Streamlines are initialized on the boundary of the x-y domain.
Streamline plots can be made with a  as detailed in this page.
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
import numpy as np
x = np.linspace (-3, 3, 100)
y = np.linspace (-3, 3, 100)
Y, X = np.meshgrid (x, y)
u = -1 - X**2 + Y
v = 1 + X - Y**2
# Create streamline figure
fig = ff.create_streamline (x, y, u, v, arrow_scale =.1)
fig.show()
−3 −2 −1 0 1 2−3−2−10123
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 1/3

--- Página 2 ---
Streamline and Source Point Plot
See also
Referenceimport plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
N = 50
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace (x_start, x_end, N)
y = np.linspace (y_start, y_end, N)
X, Y = np.meshgrid (x, y)
source_strength  = 5.0
x_source , y_source  = -1.0, 0.0
# Compute the velocity field on the mesh grid
u = (source_strength /(2*np.pi) *
     (X - x_source )/((X - x_source )**2 + (Y - y_source )**2))
v = (source_strength /(2*np.pi) *
     (Y - y_source )/((X - x_source )**2 + (Y - y_source )**2))
# Create streamline figure
fig = ff.create_streamline (x, y, u, v,
                           name='streamline' )
# Add source point
fig.add_trace (go.Scatter(x=[x_source ], y=[y_source ],
                          mode='markers' ,
                          marker_size =14,
                          name='source point' ))
fig.show()
For a 3D version of streamlines, use the trace go.Streamtube documented .
here (/python/streamtube-plot/)
For representing the 2-D vector field as arrows, see the .
quiver plot tutorial (/python/quiver-plots/)
For more info on ff.create_streamline(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_streamline.html)−2 −1.5 −1 −0.5 0 0.5 1 1.5−1−0.500.51 streamline
source point
16/07/2025, 05:59 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 05:59 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 3/3</content>
      </file>
      <file name="Styling markers in Python.pdf" path="pyvy_2x1/Styling markers in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Add Marker Border &gt;  &gt;
Styling Markers
Styling Markers in Python
How to style markers in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/marker-style.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In order to make markers look more distinct, you can add a border to the markers. This can be achieved by adding the line property to the marker object.
Here is an example of adding a marker border to a faceted scatter plot created using Plotly Express.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.update_traces (marker=dict(size=12,
                              line=dict(width=2,
                                        color='DarkSlateGrey' )),
                  selector =dict(mode='markers' ))
fig.show()
Here is an example that creates an empty graph object figure, and then adds two scatter traces with a marker border.2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 1/19

--- Página 2 ---
import plotly.graph_objects  as go
# Generate example data
import numpy as np
np.random.seed(1)
x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=6, size=(500,))
# Build figure
fig = go.Figure()
# Add scatter trace with medium sized markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=x,
        y=y,
        marker=dict(
            color='LightSkyBlue' ,
            size=20,
            line=dict(
                color='MediumPurple' ,
                width=2
            )
        ),
        showlegend =False
    )
)
# Add trace with large marker
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=[2],
        y=[4.5],
        marker=dict(
            color='LightSkyBlue' ,
            size=120,
            line=dict(
                color='MediumPurple' ,
                width=12
            )
        ),
        showlegend =False
    )
)
fig.show()
2 3 4 5 633.544.555.56
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 2/19

--- Página 3 ---
Control Marker Border with DashFully opaque, the default setting, is useful for non-overlapping markers. When many points overlap it can be hard to observe density.
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import plotly.express as px
import dash_daq as daq
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive marker style control'),
    dcc.Graph(id="graph"),
    daq.ColorPicker(
        id='color', label='Border Color',
        value=dict(hex='#2F4F4F'), size=164),
])
@app.callback(
    Output("graph", "figure"),
    Input("color", "value"))
def update_marker_border(color):
    df = px.data.iris() # replace with your own data source
    fig = px.scatter(
        df, x="sepal_width", y="sepal_length",
        color="species", height=350)
 fi Fi (fi)DOWNLOAD
Interactive marker style control
Border Color2 2.5 3 3.5 4 4.545678 species
setosa
versicolor
virginica
sepal_widthsepal_length
#2F4F4F
HEX
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 3/19

--- Página 4 ---
Opacity
Setting opacity outside the marker will set the opacity of the trace. Thus, it will allow greater visibility of additional traces but like fully opaque it is hard to distinguish
density.
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 4/19

--- Página 5 ---
import plotly.graph_objects  as go
# Generate example data
import numpy as np
x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=4.5, size=(500,))
x2 = np.random.uniform(low=3, high=6, size=(500,))
y2 = np.random.uniform(low=4.5, high=6, size=(500,))
# Build figure
fig = go.Figure()
# Add first scatter trace with medium sized markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=x,
        y=y,
        opacity=0.5,
        marker=dict(
            color='LightSkyBlue' ,
            size=20,
            line=dict(
                color='MediumPurple' ,
                width=2
            )
        ),
        name='Opacity 0.5'
    )
)
# Add second scatter trace with medium sized markers
# and opacity 1.0
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=x2,
        y=y2,
        marker=dict(
            color='LightSkyBlue' ,
            size=20,
            line=dict(
                color='MediumPurple' ,
                width=2
            )
        ),
        name='Opacity 1.0'
    )
)
# Add trace with large markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=[2, 2],
        y=[4.25, 4.75],
        opacity=0.5,
        marker=dict(
            color='LightSkyBlue' ,
            size=80,
            line=dict(
                color='MediumPurple' ,
                width=8
            )
        ),
        showlegend =False
    )
)
fig.show()
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 5/19

--- Página 6 ---
Marker Opacity
To maximise visibility of density, it is recommended to set the opacity inside the marker marker:{opacity:0.5}. If multiple traces exist with high density, consider using
marker opacity in conjunction with trace opacity.
2 3 4 5 633.544.555.56Opacity 0.5
Opacity 1.0
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 6/19

--- Página 7 ---
import plotly.graph_objects  as go
# Generate example data
import numpy as np
x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=6, size=(500,))
# Build figure
fig = go.Figure()
# Add scatter trace with medium sized markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=x,
        y=y,
        marker=dict(
            color='LightSkyBlue' ,
            size=20,
            opacity=0.5,
            line=dict(
                color='MediumPurple' ,
                width=2
            )
        ),
        showlegend =False
    )
)
# Add trace with large markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=[2, 2],
        y=[4.25, 4.75],
        marker=dict(
            color='LightSkyBlue' ,
            size=80,
            opacity=0.5,
            line=dict(
                color='MediumPurple' ,
                width=8
            )
        ),
        showlegend =False
    )
)
fig.show()
1.5 2 2.5 3 3.5 4 4.5 5 5.5 633.544.555.56
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 7/19

--- Página 8 ---
Color Opacity
To maximise visibility of each point, set the color as an rgba string that includes an alpha value of 0.5.
This example sets the marker color to 'rgba(135, 206, 250, 0.5)'. The rgb values of 135, 206, and 250 are from the definition of the LightSkyBlue named CSS color that is
is used in the previous examples (See ). The marker line will remain opaque.
https://www.color-hex.com/color/87cefa (https://www.color-hex.com/color/87cefa)
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 8/19

--- Página 9 ---
import plotly.graph_objects  as go
# Generate example data
import numpy as np
x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=6, size=(500,))
# Build figure
fig = go.Figure()
# Add scatter trace with medium sized markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=x,
        y=y,
        marker=dict(
            color='rgba(135, 206, 250, 0.5)' ,
            size=20,
            line=dict(
                color='MediumPurple' ,
                width=2
            )
        ),
        showlegend =False
    )
)
# Add trace with large markers
fig.add_trace (
    go.Scatter(
        mode='markers' ,
        x=[2, 2],
        y=[4.25, 4.75],
        marker=dict(
            color='rgba(135, 206, 250, 0.5)' ,
            size=80,
            line=dict(
                color='MediumPurple' ,
                width=8
            )
        ),
        showlegend =False
    )
)
fig.show()
1.5 2 2.5 3 3.5 4 4.5 5 5.5 633.544.555.56
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 9/19

--- Página 10 ---
Custom Marker Symbols
The marker_symbol attribute allows you to choose from a wide array of symbols to represent markers in your figures.
The basic symbols are: circle, square, diamond, cross, x, triangle, pentagon, hexagram, star, hourglass, bowtie, asterisk, hash, y, and line.
Each basic symbol is also represented by a number. Adding 100 to that number is equivalent to appending the suffix "-open" to a symbol name. Adding 200 is
equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.
In the following figure, hover over a symbol to see its name or number. Set the marker_symbol attribute equal to that name or number to change the marker symbol
in your figure.
The arrow-wide and arrow marker symbols are new in 5.11
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 10/19

--- Página 11 ---
import plotly.graph_objects  as go
from plotly.validator_cache  import ValidatorCache
SymbolValidator  = ValidatorCache .get_validator ("scatter.marker" , "symbol" )
raw_symbols  = SymbolValidator .values
namestems  = []
namevariants  = []
symbols = []
for i in range(0,len(raw_symbols ),3):
    name = raw_symbols [i+2]
    symbols.append(raw_symbols [i])
    namestems .append(name.replace("-open", "").replace("-dot", ""))
    namevariants .append(name[len(namestems [-1]):])
fig = go.Figure(go.Scatter(mode="markers" , x=namevariants , y=namestems , marker_symbol =symbols,
                           marker_line_color ="midnightblue" , marker_color ="lightskyblue" ,
                           marker_line_width =2, marker_size =15,
                           hovertemplate ="name: % {y}%{x}&lt;br&gt;number: % {marker.symbol} &lt;extra&gt;&lt;/extra&gt;" ))
fig.update_layout (title=dict(text="Mouse over symbols for name &amp; number!" ),
                  xaxis_range =[-1,4], yaxis_range =[len(set(namestems )),-1],
                  margin=dict(b=0,r=0), xaxis_side ="top", height=1400, width=400)
fig.show()
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 11/19

--- Página 12 ---
Using a Custom Marker
To use a custom marker, set the symbol on the marker. Here we set it to diamond.-open-dot-open-dot
arrow-widearrowarrow-bar-rightarrow-bar-leftarrow-bar-downarrow-bar-uparrow-rightarrow-leftarrow-downarrow-upline-nwline-neline-nsline-ewy-righty-lefty-downy-uphashasteriskx-thincross-thindiamond-xdiamond-crosssquare-xsquare-crosscircle-xcircle-crossbowtiehourglassdiamond-widediamond-tallstar-diamondstar-squarestar-triangle-downstar-triangle-uphexagramstaroctagonhexagon2hexagonpentagontriangle-nwtriangle-swtriangle-setriangle-netriangle-righttriangle-lefttriangle-downtriangle-upxcrossdiamondsquarecircleMouse over symbols for name &amp; number!
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 12/19

--- Página 13 ---
Open Marker Colorsimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.update_traces (
    marker=dict(size=8, symbol="diamond" , line=dict(width=2, color="DarkSlateGrey" )),
    selector =dict(mode="markers" ),
)
fig.show()
In the previous example, each marker has two colors, a marker color (set in Plotly Express with color="species") and a line color (set on the line with
color="DarkSlateGrey". All open markers, like "diamond-open" in the following example, have a transparent fill, which means you can specify only one color. Specify
this color using the marker color parameter. This controls the outline color and any dot or cross. For open markers, the line color does nothing.2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 13/19

--- Página 14 ---
Setting Marker Anglesimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.update_traces (
    marker=dict(
        size=8,
        symbol="diamond-open" ,
        line=dict(
            width=2,
#             color="DarkSlateGrey" Line colors don't apply to open markers
        )
    ),
    selector =dict(mode="markers" ),
)
fig.show()
New in 5.11
Change the angle of markers by setting angle. Here we set the angle on the arrow markers to 45.2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 14/19

--- Página 15 ---
Setting Angle Referenceimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" )
fig.update_traces (
    marker=dict(
        size=12, symbol="arrow", angle=45, line=dict(width=2, color="DarkSlateGrey" )
    ),
    selector =dict(mode="markers" ),
)
fig.show()
New in 5.11
In the previous example the angle reference is the default up, which means all makers start at the angle reference point of 0. Set angleref to previous and a marker
will take its angle reference from the previous data point.2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 15/19

--- Página 16 ---
Using Standoff to Position a Markerimport pandas as pd
import plotly.express  as px
import plotly.graph_objects  as go
df = px.data.gapminder ()
fig = go.Figure()
for x in df.loc[df.continent .isin(["Europe" ])].country.unique()[:5]:
    fil = df.loc[(df.country.str.contains (x))]
    fig.add_trace (
        go.Scatter(
            x=fil["year"],
            y=fil["pop"],
            mode="lines+markers" ,
            marker=dict(
                symbol="arrow",
                size=15,
                angleref ="previous" ,
            ),
            name=x,
        )
    )
fig.show()
New in 5.11
When you have multiple markers at one location, you can use standoff on a marker to move it away from the other marker in the direction of the angle. In this
example, we set standoff=8 on the arrow marker, which is half the size of the other circle marker, meaning it points exactly at the circle.1950 1960 1970 1980 1990 2000 20102M4M6M8M10MAlbania
Austria
Belgium
Bosnia and Herzegovina
Bulgaria
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 16/19

--- Página 17 ---
import pandas as pd
import plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
df = df.loc[(df.continent  == "Americas" ) &amp; (df.year.isin([1987, 2007]))]
countries  = (
    df.loc[(df.continent  == "Americas" ) &amp; (df.year.isin([2007]))]
    .sort_values (by=["pop"], ascending =True)["country" ]
    .unique()
)[5:-10]
data = {"x": [], "y": [], "colors" : [], "years": []}
for country in countries :
    data["x"].extend(
        [
            df.loc[(df.year == 1987) &amp; (df.country == country)]["pop"].values[0],
            df.loc[(df.year == 2007) &amp; (df.country == country)]["pop"].values[0],
            None,
        ]
    )
    data["y"].extend([country, country, None]),
    data["colors" ].extend(["cyan", "darkblue" , "white"]),
    data["years"].extend(["1987", "2007", None])
fig = go.Figure(
    data=[
        go.Scatter(
            x=data["x"],
            y=data["y"],
            mode="markers+lines" ,
            marker=dict(
                symbol="arrow",
                color="royalblue" ,
                size=16,
                angleref ="previous" ,
                standoff =8,
            ),
        ),
        go.Scatter(
            x=data["x"],
            y=data["y"],
            text=data["years"],
            mode="markers" ,
            marker=dict(
                color=data["colors" ],
                size=16,
            ),
            hovertemplate ="""Country: % {y} &lt;br&gt; Population: % {x} &lt;br&gt; Year: % {text} &lt;br&gt;&lt;extra&gt;&lt;/extra&gt;""" ,
        ),
    ]
)
fig.update_layout (
    title=dict(text="Population changes 1987 to 2007" ),
    width=1000,
    height=1000,
    showlegend =False,
)
fig.show()
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 17/19

--- Página 18 ---
Reference
See  for more information and chart attribute options!
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)4M 6M 8M 10M 12MCosta RicaNicaraguaParaguayEl SalvadorHondurasHaitiBoliviaDominican RepublicCubaGuatemalaPopulation changes 1987 to 2007
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 18/19

--- Página 19 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:06 Styling markers in Python
https://plotly.com/python/marker-style/ 19/19</content>
      </file>
      <file name="Styling plotly express figures in Python.pdf" path="pyvy_2x1/Styling plotly express figures in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Styling Figures made with Plotly Express
1. Control common parameters like width &amp; height, titles, labeling and colors using built-in Plotly Express function arguments
2. Updating the figure attributes using 
3. Using Plotly's  via the template argument to every Plotly Express function
4. Setting default values for common parameters using px.defaults
Built-in Plotly Express Styling Arguments
title to set the figure title
width and height to set the figure dimensions
template to  (see below for more details)
labels to override the default axis and legend labels behaviour, which is to use the data frame column name if available, and otherwise to use the label name
itself like "x", "y", "color" etc. labels accepts a dict whose keys are the label to rename and whose values are the desired labels. These labels appear in axis
labels, legend and color bar titles, and in hover labels.
category_orders to override the default category ordering behaviour, which is to use the order in which the data appears in the input. category_orders accepts
a dict whose keys are the column name to reorder and whose values are a list of values in the desired order. These orderings apply everywhere categories
appear: in legends, on axes, in bar stacks, in the order of facets, in the order of animation frames etc.
hover_data and hover_name to control which attributes appear in the hover label and how they are formatted.
 such as color_continuous_scale, color_range, color_discrete_sequence and/or color_discrete_map set the
colors used in the figure. color_discrete_map accepts a dict whose keys are values mapped to color and whose values are the desired CSS colors. &gt;  &gt; Styling
Plotly Express Figures
Styling Plotly Express Figures in Python
Figures made with Plotly Express can be customized in all the same ways as figures made with graph objects, as well as with PX-specific function arguments.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/styling-
plotly-express.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which . Every
Plotly Express function returns  whose data and layout has been pre-populated according to the provided
arguments.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
a plotly.graph_objects.Figure object (/python/graph-objects/)
You can style and customize figures made with Plotly Express in all the same ways as you can style figures made more manually by explicitly assembling
graph_objects into a figure.
More specifically, here are the 4 ways you can style and customize figures made with Plotly Express:
update methods or by directly setting attributes (/python/creating-and-updating-figures/)
theming/templating mechanism (/python/templates/)
Many common styling options can be set directly in the px function call. Every Plotly Express function accepts the following arguments:
set many styling parameters at once (/python/templates/)
Various color-related attributes (/python/colorscales/)
To illustrate each of these, here is a simple, default figure made with Plotly Express. Note the default orderings for the x-axis categories and the usage of lowercase &amp;
snake_case data frame columns for axis labelling.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
ments
e with
plates
ts16/07/2025, 06:08 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 1/6

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex")
fig.show()
Here is the same figure, restyled by adding some extra parameters to the initial Plotly Express call:
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week" ,
            width=600, height=400,
            labels={ # replaces default labels by column name
                "sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts"
            },
            category_orders ={ # replaces default order by column name
                "day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]
            },
            color_discrete_map ={ # replaces default color mapping by value
                "Male": "RebeccaPurple" , "Female" : "MediumPurple"
            },
            template ="simple_white"
            )
fig.show()Sun Sat Thur Fri020040060080010001200140016001800 sex
Female
Male
daysum of total_bill
Thur Fri Sat Sun050010001500Payer Gender
Male
FemaleReceipts by Payer Gender and Day of Week
Day of Weeksum of Receipts
press
ments
e with
plates
ts16/07/2025, 06:08 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 2/6

--- Página 3 ---
Updating or Modifying Figures made with Plotly Express
If none of the built-in Plotly Express arguments allow you to customize the figure the way you need to, you can use 
 on  returned by the PX function to make any further
modifications to the figure. This approach is the one used throughout the Plotly.py documentation to , control 
 and , add  and  etc.
the update_* and add_* methods
(/python/creating-and-updating-figures/)
the plotly.graph_objects.Figure object (/python/graph-objects/)
customize axes (/python/axes/)
legends
(/python/legend/)
colorbars (/python/colorscales/)
shapes (/python/shapes/)
annotations (/python/text-and-annotations/)
Here is the same figure as above, with some additional customizations to the axes and legend via .update_yaxes(), and .update_layout(), as well as some annotations
added via .add_shape() and .add_annotation().
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week vs Target" ,
            width=600, height=400,
            labels={"sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts" },
            category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]},
            color_discrete_map ={"Male": "RebeccaPurple" , "Female" : "MediumPurple" },
            template ="simple_white"
            )
fig.update_yaxes ( # the y-axis is in dollars
    tickprefix ="$", showgrid =True
)
fig.update_layout ( # customize font and legend orientation &amp; position
    font_family ="Rockwell" ,
    legend=dict(
        title=None, orientation ="h", y=1, yanchor="bottom" , x=0.5, xanchor="center"
    )
)
fig.add_shape ( # add a horizontal "target" line
    type="line", line_color ="salmon" , line_width =3, opacity=1, line_dash ="dot",
    x0=0, x1=1, xref="paper", y0=950, y1=950, yref="y"
)
fig.add_annotation ( # add a text callout with arrow
    text="below target!" , x="Fri", y=400, arrowhead =1, showarrow =True
)
fig.show()
Thur Fri Sat Sun$0$500$1000$1500Male FemaleReceipts by Payer Gender and Day of Week vs Target
Day of Weeksum of Receipts
below target!
press
ments
e with
plates
ts16/07/2025, 06:08 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 3/6

--- Página 4 ---
How Plotly Express Works with Templates
Plotly Express methods will use the default template if one is set in plotly.io (by default, this is set to plotly) or in plotly.express.defaults (see below)
The template in use can always be overridden via the template argument to every PX function
The default color_continuous_scale will be the value of layout.colorscales.sequential in the template in use, unless it is overridden via the corresponding
function argument or via plotly.express.defaults (see below)
The default color_discrete_sequence will be the value of layout.colorway in the template in use, unless it is overridden via the corresponding function argument
or via plotly.express.defaults (see below)
Setting Plotly Express Styling Defaults
width and height can be set once globally for all Plotly Express functions
template can override the setting of plotly.io.templates.default for all Plotly Express functions
color_continuous_scale and color_discrete_scale can override the contents of the template in use for all Plotly Express functions that accept these arguments
line_dash_sequence, symbol_sequence and size_max can be set once globally for all Plotly Express functions that accept these arguments
we set the Plotly-wide default template to simple_white, but
we override the default template for Plotly Express to be ggplot2, but
we also set the default color_continuous_scale, and
we set the default height and width to 400 by 600, but
we override the default width to 400 via the function argument.Plotly has a  and figures created with Plotly Express interact smoothly with this system:
theming system based on templates (/python/templates/)
By way of example, in the following figure, simply setting the template argument will automatically change the default continuous color scale, even though we have
not specified color_continuous_scale directly.
import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , template ="seaborn" )
fig.show()
Plotly Express supports a simple default-configuration system via the plotly.express.defaults singleton object. The values of the properties set on this object are used
for the rest of the active session in place of None as the default values for any argument to a PX function with a matching name:
To illustrate this "defaults hierarchy", in the following example:
As a result, any figure produced with Plotly Express thereafter uses the ggplot2 settings for all attributes except for the continuous color scale (visible because
simple_white doesn't set a plot background, and neither the simple_white nor ggplot2 template uses Blackbody as a color scale), and uses the Plotly Express defaults
for height but not width (visible because the figure height is the same as the figure width, despite the default).
2 2.5 3 3.5 4 4.544.555.566.577.58
024681012141618count
sepal_widthsepal_length
press
ments
e with
plates
ts16/07/2025, 06:08 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 4/6

--- Página 5 ---
What About Dash?import plotly.express  as px
import plotly.io  as pio
pio.templates .default = "simple_white"
px.defaults .template  = "ggplot2"
px.defaults .color_continuous_scale  = px.colors.sequential .Blackbody
px.defaults .width = 600
px.defaults .height = 400
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , width=400)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)2 3 45678
567sepal_length
sepal_widthsepal_length
press
ments
e with
plates
ts16/07/2025, 06:08 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 5/6

--- Página 6 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
ments
e with
plates
ts16/07/2025, 06:08 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 6/6</content>
      </file>
      <file name="Subplots in Python.pdf" path="pyvy_2x1/Subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Subplots and Plotly Express
Simple Subplot &gt;  &gt;
Subplots
Subplots in Python
How to make subplots in with Plotly's Python graphing library. Examples of stacked, custom-sized, gridded, and annotated subplots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/subplots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Plotly Express does not support arbitrary subplot capabilities, instead it supports , and it also supports
.
faceting by a given data dimension (/python/facet-plots/)
marginal charts to display distribution information (/python/marginal-plots/)
This page documents the usage of the lower-level plotly.subplots module and the make_subplots function it exposes to construct figures with arbitrary subplots.
Plotly Express faceting uses make_subplots internally so adding traces to Plotly Express facets works just as documented here, with fig.add_trace(..., row=&lt;R&gt;, col=
&lt;C&gt;).
Figures with subplots are created using the make_subplots function from the plotly.subplots module.
Here is an example of creating a figure that includes two scatter traces which are side-by-side since there are 2 columns and 1 row in the subplot layout.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 1/22

--- Página 2 ---
Stacked Subplotsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Side By Side Subplots" )
fig.show()
Here is an example of creating a figure with subplots that are stacked on top of each other since there are 3 rows and 1 column in the subplot layout.1 1.5 2 2.5 344.555.56
20 25 30 35 405055606570trace 0
trace 1Side By Side Subplots
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 2/22

--- Página 3 ---
Multiple Subplotsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=3, cols=1)
fig.add_trace (go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
), row=1, col=1)
fig.add_trace (go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
), row=2, col=1)
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
), row=3, col=1)
fig.update_layout (height=600, width=600, title_text ="Stacked Subplots" )
fig.show()
Here is an example of creating a 2 x 2 subplot grid and populating each subplot with a single scatter trace.3 3.5 4 4.5 510001050110011501200
2 2.5 3 3.5 4100105110115120
0 0.5 1 1.5 21010.51111.512trace 0
trace 1
trace 2Stacked Subplots
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 3/22

--- Página 4 ---
Multiple Subplots with Titlesimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, start_cell ="bottom-left" )
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.show()
The subplot_titles argument to make_subplots can be used to position text annotations as titles for each subplot.
Here is an example of adding subplot titles to a 2 x 2 subplot grid of scatter traces.1 1.5 2 2.5 344.555.56
20 25 30 35 405055606570300 350 400 450 500600650700750800
4000 4500 5000 5500 600070007500800085009000trace 0
trace 1
trace 2
trace 3
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 4/22

--- Página 5 ---
Subplots with Annotationsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    subplot_titles =("Plot 1" , "Plot 2" , "Plot 3" , "Plot 4" ))
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.update_layout (height=500, width=700,
                  title_text ="Multiple Subplots with Titles" )
fig.show()
11.522.5344.555.56
20253035405055606570
300350400450500600650700750800
4000450050005500600070007500800085009000trace 0
trace 1
trace 2
trace 3Multiple Subplots with Titles
Plot 1 Plot 2
Plot 3 Plot 4
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 5/22

--- Página 6 ---
Customize Subplot Column Widths and Row Heightsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[4, 5, 6],
        mode="markers+text" ,
        text=["Text A" , "Text B" , "Text C" ],
        textposition ="bottom center"
    ),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(
        x=[20, 30, 40],
        y=[50, 60, 70],
        mode="markers+text" ,
        text=["Text D" , "Text E" , "Text F" ],
        textposition ="bottom center"
    ),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Subplots with Annotations" )
fig.show()
The column_widths argument to make_subplots can be used to customize the relative widths of the columns in a subplot grid. It should be set to a list of numbers
with a length that matches the cols argument. These number will be normalized, so that they sum to 1, and used to compute the relative widths of the subplot grid
columns. The row_heights argument serves the same purpose for controlling the relative heights of rows in the subplot grid.
Here is an example of creating a figure with two scatter traces in side-by-side subplots. The left subplot is set to be wider than the right one.Text AText BText C
1 1.5 2 2.5 344.555.56
Text DText EText F
20 25 30 35 405055606570trace 0
trace 1Subplots with Annotations
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 6/22

--- Página 7 ---
Subplots in Dashimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2, column_widths =[0.7, 0.3])
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1 1.5 2 2.5 344.555.56
20253035405055606570trace 0
trace 1
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 7/22

--- Página 8 ---
Customizing Subplot AxesSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
After a figure with subplots is created using the make_subplots function, its axis properties (title, font, range, grid style, etc.) can be customized using the
update_xaxes and update_yaxes graph object figure methods. By default, these methods apply to all of the x axes or y axes in the figure. The row and col arguments
can be used to control which axes are targeted by the update.
Here is an example that creates a figure with a 2 x 2 subplot grid, populates each subplot with a scatter trace, and then updates the x and y axis titles for each subplot
individually.

from dash import Dash, dcc, html, Input, Output
from plotly.subplots import make_subplots
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live adjustable subplot-width'),
    dcc.Graph(id="graph"),
    html.P("Subplots Width:"),
    dcc.Slider(
        id='slider-width', min=.1, max=.9,
        value=0.5, step=0.1)
])
@app.callback(
    Output("graph", "figure"),
    Input("slider-width", "value"))
def customize_width(left_width):
    fig = make_subplots(rows=1, cols=2,
        column_widths=[left_width, 1 - left_width])
    fig.add_trace(row=1, col=1,
 t Stt([123] [456]))# l ith dtDOWNLOAD
Live adjustable subplot-width
Subplots Width:1 1.5 2 2.5 344.555.56
20 25 30 35 405055606570 trace 0
trace 1
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 8/22

--- Página 9 ---
Subplots with Shared X-Axesfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
# Initialize figure with subplots
fig = make_subplots (
    rows=2, cols=2, subplot_titles =("Plot 1" , "Plot 2" , "Plot 3" , "Plot 4" )
)
# Add traces
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]), row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]), row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]), row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]), row=2, col=2)
# Update xaxis properties
fig.update_xaxes (title_text ="xaxis 1 title" , row=1, col=1)
fig.update_xaxes (title_text ="xaxis 2 title" , range=[10, 50], row=1, col=2)
fig.update_xaxes (title_text ="xaxis 3 title" , showgrid =False, row=2, col=1)
fig.update_xaxes (title_text ="xaxis 4 title" , type="log", row=2, col=2)
# Update yaxis properties
fig.update_yaxes (title_text ="yaxis 1 title" , row=1, col=1)
fig.update_yaxes (title_text ="yaxis 2 title" , range=[40, 80], row=1, col=2)
fig.update_yaxes (title_text ="yaxis 3 title" , showgrid =False, row=2, col=1)
fig.update_yaxes (title_text ="yaxis 4 title" , row=2, col=2)
# Update title and height
fig.update_layout (title_text ="Customizing Subplot Axes" , height=700)
fig.show()
The shared_xaxes argument to make_subplots can be used to link the x axes of subplots in the resulting figure. The vertical_spacing argument is used to control the
vertical spacing between rows in the subplot grid.
Here is an example that creates a figure with 3 vertically stacked subplots with linked x axes. A small vertical spacing value is used to reduce the spacing between
subplot rows.1 1.5 2 2.5 344.555.56
10 20 30 40 504050607080
300 350 400 450 500600650700750800
4000 4500 50005500600070007500800085009000trace 0
trace 1
trace 2
trace 3Customizing Subplot Axes
xaxis 1 title xaxis 2 title
xaxis 3 title xaxis 4 titleyaxis 1 title
yaxis 2 titleyaxis 3 title
yaxis 4 titlePlot 1 Plot 2
Plot 3 Plot 4
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 9/22

--- Página 10 ---
Subplots with Shared Y-Axesfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=3, cols=1,
                    shared_xaxes =True,
                    vertical_spacing =0.02)
fig.add_trace (go.Scatter(x=[0, 1, 2], y=[10, 11, 12]),
              row=3, col=1)
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[100, 110, 120]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[3, 4, 5], y=[1000, 1100, 1200]),
              row=1, col=1)
fig.update_layout (height=600, width=600,
                  title_text ="Stacked Subplots with Shared X-Axes" )
fig.show()
The shared_yaxes argument to make_subplots can be used to link the y axes of subplots in the resulting figure.
Here is an example that creates a figure with a 2 x 2 subplot grid, where the y axes of each row are linked.10001050110011501200
100105110115120
0 1 2 3 4 51010.51111.512trace 0
trace 1
trace 2Stacked Subplots with Shared X-Axes
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 10/22

--- Página 11 ---
Subplots with Shared Colorscalefrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=2, cols=2, shared_yaxes =True)
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[2, 3, 4]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[5, 5, 5]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.update_layout (height=600, width=600,
                  title_text ="Multiple Subplots with Shared Y-Axes" )
fig.show()
To share colorscale information in multiple subplots, you can use .
coloraxis (https://plotly.com/javascript/reference/scatter/#scatter-marker-line-coloraxis)11.522.532345
2025303540
22.533.5402000400060008000
40004500500055006000trace 0
trace 1
trace 2
trace 3Multiple Subplots with Shared Y-Axes
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 11/22

--- Página 12 ---
Custom Sized Subplot with Subplot Titlesfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2, shared_yaxes =True)
fig.add_trace (go.Bar(x=[1, 2, 3], y=[4, 5, 6],
                    marker=dict(color=[4, 5, 6], coloraxis ="coloraxis" )),
              1, 1)
fig.add_trace (go.Bar(x=[1, 2, 3], y=[2, 3, 5],
                    marker=dict(color=[2, 3, 5], coloraxis ="coloraxis" )),
              1, 2)
fig.update_layout (coloraxis =dict(colorscale ='Bluered_r' ), showlegend =False)
fig.show()
The specs argument to make_subplots is used to configure per-subplot options. specs must be a 2-dimension list with dimensions that match those provided as the
rows and cols arguments. The elements of specs may either be None, indicating no subplot should be initialized starting with this grid cell, or a dictionary containing
subplot options. The colspan subplot option specifies the number of grid columns that the subplot starting in the given cell should occupy. If unspecified, colspan
defaults to 1.
Here is an example that creates a 2 by 2 subplot grid containing 3 subplots. The subplot specs element for position (2, 1) has a colspan value of 2, causing it to span
the full figure width. The subplot specs element for position (2, 2) is None because no subplot begins at this location in the grid.1 2 30123456
1 2 322.533.544.555.56
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 12/22

--- Página 13 ---
Multiple Custom Sized Subplotsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{}, {}],
           [{"colspan" : 2}, None]],
    subplot_titles =("First Subplot" ,"Second Subplot" , "Third Subplot" ))
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2]),
                 row=1, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2]),
                 row=1, col=2)
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[2, 1, 2]),
                 row=2, col=1)
fig.update_layout (showlegend =False, title_text ="Specs with Subplot Title" )
fig.show()
If the print_grid argument to make_subplots is set to True, then a text representation of the subplot grid will be printed.
Here is an example that uses the rowspan and colspan subplot options to create a custom subplot layout with subplots of mixed sizes. The print_grid argument is set
to True so that the subplot grid is printed to the screen.1 1.5 211.52
1 1.5 211.52
1 1.5 2 2.5 311.52Specs with Subplot Title
First Subplot Second Subplot
Third Subplot
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 13/22

--- Página 14 ---
from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=5, cols=2,
    specs=[[{}, {"rowspan" : 2}],
           [{}, None],
           [{"rowspan" : 2, "colspan" : 2}, None],
           [None, None],
           [{}, {}]],
    print_grid =True)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(1,1)"), row=1, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(1,2)"), row=1, col=2)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(2,1)"), row=2, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(3,1)"), row=3, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(5,1)"), row=5, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(5,2)"), row=5, col=2)
fig.update_layout (height=600, width=600, title_text ="specs examples" )
fig.show()
This is the format of your plot grid:
[ (1,1) x,y   ]  ⎡  (1,2) x2,y2 ⎤
[ (2,1) x3,y3 ]  ⎣       :      ⎦
⎡ (3,1) x4,y4           -      ⎤
⎣      :                :      ⎦
[ (5,1) x5,y5 ]  [ (5,2) x6,y6 ]
1 1.5 211.52
1 1.5 211.52
1 1.5 211.52
1 1.2 1.4 1.6 1.8 211.52
1 1.5 211.52
1 1.5 211.52(1,1)
(1,2)
(2,1)
(3,1)
(5,1)
(5,2)specs examples
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 14/22

--- Página 15 ---
Subplots Types
"xy": 2D Cartesian subplot type for scatter, bar, etc. This is the default if no type is specified.
"scene": 3D Cartesian subplot for scatter3d, cone, etc.
"polar": Polar subplot for scatterpolar, barpolar, etc.
"ternary": Ternary subplot for scatterternary.
"mapbox": Mapbox subplot for scattermapbox.
"domain": Subplot type for traces that are individually positioned. pie, parcoords, parcats, etc.
trace type: A trace type name (e.g. "bar", "scattergeo", "carpet", "mesh", etc.) which will be used to determine the appropriate subplot type for that trace.By default, the make_subplots function assumes that the traces that will be added to all subplots are 2-dimensional cartesian traces (e.g. scatter, bar, histogram,
violin, etc.). Traces with other subplot types (e.g. scatterpolar, scattergeo, parcoords, etc.) are supported by specifying the type subplot option in the specs argument
to make_subplots.
Here are the possible values for the type option:
Here is an example that creates and populates a 2 x 2 subplot grid containing 4 different subplot types.
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 15/22

--- Página 16 ---
from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{"type": "xy"}, {"type": "polar"}],
           [{"type": "domain" }, {"type": "scene"}]],
)
fig.add_trace (go.Bar(y=[2, 3, 1]),
              row=1, col=1)
fig.add_trace (go.Barpolar (theta=[0, 45, 90], r=[2, 3, 1]),
              row=1, col=2)
fig.add_trace (go.Pie(values=[2, 3, 1]),
              row=2, col=1)
fig.add_trace (go.Scatter3d (x=[2, 3, 1], y=[0, 0, 0],
                           z=[0.5, 1, 2], mode="lines"),
              row=2, col=2)
fig.update_layout (height=700, showlegend =False)
fig.show()
As an alternative to providing the name of a subplot type (e.g. "xy", "polar", "domain", "scene", etc), the type option may also be set to a string containing the name of
a trace type (e.g. "bar", "barpolar", "pie", "scatter3d", etc.), which will be used to determine the subplot type that is compatible with that trace.
Here is the example above, modified to specify the subplot types using trace type names.0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 16/22

--- Página 17 ---
Side by Side Subplot (low-level API)from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{"type": "bar"}, {"type": "barpolar" }],
           [{"type": "pie"}, {"type": "scatter3d" }]],
)
fig.add_trace (go.Bar(y=[2, 3, 1]),
              row=1, col=1)
fig.add_trace (go.Barpolar (theta=[0, 45, 90], r=[2, 3, 1]),
              row=1, col=2)
fig.add_trace (go.Pie(values=[2, 3, 1]),
              row=2, col=1)
fig.add_trace (go.Scatter3d (x=[2, 3, 1], y=[0, 0, 0],
                           z=[0.5, 1, 2], mode="lines"),
              row=2, col=2)
fig.update_layout (height=700, showlegend =False)
fig.show()
0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 17/22

--- Página 18 ---
Subplots with shared axes (low-level API)import plotly.graph_objects  as go
trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6]
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[50, 60, 70],
    xaxis="x2",
    yaxis="y2"
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        domain=[0, 0.7]
    ),
    xaxis2=dict(
        domain=[0.8, 1]
    ),
    yaxis2=dict(
        anchor="x2"
    )
)
fig = go.Figure(data=data, layout=layout)
fig.show()
1 1.5 2 2.5 344.555.56
20253035405055606570trace 0
trace 1
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 18/22

--- Página 19 ---
import plotly.graph_objects  as go
trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 3, 4]
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[5, 5, 5],
    xaxis="x2",
    yaxis="y"
)
trace3 = go.Scatter(
    x=[2, 3, 4],
    y=[600, 700, 800],
    xaxis="x",
    yaxis="y3"
)
trace4 = go.Scatter(
    x=[4000, 5000, 6000],
    y=[7000, 8000, 9000],
    xaxis="x4",
    yaxis="y4"
)
data = [trace1, trace2, trace3, trace4]
layout = go.Layout(
    xaxis=dict(
        domain=[0, 0.45]
    ),
    yaxis=dict(
        domain=[0, 0.45]
    ),
    xaxis2=dict(
        domain=[0.55, 1]
    ),
    xaxis4=dict(
        domain=[0.55, 1],
        anchor="y4"
    ),
    yaxis3=dict(
        domain=[0.55, 1]
    ),
    yaxis4=dict(
        domain=[0.55, 1],
        anchor="x4"
    )
)
fig = go.Figure(data=data, layout=layout)
fig.show()
1 2 3 42345600650700750800
20 25 30 35 404000 4500 5000 5500 600070007500800085009000 trace 0
trace 1
trace 2
trace 3
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 19/22

--- Página 20 ---
Stacked Subplots with a Shared X-Axis (low-level API)
Setting Subplots on a Figure Directlyimport plotly.graph_objects  as go
trace1 = go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
)
trace2 = go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
    yaxis="y2"
)
trace3 = go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
    yaxis="y3"
)
data = [trace1, trace2, trace3]
layout = go.Layout(
    yaxis=dict(
        domain=[0, 0.33]
    ),
    legend=dict(
        traceorder ="reversed"
    ),
    yaxis2=dict(
        domain=[0.33, 0.66]
    ),
    yaxis3=dict(
        domain=[0.66, 1]
    )
)
fig = go.Figure(data=data, layout=layout)
fig.show()
new in 4.13
Subplots can be added to an already existing figure, provided it doesn't already have subplots. go.Figure.set_subplots accepts all the same arguments as
plotly.subplots.make_subplots.
import plotly.graph_objects  as go
fig = go.Figure().set_subplots (2, 3, horizontal_spacing =0.1)0 1 2 3 4 51010.51111.51210010511011512010001050110011501200trace 2
trace 1
trace 0
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 20/22

--- Página 21 ---
Reference
What About Dash?is equivalent to:
from plotly.subplots  import make_subplots
fig = make_subplots (2, 3, horizontal_spacing =0.1)
All of the x-axis properties are found here:  All of the y-axis
properties are found here: 
https://plotly.com/python/reference/layout/xaxis/ (https://plotly.com/python/reference/layout/xaxis/)
https://plotly.com/python/reference/layout/yaxis/ (https://plotly.com/python/reference/layout/yaxis/)
from plotly.subplots  import make_subplots
help(make_subplots )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Help on function make_subplots in module plotly.subplots:
make_subplots(rows=1, cols=1, shared_xaxes=False, shared_yaxes=False, start_cell='top-left', print_grid=False, horizontal_spacing=None, vertical_spacing=None, su
bplot_titles=None, column_widths=None, row_heights=None, specs=None, insets=None, column_titles=None, row_titles=None, x_title=None, y_title=None, figure=
None, **kwargs) -&gt; plotly.graph_objs._figure.Figure
Return an instance of plotly.graph_objs.Figure with predefined subplots
configured in 'layout'.
Parameters
----------
rows: int (default 1)
Number of rows in the subplot grid. Must be greater than zero.
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 21/22

--- Página 22 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:06 Subplots in Python
https://plotly.com/python/subplots/ 22/22</content>
      </file>
      <file name="Supported css colors in Python.pdf" path="pyvy_2x1/Supported css colors in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Supported CSS Colors &gt;  &gt;
Supported CSS Colors
Supported CSS Colors in Python
A list of supported named CSS Colors
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/supported-colors.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Many properties in Plotly.py for configuring colors support named CSS colors. For example, marker colors:
import plotly.graph_objects  as go
fig = go.Figure([
    go.Bar(
        x=['Jan', 'Feb', 'Mar', 'Apr'],
        y=[20, 14, 25, 16],
        name='Primary Product' ,
        # Named CSS color
        marker_color ='royalblue'
    )
])
fig.show()
These colors are supported in Plotly.py when a property accepts a .
named CSS color (https://developer.mozilla.org/en-US/docs/Web/CSS/named-color)Jan Feb Mar Apr0510152025
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:11 Supported css colors in Python
https://plotly.com/python/css-colors/ 1/4

--- Página 2 ---
Supported Named CSS Colors
aliceblue antiquewhite aqua aquamarine azure
beige bisque black blanchedalmond blue
blueviolet brown burlywood cadetblue chartreuse
chocolate coral cornflowerblue cornsilk crimson
cyan darkblue darkcyan darkgoldenrod darkgray
darkgrey darkgreen darkkhaki darkmagenta darkolivegreen
darkorange darkorchid darkred darksalmon darkseagreen
darkslateblue darkslategray darkslategrey darkturquoise darkviolet
deeppink deepskyblue dimgray dimgrey dodgerblue
firebrick floralwhite forestgreen fuchsia gainsboro
ghostwhite gold goldenrod gray grey
green greenyellow honeydew hotpink indianred
indigo ivory khaki lavender lavenderblush
lawngreen lemonchiffon lightblue lightcoral lightcyan
16/07/2025, 06:11 Supported css colors in Python
https://plotly.com/python/css-colors/ 2/4

--- Página 3 ---
lightgoldenrodyellow lightgray lightgrey lightgreen lightpink
lightsalmon lightseagreen lightskyblue lightslategray lightslategrey
lightsteelblue lightyellow lime limegreen linen
magenta maroon mediumaquamarinemediumblue mediumorchid
mediumpurple mediumseagreenmediumslatebluemediumspringgreenmediumturquoise
mediumvioletred midnightblue mintcream mistyrose moccasin
navajowhite navy oldlace olive olivedrab
orange orangered orchid palegoldenrod palegreen
paleturquoise palevioletred papayawhip peachpuff peru
pink plum powderblue purple red
rosybrown royalblue rebeccapurple saddlebrown salmon
sandybrown seagreen seashell sienna silver
skyblue slateblue slategray slategrey snow
springgreen steelblue tan teal thistle
tomato turquoise violet wheat white
whitesmoke yellow yellowgreen
16/07/2025, 06:11 Supported css colors in Python
https://plotly.com/python/css-colors/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:11 Supported css colors in Python
https://plotly.com/python/css-colors/ 4/4</content>
      </file>
      <file name="Ternary contours in Python.pdf" path="pyvy_2x1/Ternary contours in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Ternary contour plots
Simple ternary contour plot with plotly &gt;  &gt;
Ternary contours
Ternary contours in Python
How to make Ternary Contour Plots in Python with plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/ternary-
contour.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A ternary contour plots represents isovalue lines of a quantity defined inside a , i.e. as a function of three
variables which sum is constant. Coordinates of the ternary plot often correspond to concentrations of three species, and the quantity represented as contours is
some property (e.g., physical, chemical, thermodynamical) varying with the composition.
ternary diagram (https://en.wikipedia.org/wiki/Ternary_plot)
For ternary contour plots, use the  called create_ternary_contour. The figure factory interpolates between given data points in
order to compute the contours.
figure factory (/python/figure-factories/)
Below we represent an example from metallurgy, where the mixing enthalpy is represented as a contour plot for aluminum-copper-yttrium (Al-Cu-Y) alloys.
import plotly.figure_factory  as ff
import numpy as np
Al = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])
Cu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])
Y = 1 - Al - Cu
# synthetic data for mixing enthalpy
# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html
enthalpy  = (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                interp_mode ='cartesian' )
fig.show()
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Al
Y Cu
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
otly
y
ts16/07/2025, 05:59 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 1/6

--- Página 2 ---
Customized ternary contour plot
Ternary contour plot with lines onlyimport plotly.figure_factory  as ff
import numpy as np
Al = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])
Cu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])
Y = 1 - Al - Cu
# synthetic data for mixing enthalpy
# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html
enthalpy  = 2.e6 * (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2 - 5000
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                interp_mode ='cartesian' ,
                                ncontours =20,
                                colorscale ='Viridis' ,
                                showscale =True,
                                title=dict(
                                  text='Mixing enthalpy of ternary alloy'
                                ))
fig.show()
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2
−20k−15k−10k−5k0Mixing enthalpy of ternary alloy
Al
Y Cu
otly
y
ts16/07/2025, 05:59 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 2/6

--- Página 3 ---
Ternary contour plot with data pointsimport plotly.figure_factory  as ff
import numpy as np
Al = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])
Cu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])
Y = 1 - Al - Cu
# synthetic data for mixing enthalpy
# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html
enthalpy  = 2.e6 * (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2 - 5000
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                interp_mode ='cartesian' ,
                                ncontours =20,
                                coloring ='lines')
fig.show()
With showmarkers=True, data points used to compute the contours are also displayed. They are best visualized for contour lines (no solid coloring). At the moment
data points lying on the edges of the diagram are not displayed, this will be improved in future versions.0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Al
Y Cu
otly
y
ts16/07/2025, 05:59 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 3/6

--- Página 4 ---
Interpolation modeimport plotly.figure_factory  as ff
import numpy as np
Al, Cu = np.mgrid[0:1:7j, 0:1:7j]
Al, Cu = Al.ravel(), Cu.ravel()
mask = Al + Cu &lt;= 1
Al, Cu = Al[mask], Cu[mask]
Y = 1 - Al - Cu
enthalpy  = (Al - 0.5) * (Cu - 0.5) * (Y - 1)**2
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                ncontours =20,
                                coloring ='lines',
                                showmarkers =True)
fig.show()
Two modes are available in order to interpolate between data points: interpolation in Cartesian space (interp_mode='cartesian') or interpolation using the 
 (see also 
interp_mode='ilr'. The ilr transformation preserves metrics in the  but is not defined on its edges.
isometric
log-ratio transformation (https://link.springer.com/article/10.1023/A:1023818214614)
preprint
(https://www.researchgate.net/profile/Leon_Parent2/post/What_is_the_best_approach_for_diagnosing_nutrient_disorders_and_formulating_fertilizer_recommendations/at
simplex (https://en.wikipedia.org/wiki/Simplex)0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Al
Y Cu
otly
y
ts16/07/2025, 05:59 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 4/6

--- Página 5 ---
Referencea, b = np.mgrid[0:1:20j, 0:1:20j]
mask = a + b &lt;= 1
a, b = a[mask], b[mask]
coords = np.stack((a, b, 1 - a - b))
value = np.sin(3.2 * np.pi * (a + b)) + np.sin(3 * np.pi * (a - b))
fig = ff.create_ternary_contour (coords, value, ncontours =9)
fig.show()
a, b = np.mgrid[0:1:20j, 0:1:20j]
mask = a + b &lt;= 1
a, b = a[mask], b[mask]
coords = np.stack((a, b, 1 - a - b))
value = np.sin(3.2 * np.pi * (a + b)) + np.sin(3 * np.pi * (a - b))
fig = ff.create_ternary_contour (coords, value, interp_mode ='cartesian' ,
                                ncontours =9)
fig.show()
For more info on ff.create_ternary_contour(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_ternary_contour.html)0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2a
b c
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2a
b c
otly
y
ts16/07/2025, 05:59 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
otly
y
ts16/07/2025, 05:59 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 6/6</content>
      </file>
      <file name="Text and annotations in Python.pdf" path="pyvy_2x1/Text and annotations in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Adding Text to Figures
1. Certain trace types, notably in the scatter family (e.g. scatter, scatter3d, scattergeo etc), support a text attribute, and can be displayed with or without markers.
2. Standalone text annotations can be added to figures using fig.add_annotation(), with or without arrows, and they can be positioned absolutely within the
figure, or they can be positioned relative to the axes of 2d or 3d cartesian subplots i.e. in data coordinates.
Traces can optionally support hover labels and can appear in legends.
Text annotations can be positioned absolutely or relative to data coordinates in 2d/3d cartesian subplots only.
Traces cannot be positioned absolutely but can be positioned relative to data coordinates in any subplot type.
Traces also be used to , although there is a .
Text on scatter plots with Plotly Express &gt;  &gt; Text
and Annotations
Text and Annotations in Python
How to add text labels and annotations to plots in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/text-and-
annotations.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
As a general rule, there are two ways to add text labels to figures:
The differences between these two approaches are that:
draw shapes (/python/shapes/)
shape equivalent to text annotations (/python/shapes/)
Here is an example that creates a scatter plot with text labels using Plotly Express.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 1/28

--- Página 2 ---
import plotly.express  as px
df = px.data.gapminder ().query("year==2007 and continent=='Americas'" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , text="country" , log_x=True, size_max =60)
fig.update_traces (textposition ='top center' )
fig.update_layout (
    height=800,
    title_text ='GDP and Life Expectancy (Americas, 2007)'
)
fig.show()
Argentina
BoliviaBrazilCanada
Chile
ColombiaCosta Rica
Cuba
Dominican RepublicEcuador
El Salvador
Guatemala
HaitiHondurasJamaicaMexico
NicaraguaPanama
Paraguay
PeruPuerto Rico
Trinidad and TobagoUnited States
Uruguay
Venezuela
10002 3 4 5678910k2 3 4 56065707580GDP and Life Expectancy (Americas, 2007)
gdpPercaplifeExp
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 2/28

--- Página 3 ---
Text on scatter plots with Graph Objects
Text positioning in Dashimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[1, 1, 1],
    mode="lines+markers+text" ,
    name="Lines, Markers and Text" ,
    text=["Text A" , "Text B" , "Text C" ],
    textposition ="top center"
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[2, 2, 2],
    mode="markers+text" ,
    name="Markers and Text" ,
    text=["Text D" , "Text E" , "Text F" ],
    textposition ="bottom center"
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[3, 3, 3],
    mode="lines+text" ,
    name="Lines and Text" ,
    text=["Text G" , "Text H" , "Text I" ],
    textposition ="bottom center"
))
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)Text A Text B Text CText D Text E Text FText G Text H Text I
0 0.5 1 1.5 211.522.53 Lines, Markers and Text
Markers and Text
Lines and Text
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 3/28

--- Página 4 ---
Controlling Text Size with uniformtextSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
For the , -like,  and  traces, it is possible to force all the
text labels to have the same size thanks to the uniformtext layout parameter. The minsize attribute sets the font size, and the mode attribute sets what happens for
labels which cannot fit with the desired fontsize: either hide them or show them with overflow.
pie (/python/pie-charts)
bar (/python/bar-charts)
sunburst (/python/sunburst-charts)
treemap (/python/treemaps)
Here is a bar chart with the default behavior which will scale down text to fit.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live control of annotations'),
    html.P("Select text position:"),
    dcc.RadioItems(
        id='pos-x', inline=True,
        options=['left', 'center', 'right'],
        value='center'
    ),
    dcc.RadioItems(
        id='pos-y', inline=True,
        options=['top', 'bottom'],
        value='top'
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
 I t(" ""l")DOWNLOAD
Live control of annotations
Select text position:
leftcenterright
topbottom
AfghanistanAlbania
Algeria
AngolaArgentinaAustraliaAustria
Bahrain
BangladeshBelgium
BeninBoliviaBosnia and Herzegovina
BotswanaBrazilBulgaria
Burkina Faso
BurundiCambodia
CameroonCanada
Central African RepublicChadChile
ChinaColombia
Comoros
ongo, Dem. Rep.Congo, Rep.Costa Rica
Cote d'IvoireCroatiaCuba
Czech RepublicDenmark
DjiboutiDominican RepublicEcuador
EgyptEl Salvador
Equatorial GuineaEritrea
EthiopiaFinlandFrance
GabonGambiaGermany
GhanaGreece
Guatemala
Guinea
Guinea-BissauHaitiHondurasHong Kong, China
HungaryIceland
IndiaIndonesia Iran
IraqIrelandIsraelItaly
JamaicaJapan
Jordan
KenyaKorea, Dem. Rep.Korea, Rep.Kuwait
Lebanon
LesothoLiberiaLibya
Madagascar
MalawiMalaysia
MaliMauritaniaMauritiusMexico
MongoliaMontenegro
Morocco
MozambiqueMyanmar
NamibiaNepalNetherlands New Zealand
Nicaragua
Niger
NigeriaNorway
Oman
PakistanPanama
ParaguayPeru PhilippinesPolandPortugal Puerto Rico
Reunion
Romania
RwandaSao Tome and PrincipeSaudi Arabia
SenegalSerbia
Sierra LeoneSingapore
Slovak RepublicSlovenia
SomaliaSouth AfricaSpain
Sri Lanka
Sudan
SwazilandSwedenSwitzerland
SyriaTaiwan
TanzaniaThailand
TogoTrinidad and TobagoTunisia
Turkey
UgandaUnited KingdomUnited States
Uruguay
Venezuela VietnamWest Bank and Gaza
Yemen, Rep.
ZambiaZimbabwe
345678910002 345678910k2 34564050607080GDP and Life Expectancy (Americas, 2007)
gdpPercaplifeExp
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 4/28

--- Página 5 ---
import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.bar(df, x='continent' , y='pop', color="lifeExp" , text='country' ,
             title="Default behavior: some text is tiny" )
fig.update_traces (textposition ='inside' )
fig.show()
Here is the same figure with uniform text applied: the text for all bars is the same size, with a minimum size of 8. Any text at the minimum size which does not fit in
the bar is hidden.
import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.bar(df, x='continent' , y='pop', color="lifeExp" , text='country' ,
             title="Uniform Text: min size is 8, hidden if can't fit" )
fig.update_traces (textposition ='inside' )
fig.update_layout (uniformtext_minsize =8, uniformtext_mode ='hide')
fig.show()Afghanistan
Albania AlgeriaAngola
Argentina Australia AustriaBahrainBangladesh
BelgiumBeninBolivia
Bosnia and HerzegovinaBotswanaBrazil
BulgariaBurkina FasoBurundiCambodia
CameroonCanada
Central African RepublicChadChileChina
Colombia
Comoros Congo, Dem. Rep.Congo, Rep.Costa Rica
Cote d'Ivoire
CroatiaCuba
Czech RepublicDenmarkDjiboutiDominican RepublicEcuador
EgyptEl Salvador
Equatorial GuineaEritreaEthiopia
FinlandFranceGabonGambia
GermanyGhana
GreeceGuatemalaGuineaGuinea-BissauHaitiHondurasHong Kong, China
HungaryIcelandIndiaIndonesiaIranIraq
IrelandIsrael
ItalyJamaicaJapanJordan
KenyaKorea, Dem. Rep.Korea, Rep.KuwaitLebanon
LesothoLiberiaLibyaMadagascarMalawiMalaysia
MaliMauritaniaMauritius
MexicoMongolia
MontenegroMoroccoMozambiqueMyanmar
NamibiaNepal
Netherlands
New ZealandNicaraguaNigerNigeria
NorwayOmanPakistan
PanamaParaguayPeruPhilippines
PolandPortugalPuerto RicoReunion
RomaniaRwandaSao Tome and PrincipeSaudi Arabia
Senegal
SerbiaSierra LeoneSingapore
Slovak RepublicSloveniaSomaliaSouth Africa
SpainSri Lanka
SudanSwaziland
SwedenSwitzerlandSyriaTaiwan
TanzaniaThailand
Togo
Trinidad and TobagoTunisia
TurkeyUganda
United KingdomUnited StatesUruguayVenezuelaVietnamWest Bank and GazaYemen, Rep.
ZambiaZimbabwe
Asia Europe Africa Americas Oceania00.5B1B1.5B2B2.5B3B3.5B4B
4050607080lifeExpDefault behavior: some text is tiny
continentpop
ChinaIndiaIndonesia
United States
Asia Europe Africa Americas Oceania00.5B1B1.5B2B2.5B3B3.5B4B
4050607080lifeExpUniform Text: min size is 8, hidden if can't fit
continentpop
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 5/28

--- Página 6 ---
Controlling Maximum Text Sizeimport plotly.express  as px
df = px.data.gapminder ().query("continent == 'Asia' and year == 2007" )
fig = px.pie(df, values='pop', names='country' )
fig.update_traces (textposition ='inside' )
fig.update_layout (uniformtext_minsize =12, uniformtext_mode ='hide')
fig.show()
The textfont_size parameter of the the , -like,  and 
traces can be used to set the maximum font size used in the chart. Note that the textfont parameter sets the insidetextfont and outsidetextfont parameter, which
can also be set independently.
pie (/python/pie-charts)
bar (/python/bar-charts)
sunburst (/python/sunburst-charts)
treemap (/python/treemaps)
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Asia' and year == 2007" )
fig = px.pie(df, values='pop', names='country' )
fig.update_traces (textposition ='inside' , textfont_size =14)
fig.show()34.6%29.1%
5.86%
4.44%
3.95%
3.34%
2.39%2.24%1.82%China
India
Indonesia
Pakistan
Bangladesh
Japan
Philippines
Vietnam
Iran
Thailand
Korea, Rep.
Myanmar
Afghanistan
Nepal
Saudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.
Taiwan
Yemen, Rep.
34.6%29.1%
5.86%
4.44%
3.95%
3.34%
2.39%2.24%1.82%1.71%1.29%1.25%0.837%0.758%0.724%0.721%0.651%0.611%0.608%0.583%0.535%0.507%0.371%0.183%0.169%0.159%0.119%0.105%0.103%0.0841%0.0754%0.0657%0.0186%China
India
Indonesia
Pakistan
Bangladesh
Japan
Philippines
Vietnam
Iran
Thailand
Korea, Rep.
Myanmar
Afghanistan
Nepal
Saudi Arabia
Iraq
Malaysia
Korea, Dem. Rep.
Taiwan
Yemen, Rep.
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 6/28

--- Página 7 ---
Text Annotations
Text Annotations with Log AxesAnnotations can be added to a figure using fig.add_annotation().
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]
))
fig.add_annotation (x=2, y=5,
            text="Text annotation with arrow" ,
            showarrow =True,
            arrowhead =1)
fig.add_annotation (x=4, y=4,
            text="Text annotation without arrow" ,
            showarrow =False,
            yshift=10)
fig.update_layout (showlegend =False)
fig.show()
If the x or y positions of an annotation reference a log axis, you need to provide that position as a log10 value when adding the annotation. In this example, the yaxis
is a log axis so we pass the log10 value of 1000 to the annotation's y position.0 1 2 3 4 5 6 7 80123456
Text annotation with arrow
Text annotation without arrow
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 7/28

--- Página 8 ---
import plotly.graph_objects  as go
import math
dates = [
    "2024-01-01" ,
    "2024-01-02" ,
    "2024-01-03" ,
    "2024-01-04" ,
    "2024-01-05" ,
    "2024-01-06" ,
]
y_values  = [1, 30, 70, 100, 1000, 10000000 ]
fig = go.Figure(
    data=[go.Scatter(x=dates, y=y_values , mode="lines+markers" )],
    layout=go.Layout(
        yaxis=dict(
            type="log",
        )
    ),
)
fig.add_annotation (
    x="2024-01-05" ,
    y=math.log10(1000),
    text="Log axis annotation" ,
    showarrow =True,
    xanchor="right",
)
fig.show()
Jan 1
2024Jan 2 Jan 3 Jan 4 Jan 5 Jan 6110100100010k100k1M10M
Log axis annotation
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 8/28

--- Página 9 ---
3D Annotations
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter3d (
    x=["2017-01-01" , "2017-02-10" , "2017-03-20" ],
    y=["A", "B", "C"],
    z=[1, 1000, 100000],
    name="z",
))
fig.update_layout (
    scene=dict(
        xaxis=dict(type="date"),
        yaxis=dict(type="category" ),
        zaxis=dict(type="log"),
        annotations =[
        dict(
            showarrow =False,
            x="2017-01-01" ,
            y="A",
            z=0,
            text="Point 1" ,
            xanchor="left",
            xshift=10,
            opacity=0.7),
        dict(
            x="2017-02-10" ,
            y="B",
            z=4,
            text="Point 2" ,
            textangle =0,
            ax=0,
            ay=-75,
            font=dict(
                color="black",
                size=12
            ),
            arrowcolor ="black",
            arrowsize =3,
            arrowwidth =1,
            arrowhead =1),
        dict(
            x="2017-03-20" ,
            y="C",
            z=5,
            ax=50,
            ay=0,
            text="Point 3" ,
            arrowhead =1,
            xanchor="left",
            yanchor="bottom"
        )]
    ),
)
fig.show()
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 9/28

--- Página 10 ---
Font Color, Size, and Familiy
Use textfont to specify a font family, size, or color.
Point 1Point 2
Point 3
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 10/28

--- Página 11 ---
Font Style, Variant, and Weightimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[1, 1, 1],
    mode="lines+markers+text" ,
    name="Lines, Markers and Text" ,
    text=["Text A" , "Text B" , "Text C" ],
    textposition ="top right" ,
    textfont =dict(
        family="sans serif" ,
        size=18,
        color="crimson"
    )
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[2, 2, 2],
    mode="lines+markers+text" ,
    name="Lines and Text" ,
    text=["Text G" , "Text H" , "Text I" ],
    textposition ="bottom center" ,
    textfont =dict(
        family="sans serif" ,
        size=18,
        color="LightSeaGreen"
    )
))
fig.update_layout (showlegend =False)
fig.show()
New in 5.22
You can also configure a font's variant, style, and weight on textfont. Here, we configure an italic style on the first bar, bold weight on the second, and small-caps as
the font variant on the third.Text A Text B Text Text G Text H Text I
0 0.5 1 1.5 211.21.41.61.82
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 11/28

--- Página 12 ---
Numeric Font Weightimport plotly.graph_objects  as go
from plotly import data
df = data.medals_wide ()
fig = go.Figure(
    data=[
        go.Bar(
            x=df.nation,
            y=df.gold,
            name="Gold",
            marker=dict(color="Gold"),
            text="Gold",
            textfont =dict(style="italic" ),
        ),
        go.Bar(
            x=df.nation,
            y=df.silver,
            name="Silver" ,
            marker=dict(color="MediumTurquoise" ),
            text="Silver" ,
            textfont =dict(weight="bold"),
        ),
        go.Bar(
            x=df.nation,
            y=df.bronze,
            name="Bronze" ,
            marker=dict(color="LightGreen" ),
            text="Bronze" ,
            textfont =dict(variant="small-caps" ),
        ),
    ],
    layout=dict(barcornerradius =15, showlegend =False),
)
fig.show()
New in 5.23
In the previous example, we set a font weight using a keyword value. You can also set font weight using a numeric value.
The font weights that are available depend on the font family that is set. If you set a font weight that isn't available for a particular font family, the weight will be
rounded to the nearest available value.Gold
Gold
GoldSilverSilver
Silver
BRONZE
BRONZEBRONZE
South Korea China Canada0510152025
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 12/28

--- Página 13 ---
Text Caseimport plotly.graph_objects  as go
from plotly import data
df = data.medals_wide ()
fig = go.Figure(
    data=[
        go.Bar(
            x=df.nation,
            y=df.gold,
            name="Gold",
            marker=dict(color="Gold"),
            text="Gold",
            textfont =dict(weight=900, size=17),
        ),
        go.Bar(
            x=df.nation,
            y=df.silver,
            name="Silver" ,
            marker=dict(color="MediumTurquoise" ),
            text="Silver" ,
            textfont =dict(size=17),
        ),
            go.Bar(
            x=df.nation,
            y=df.bronze,
            name="Bronze" ,
            marker=dict(color="LightGreen" ),
            text="Bronze" ,
            textfont =dict(size=17),
        ),
    ],
    layout=dict(barcornerradius =15, showlegend =False),
)
fig.show()
 traces do not support all numeric font weights. When you specify a numeric font weight on scattergl, weights
up to 500 are mapped to the keyword font weight "normal", while weights above 500 are mapped to "bold".
scattergl (https://plotly.com/python/reference/scattergl)
New in 5.23
You can configure text case using the textfont.textcase property. In this example, we set textfont.textcase="upper" to transform the text on all bars to uppercase.Gold
Gold
GoldSilverSilver
Silver
Bronze
BronzeBronze
South Korea China Canada0510152025
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 13/28

--- Página 14 ---
Text Linesimport plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
grouped = df[df.year == 2007].loc[df[df.year == 2007].groupby('continent' )['lifeExp' ].idxmax()]
fig = go.Figure(
    data=go.Bar(
        x=grouped['lifeExp' ],
        y=grouped['continent' ],
        text=grouped['country' ],
        orientation ='h',
        textfont =dict(
            family="sans serif" ,
            size=14,
            # Here we set textcase to "upper.
            # Set to lower" for lowercase text, or "word caps" to capitalize the first letter of each word
            textcase ="upper"
        )
    ),
    layout=go.Layout(
        title_text ='Country with Highest Life Expectancy per Continent, 2007' ,
        yaxis=dict(showticklabels =False)
    )
)
fig.show()
New in 5.23
You can add decoration lines to text using the textfont.lineposition property. This property accepts "under", "over", and "through", or a combination of these
separated by a +.REUNIONCANADAJAPANICELANDAUSTRALIA
0 10 20 30 40 50 60 70 80Country with Highest Life Expectancy per Continent, 2007
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 14/28

--- Página 15 ---
Text Shadowimport plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
grouped = df[df.year == 2002].loc[df[df.year == 2002].groupby('continent' )['lifeExp' ].idxmax()]
fig = go.Figure(
    data=go.Bar(
        x=grouped['lifeExp' ],
        y=grouped['continent' ],
        text=grouped['country' ],
        orientation ='h',
        marker_color ='MediumSlateBlue' ,
        textfont =dict(
            lineposition ="under" # combine different line positions with a "+" to add more than one: "under+over"
        )
    ),
    layout=go.Layout(
        title_text ='Country with Highest Life Expectancy per Continent, 2002' ,
        yaxis=dict(showticklabels =False)
    )
)
fig.show()
New in 5.23
You can apply a shadow effect to text using the textfont.shadow property. This property accepts shadow specifications in the same format as the 
.
text-shadow CSS
property (https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)ReunionCanadaJapanSwitzerlandAustralia
0 10 20 30 40 50 60 70 80Country with Highest Life Expectancy per Continent, 2002
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 15/28

--- Página 16 ---
import plotly.graph_objects  as go
from plotly import data
df = data.gapminder ()
grouped = df[df.year == 1997].loc[df[df.year == 1997].groupby('continent' )['lifeExp' ].idxmax()]
fig = go.Figure(
    data=go.Bar(
        x=grouped['lifeExp' ],
        y=grouped['continent' ],
        text=grouped['country' ],
        orientation ='h',
        textfont =dict(
            shadow="1px 1px 2px pink"
        )
    ),
    layout=go.Layout(
        title_text ='Country with Highest Life Expectancy per Continent, 1997' ,
        yaxis=dict(showticklabels =False)
    )
)
fig.show()
ReunionCanadaJapanSwedenAustralia
0 10 20 30 40 50 60 70 80Country with Highest Life Expectancy per Continent, 1997
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 16/28

--- Página 17 ---
Styling and Coloring Annotations
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]
))
fig.add_trace (go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]
))
fig.add_annotation (
        x=2,
        y=5,
        xref="x",
        yref="y",
        text="max=5",
        showarrow =True,
        font=dict(
            family="Courier New, monospace" ,
            size=16,
            color="#ffffff"
            ),
        align="center" ,
        arrowhead =2,
        arrowsize =1,
        arrowwidth =2,
        arrowcolor ="#636363" ,
        ax=20,
        ay=-30,
        bordercolor ="#c7c7c7" ,
        borderwidth =2,
        borderpad =4,
        bgcolor="#ff7f0e" ,
        opacity=0.8
        )
fig.update_layout (showlegend =False)
fig.show()
0 1 2 3 4 5 6 7 80123456
max=5
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 17/28

--- Página 18 ---
Text Font as an Array - Styling Each Text Element
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scattergeo (
    lat=[45.5, 43.4, 49.13, 51.1, 53.34, 45.24, 44.64, 48.25, 49.89, 50.45],
    lon=[-73.57, -79.24, -123.06, -114.1, -113.28, -75.43, -63.57, -123.21, -97.13,
         -104.6],
    marker={
        "color": ["MidnightBlue" , "IndianRed" , "MediumPurple" , "Orange" , "Crimson" ,
                  "LightSeaGreen" , "RoyalBlue" , "LightSalmon" , "DarkOrange" , "MediumSlateBlue" ],
        "line": {
            "width": 1
        },
        "size": 10
    },
    mode="markers+text" ,
    name="",
    text=["Montreal" , "Toronto" , "Vancouver" , "Calgary" , "Edmonton" , "Ottawa" ,
          "Halifax" ,
          "Victoria" , "Winnepeg" , "Regina" ],
    textfont ={
        "color": ["MidnightBlue" , "IndianRed" , "MediumPurple" , "Gold", "Crimson" ,
                  "LightSeaGreen" ,
                  "RoyalBlue" , "LightSalmon" , "DarkOrange" , "MediumSlateBlue" ],
        "family" : ["Arial, sans-serif" , "Balto, sans-serif" , "Courier New, monospace" ,
                   "Droid Sans, sans-serif" , "Droid Serif, serif" ,
                   "Droid Sans Mono, sans-serif" ,
                   "Gravitas One, cursive" , "Old Standard TT, serif" ,
                   "Open Sans, sans-serif" ,
                   "PT Sans Narrow, sans-serif" , "Raleway, sans-serif" ,
                   "Times New Roman, Times, serif" ],
        "size": [22, 21, 20, 19, 18, 17, 16, 15, 14, 13]
    },
    textposition =["top center" , "middle left" , "top center" , "bottom center" ,
                  "top right" ,
                  "middle left" , "bottom right" , "bottom left" , "top right" ,
                  "top right" ]
))
fig.update_layout (
    title_text ="Canadian cities" ,
    geo=dict(
        lataxis=dict(range=[40, 70]),
        lonaxis=dict(range=[-130, -55]),
        scope="north america"
    )
)
fig.show()
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 18/28

--- Página 19 ---
HTML Tags in Text
The text attribute supports the following HTML tags: &lt;br&gt;,&lt;b&gt;,&lt;a&gt;, &lt;em&gt;, &lt;sup&gt; and &lt;span&gt;. In version 5.23 and later, &lt;s&gt; and &lt;u&gt;are also supported.Montreal
TorontoVancouver
CalgaryEdmonton
OttawaHalifaxVictoriaWinnepegReginaCanadian cities
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 19/28

--- Página 20 ---
Positioning Text Annotations Absolutelyimport plotly.graph_objects  as go
fig = go.Figure(
    data=[
        go.Scatter(
            x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
            y=[0, 1, 3, 2, 4, 3, 4, 6, 5],
            mode="lines+markers" ,
            name="Series 1" ,
        ),
        go.Scatter(
            x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
            y=[0, 4, 5, 1, 2, 2, 3, 4, 2],
            mode="lines+markers" ,
            name="Series 2" ,
        ),
    ],
    layout=go.Layout(
        annotations =[
            dict(
                x=2,
                y=5,
                text="Text annotation using &lt;b&gt;bolded text&lt;/b&gt;, &lt;i&gt;italicized text&lt;/i&gt;, &lt;u&gt;underlined text&lt;/u&gt;, &lt;br&gt;and a new line" ,
                showarrow =True,
                arrowhead =1,
            ),
            dict(
                x=4,
                y=4,
                text="Text annotation with &lt;a href='https://dash.plotly.com'&gt;a link&lt;/a&gt;." ,
                showarrow =False,
                yshift=10,
            ),
        ],
        showlegend =False,
    ),
)
fig.show()
By default, text annotations have xref and yref set to "x" and "y", respectively, meaning that their x/y coordinates are with respect to the axes of the plot. This means
that panning the plot will cause the annotations to move. Setting xref and/or yref to "paper" will cause the x and y attributes to be interpreted in 
.
paper coordinates
(/python/figure-structure/#positioning-with-paper-container-coordinates-or-axis-domain-coordinates)
Try panning or zooming in the following figure:0 1 2 3 4 5 6 7 80123456
Text annotation using bolded text, italicized text, underlined text, 
and a new line
Text annotation with 
a link.
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 20/28

--- Página 21 ---
Adding Annotations Referenced to an Axisimport plotly.express  as px
fig = px.scatter(x=[1, 2, 3], y=[1, 2, 3], title="Try panning or zooming!" )
fig.add_annotation (text="Absolutely-positioned annotation" ,
                  xref="paper", yref="paper",
                  x=0.3, y=0.3, showarrow =False)
fig.show()
To place annotations relative to the length or height of an axis, the string ' domain' can be added after the axis reference in the xref or yref fields. For example:1 1.5 2 2.5 311.522.53Try panning or zooming!
xy
Absolutely-positioned annotation
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 21/28

--- Página 22 ---
Specifying the Text's Position Absolutelyimport plotly.express  as px
import plotly.graph_objects  as go
df = px.data.wind()
fig = px.scatter(df, y="frequency" )
# Set a custom domain to see how the ' domain' string changes the behaviour
fig.update_layout (xaxis=dict(domain=[0, 0.5]), yaxis=dict(domain=[0.25, 0.75]))
fig.add_annotation (
    xref="x domain" ,
    yref="y domain" ,
    # The arrow head will be 25% along the x axis, starting from the left
    x=0.25,
    # The arrow head will be 40% along the y axis, starting from the bottom
    y=0.4,
    text="An annotation referencing the axes" ,
    arrowhead =2,
)
fig.show()
The text coordinates / dimensions of the arrow can be specified absolutely, as long as they use exactly the same coordinate system as the arrowhead. For example:0 50 100012
indexfrequency
An annotation referencing the axes
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 22/28

--- Página 23 ---
Specifying Source Lines or Figure Notes on the Bottom of a Figureimport plotly.express  as px
import plotly.graph_objects  as go
df = px.data.wind()
fig = px.scatter(df, y="frequency" )
fig.update_layout (xaxis=dict(domain=[0, 0.5]), yaxis=dict(domain=[0.25, 0.75]))
fig.add_annotation (
    xref="x domain" ,
    yref="y",
    x=0.75,
    y=1,
    text="An annotation whose text and arrowhead reference the axes and the data" ,
    # If axref is exactly the same as xref, then the text's position is
    # absolute and specified in the same coordinates as xref.
    axref="x domain" ,
    # The same is the case for yref and ayref, but here the coordinates are data
    # coordinates
    ayref="y",
    ax=0.5,
    ay=2,
    arrowhead =2,
)
fig.show()
This example shows how to add a note about the data source or interpretation at the bottom of the figure. This example aligns the note in the bottom right corner
using the title element and container coordinates and then uses an annotation to add a figure title. A near zero container coordinate is an easy and robust way to put
text -- such as a source line or figure note -- at the bottom of a figure. It is easier to specify the bottom of the figure in container coordinates than using paper
coordinates, since uncertainty about the size of legends and x-axis labels make the paper coordinate of the bottom of the figure uncertain. Making the y container
coordinate very slightly positive avoids cutting off the descending strokes of letters like y, p, and q. Only the title command supports container coordinates, so this
example re-purposes the title element to insert the note and re-purposes an annotation element for the title. The top of the figure is typically less cluttered and more
predictable than the bottom of the figure, so an annotation with its bottom at a paper y-coordinate slightly greater than 1 is a reasonable title location on many
graphs.0 50 100012
indexfrequencyAn annotation whose text and arrowhead reference the axes and the data
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 23/28

--- Página 24 ---
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 size='petal_length' , hover_data =['petal_width' ])
fig.update_layout (
        title=dict(text="Note: this is the Plotly title element." ,
                 # keeping this title string short avoids getting the text cut off in small windows
                 # if you need longer text, consider 1) embedding your graphic on a web page and
                 # putting the note in the HTML to use the browser's automated word wrap,
                 # 2) using this approach and also specifying a graph width that shows the whole title,
                 # or 3) using &lt;BR&gt; tags to wrap the text onto multiple lines
                yref="container" ,
                y=0.005,
                 # The "paper" x-coordinates lets us align this with either the right or left
                 # edge of the plot region. 
                 # The code to align this flush with the right edge of the plot area is 
                 # predictable and simple.  
                 # Putting the title in the lower left corner, aligned with the left edge of the axis labeling would
                 # require graph specific coordinate adjustments.
                xref="paper",
                xanchor="right",
                x=1, 
                font=dict(size=12)),
                plot_bgcolor ="white",
  # We move the legend out of the right margin so the right-aligned note is 
  # flush with the right most element of the graph.
  # Here we put the legend in a corner of the graph region
  # because it has consistent coordinates at all screen resolutions.
  legend=dict(
                yanchor="top",
                y=1,
                xanchor="right",
                x=1,
                borderwidth =1)
                )
# Insert a title by repurposing an annotation 
fig.add_annotation (
    yref="paper",
    yanchor="bottom" ,
    y=1.025,  # y = 1 is the top of the plot area; the top is typically uncluttered, so placing 
              # the bottom of the title slightly above the graph region works on a wide variety of graphs
            text="This title is a Plotly annotation" ,
    # Center the title horizontally over the plot area
    xref="paper",
    xanchor="center" ,
    x=0.5, 
    showarrow =False,
    font=dict(size=18)
    )
fig.show()
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 24/28

--- Página 25 ---
Customize Displayed Text with a Text Template
Customize Text TemplateTo show an arbitrary text in your chart you can use , which is a template string used for
rendering the information, and will override . This template string can include variables in %
{variable} format, numbers in , and date in 
. texttemplate customizes the text that appears on your plot vs. 
 that customizes the tooltip text.
texttemplate (https://plotly.com/python/reference/pie/#pie-texttemplate)
textinfo (https://plotly.com/python/reference/treemap/#treemap-textinfo)
d3-format's syntax (https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_forma)
d3-time-format's
syntax (https://github.com/d3/d3-time-format)
hovertemplate
(https://plotly.com/python/reference/pie/#pie-hovertemplate)
import plotly.graph_objects  as go
fig = go.Figure(go.Pie(
    values = [40000000 , 20000000 , 30000000 , 10000000 ],
    labels = ["Wages", "Operating expenses" , "Cost of sales" , "Insurance" ],
    texttemplate  = "%{label}: %{value:$,s} &lt;br&gt;(% {percent} )",
    textposition  = "inside" ))
fig.show()
The following example uses  to customize the added text.
textfont (https://plotly.com/python/reference/scatterternary/#scatterternary-textfont)
2 2.5 3 3.5 4 4.54.555.566.577.58species
setosa
versicolor
virginica
Note: this is the Plotly title element.sepal_widthsepal_lengthThis title is a Plotly annotation
Wages: $40.0000M 
(40%)Cost of sales: $30.0000M 
(30%)
Operating expenses: $20.0000M (20%)Insurance: $10.0000M
 (10%)Wages
Cost of sales
Operating expenses
Insurance
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 25/28

--- Página 26 ---
Set Date in Text Templateimport plotly.graph_objects  as go
fig = go.Figure(go.Scatterternary (
    a = [3, 2, 5],
    b = [2, 5, 2],
    c = [5, 2, 2],
    mode = "markers+text" ,
    text = ["A", "B", "C"],
    texttemplate  = "%{text}&lt;br&gt;(%{a:.2f}, %{b:.2f}, %{c:.2f})",
    textposition  = "bottom center" ,
    textfont  = {'family' : "Times", 'size': [18, 21, 20], 'color': ["IndianRed" , "MediumPurple" , "DarkOrange" ]}
))
fig.show()
The following example shows how to show date by setting  in 
. As you can see  and 
 have the same functionality when you want to determine 'just' the trace information on the graph.
axis.type (https://plotly.com/python/reference/layout/yaxis/#layout-yaxis-type)
funnel charts
(https://plotly.com/python/funnel-charts/)
textinfo (https://plotly.com/python/reference/funnel/#funnel-textinfo)
texttemplate
(https://plotly.com/python/reference/funnel/#funnel-texttemplate)A
(3.00, 2.00, 5.00) B
(2.00, 5.00, 2.00)C
(5.00, 2.00, 2.00)
00.20.40.60.81
1 0.8 0.6 0.4 0.2 010.80.60.40.20Component A
Component B Component C
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 26/28

--- Página 27 ---
Referencefrom plotly import graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Funnel(
    name = 'Montreal' ,
    orientation  = "h",
    y = ["2018-01-01" , "2018-07-01" , "2019-01-01" , "2020-01-01" ],
    x = [100, 60, 40, 20],
    textposition  = "inside" ,
    texttemplate  = "%{y| %a. %_d %b %Y}" ))
fig.add_trace (go.Funnel(
    name = 'Vancouver' ,
    orientation  = "h",
    y = ["2018-01-01" , "2018-07-01" , "2019-01-01" , "2020-01-01" ],
    x = [90, 70, 50, 10],
    textposition  = "inside" ,
    textinfo  = "label"))
fig.update_layout (yaxis = {'type': 'date'})
fig.show()
See  for more information and chart attribute
options!
https://plotly.com/python/reference/layout/annotations/ (https://plotly.com/python/reference/layout/annotations/) Mon.  1 Jan 2018
 Sun.  1 Jul 2018
 Tue.  1 Jan 2019
 Wed.  1 Jan 2020Jan 1, 2018
Jul 1, 2018
Jan 1, 2019
Jan 1, 2020 Jan 2020Jul 2019Jan 2019Jul 2018Jan 2018Montreal
Vancouver
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 27/28

--- Página 28 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ress
jects
ext
Text
utely
an Axis
utely
otes on
xt16/07/2025, 06:07 Text and annotations in Python
https://plotly.com/python/text-and-annotations/ 28/28</content>
      </file>
      <file name="The figure data structure in Python.pdf" path="pyvy_2x1/The figure data structure in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview &gt;  &gt; The
Figure Data Structure
The Figure Data Structure in Python
The structure of a figure - data, traces and layout explained.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/figure-structure.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The plotly Python package exists to  and  graphical figures (i.e. charts, plots,
maps and diagrams) represented by data structures also referred to as figures. The rendering process uses the 
 under the hood although Python developers using this module very rarely need to interact with the Javascript library directly, if ever.
Figures can be represented in Python either as dicts or as instances of the plotly.graph_objects.Figure class, and are serialized as text in 
 before being passed to Plotly.js.
create, manipulate (/python/creating-and-updating-figures/)
render (/python/renderers/)
Plotly.js JavaScript library
(https://plotly.com/javascript/)
JavaScript Object Notation
(JSON) (https://json.org/)
Note: the recommended entry-point into the plotly package is the ,
which consists of Python functions which return fully-populated plotly.graph_objects.Figure objects. This page exists to document the architecture of the
data structure that these objects represent, for users who wish to understand more about how to customize them, or assemble them from 
.
high-level plotly.express module, also known as Plotly Express (/python/plotly-express/)
other
plotly.graph_objects components (/python/graph-objects/)
Viewing the underlying data structure for any plotly.graph_objects.Figure object, including those returned by Plotly Express, can be done via print(fig) or, in JupyterLab,
with the special fig.show("json") renderer. Figures also support fig.to_dict() and fig.to_json() methods. print()ing the figure will result in the often-verbose
layout.template key being represented as ellipses '...' for brevity.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 1/8

--- Página 2 ---
Accessing figure structures in Dashimport plotly.express  as px
fig = px.line(x=["a","b","c"], y=[1,3,2], title="sample figure" )
print(fig)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)Figure({
'data': [{'hovertemplate': 'x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;',
'legendgroup': '',
'line': {'color': '#636efa', 'dash': 'solid'},
'marker': {'symbol': 'circle'},
'mode': 'lines',
'name': '',
'orientation': 'v',
'showlegend': False,
'type': 'scatter',
'x': array(['a', 'b', 'c'], dtype=object),
'xaxis': 'x',
'y':{'bdata':'AQMC''dtype':'i1'}
a b c11.522.53sample figure
xy
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 2/8

--- Página 3 ---
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import json
fig = px.line(
    x=["a","b","c"], y=[1,3,2], # replace with your own data source
    title="sample figure", height=325
)
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Displaying figure structure as JSON'),
    dcc.Graph(id="graph", figure=fig),
    dcc.Clipboard(target_id="structure"),
    html.Pre(
        id='structure',
        style={
            'border': 'thin lightgrey solid',
            'overflowY': 'scroll',
            'height': '275px'
        }
    ),
])DOWNLOAD

Displaying figure structure as JSON
{
  "data": [
    {
      "hovertemplate": "x=%{x}&lt;br&gt;y=%{y}&lt;extra&gt;&lt;/extra&gt;",
      "legendgroup": "",
      "line": {
        "color": "#636efa",
        "dash": "solid"
      },
      "marker": {
        "symbol": "circle"
}a b c11.522.53sample figure
xy
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 3/8

--- Página 4 ---
Figures as Trees of Attributes
The Top-Level data Attribute
Each trace has one of more than 40 possible types (see below for a list organized by subplot type, including e.g. , 
, , ,  etc), and represents a set of
related graphical marks in a figure. Each trace must have a type attribute which defines the other allowable attributes.
Each trace is drawn on a single  whose type must be compatible with the trace's type, or is its own subplot (see below).
Traces may have a single  entry, with the exception of pie and funnelarea traces (see below).
Certain trace types support , which can be controlled by attributes either within the trace,
or within the layout when using the .Plotly.js supports inputs adhering to a well-defined schema, whose overall architecture is explained in this page and which is exhaustively documented in the 
 (which is itself generated from a 
). Figures are represented as trees with named nodes called "attributes". The root
node of the tree has three top-level attributes: data, layout and frames (see below).
Figure
Reference (/python/reference/index/)
machine-readable JSON representation of the schema
(https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json)
Attributes are referred to in text and in the  by their full "path" i.e. the dot-delimited concatenation of their parents. For
example "layout.width" refers to the attribute whose key is "width" inside a dict which is the value associated with a key "layout" at the root of the figure. If one of the
parents is a list rather than a dict, a set of brackets is inserted in the path when referring to the attribute in the abstract, e.g. "layout.annotations[].text". Finally, as
explained below, the top-level "data" attribute defines a list of typed objects called "traces" with the schema dependent upon the type, and these attributes' paths are
listed in the  as "data[type=scatter].name".
Figure Reference (/python/reference/index/)
Figure Reference (/python/reference/index/)
The  which represent non-leaf attributes in the
figure schema and provide a Pythonic API for them. When , attributes can
be set either directly using Python object attributes e.g. fig.layout.title.font.family="Open Sans" or using 
 e.g. fig.update_layout(title_font_family="Open Sans")
plotly.graph_objects module contains an automatically-generated hierarchy of Python classes (/python/graph-objects/)
manipulating a plotly.graph_objects.Figure object (/python/creating-and-updating-figures/)
update methods and "magic underscores" (/python/creating-
and-updating-figures/#magic-underscore-notation)
When building a figure, it is not necessary to populate every attribute of every object. At render-time, 
 for each required unspecified attribute, depending upon the ones that are specified, as documented in the 
. An example of this would be layout.xaxis.range, which may be specified explicitly, but if not will be computed based on the range of x
values for every trace linked to that axis. The JavaScript layer will ignore unknown attributes or malformed values, although the plotly.graph_objects module provides
Python-side validation for attribute values. Note also that if  then default values will be
drawn first from the contents of the template and only if missing from there will the JavaScript layer infer further defaults. The built-in template can be disabled by
setting layout.template="none".
the JavaScript layer will compute default values (/python/figure-
introspection/)
Figure Reference
(/python/reference/index/)
the layout.template key is present (as it is by default) (/python/templates/)
The first of the three top-level attributes of a figure is data, whose value must be a list of dicts referred to as "traces".
scatter (/python/line-and-scatter/)
bar
(/python/bar-charts/)
pie (/python/pie-charts/)
surface (/python/3d-surface-plots/)
choropleth (/python/choropleth-maps/)
subplot (/python/subplots/)
legend (/python/legend/)
continuous color, with an associated colorbar (/python/colorscales/)
coloraxis attribute (/python/colorscales/)
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 4/8

--- Página 5 ---
The Top-Level layout Attribute
Dimensions and margins, which define the bounds of "paper coordinates" (see below)
Figure-wide defaults: , , colors, hover-label and modebar defaults
 and  (positionable in container and/or paper coordinates)
 (positionable in paper coordinates)
Subplots of various types on which can be drawn multiple traces and which are positioned in paper coordinates:
xaxis, yaxis, xaxis2, yaxis3 etc: X and Y cartesian axes, the intersections of which are cartesian subplots
scene, scene2, scene3 etc: 3d scene subplots
ternary, ternary2, ternary3, polar, polar2, polar3, geo, geo2, geo3, map, map2, map3, smith, smith2 etc: ternary, polar, geo, map or smith subplots
Non-data marks which can be positioned in paper coordinates, or in data coordinates linked to 2d cartesian subplots:
annotations: 
shapes: 
images: 
Controls which can be positioned in paper coordinates and which can trigger Plotly.js functions when interacted with by a user:
updatemenus:  and 
sliders: 
The Top-Level frames Attribute
The config Object
Positioning With Paper, Container Coordinates, or Axis Domain Coordinates
2D Cartesian Trace Types and SubplotsThe second of the three top-level attributes of a figure is layout, whose value is referred to in text as "the layout" and must be a dict, containing attributes that control
positioning and configuration of non-data-related parts of the figure such as:
templates (/python/templates/)
fonts (/python/figure-labels/)
Title (/python/figure-labels/)
legend (/python/legend/)
Color axes and associated color bars (/python/colorscales/)
textual annotations with or without arrows (/python/text-and-annotations/)
lines, rectangles, ellipses or open or closed paths (/python/shapes/)
background or decorative images (/python/images/)
single buttons, toggles (/python/custom-buttons/)
dropdown menus (/python/dropdowns/)
slider controls (/python/sliders/)
The third of the three top-level attributes of a figure is frames, whose value must be a list of dicts that define sequential frames in an 
. Each frame contains its own data attribute as well as other parameters. Animations are usually triggered and controlled via controls defined in
layout.sliders and/or layout.updatemenus
animated plot
(/python/animations/)
At , it is also possible to control certain figure behaviors which are not considered part of the figure proper i.e. the behavior of the
"modebar" and how the figure relates to mouse actions like scrolling etc. The object that contains these options is called the 
. It is exposed in Python as the config keyword argument of the .show() method on plotly.graph_objects.Figure objects.
render-time (/python/renderers/)
config, and has its own documentation
page (/python/configuration-options/)
Various figure components configured within the layout of the figure support positioning attributes named x or y, whose values may be specified in "paper
coordinates" (sometimes referred to as "plot fractions" or "normalized coordinates"). Examples include layout.xaxis.domain or layout.legend.x or
layout.annotation[].x.
Positioning in paper coordinates is not done in absolute pixel terms, but rather in terms relative to a coordinate system defined with an origin (0,0) at (layout.margin.l,
layout.margin.b) and a point (1,1) at (layout.width-layout.margin.r, layout.height-layout.margin.t) (note: layout.margin values are pixel values, as are layout.width and
layout.height). Paper coordinate values less than 0 or greater than 1 are permitted, and refer to areas within the plot margins.
To position an object in "paper" coordinates, the corresponding axis reference is set to "paper". For instance a shape's xref attribute would be set to "paper" so that
the x value of the shape refers to its position in paper coordinates.
Note that the contents of the layout.margin attribute are by default computed based on the position and dimensions of certain items like the title or legend, and may
be made dependent on the position and dimensions of tick labels as well when setting the layout.xaxis.automargin attribute to True. This has the effect of
automatically increasing the margin values and therefore shrinking the physical area defined between the (0,0) and (1,1) points. Positioning certain items at paper
coordinates less than 0 or greater than 1 will also trigger this behavior. The layout.width and layout.height, however, are taken as givens, so a figure will never grow or
shrink based on its contents.
The figure title may be positioned using "container coordinates" which have (0,0) and (1,1) anchored at the bottom-left and top-right of the figure, respectively, and
therefore are independent of the values of layout.margin.
Furthermore, shapes, annotations, and images can be placed relative to an axis's domain so that, for instance, an x value of 0.5 would place the object halfway along
the x-axis, regardless of the domain as specified in the layout.xaxis.domain attribute. This behavior can be specified by adding ' domain' to the axis reference in the
axis referencing attribute of the object. For example, setting yref = 'y2 domain' for a shape will refer to the length and position of the axis named y2.
The most commonly-used kind of subplot is a . Traces compatible with these subplots support xaxis and yaxis
attributes whose values must refer to corresponding objects in the layout portion of the figure. For example, if xaxis="x", and yaxis="y" (which is the default) then this
trace is drawn on the subplot at the intersection of the axes configured under layout.xaxis and layout.yaxis, but if xaxis="x2" and yaxis="y3" then the trace is drawn at
two-dimensional Cartesian subplot (/python/axes/)
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 5/8

--- Página 6 ---
scatter-like trace types:  and , which can be used to draw 
, , , , 
 and  and also support 
, , : bar-like trace types which can also be used to draw 
: an aggregating bar-like trace type
 and : 1-dimensional distribution-like trace types
 and : 2-dimensional distribution-like density trace types
,  and : matrix trace types
 and : stock-like trace types
: a special trace type for building , in that other traces can use as subplots (see below)
: multi-dimensional scatter plots which implicitly refer to many 2-d cartesian subplots at once.
3D, Polar, Ternary and Smith Trace Types and Subplots
, which can be used to draw , 
and 
 and : 3d surface trace types
 and : 3d vector field trace types
 and : 3d volume trace types
scatter-like trace types: , which can be used to draw individual markers, 
: useful for  and other polar bar charts
, which can be used to draw individual markers, 
, which can be used to draw individual markers, curves and filled areas
Map Trace Types and Subplots
, which can be used to draw , 
 and filled areas on outline maps
:  on outline maps
, which can be used to draw , 
 and  on tile maps
: colored polygons on tile mapsthe intersection of the axes configured under layout.xaxis2 and layout.yaxis3. Note that attributes such as layout.xaxis and layout.xaxis2 etc do not have to be
explicitly defined, in which case default values will be inferred. Multiple traces of different types can be drawn on the same subplot.
X- and Y-axes support the type attribute, which enables them to represent , 
 or . Axes can also be overlaid on top of one another to create
. 2-d cartesian subplots lend themselves very well to creating 
.
continuous values (type="linear", type="log") (/python/axes/)
temporal values (type="date")
(/python/time-series/)
categorical values (type="category", type="multicategory) (/python/bar-charts/)
dual-axis or multiple-axis charts (/python/multiple-axes/)
"small multiples" figures, also known as facet or
trellis plots (/python/facet-plots/)
The following trace types are compatible with 2d-cartesian subplots via the xaxis and yaxis attributes:
scatter (/python/line-and-scatter/)
scattergl (/python/webgl-vs-svg/)
scatter plots (/python/line-and-
scatter/)
line plots and curves (/python/line-charts/)
time-series plots (/python/time-series/)
bubble charts (/python/bubble-charts/)
dot plots (/python/dot-
plots/)
filled areas (/python/filled-area-plots/)
error bars (/python/error-bars/)
bar (/python/bar-charts/)
funnel (/python/funnel-charts/)
waterfall (/python/waterfall-charts/)
timelines
and Gantt charts (/python/gantt/)
histogram (/python/histograms/)
box (/python/box-plots/)
violin (/python/box-plots/)
histogram2d (/python/2D-Histogram/)
histogram2dcontour (/python/2d-histogram-contour/)
image (/python/imshow/)
heatmap (/python/heatmaps/)
contour (/python/contour-plots/)
ohlc (/python/ohlc-charts/)
candlestick (/python/candlestick-charts/)
carpet (/python/carpet-plot/)
carpet plots (/python/carpet-plot/)
splom (/python/splom/)
Beyond 2D cartesian subplots, figures can include , , 
 and . The following trace types support attributes named scene, polar, smith or ternary, whose values
must refer to corresponding objects in the layout portion of the figure i.e. ternary="ternary2" etc. Note that attributes such as layout.scene and layout.ternary2 etc do
not have to be explicitly defined, in which case default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.
three-dimensional cartesian subplots (/python/3d-charts/)
polar subplots (/python/polar-chart/)
ternary subplots
(/python/ternary-plots/)
smith subplots (/python/smith-charts/)
The following trace types are compatible with 3D subplots via the scene attribute, which contains special :
camera controls (/python/3d-camera-controls/)
scatter3d (/python/3d-scatter-plots/)
individual markers (/python/3d-scatter-plots/)
3d bubble charts (/python/3d-bubble-charts/)
lines and curves (/python/3d-line-plots/)
surface (/python/3d-surface-plots/)
mesh (/python/3d-mesh/)
cone (/python/cone-plot/)
streamtube (/python/streamtube-plot/)
volume (/python/3d-volume-plots/)
isosurface (/python/3d-isosurface-plots/)
The following trace types are compatible with polar subplots via the polar attribute:
scatterpolar and scatterpolargl (/python/polar-chart/)
curves and filled areas (i.e. radar
or spider charts) (/python/radar-chart/)
barpolar (/python/wind-rose-charts/)
wind roses (/python/wind-rose-charts/)
The following trace types are compatible with ternary subplots via the ternary attribute:
scatterternary (/python/ternary-plots/)
curves and filled areas (/python/ternary-contour/)
The following trace types are compatible with smith subplots via the smith attribute:
scattersmith (/python/smith-charts/)
Figures can include two different types of map subplots:  and .
The following trace types support attributes named geo or map, whose values must refer to corresponding objects in the layout i.e. geo="geo2" etc. Note that
attributes such as layout.geo2 and layout.map etc do not have to be explicitly defined, in which case default values will be inferred. Multiple traces of a compatible
type can be placed on the same subplot.
geo subplots for outline maps (/python/map-configuration/)
tile-based maps (/python/tile-map-layers/)
The following trace types are compatible with geo subplots via the geo attribute:
scattergeo (/python/scatter-plots-on-maps/)
individual markers (/python/scatter-plots-on-maps/)
line and curves (/python/lines-
on-maps/)
choropleth (/python/choropleth-maps/)
colored polygons (/python/choropleth-maps/)
The following trace types are compatible with tile map subplots via the map attribute:
scattermap (/python/tile-scatter-maps/)
individual markers (/python/tile-scatter-maps/)
lines and curves (/python/lines-on-tile-
maps/)
filled areas (/python/filled-area-tile-maps/)
choroplethmap (/python/tile-county-choropleth/)
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 6/8

--- Página 7 ---
: density heatmaps on tile maps
Traces Which Are Their Own Subplots
 and : one-level part-to-whole relationships with legend items
 and : hierarchical multi-level part-to-whole relationships
 and : continuous and categorical multidimensional figures with
 and 
: 
: 
: big numbers, , and 
Carpet Trace Types and Subplots
, which can be used to draw individual markers, curves and filled areas
Trace Types, Legends and Color Bars
densitymap (/python/tile-density-heatmaps/)Certain trace types cannot share subplots, and hence have no attribute to map to a corresponding subplot in the layout. Instead, these traces are their own subplot
and support a domain attribute for position, which enables the trace to be positioned in paper coordinates (see below). With the exception of pie and funnelarea,
such traces also do not support legends (see below)
The following trace types are their own subplots and support a domain attribute:
pie (/python/pie-charts/)
funnelarea (/python/waterfall-charts/)
sunburst (/python/sunburst-charts/)
treemap (/python/treemaps/)
parcoords (/python/parallel-coordinates-plot/)
parcats (/python/parallel-categories-diagram/)
parallel coordinates (/python/parallel-coordinates-plot/)
parallel sets (/python/parallel-categories-diagram/)
sankey (/python/sankey-diagram/)
flow diagrams (/python/sankey-diagram/)
table (/python/table/)
text-based tables (/python/table/)
indicator (/python/indicator/)
gauges (/python/gauge-charts/)
bullet charts (/python/bullet-charts/)
Certain trace types use . These support a carpet attribute whose value must match the value of the carpet
attribute of the carpet trace they are to be drawn on. Multiple compatible traces can be placed on the same carpet trace.
traces of type carpet as a subplot (/python/carpet-plot/)
The following trace types are compatible with carpet trace subplots via the carpet attribute:
scattercarpet (/python/carpet-scatter/)
contourcarpet (/python/carpet-plot/)
Traces of most types can be optionally associated with a single legend item in the . Whether or not a given trace appears in the legend is
controlled via the showlegend attribute. Traces which are their own subplots (see above) do not support this, with the exception of traces of type pie and funnelarea
for which every distinct color represented in the trace gets a separate legend item. Users may show or hide traces by clicking or double-clicking on their associated
legend item. Traces that support legend items also support the legendgroup attribute, and all traces with the same legend group are treated the same way during
click/double-click interactions.
legend (/python/legend/)
The fact that legend items are linked to traces means that when using , a figure must have one trace per color in order to get a
meaningful legend.  to make this easy.
discrete color (/python/discrete-color/)
Plotly Express has robust support for discrete color (/python/discrete-color/)
Traces which support  can also be associated with color axes in the layout via the coloraxis attribute. Multiple traces can be
linked to the same color axis. Color axes have a legend-like component called color bars. Alternatively, color axes can be configured within the trace itself.
continuous color (/python/colorscales/)
 
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 7/8

--- Página 8 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
nates
lots
ypes and
ots
s16/07/2025, 06:03 The figure data structure in Python
https://plotly.com/python/figure-structure/ 8/8</content>
      </file>
      <file name="Theming and templates in Python.pdf" path="pyvy_2x1/Theming and templates in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Theming and templates
Using built-in themes
View available themes
Specifying themes in Plotly Express &gt;  &gt; Theming
and templates
Theming and templates in Python
Theming and templates with plotly with Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/templates.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The Plotly Python library comes pre-loaded with several themes that you can get started using right away, and it also provides support for creating and registering
your own themes.
Note on terminology: Theming generally refers to the process of defining default styles for visual elements. Themes in plotly are implemented using objects
called templates. Templates are slightly more general than traditional themes because in addition to defining default styles, templates can pre-populate a
figure with visual elements like annotations, shapes, images, and more. In the documentation we will refer to the overall process of defining default styles
as theming, and when in comes to the plotly API we will talk about how themes are implemented using templates.
To see information about the available themes and the current default theme, display the plotly.io.templates configuration object like this.
import plotly.io  as pio
pio.templates
From this, we can see that the default theme is "plotly", and we can see the names of several additional themes that we can choose from.
All Plotly Express functions accept a template argument that can be set to the name of a registered theme (or to a Template object as discussed later in this section).
Here is an example of using Plotly Express to build and display the same scatter plot with six different themes.Templates configuration
-----------------------
Default template: 'plotly'
Available templates:
['ggplot2', 'seaborn', 'simple_white', 'plotly',
'plotly_white', 'plotly_dark', 'presentation', 'xgridoff',
'ygridoff', 'gridon', 'none']
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 1/24

--- Página 2 ---
import plotly.express  as px
df = px.data.gapminder ()
df_2007 = df.query("year==2007" )
for template  in ["plotly" , "plotly_white" , "plotly_dark" , "ggplot2" , "seaborn" , "simple_white" , "none"]:
    fig = px.scatter(df_2007,
                     x="gdpPercap" , y="lifeExp" , size="pop", color="continent" ,
                     log_x=True, size_max =60,
                     template =template , title="Gapminder 2007: ' %s' theme"  % template )
    fig.show()
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 2/24

--- Página 3 ---
2 345678910002 345678910k2 345674050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'plotly' theme
gdpPercaplifeExp
2 345678910002 345678910k2 345674050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'plotly_white' theme
gdpPercaplifeExp
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'plotly_dark' theme
gdpPercaplifeExp
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 3/24

--- Página 4 ---
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'ggplot2' theme
gdpPercaplifeExp
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'seaborn' theme
gdpPercaplifeExp
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'simple_white' theme
gdpPercaplifeExp
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 4/24

--- Página 5 ---
Specifying themes in graph object figures
The theme for a particular graph object figure can be specified by setting the template property of the figure's layout to the name of a registered theme (or to a
Template object as discussed later in this section). Here is an example of constructing a surface plot and then displaying it with each of six themes.
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: 'none' theme
gdpPercaplifeExp
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 5/24

--- Página 6 ---
import plotly.graph_objects  as go
import pandas as pd
z_data = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv" )
fig = go.Figure(
    data=go.Surface(z=z_data.values),
    layout=go.Layout(
        title=dict(text="Mt Bruno Elevation" ),
        width=500,
        height=500,
    ))
for template  in ["plotly" , "plotly_white" , "plotly_dark" , "ggplot2" , "seaborn" , "simple_white" , "none"]:
    fig.update_layout (template =template , title=dict(text="Mt Bruno Elevation: ' %s' theme"  % template ))
    fig.show()
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 6/24

--- Página 7 ---
050100150200250300350Mt Bruno Elevation: 'plotly' theme
050100150200250300350Mt Bruno Elevation: 'plotly_white' theme
050100150200250300350Mt Bruno Elevation: 'plotly_dark' theme
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 7/24

--- Página 8 ---
050100150200250300350Mt Bruno Elevation: 'ggplot2' theme
050100150200250300350Mt Bruno Elevation: 'seaborn' theme
050100150200250300350Mt Bruno Elevation: 'simple_white' theme
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 8/24

--- Página 9 ---
Specifying a default themes
If a theme is not provided to a Plotly Express function or to a graph object figure, then the default theme is used. The default theme starts out as "plotly", but it can be
changed by setting the plotly.io.templates.default property to the name of a registered theme.
Here is an example of changing to default theme to "plotly_white" and then constructing a scatter plot with Plotly Express without providing a template.
Note: Default themes persist for the duration of a single session, but they do not persist across sessions. If you are working in an IPython kernel, this
means that default themes will persist for the life of the kernel, but they will not persist across kernel restarts.
050100150200250300350Mt Bruno Elevation: 'none' theme
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 9/24

--- Página 10 ---
Disable default theming
Creating themes
Representing themes with Template objects
The template layout propertyimport plotly.io  as pio
import plotly.express  as px
pio.templates .default = "plotly_white"
df = px.data.gapminder ()
df_2007 = df.query("year==2007" )
fig = px.scatter(df_2007,
                 x="gdpPercap" , y="lifeExp" , size="pop", color="continent" ,
                 log_x=True, size_max =60,
                 title="Gapminder 2007: current default theme" )
fig.show()
If you do not wish to use any of the new themes by default, or you want your figures to look exactly the way they did prior to plotly.py version 4, you can disable
default theming by setting the default theme to "none".
import plotly.io  as pio
pio.templates .default = "none"
Themes in plotly.py are represented by instances of the Template class from the plotly.graph_objects.layout module. A Template is a graph object that contains two
top-level properties: layout and data. These template properties are described in their own sections below.
The layout property of a template is a graph object with the exact same structure as the layout property of a figure. When you provide values for properties of the
template's layout, these values will be used as the defaults in any figure that this template is applied to.
Here is an example that creates a template that sets the default title font to size 24 Rockwell, and then constructs a graph object figure with this template.
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: current default theme
gdpPercaplifeExp
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 10/24

--- Página 11 ---
The template data propertyimport plotly.graph_objects  as go
large_rockwell_template  = dict(
    layout=go.Layout(title_font =dict(family="Rockwell" , size=24))
)
fig = go.Figure()
fig.update_layout (title=dict(text="Figure Title" ),
                  template =large_rockwell_template )
fig.show()
Note: this example uses magic underscore notation to write go.Layout(title=dict(font=dict(...))) as go.Layout(title_font=dict(...))
The data property of a template is used to customize the default values of the properties of traces that are added to a figure that the template is applied to. This data
property holds a graph object, with type go.layout.template.Data, that has a property named after each supported trace type. These trace type properties are then
assigned lists or tuples of graph object traces of the corresponding type.
Here is an example that creates a template that sets the default scatter trace markers to be size 20 diamonds, and then constructs a graph object figure with this
template.−1 0 1 2 3 4 5 6−101234Figure Title
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 11/24

--- Página 12 ---
import plotly.graph_objects  as go
diamond_template  = go.layout.Template ()
diamond_template .data.scatter = [go.Scatter(marker=dict(symbol="diamond" , size=20))]
fig = go.Figure()
fig.update_layout (template =diamond_template )
fig.add_scatter (y=[2, 1, 3], mode="markers" )
fig.show()
If a trace type property is set to a list of more than one trace, then the default properties are cycled as more traces are added to the figure. Here is an example that
creates a template that cycles the default marker symbol for scatter traces, and then constructs a figure that uses this template.0 0.5 1 1.5 211.522.53
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 12/24

--- Página 13 ---
Theming object tuple propertiesimport plotly.graph_objects  as go
symbol_template  = go.layout.Template ()
symbol_template .data.scatter = [
    go.Scatter(marker=dict(symbol="diamond" , size=10)),
    go.Scatter(marker=dict(symbol="square" , size=10)),
    go.Scatter(marker=dict(symbol="circle" , size=10)),
]
fig = go.Figure()
fig.update_layout (template =symbol_template )
fig.add_scatter (y=[1, 2, 3], mode="markers" , name="first")
fig.add_scatter (y=[2, 3, 4], mode="markers" , name="second" )
fig.add_scatter (y=[3, 4, 5], mode="markers" , name="third")
fig.add_scatter (y=[4, 5, 6], mode="markers" , name="forth")
fig.show()
Note that because we built the template with a list of 3 scatter trace  (one each for the diamond, square, and circle symbols),
the forth scatter trace in the figure cycles around and takes on the defaults specified in the first template trace (The diamond symbol).
graph objects (/python/graph-objects/)
Some properties in the figure hierarchy are specified as tuples of objects. For example, the text annotations for a graph object figure can be stored as a tuple of
go.layout.Annotation objects in the annotations property of the figure's layout.
To use a template to configure the default properties of all of the elements in an object tuple property (e.g. layout.annotations), use the *defaults property in the
template that corresponds to the tuple property (e.g. layout.template.layout.annotationdefaults). The *defaults template property should be set to a single graph
object that matches the type of the elements of the corresponding tuple. The properties of this *defaults object in the template will be applied to all elements of the
object tuple in the figure that the template is applied to.
Here is an example that creates a template that specifies the default annotation text color, and then constructs a figure that uses this template.0 0.5 1 1.5 2123456first
second
third
forth
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 13/24

--- Página 14 ---
Including tuple elements in a themeimport plotly.graph_objects  as go
annotation_template  = go.layout.Template ()
annotation_template .layout.annotationdefaults  = dict(font=dict(color="crimson" ))
fig = go.Figure()
fig.update_layout (
     template =annotation_template ,
     annotations =[
         dict(text="Look Here" , x=1, y=1),
         dict(text="Look There" , x=2, y=2)
     ]
 )
fig.show()
The previous section described how to use a template to customize the default properties of tuple elements that are added to a figure that the template is applied to.
This is useful for styling, for example, any annotations, shapes, or images that will eventually be added to the figure.
It is also possible for a template to define tuple elements that should be included, as is, in any figure that the template is applied to. This is done by specifying a list of
one or more tuple element graph objects (e.g. go.layout.Annotation objects) as the value of the corresponding tuple property in the template (e.g. at
template.layout.annotations). Note that the name property of these tuple element graph objects must be set to a unique non-empty string.
Here is an example that creates a template that adds a large semi-transparent "DRAFT" watermark to the middle of the figure, and constructs a figure using this
template.−1 0 1 2 3 4 5 6−101234
Look HereLook There
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 14/24

--- Página 15 ---
Customizing theme tuple elements in a figureimport plotly.graph_objects  as go
draft_template  = go.layout.Template ()
draft_template .layout.annotations  = [
    dict(
        name="draft watermark" ,
        text="DRAFT",
        textangle =-30,
        opacity=0.1,
        font=dict(color="black", size=100),
        xref="paper",
        yref="paper",
        x=0.5,
        y=0.5,
        showarrow =False,
    )
]
fig=go.Figure()
fig.update_layout (template =draft_template )
fig.show()
The previous section described how a template can be used to add default tuple element graph objects (e.g. annotations, shapes, or images) to a figure. The
properties of these default tuple elements can be customized from within the figure by adding an tuple element with a templateitemname property that matches the
name property of the template object.
Here is an example, using the same draft_template defined above, that customizes the watermark from within the figure to read "CONFIDENTIAL" rather than
"DRAFT".−1 0 1 2 3 4 5 6−101234
DRAFT
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 15/24

--- Página 16 ---
Registering themes as named templatesimport plotly.graph_objects  as go
draft_template  = go.layout.Template ()
draft_template .layout.annotations  = [
    dict(
        name="draft watermark" ,
        text="DRAFT",
        textangle =-30,
        opacity=0.1,
        font=dict(color="black", size=100),
        xref="paper",
        yref="paper",
        x=0.5,
        y=0.5,
        showarrow =False,
    )
]
fig = go.Figure()
fig.update_layout (
    template =draft_template ,
    annotations =[
        dict(
            templateitemname ="draft watermark" ,
            text="CONFIDENTIAL" ,
        )
    ]
)
fig.show()
The examples above construct and configure a Template object and then pass that object as the template specification to graph object figures (as the layout.template
property) or Plotly Express functions (as the template keyword argument). It is also possible to register custom templates by name so that the name itself can be used
to refer to the template. To register a template, use dictionary-style assignment to associate the template object with a name in the plotly.io.templates configuration
object.
Here is an example of registering the draft watermark template from the previous sections as a template named "draft". Then a graph object figure is created with the
draft template specified by name.−1 0 1 2 3 4 5 6−101234
CONFIDENTIAL
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 16/24

--- Página 17 ---
import plotly.graph_objects  as go
import plotly.io  as pio
pio.templates ["draft"] = go.layout.Template (
    layout_annotations =[
        dict(
            name="draft watermark" ,
            text="DRAFT",
            textangle =-30,
            opacity=0.1,
            font=dict(color="black", size=100),
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow =False,
        )
    ]
)
fig = go.Figure()
fig.update_layout (template ="draft")
fig.show()
Note: this example uses magic underscore notation to write go.layout.Template(layout=dict(annotations=[...])) as `go.layout.Template(layout_annotations=
[...])
It is also possible to set your own custom template as the default so that you do not need to pass it by name when constructing graph object figures or calling Plotly
Express functions.−1 0 1 2 3 4 5 6−101234
DRAFT
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 17/24

--- Página 18 ---
Combining themesimport plotly.graph_objects  as go
import plotly.io  as pio
pio.templates ["draft"] = go.layout.Template (
    layout_annotations =[
        dict(
            name="draft watermark" ,
            text="DRAFT",
            textangle =-30,
            opacity=0.1,
            font=dict(color="black", size=100),
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow =False,
        )
    ]
)
pio.templates .default = "draft"
fig = go.Figure()
fig.show()
You may have noticed that figures displayed with the custom templates defined above do not have the gray background and white gridlines that are part of the
default styling of figures created with plotly.py. The reason for this is that the default styling is specified in a template named "plotly", and specifying a custom
template overrides the default "plotly" template.
If you want the styling of a custom template to be applied on top of the default styling of the "plotly" template, then you will need to combine the custom template
with the "plotly" template. Multiple registered templates (whether built-in or user-defined) can be combined by specifying a template string that contains multiple
template names joined on "+" characters.
Here is an example of setting the default template to be a combination of the built-in "plotly" template and the custom "draft" template from the previous example.−1 0 1 2 3 4 5 6−101234
DRAFT
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 18/24

--- Página 19 ---
import plotly.graph_objects  as go
import plotly.io  as pio
pio.templates ["draft"] = go.layout.Template (
    layout_annotations =[
        dict(
            name="draft watermark" ,
            text="DRAFT",
            textangle =-30,
            opacity=0.1,
            font=dict(color="black", size=100),
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow =False,
        )
    ]
)
pio.templates .default = "plotly+draft"
fig = go.Figure()
fig.show()
Combining themes is also supported by Plotly Express−1 0 1 2 3 4 5 6−101234
DRAFT
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 19/24

--- Página 20 ---
import plotly.io  as pio
import plotly.express  as px
pio.templates ["draft"] = go.layout.Template (
    layout_annotations =[
        dict(
            name="draft watermark" ,
            text="DRAFT",
            textangle =-30,
            opacity=0.1,
            font=dict(color="black", size=100),
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow =False,
        )
    ]
)
pio.templates .default = "plotly+draft"
df = px.data.gapminder ()
df_2007 = df.query("year==2007" )
fig = px.scatter(df_2007,
                 x="gdpPercap" , y="lifeExp" , size="pop", color="continent" ,
                 log_x=True, size_max =60,
                 title="Gapminder 2007: current default theme" )
fig.show()
2 345678910002 345678910k2 34564050607080continent
Asia
Europe
Africa
Americas
Oceania
Gapminder 2007: current default theme
gdpPercaplifeExp
DRAFT
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 20/24

--- Página 21 ---
Saving and distributing custom themes
Examining built-in themesThe easiest way to save and distribute a custom template is to make a *.py file that creates and registers the template when it is imported. Here is an example of the
contents of a file called my_themes.py that creates and registers the "draft" template when it is imported
my_themes.py
import plotly.graph_objects  as go
import plotly.io  as pio
pio.templates ["draft"] = go.layout.Template (
    layout_annotations =[
        dict(
            name="draft watermark" ,
            text="DRAFT",
            textangle =-30,
            opacity=0.1,
            font=dict(color="black", size=100),
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow =False,
        )
    ]
)
To get access to the "draft" template, import the my_themes module.
import my_themes
import plotly.io  as pio
pio.templates .default = "draft"
...
Note: In order for the import to succeed, the my_themes.py file must be on Python's module search path. See
 for
more information.
https://docs.python.org/3/tutorial/modules.html#the-module-search-path (https://docs.python.org/3/tutorial/modules.html#the-module-search-path)
It may be useful to examine the contents and structure of the built-in templates when creating your own custom templates. The Template graph object for a
registered template can be loaded using dictionary-style key access on the plotly.io.templates configuration object. Here is an example of loading the Template graph
object for the "plotly" template, and then displaying the value of the template's layout property.
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 21/24

--- Página 22 ---
import plotly.io  as pio
plotly_template  = pio.templates ["plotly" ]
plotly_template .layout
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 22/24

--- Página 23 ---
Layout({
'annotationdefaults': {'arrowcolor': '#2a3f5f', 'arrowhead': 0, 'arrowwidth': 1},
'autotypenumbers': 'strict',
'coloraxis': {'colorbar': {'outlinewidth': 0, 'ticks': ''}},
'colorscale': {'diverging': [[0, '#8e0152'], [0.1, '#c51b7d'], [0.2,
'#de77ae'], [0.3, '#f1b6da'], [0.4, '#fde0ef'],
[0.5, '#f7f7f7'], [0.6, '#e6f5d0'], [0.7,
'#b8e186'], [0.8, '#7fbc41'], [0.9, '#4d9221'],
[1, '#276419']],
'sequential': [[0.0, '#0d0887'], [0.1111111111111111,
'#46039f'], [0.2222222222222222, '#7201a8'],
[0.3333333333333333, '#9c179e'],
[0.4444444444444444, '#bd3786'],
[0.5555555555555556, '#d8576b'],
[0.6666666666666666, '#ed7953'],
[0.7777777777777778, '#fb9f3a'],
[0.8888888888888888, '#fdca26'], [1.0,
'#f0f921']],
'sequentialminus': [[0.0, '#0d0887'], [0.1111111111111111,
'#46039f'], [0.2222222222222222, '#7201a8'],
[0.3333333333333333, '#9c179e'],
[0.4444444444444444, '#bd3786'],
[0.5555555555555556, '#d8576b'],
[0.6666666666666666, '#ed7953'],
[0.7777777777777778, '#fb9f3a'],
[0.8888888888888888, '#fdca26'], [1.0,
'#f0f921']]},
'colorway': [#636efa, #EF553B, #00cc96, #ab63fa, #FFA15A, #19d3f3, #FF6692,
#B6E880, #FF97FF, #FECB52],
'font': {'color': '#2a3f5f'},
'geo': {'bgcolor': 'white',
'lakecolor': 'white',
'landcolor': '#E5ECF6',
'showlakes': True,
'showland': True,
'subunitcolor': 'white'},
'hoverlabel': {'align': 'left'},
'hovermode': 'closest',
'mapbox': {'style': 'light'},
'paper_bgcolor': 'white',
'plot_bgcolor': '#E5ECF6',
'polar': {'angularaxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''},
'bgcolor': '#E5ECF6',
'radialaxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''}},
'scene': {'xaxis': {'backgroundcolor': '#E5ECF6',
'gridcolor': 'white',
'gridwidth': 2,
'linecolor': 'white',
'showbackground': True,
'ticks': '',
'zerolinecolor': 'white'},
'yaxis': {'backgroundcolor': '#E5ECF6',
'gridcolor': 'white',
'gridwidth': 2,
'linecolor': 'white',
'showbackground': True,
'ticks': '',
'zerolinecolor': 'white'},
'zaxis': {'backgroundcolor': '#E5ECF6',
'gridcolor': 'white',
'gridwidth': 2,
'linecolor': 'white',
'showbackground': True,
'ticks': '',
'zerolinecolor': 'white'}},
'shapedefaults': {'line': {'color': '#2a3f5f'}},
'ternary': {'aaxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''},
'baxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''},
'bgcolor': '#E5ECF6',
'caxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''}},
'title': {'x': 0.05},
'xaxis': {'automargin': True,
'gridcolor': 'white',
'linecolor': 'white',
'ticks': '',
'title': {'standoff': 15},
'zerolinecolor': 'white',
'zerolinewidth': 2},
'yaxis': {'automargin': True,
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 23/24

--- Página 24 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)'gridcolor': 'white',
'linecolor': 'white',
'ticks': '',
'title': {'standoff': 15},
'zerolinecolor': 'white',
'zerolinewidth': 2}
})
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
gures
e objects
e
in a
lates
mes16/07/2025, 06:04 Theming and templates in Python
https://plotly.com/python/templates/ 24/24</content>
      </file>
      <file name="Trisurf plots in Python.pdf" path="pyvy_2x1/Trisurf plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Torus &gt;  &gt; Trisurf Plots
Trisurf Plots in Python
How to make tri-surf plots in Python with Plotly. Trisurfs are formed by replacing the boundaries of a compact surface by touching triangles.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/trisurf.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Trisurf plots can be made using a  as detailed in this page.
figure factory (/python/figure-factories/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 1/5

--- Página 2 ---
Mobius Bandimport plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 20)
v = np.linspace (0, 2*np.pi, 20)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
x = (3 + (np.cos(v)))*np.cos(u)
y = (3 + (np.cos(v)))*np.sin(u)
z = np.sin(v)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         simplices =simplices ,
                         title=dict(text="Torus"), aspectratio =dict(x=1, y=1, z=0.3))
fig.show()
−0.8−0.6−0.4−0.200.20.40.60.8Torus
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 2/5

--- Página 3 ---
Boy's Surfaceimport plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 24)
v = np.linspace (-1, 1, 8)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
tp = 1 + 0.5*v*np.cos(u/2.)
x = tp*np.cos(u)
y = tp*np.sin(u)
z = 0.5*v*np.sin(u/2.)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap ="Portland" ,
                         simplices =simplices ,
                         title=dict(text="Mobius Band" ))
fig.show()
−0.4−0.3−0.2−0.100.10.20.30.4Mobius Band
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 3/5

--- Página 4 ---
Referenceimport plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u=np.linspace (-np.pi/2, np.pi/2, 60)
v=np.linspace (0, np.pi, 60)
u,v=np.meshgrid (u,v)
u=u.flatten()
v=v.flatten()
x = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.cos(2*u) + np.cos(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
y = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.sin(2*u) - np.sin(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
z = (3*(np.cos(v)*np.cos(v)))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
points2D  = np.vstack([u, v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap =['rgb(50, 0, 75)' , 'rgb(200, 0, 200)' , '#c8dcc8' ],
                         show_colorbar =True,
                         simplices =simplices ,
                         title=dict(text="Boy's Surface" ))
fig.show()
For more info on ff.create_trisurf(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_trisurf.html)
0.511.522.5Boy's Surface
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 05:59 Trisurf plots in Python
https://plotly.com/python/trisurf/ 5/5</content>
      </file>
      <file name="Troubleshooting in Python.pdf" path="pyvy_2x1/Troubleshooting in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Version Problems
Import Problems
Dash Problems &gt;  &gt;
Troubleshooting
Troubleshooting in Python
How to troubleshoot import and rendering problems in Plotly with Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/troubleshooting.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In order to follow the examples in this documentation site, you should have the latest version of plotly installed (5.x), as detailed in the 
 guide. This documentation (under ) is compatible with plotly version 4.x but not with
version 3.x, for which the documentation is available under . In general you must also have the correct
version of the underlying Plotly.js rendering engine installed, and the way to do that depends on the environment in which you are rendering figures: Dash, Jupyter
Lab or Classic Notebook, VSCode etc. Read on for details about troubleshooting plotly in these environments.
Getting Started
(/python/getting-started)
https://plotly.com/python (https://plotly.com/python)
https://plotly.com/python/v3 (https://plotly.com/python/v3)
It's very important that you not have a file named plotly.py in the same directory as the Python script you're running, and this includes not naming the script itself
plotly.py, otherwise importing plotly can fail with mysterious error messages.
Beyond this, most import problems or AttributeErrors can be traced back to having multiple versions of plotly installed, for example once with conda and once with
pip. It's often worthwhile to uninstall with both methods before following the  instructions from scratch with one or the other.
You can run the following commands in a terminal to fully remove plotly before installing again:
Getting Started (/python/getting-started)
$ conda uninstall  plotly
$ pip uninstall  plotly
Problems can also arise if you have a file named plotly.py in the same directory as the code you are executing.
If you are encountering problems using plotly with  please first ensure that you have upgraded dash to the latest version, which will
automatically upgrade dash-core-components to the latest version, ensuring that Dash is using an up-to-date version of the Plotly.js rendering engine for plotly. If this
does not resolve your issue, please visit our  and we will be glad to help you out.
Dash (https://dash.plotly.com/)
Dash Community Forum (https://community.plotly.com/)
This is an example of a plotly graph correctly rendering inside dash:
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
amlit16/07/2025, 06:08 Troubleshooting in Python
https://plotly.com/python/troubleshooting/ 1/4

--- Página 2 ---
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import numpy as np
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive plot with custom data source'),
    dcc.Graph(id="graph"),
    html.P("Number of bars:"),
    dcc.Slider(id="slider", min=2, max=10, value=4, step=1),
])
@app.callback(
    Output("graph", "figure"),
    Input("slider", "value"))
def update_bar_chart(size):
    data = np.random.normal(3, 2, size=size) # replace with your own data source
    fig = go.Figure(
        data=[go.Bar(y=data)],
        layout_title_text="Native Plotly rendering in Dash"
    )
    return fig
 (db T )DOWNLOAD
Interactive plot with custom data source
Number of bars:−0.5 0 0.5 1 1.5 2 2.5 3 3.50123456Native Plotly rendering in Dash
2 3 4 5 6 7 8 9 10
amlit16/07/2025, 06:08 Troubleshooting in Python
https://plotly.com/python/troubleshooting/ 2/4

--- Página 3 ---
VSCode Notebook, Nteract and Streamlit Problems
Orca Problems
What About Dash?Plotly figures render in VSCode using a Plotly.js version bundled with the , and
unfortunately it's often a little out of date compared to the latest version of the plotly module, so the very latest features may not work until the following release of
the vscode-python extension. In any case, regularly upgrading your vscode-python extension to the latest version will ensure you have access to the greatest number
of recent features.
vscode-python extension (https://code.visualstudio.com/docs/languages/python)
The situation is similar for environments like Nteract and Streamlit: in these environments you will need a version of these projects that bundles a version Plotly.js that
supports the features in the version of plotly that you are running.
Orca support in Plotly.py is deprecated and will be removed after September 2025. See the  for
details on using Kaleido for static image generation.
Static Image Export page (/python/static-image-export/)
If you get an error message stating that the orca executable that was found is not valid, this may be because another executable with the same name was found on
your system. Please specify the complete path to the Plotly-Orca binary that you downloaded (for instance in the Miniconda folder) with the following command:
plotly.io.orca.config.executable = '/home/your_name/miniconda3/bin/orca'
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST Products
Dash (https://plotly.com/dash/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
amlit16/07/2025, 06:08 Troubleshooting in Python
https://plotly.com/python/troubleshooting/ 3/4

--- Página 4 ---
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION)
Consulting and Training
(https://plotly.com/consulting-and-oem/)About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
amlit16/07/2025, 06:08 Troubleshooting in Python
https://plotly.com/python/troubleshooting/ 4/4</content>
      </file>
      <file name="Usa county choropleth maps in Python.pdf" path="pyvy_2x1/Usa county choropleth maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Deprecation warning
Required Packages
conda install plotly conda install geopandas
FIPS and Values &gt;  &gt; USA County
Choropleth Maps
USA County Choropleth Maps in Python
How to create colormaped representations of USA counties by FIPS values in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/county-
choropleth.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page describes a  for creating map-like figures using . This is no
longer the recommended way to make county-level choropleth maps, instead we recommend using a 
 or the alternative .
legacy "figure factory" method (/python/figure-factories/)
self-filled scatter traces (/python/shapes)
GeoJSON-based approach to making outline choropleth
maps (/python/choropleth-maps/)
tile-based choropleth maps (/python/tile-county-choropleth)
plotly_geo, geopandas, pyshp and shapely must be installed for this figure factory to run.
Run the following commands to install the correct versions of the following modules:
!pip install plotly-geo ==1.0.0
!pip install geopandas ==0.8.1
!pip install pyshp==2.1.2
!pip install shapely==1.7.1
If you are using Windows, follow this post to properly install geopandas and dependencies: 
. If you are using Anaconda, do not use PIP to install the packages above. Instead use conda to install
them:
http://geoffboeing.com/2014/09/using-geopandas-windows/
(http://geoffboeing.com/2014/09/using-geopandas-windows/)
Every US state and county has an assigned ID regulated by the US Federal Government under the term FIPS (Federal Information Processing Standards) codes. There
are state codes and county codes: the 2016 state and county FIPS codes can be found at the 
.
US Census Website (https://www.census.gov/geographies/reference-
files/2016/demo/popest/2016-fips.html)
Combine a state FIPS code (eg. 06 for California) with a county FIPS code of the state (eg. 059 for Orange county) and this new state-county FIPS code (06059) uniquely
refers to the specified state and county.
ff.create_choropleth only needs a list of FIPS codes and a list of values. Each FIPS code points to one county and each corresponding value in values determines the
color of the county.Collecting plotly-geo==1.0.0
Downloading plotly_geo-1.0.0-py3-none-any.whl.metadata (834 bytes)
Downloading plotly_geo-1.0.0-py3-none-any.whl (23.7 MB)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 23.7/23.7 MB156.9 MB/s eta 0:00:00
Installing collected packages: plotly-geo
Successfully installed plotly-geo-1.0.0
Collecting geopandas==0.8.1
Downloading geopandas-0.8.1-py2.py3-none-any.whl.metadata (892 bytes)
Collecting pandas&gt;=0.23.0 (from geopandas==0.8.1)
Downloading pandas-2.3.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (91 kB)
Collecting shapely (from geopandas==0.8.1)
Downloading shapely-2.0.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
Collectingfiona(fromgeopandas==081)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 1/11

--- Página 2 ---
Simple Example
Change the ScopeA simple example of this is a choropleth a few counties in California:
import plotly.figure_factory  as ff
fips = ['06021', '06023', '06027',
        '06029', '06033', '06059',
        '06047', '06049', '06051',
        '06055', '06061']
values = range(len(fips))
fig = ff.create_choropleth (fips=fips, values=values)
fig.layout.template  = None
fig.show()
Even if your FIPS values belong to a single state, the scope defaults to the entire United States as displayed in the example above. Changing the scope of the
choropleth shifts the zoom and position of the USA map. You can define the scope with a list of state names and the zoom will automatically adjust to include the
state outlines of the selected states.
By default scope is set to ['USA'] which the API treats as identical to passing a list of all 50 state names:
['AK', 'AL', 'CA', ...]
State abbreviations (eg. CA) or the proper names (eg. California) as strings are accepted. If the state name is not recognized, the API will throw a Warning and indicate
which FIPS values were ignored.
Another param used in the example below is binning_endpoints. If your values is a list of numbers, you can bin your values into half-open intervals on the real line./home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
10
9
8
7
6
5
4
3
2
1
0
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 2/11

--- Página 3 ---
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'California' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = [
    'rgb(193, 193, 193)' ,
    'rgb(239,239,239)' ,
    'rgb(195, 196, 222)' ,
    'rgb(144,148,194)' ,
    'rgb(101,104,168)' ,
    'rgb(65, 53, 132)'
]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada' , 'Oregon' , ' Idaho' ],
    binning_endpoints =[14348, 63983, 134827, 426762, 2081313], colorscale =colorscale ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5}, round_legend_values =True,
    legend=dict(
      title=dict(
        text='Population by County'
      )
    ),
    title=dict(
      text='California and Nearby States'
    )
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 3/11

--- Página 4 ---
Single State/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
Population by County
&lt; 14,348
14,348 - 63,983
63,983 - 134,827
134,827 - 426,762
426,762 - 2,081,313
&gt; 2,081,313California and Nearby States
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 4/11

--- Página 5 ---
Multiple Statesimport plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'Florida' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
endpts = list(np.mgrid[min(values):max(values):4j])
colorscale  = ["#030512" ,"#1d1d3b" ,"#323268" ,"#3d4b94" ,"#3e6ab0" ,
              "#4989bc" ,"#60a7c7" ,"#85c5d3" ,"#b7e0e4" ,"#eafcfd" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['Florida' ], show_state_data =True,
    colorscale =colorscale , binning_endpoints =endpts, round_legend_values =True,
    plot_bgcolor ='rgb(229,229,229)' ,
    paper_bgcolor ='rgb(229,229,229)' ,
    legend_title ='Population by County' ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5},
    exponent_format =True,
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1.73M - 2.59M
869.20K - 1.73M
8.28K - 869.20K
&lt; 8.28KPopulation by County
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 5/11

--- Página 6 ---
import plotly.figure_factory  as ff
import pandas as pd
NE_states  = ['Connecticut' , 'Maine', 'Massachusetts' , 'New Hampshire' , 'Rhode Island' , 'Vermont' ]
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ].isin(NE_states )]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = [
    'rgb(68.0, 1.0, 84.0)' ,
    'rgb(66.0, 64.0, 134.0)' ,
    'rgb(38.0, 130.0, 142.0)' ,
    'rgb(63.0, 188.0, 115.0)' ,
    'rgb(216.0, 226.0, 25.0)'
]
fig = ff.create_choropleth (
    fips=fips, values=values,
    scope=NE_states , county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5},
    legend_title ='Population per county'
)
fig.update_layout (
    legend_x  = 0,
    annotations  = {'x': -0.12, 'xanchor' : 'left'}
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1537215
933835
897259
862813
806163
755618
744426
681845
628323
551082
499759
465923
402922
297820
283921
274170
215423
199005
187530
165602Population per county
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 6/11

--- Página 7 ---
Simplify County, State Lines
simplify_county determines the simplification factor for the counties. The larger the number, the fewer vertices and edges each polygon has. See
 for more information.
simplify_state simplifies the state outline polygon. See the  for more information.
Default for both simplify_county and simplify_state is 0.02Below is a choropleth that uses several other parameters. For a full list of all available params call help(ff.create_choropleth)
http://toblerity.org/shapely/manual.html#object.simplify (http://toblerity.org/shapely/manual.html#object.simplify)
documentation (http://toblerity.org/shapely/manual.html#object.simplify)
Note: This choropleth uses a divergent categorical colorscale. See  for other cool colorscales.
http://react-colorscales.getforge.io/ (http://react-colorscales.getforge.io/)
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 7/11

--- Página 8 ---
import plotly.figure_factory  as ff
import pandas as pd
scope = ['Oregon' ]
df_sample  = pd.read_csv (
    'https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv'
)
df_sample_r  = df_sample [df_sample ['STNAME' ].isin(scope)]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = ["#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=scope,
    colorscale =colorscale , round_legend_values =True,
    simplify_county =0, simplify_state =0,
    county_outline ={'color': 'rgb(15, 15, 55)' , 'width': 0.5},
    state_outline ={'width': 1},
    legend_title ='pop. per county' ,
    title='Oregon'
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 8/11

--- Página 9 ---
The Entire USA/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
759256
547672
383857
354542
319985
206412
162277
118360
107164
100255
86430
82930
76820
76353
65912
62534
49286
46151
37301
30630Oregon
pop. per county
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 9/11

--- Página 10 ---
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv' )
df_sample ['State FIPS Code' ] = df_sample ['State FIPS Code' ].apply(lambda x: str(x).zfill(2))
df_sample ['County FIPS Code' ] = df_sample ['County FIPS Code' ].apply(lambda x: str(x).zfill(3))
df_sample ['FIPS'] = df_sample ['State FIPS Code' ] + df_sample ['County FIPS Code' ]
colorscale  = ["#f7fbff" ,"#ebf3fb" ,"#deebf7" ,"#d2e3f3" ,"#c6dbef" ,"#b3d2e9" ,"#9ecae1" ,
              "#85bcdb" ,"#6baed6" ,"#57a0ce" ,"#4292c6" ,"#3082be" ,"#2171b5" ,"#1361a9" ,
              "#08519c" ,"#0b4083" ,"#08306b" ]
endpts = list(np.linspace (1, 12, len(colorscale ) - 1))
fips = df_sample ['FIPS'].tolist()
values = df_sample ['Unemployment Rate (%)' ].tolist()
fig = ff.create_choropleth (
    fips=fips, values=values,
    binning_endpoints =endpts,
    colorscale =colorscale ,
    show_state_data =False,
    show_hover =True, centroid_marker ={'opacity' : 0},
    asp=2.9, title='USA by Unemployment %' ,
    legend_title ='% unemployed'
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
&gt; 12.0
11.27 - 12.0
10.53 - 11.27
9.8 - 10.53
9.07 - 9.8
8.33 - 9.07
7.6 - 8.33
6.87 - 7.6
6.13 - 6.87
5.4 - 6.13
4.67 - 5.4
3.93 - 4.67
3.2 - 3.93
2.47 - 3.2
1.73 - 2.47
1.0 - 1.73USA by Unemployment %
% unemployed
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 10/11

--- Página 11 ---
Reference
What About Dash?Also see tile county choropleths made in Python: 
https://plotly.com/python/tile-county-choropleth/ (https://plotly.com/python/tile-county-choropleth/)
For more info on ff.create_choropleth(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_choropleth.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:00 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 11/11</content>
      </file>
      <file name="Version 4 migration guide in Python.pdf" path="pyvy_2x1/Version 4 migration guide in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Upgrading to Version 4
Getting Help
Online features (plotly.plotly) moved to chart-studio package
Replace plotly.api with chart_studio.api
Replace plotly.dashboard_objs with chart_studio.dashboard_objs
Replace plotly.grid_objs with chart_studio.grid_objs
Replace plotly.presentation_objs with chart_studio.presentation_objs
Replace plotly.widgets with chart_studio.widgets &gt;  &gt; Version 4
Migration Guide
Version 4 Migration Guide in Python
Migration guide for upgrading from version 3 to version 4
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/v4-
migration.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Upgrading to version 4 of plotly is a matter of following the instructions in the  guide and reinstalling the packages, subject to
the notices below.
Getting Started (/python/getting-started/)
If you encounter issues in upgrading from version 3 to version 4, please reach out in our  or if you've
found an issue or regression in version 4, please report a 
Community Forum (https://community.plotly.com/c/api/python)
Github Issue (https://github.com/plotly/plotly.py/issues/new)
Prior versions of plotly.py contained functionality for creating figures in both "online" and "offline" modes. In "online" mode figures were uploaded to the Chart Studio
cloud (or on-premise) service, whereas in "offline" mode figures were rendered locally. Version 4 of plotly is "offline"-only: all "online" functionality has been
removed from the main plotly distribution package and moved to the new chart-studio distribution package.
To migrate version 3 "online" functionality, first install the chart-studio package using pip...
$ pip install chart-studio 
 
or conda.
$ conda install -c plotly chart -studio 
 
Then, update your Python import statements to import "online" functionality from the top-level chart_studio package, rather than the top-level plotly package. For
example. replace
from plotly.plotly  import plot, iplot
with
from chart_studio.plotly  import plot, iplot
Similarly,
  1
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 1/8

--- Página 2 ---
Offline features (plotly.offline) replaced by Renderers framework &amp; HTML export
New default themeVersion 4 introduces a new renderers framework that is a generalization of version 3's plotly.offline.init_notebook_mode and plotly.offline.iplot functions for
displaying figures. This is a non-breaking change: the plotly.offline.iplot function is still available and has been reimplemented on top of the renderers framework, so no
changes are required when porting to version 4. Going forward, we recommend using the renderers framework directly. See 
 for more information.
Displaying plotly figures
(/python/renderers)
In version 3, the plotly.offline.plot function was used to export figures to HTML files. In version 4, this function has been reimplemented on top of the new to_html and
write_html functions from the plotly.io module. These functions have a slightly more consistent API (see docstrings for details), and going forward we recommend
using them directly when performing HTML export. When working with a graph object figure, these functions are also available as the .to_html and .write_html figure
methods.
An updated "plotly" theme has been enabled by default in version 4.
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
# Make figure with subplots
fig = make_subplots (rows=1, cols=2, specs=[[{"type": "bar"},
                                            {"type": "surface" }]])
# Add bar traces to subplot (1, 1)
fig.add_trace (go.Bar(y=[2, 1, 3]), row=1, col=1)
fig.add_trace (go.Bar(y=[3, 2, 1]), row=1, col=1)
fig.add_trace (go.Bar(y=[2.5, 2.5, 3.5]), row=1, col=1)
# Add surface trace to subplot (1, 2)
# Read data from a csv
z_data = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv" )
fig.add_surface (z=z_data)
# Hide legend
fig.update_layout (
    showlegend =False,
    title_text ="Default Theme" ,
    height=500,
    width=800,
)
fig.show()
0 1 200.511.522.533.5
050100150200250300350Default Theme
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 2/8

--- Página 3 ---
Add trace return valueYou can revert to the version 3 figure appearance by disabling the default theme as follows:
import plotly.io  as pio
pio.templates .default = "none"
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
# Make figure with subplots
fig = make_subplots (rows=1, cols=2, specs=[[{"type": "bar"},
                                            {"type": "surface" }]])
# Add bar traces to subplot (1, 1)
fig.add_trace (go.Bar(y=[2, 1, 3]), row=1, col=1)
fig.add_trace (go.Bar(y=[3, 2, 1]), row=1, col=1)
fig.add_trace (go.Bar(y=[2.5, 2.5, 3.5]), row=1, col=1)
# Add surface trace to subplot (1, 2)
# Read data from a csv
z_data = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv" )
fig.add_surface (z=z_data)
# Hide legend
fig.update_layout (
    showlegend =False,
    title_text ="Default Theme Disabled" ,
    height=500,
    width=800,
)
fig.show()
# Restore default theme
pio.templates .default = "plotly"
See  for more information on theming in plotly.py version 4.
Theming and templates (/python/templates)
In version 3, the add_trace graph object figure method returned a reference to the newly created trace. This was also the case for the add_{trace_type} methods (e.g.
add_scatter, add_bar, etc.). In version 4, these methods return a reference to the calling figure. This change was made to support method chaining of figure
operations. For example0 1 200.511.522.533.5
050100150200250300350Default Theme Disabled
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 3/8

--- Página 4 ---
from plotly.subplots  import make_subplots
(make_subplots (rows=1, cols=2)
 .add_scatter (y=[2, 1, 3], row=1, col=1)
 .add_bar(y=[3, 2, 1], row=1, col=2)
 .update_layout (
     title_text ="Figure title" ,
     showlegend =False,
     width=800,
     height=500,
 )
 .show())
Code that relied on the add_* methods to return a reference to the newly created trace will need to be updated to access the trace from the returned figure. This can
be done by appending .data[-1] to the add trace expression.
Here is an example of a version 3 code snippet that adds a scatter trace to a figure, assigns the result to a variable named scatter, and then modifies the marker size
of the scatter trace.
import plotly.graph_objs  as go
fig = go.Figure()
scatter = fig.add_trace (go.Scatter(y=[2, 3, 1]))
scatter.marker.size = 20
In version 4, this would be replaced with the following:
import plotly.graph_objects  as go
fig = go.Figure()
scatter = fig.add_trace (go.Scatter(y=[2, 3, 1])).data[-1]
scatter.marker.size = 200 0.5 1 1.5 211.522.53
0 1 200.511.522.53Figure title
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 4/8

--- Página 5 ---
make_subplots updates
New preferred import location
Grid no longer printed by default
New row_heights argument to replace row_widthThe make_subplots function has been overhauled to support all trace types and to support the integration of Plotly Express. Here are a few changes to be aware of
when porting code that uses make_subplots to version 4.
The preferred import location of the make_subplots function is now plotly.subplots.make_subplots. For compatibility, this function is still available as
plotly.tools.make_subplots.
When the print_grid argument to make_subplots is set to True, a text representation of the subplot grid is printed by the make_subplots function. In version 3, the
default value of print_grid was True. In version 4, the default value of print_grid is False.
The legacy argument for specifying the relative height of subplot rows was called row_width. A new row_heights argument has been introduced for this purpose.
Note: Although it is not mentioned in the docstring for plotly.subplots.make_subplots, the legacy row_width argument, with the legacy behavior, is still
available in version 4.
In addition to having a more consistent name, values specified to the new row_heights argument properly honor the start_cell argument. With the legacy row_width
argument, the list of heights was always interpreted from the bottom row to the top row, even if start_cell=="top-left". With the new row_heights argument, the list of
heights is interpreted from top to bottom if start_cell=="top-left" and from bottom to top if start_cell=="bottom-left".
When porting code from row_width to row_heights, the order of the heights list must be reversed if start_cell=="top-left" or start_cell was unspecified.
Here is a version 3 compatible example that uses the row_width argument to create a figure with subplots where the top row is twice as tall as the bottom row.
from plotly.subplots  import make_subplots
fig = make_subplots (
    rows=2, cols=1,
    row_width =[0.33, 0.67],
    start_cell ="top-left" )
fig.add_scatter (y=[2, 1, 3], row=1, col=1)
fig.add_bar(y=[2, 3, 1], row=2, col=1)
fig.show()
0 0.5 1 1.5 211.522.53
−0.5 0 0.5 1 1.5 2 2.50123trace 0
trace 1
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 5/8

--- Página 6 ---
Implementation of shared axes with make_subplotsAnd here is the equivalent, version 4 example. Note how the order to the height list is reversed compared to the example above.
from plotly.subplots  import make_subplots
fig = make_subplots (
    rows=2, cols=1,
    row_heights =[0.67, 0.33],
    start_cell ="top-left" )
fig.add_scatter (y=[2, 1, 3], row=1, col=1)
fig.add_bar(y=[2, 3, 1], row=2, col=1)
fig.show()
The implementation of shared axis support in the make_subplots function has been simplified. Prior to version 4, shared y-axes were implemented by associating a
single yaxis object with multiple xaxis objects, and vica versa.
In version 4, every 2D Cartesian subplot has a dedicated x-axis and and a dedicated y-axis. Axes are now "shared" by being linked together using the matches axis
property.
For legacy code that makes use of the make_subplots and add trace APIs, this change does not require any action on the user's part. However, legacy code that uses
make_subplots to create a figure with shared axes, and then manipulates the axes directly, may require updates. The output of the .print_grid method on a figure
created using make_subplots can be used to identify which axis objects are associated with each subplot.
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2, shared_yaxes =True)
fig.print_grid ()
print(fig)0 0.5 1 1.5 211.522.53
−0.5 0 0.5 1 1.5 2 2.50123trace 0
trace 1
This is the format of your plot grid:
[ (1,1) x,y   ]  [ (1,2) x2,y2 ]
Figure({
'data': [],
'layout': {'template': '...',
'xaxis': {'anchor': 'y', 'domain': [0.0, 0.45]},
'xaxis2': {'anchor': 'y2', 'domain': [0.55, 1.0]},
'yaxis': {'anchor': 'x', 'domain': [0.0, 1.0]},
'yaxis2': {'anchor': 'x2', 'domain': [0.0, 1.0], 'matches': 'y', 'showticklabels': False}}
})
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 6/8

--- Página 7 ---
Trace UIDs
Timezones
Headless image export on Linux with Xvfb.
Removals
fileopt argument removal
Legacy online GraphWidget
Recommended style updates
Import from graph_objects instead of graph_objsIn version 3, all trace graph objects were copied and assigned a new uid property when being added to a Figure. In version 4, these uid properties are only generated
automatically when a trace is added to a FigureWidget. When a trace is added to a standard Figure graph object the input uid, if provided, is accepted as is.
Prior to version 4, when plotly.py was passed a datetime that included a timezone, the datetime was automatically converted to UTC. In version 4, this conversion is
no longer performed, and datetime objects are accepted and displayed in local time.
In version 4, the static image export logic attempts to automatically detect whether to call the orca image export utility using Xvfb. Xvfb is needed for orca to work in a
Linux environment if an X11 display server is not available. By default, Xvfb is used if plotly.py is running on Linux if no X11 display server is detected and Xvfb is
available on the system PATH.
This new behavior can be disabled by setting the use_xvfb orca configuration option to False as follows:
import plotly.io  as pio
pio.orca.config.use_xvfb  = False
The fileopt argument to chart_studio.plotly.plot has been removed, so in-place modifications to previously published figures are no longer supported.
The legacy online-only GraphWidget class has been removed. Please use the plotly.graph_objects.FigureWidget class instead. See the 
 for more information.
Figure Widget Overview
(/python/figurewidget/)
The legacy plotly.graph_objs package has been aliased as plotly.graph_objects because the latter is much easier to communicate verbally. The plotly.graph_objs
package is still available for backward compatibility.
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 7/8

--- Página 8 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
d to
ced by
ce
h
th Xvfb.
of16/07/2025, 06:11 Version 4 migration guide in Python
https://plotly.com/python/v4-migration/ 8/8</content>
      </file>
    </category>
    <category name="pyvy_2x10" path="pyvy_2x10">
      <file name="Click events in Python.pdf" path="pyvy_2x10/Click events in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Update Points Using a Click Callback &gt;  &gt; Click
Events
Click Events in Python
Click Events With FigureWidget
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Chart Events (/python/chart-events)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/click-
events.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
x = np.random.rand(100)
y = np.random.rand(100)
f = go.FigureWidget ([go.Scatter(x=x, y=y, mode='markers' )])
scatter = f.data[0]
colors = ['#a3a7e4' ] * 100
scatter.marker.color = colors
scatter.marker.size = [10] * 100
f.layout.hovermode  = 'closest'
# create our callback function
def update_point (trace, points, selector ):
    c = list(scatter.marker.color)
    s = list(scatter.marker.size)
    for i in points.point_inds :
        c[i] = '#bae2be'
        s[i] = 20
        with f.batch_update ():
            scatter.marker.color = c
            scatter.marker.size = s
scatter.on_click (update_point )
f
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
k16/07/2025, 07:00 Click events in Python
https://plotly.com/python/click-events/ 1/3

--- Página 2 ---
Reference
What About Dash?
See  for even more FigureWidget examples.
these Jupyter notebooks (https://github.com/jonmmease/plotly_ipywidget_notebooks)
import plotly.graph_objects  as go
f = go.FigureWidget ([go.Scatter()])
help(f.data[0].on_click )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside JupyterHelp on method on_click in module plotly.basedatatypes:
on_click(callback, append=False) method of plotly.graph_objs._scatter.Scatter instance
Register function to be called when the user clicks on one or more
points in this trace.
Note: Callbacks will only be triggered when the trace belongs to a
instance of plotly.graph_objs.FigureWidget and it is displayed in an
ipywidget context. Callbacks will not be triggered on figures
that are displayed using plot/iplot.
Parameters
----------
k16/07/2025, 07:00 Click events in Python
https://plotly.com/python/click-events/ 2/3

--- Página 3 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
k16/07/2025, 07:00 Click events in Python
https://plotly.com/python/click-events/ 3/3</content>
      </file>
      <file name="Custom buttons in Python.pdf" path="pyvy_2x10/Custom buttons in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Methods
"restyle": modify data or data attributes
"relayout": modify layout attributes
"update": modify data and layout attributes; combination of "restyle" and "relayout"
"animate": start or pause an )
Restyle Button &gt;  &gt; Custom
Buttons
Custom Buttons in Python
How to add custom buttons to update Plotly chart attributes in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Custom Controls (/python/#controls)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/custom-
buttons.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The 
determines which  will be used to modify the chart. There are 4 possible methods:
updatemenu method (https://plot.ly/python/reference/layout/updatemenus/#layout-updatemenus-items-updatemenu-buttons-items-button-method)
plotly.js function (https://plot.ly/javascript/plotlyjs-function-reference/)
animation (https://plot.ly/python/#animations)
The "restyle" method should be used when modifying the data and data attributes of the graph.
Update One Data Attribute
This example demonstrates how to update a single data attribute: chart type with the "restyle" method.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 1/11

--- Página 2 ---
import plotly.graph_objects  as go
import pandas as pd
# load dataset
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv" )
# create figure
fig = go.Figure()
# Add surface trace
fig.add_trace (go.Surface(z=df.values.tolist(), colorscale ="Viridis" ))
# Update plot sizing
fig.update_layout (
    width=800,
    height=900,
    autosize =False,
    margin=dict(t=0, b=0, l=0, r=0),
    template ="plotly_white" ,
)
# Update 3D scene options
fig.update_scenes (
    aspectratio =dict(x=1, y=1, z=0.7),
    aspectmode ="manual"
)
# Add dropdown
fig.update_layout (
    updatemenus =[
        dict(
            type = "buttons" ,
            direction  = "left",
            buttons=list([
                dict(
                    args=["type", "surface" ],
                    label="3D Surface" ,
                    method="restyle"
                ),
                dict(
                    args=["type", "heatmap" ],
                    label="Heatmap" ,
                    method="restyle"
                )
            ]),
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.11,
            xanchor="left",
            y=1.1,
            yanchor="top"
        ),
    ]
)
# Add annotation
fig.update_layout (
    annotations =[
        dict(text="Trace type:" , showarrow =False,
                             x=0, y=1.08, yref="paper", align="left")
    ]
)
fig.show()
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 2/11

--- Página 3 ---
Update Several Data Attributes
This example demonstrates how to update several data attributes: colorscale, colorscale direction, and line display with the "restyle" method. This example uses the
cmocean python package. You can install this package with pip install cmocean.
100120140160180Trace type:3D SurfaceHeatmap
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 3/11

--- Página 4 ---
import plotly.graph_objects  as go
import pandas as pd
# load dataset
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv" )
# Create figure
fig = go.Figure()
# Add surface trace
fig.add_trace (go.Heatmap(z=df.values.tolist(), colorscale ="Viridis" ))
# Update plot sizing
fig.update_layout (
    width=800,
    height=900,
    autosize =False,
    margin=dict(t=100, b=0, l=0, r=0),
)
# Update 3D scene options
fig.update_scenes (
    aspectratio =dict(x=1, y=1, z=0.7),
    aspectmode ="manual"
)
# Add drowdowns
# button_layer_1_height = 1.08
button_layer_1_height  = 1.12
button_layer_2_height  = 1.065
fig.update_layout (
    updatemenus =[
        dict(
            buttons=list([
                dict(
                    args=["colorscale" , "Viridis" ],
                    label="Viridis" ,
                    method="restyle"
                ),
                dict(
                    args=["colorscale" , "Cividis" ],
                    label="Cividis" ,
                    method="restyle"
                ),
                dict(
                    args=["colorscale" , "Blues"],
                    label="Blues",
                    method="restyle"
                ),
                dict(
                    args=["colorscale" , "Greens" ],
                    label="Greens" ,
                    method="restyle"
                ),
            ]),
            type = "buttons" ,
            direction ="right",
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.1,
            xanchor="left",
            y=button_layer_1_height ,
            yanchor="top"
        ),
        dict(
            buttons=list([
                dict(
                    args=["reversescale" , False],
                    label="False",
                    method="restyle"
                ),
                dict(
                    args=["reversescale" , True],
                    label="True",
                    method="restyle"
                )
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 4/11

--- Página 5 ---
            ]),
            type = "buttons" ,
            direction ="right",
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.13,
            xanchor="left",
            y=button_layer_2_height ,
            yanchor="top"
        ),
        dict(
            buttons=list([
                dict(
                    args=[{"contours.showlines" : False, "type": "contour" }],
                    label="Hide lines" ,
                    method="restyle"
                ),
                dict(
                    args=[{"contours.showlines" : True, "type": "contour" }],
                    label="Show lines" ,
                    method="restyle"
                ),
            ]),
            type = "buttons" ,
            direction ="right",
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.5,
            xanchor="left",
            y=button_layer_2_height ,
            yanchor="top"
        ),
    ]
)
fig.update_layout (
    annotations =[
        dict(text="colorscale" , x=0, xref="paper", y=1.1, yref="paper",
                             align="left", showarrow =False),
        dict(text="Reverse&lt;br&gt;Colorscale" , x=0, xref="paper", y=1.06,
                             yref="paper", showarrow =False),
        dict(text="Lines", x=0.47, xref="paper", y=1.045, yref="paper",
                             showarrow =False)
    ])
fig.show()
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 5/11

--- Página 6 ---
Relayout Button
The "relayout" method should be used when modifying the layout attributes of the graph.
Update One Layout Attribute
This example demonstrates how to update a layout attribute: chart type with the "relayout" method.
0 10 20 30 40 50 6001020304050607080
100120140160180colorscale
Reverse
Colorscale LinesViridisCividisBluesGreens
FalseTrue Hide linesShow lines
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 6/11

--- Página 7 ---
import plotly.graph_objects  as go
# Generate dataset
import numpy as np
np.random.seed(1)
x0 = np.random.normal(2, 0.4, 400)
y0 = np.random.normal(2, 0.4, 400)
x1 = np.random.normal(3, 0.6, 600)
y1 = np.random.normal(6, 0.4, 400)
x2 = np.random.normal(4, 0.2, 200)
y2 = np.random.normal(4, 0.4, 200)
# Create figure
fig = go.Figure()
# Add traces
fig.add_trace (
    go.Scatter(
        x=x0,
        y=y0,
        mode="markers" ,
        marker=dict(color="DarkOrange" )
    )
)
fig.add_trace (
    go.Scatter(
        x=x1,
        y=y1,
        mode="markers" ,
        marker=dict(color="Crimson" )
    )
)
fig.add_trace (
    go.Scatter(
        x=x2,
        y=y2,
        mode="markers" ,
        marker=dict(color="RebeccaPurple" )
    )
)
# Add buttons that add shapes
cluster0  = [dict(type="circle" ,
                            xref="x", yref="y",
                            x0=min(x0), y0=min(y0),
                            x1=max(x0), y1=max(y0),
                            line=dict(color="DarkOrange" ))]
cluster1  = [dict(type="circle" ,
                            xref="x", yref="y",
                            x0=min(x1), y0=min(y1),
                            x1=max(x1), y1=max(y1),
                            line=dict(color="Crimson" ))]
cluster2  = [dict(type="circle" ,
                            xref="x", yref="y",
                            x0=min(x2), y0=min(y2),
                            x1=max(x2), y1=max(y2),
                            line=dict(color="RebeccaPurple" ))]
fig.update_layout (
    updatemenus =[
        dict(
            type="buttons" ,
            buttons=[
                dict(label="None",
                     method="relayout" ,
                     args=["shapes" , []]),
                dict(label="Cluster 0" ,
                     method="relayout" ,
                     args=["shapes" , cluster0 ]),
                dict(label="Cluster 1" ,
                     method="relayout" ,
                     args=["shapes" , cluster1 ]),
                dict(label="Cluster 2" ,
                     method="relayout" ,
                     args=["shapes" , cluster2 ]),
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 7/11

--- Página 8 ---
Update Button                dict(label="All",
                     method="relayout" ,
                     args=["shapes" , cluster0  + cluster1  + cluster2 ])
            ],
        )
    ]
)
# Update remaining layout properties
fig.update_layout (
    title_text ="Highlight Clusters" ,
    showlegend =False,
)
fig.show()
The "update" method should be used when modifying the data and layout sections of the graph.
This example demonstrates how to update which traces are displayed while simultaneously updating layout attributes such as the chart title and annotations.1 1.5 2 2.5 3 3.5 4 4.51234567Highlight Clusters
None
Cluster 0
Cluster 1
Cluster 2
All
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 8/11

--- Página 9 ---
import plotly.graph_objects  as go
import pandas as pd
# Load dataset
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv" )
df.columns = [col.replace("AAPL.", "") for col in df.columns]
# Initialize figure
fig = go.Figure()
# Add Traces
fig.add_trace (
    go.Scatter(x=list(df.index),
               y=list(df.High),
               name="High",
               line=dict(color="MediumSlateBlue" )))
fig.add_trace (
    go.Scatter(x=list(df.index),
               y=[df.High.mean()] * len(df.index),
               name="High Average" ,
               visible=False,
               line=dict(color="MediumSlateBlue" , dash="dash")))
fig.add_trace (
    go.Scatter(x=list(df.index),
               y=list(df.Low),
               name="Low",
               line=dict(color="DarkOrange" )))
fig.add_trace (
    go.Scatter(x=list(df.index),
               y=[df.Low.mean()] * len(df.index),
               name="Low Average" ,
               visible=False,
               line=dict(color="DarkOrange" , dash="dash")))
# Add Annotations and Buttons
high_annotations  = [dict(x=-0.05,
                         y=df.High.mean(),
                         xanchor="right",
                         yanchor="bottom" ,
                         xref="x domain" ,
                         yref="y",
                         text="High Avg:&lt;br&gt; %.2f" % df.High.mean(),
                         showarrow =False),
                    dict(x=df.High.idxmax(),
                         y=df.High.max(),
                         xref="x",
                         yref="y",
                         text="High Max:&lt;br&gt; %.2f" % df.High.max(),
                         ax=0, ay=-40)]
low_annotations  = [dict(x=-0.05,
                        y=df.Low.mean(),
                        xanchor="right",
                        yanchor="top",
                        xref="x domain" ,
                        yref="y",
                        text="Low Avg:&lt;br&gt; %.2f" % df.Low.mean(),
                        showarrow =False),
                   dict(x=df.Low.idxmin(),
                        y=df.Low.min(),
                        xref="x",
                        yref="y",
                        text="Low Min:&lt;br&gt; %.2f" % df.Low.min(),
                        ax=0, ay=40)]
fig.update_layout (
    updatemenus =[
        dict(
            type="buttons" ,
            direction ="right",
            active=0,
            x=0.57,
            y=1.2,
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 9/11

--- Página 10 ---
Animate Button
Reference            buttons=list([
                dict(label="None",
                     method="update" ,
                     args=[{"visible" : [True, False, True, False]},
                           {"title": "Yahoo",
                            "annotations" : []}]),
                dict(label="High",
                     method="update" ,
                     args=[{"visible" : [True, True, False, False]},
                           {"title": "Yahoo High" ,
                            "annotations" : high_annotations }]),
                dict(label="Low",
                     method="update" ,
                     args=[{"visible" : [False, False, True, True]},
                           {"title": "Yahoo Low" ,
                            "annotations" : low_annotations }]),
                dict(label="Both",
                     method="update" ,
                     args=[{"visible" : [True, True, True, True]},
                           {"title": "Yahoo",
                            "annotations" : high_annotations  + low_annotations }]),
            ]),
        )
    ])
# Set title
fig.update_layout (
    title_text ="Yahoo",
    xaxis_domain =[0.05, 1.0]
)
fig.show()
Refer to our animation docs:  for examples on how to use the animate method with
Plotly buttons.
https://plotly.com/python/#animations (https://plotly.com/python/#animations)
See  for more information about updatemenu
buttons.
https://plotly.com/python/reference/layout/updatemenus/ (https://plotly.com/python/reference/layout/updatemenus/)0 100 200 300 400 50090100110120130High
LowYahoo NoneHighLowBoth
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 10/11

--- Página 11 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:02 Custom buttons in Python
https://plotly.com/python/custom-buttons/ 11/11</content>
      </file>
      <file name="Dropdown menus in Python.pdf" path="pyvy_2x10/Dropdown menus in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Methods
"restyle": modify data or data attributes
"relayout": modify layout attributes
"update": modify data and layout attributes
"animate": start or pause an 
Restyle Dropdown
Update One Data Attribute &gt;  &gt; Dropdown
Menus
Dropdown Menus in Python
How to add dropdowns to update Plotly chart attributes in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Custom Controls (/python/#controls)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/dropdowns.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The  determines which 
 will be used to modify the chart. There are 4 possible methods:
updatemenu method (https://plotly.com/python/reference/layout/updatemenus/#layout-updatemenus-buttons-method)
plotly.js function
(https://plotly.com/javascript/plotlyjs-function-reference/)
animation (https://plotly.com/python/#animations)
The "restyle" method should be used when modifying the data and data attributes of the graph.
This example demonstrates how to update a single data attribute: chart type with the "restyle" method.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 1/13

--- Página 2 ---
import plotly.graph_objects  as go
import pandas as pd
# load dataset
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv" )
# create figure
fig = go.Figure()
# Add surface trace
fig.add_trace (go.Surface(z=df.values.tolist(), colorscale ="Viridis" ))
# Update plot sizing
fig.update_layout (
    width=800,
    height=900,
    autosize =False,
    margin=dict(t=0, b=0, l=0, r=0),
    template ="plotly_white" ,
)
# Update 3D scene options
fig.update_scenes (
    aspectratio =dict(x=1, y=1, z=0.7),
    aspectmode ="manual"
)
# Add dropdown
fig.update_layout (
    updatemenus =[
        dict(
            buttons=list([
                dict(
                    args=["type", "surface" ],
                    label="3D Surface" ,
                    method="restyle"
                ),
                dict(
                    args=["type", "heatmap" ],
                    label="Heatmap" ,
                    method="restyle"
                )
            ]),
            direction ="down",
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.1,
            xanchor="left",
            y=1.1,
            yanchor="top"
        ),
    ]
)
# Add annotation
fig.update_layout (
    annotations =[
        dict(text="Trace type:" , showarrow =False,
        x=0, y=1.085, yref="paper", align="left")
    ]
)
fig.show()
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 2/13

--- Página 3 ---
Update Several Data Attributes
This example demonstrates how to update several data attributes: colorscale, colorscale direction, and line display with the "restyle" method.
100120140160180Trace type:3D Surface ▼
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 3/13

--- Página 4 ---
import plotly.graph_objects  as go
import pandas as pd
# load dataset
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv" )
# Create figure
fig = go.Figure()
# Add surface trace
fig.add_trace (go.Heatmap(z=df.values.tolist(), colorscale ="Viridis" ))
# Update plot sizing
fig.update_layout (
    width=800,
    height=900,
    autosize =False,
    margin=dict(t=100, b=0, l=0, r=0),
)
# Update 3D scene options
fig.update_scenes (
    aspectratio =dict(x=1, y=1, z=0.7),
    aspectmode ="manual"
)
# Add dropdowns
button_layer_1_height  = 1.08
fig.update_layout (
    updatemenus =[
        dict(
            buttons=list([
                dict(
                    args=["colorscale" , "Viridis" ],
                    label="Viridis" ,
                    method="restyle"
                ),
                dict(
                    args=["colorscale" , "Cividis" ],
                    label="Cividis" ,
                    method="restyle"
                ),
                dict(
                    args=["colorscale" , "Blues"],
                    label="Blues",
                    method="restyle"
                ),
                dict(
                    args=["colorscale" , "Greens" ],
                    label="Greens" ,
                    method="restyle"
                ),
            ]),
            direction ="down",
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.1,
            xanchor="left",
            y=button_layer_1_height ,
            yanchor="top"
        ),
        dict(
            buttons=list([
                dict(
                    args=["reversescale" , False],
                    label="False",
                    method="restyle"
                ),
                dict(
                    args=["reversescale" , True],
                    label="True",
                    method="restyle"
                )
            ]),
            direction ="down",
            pad={"r": 10, "t": 10},
            showactive =True,
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 4/13

--- Página 5 ---
            x=0.37,
            xanchor="left",
            y=button_layer_1_height ,
            yanchor="top"
        ),
        dict(
            buttons=list([
                dict(
                    args=[{"contours.showlines" : False, "type": "contour" }],
                    label="Hide lines" ,
                    method="restyle"
                ),
                dict(
                    args=[{"contours.showlines" : True, "type": "contour" }],
                    label="Show lines" ,
                    method="restyle"
                ),
            ]),
            direction ="down",
            pad={"r": 10, "t": 10},
            showactive =True,
            x=0.58,
            xanchor="left",
            y=button_layer_1_height ,
            yanchor="top"
        ),
    ]
)
fig.update_layout (
    annotations =[
        dict(text="colorscale" , x=0, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow =False),
        dict(text="Reverse&lt;br&gt;Colorscale" , x=0.25, xref="paper", y=1.07,
                             yref="paper", showarrow =False),
        dict(text="Lines", x=0.54, xref="paper", y=1.06, yref="paper",
                             showarrow =False)
    ])
fig.show()
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 5/13

--- Página 6 ---
Relayout Dropdown
Update One Layout AttributeThe "relayout" method should be used when modifying the layout attributes of the graph.
This example demonstrates how to update a layout attribute: chart type with the "relayout" method.
0 10 20 30 40 50 6001020304050607080
100120140160180colorscaleReverse
ColorscaleLines Blues ▼ False ▼ Hide lines ▼
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 6/13

--- Página 7 ---
import plotly.graph_objects  as go
# Generate dataset
import numpy as np
np.random.seed(1)
x0 = np.random.normal(2, 0.4, 400)
y0 = np.random.normal(2, 0.4, 400)
x1 = np.random.normal(3, 0.6, 600)
y1 = np.random.normal(6, 0.4, 400)
x2 = np.random.normal(4, 0.2, 200)
y2 = np.random.normal(4, 0.4, 200)
# Create figure
fig = go.Figure()
# Add traces
fig.add_trace (
    go.Scatter(
        x=x0,
        y=y0,
        mode="markers" ,
        marker=dict(color="DarkOrange" )
    )
)
fig.add_trace (
    go.Scatter(
        x=x1,
        y=y1,
        mode="markers" ,
        marker=dict(color="Crimson" )
    )
)
fig.add_trace (
    go.Scatter(
        x=x2,
        y=y2,
        mode="markers" ,
        marker=dict(color="RebeccaPurple" )
    )
)
# Add buttons that add shapes
cluster0  = [dict(type="circle" ,
                            xref="x", yref="y",
                            x0=min(x0), y0=min(y0),
                            x1=max(x0), y1=max(y0),
                            line=dict(color="DarkOrange" ))]
cluster1  = [dict(type="circle" ,
                            xref="x", yref="y",
                            x0=min(x1), y0=min(y1),
                            x1=max(x1), y1=max(y1),
                            line=dict(color="Crimson" ))]
cluster2  = [dict(type="circle" ,
                            xref="x", yref="y",
                            x0=min(x2), y0=min(y2),
                            x1=max(x2), y1=max(y2),
                            line=dict(color="RebeccaPurple" ))]
fig.update_layout (
    updatemenus =[
        dict(buttons=list([
            dict(label="None",
                 method="relayout" ,
                 args=["shapes" , []]),
            dict(label="Cluster 0" ,
                 method="relayout" ,
                 args=["shapes" , cluster0 ]),
            dict(label="Cluster 1" ,
                 method="relayout" ,
                 args=["shapes" , cluster1 ]),
            dict(label="Cluster 2" ,
                 method="relayout" ,
                 args=["shapes" , cluster2 ]),
            dict(label="All",
                 method="relayout" ,
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 7/13

--- Página 8 ---
Update Dropdown                 args=["shapes" , cluster0  + cluster1  + cluster2 ])
        ]),
        )
    ]
)
# Update remaining layout properties
fig.update_layout (
    title_text ="Highlight Clusters" ,
    showlegend =False,
)
fig.show()
The "update" method should be used when modifying the data and layout sections of the graph.
This example demonstrates how to update which traces are displayed while simultaneously updating layout attributes such as the chart title and annotations.1 1.5 2 2.5 3 3.5 4 4.51234567Highlight Clusters
Cluster 0 ▼
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 8/13

--- Página 9 ---
import plotly.graph_objects  as go
import pandas as pd
# Load dataset
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv" )
df.columns = [col.replace("AAPL.", "") for col in df.columns]
# Initialize figure
fig = go.Figure()
# Add Traces
fig.add_trace (
    go.Scatter(x=list(df.Date),
               y=list(df.High),
               name="High",
               line=dict(color="DarkBlue" )))
fig.add_trace (
    go.Scatter(x=list(df.Date),
               y=[df.High.mean()] * len(df.index),
               name="High Average" ,
               visible=False,
               line=dict(color="DarkBlue" , dash="dash")))
fig.add_trace (
    go.Scatter(x=list(df.Date),
               y=list(df.Low),
               name="Low",
               line=dict(color="Crimson" )))
fig.add_trace (
    go.Scatter(x=list(df.Date),
               y=[df.Low.mean()] * len(df.index),
               name="Low Average" ,
               visible=False,
               line=dict(color="Crimson" , dash="dash")))
# Add Annotations and Buttons
high_annotations  = [dict(x="2016-03-01" ,
                         y=df.High.mean(),
                         xref="x", yref="y",
                         text="High Average:&lt;br&gt; %.3f" % df.High.mean(),
                         ax=0, ay=-40),
                    dict(x=df.Date[df.High.idxmax()],
                         y=df.High.max(),
                         xref="x", yref="y",
                         text="High Max:&lt;br&gt; %.3f" % df.High.max(),
                         ax=-40, ay=-40)]
low_annotations  = [dict(x="2015-05-01" ,
                        y=df.Low.mean(),
                        xref="x", yref="y",
                        text="Low Average:&lt;br&gt; %.3f" % df.Low.mean(),
                        ax=0, ay=40),
                   dict(x=df.Date[df.High.idxmin()],
                        y=df.Low.min(),
                        xref="x", yref="y",
                        text="Low Min:&lt;br&gt; %.3f" % df.Low.min(),
                        ax=0, ay=40)]
fig.update_layout (
    updatemenus =[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update" ,
                     args=[{"visible" : [True, False, True, False]},
                           {"title": "Yahoo",
                            "annotations" : []}]),
                dict(label="High",
                     method="update" ,
                     args=[{"visible" : [True, True, False, False]},
                           {"title": "Yahoo High" ,
                            "annotations" : high_annotations }]),
                dict(label="Low",
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 9/13

--- Página 10 ---
Graph Selection Dropdowns in Jinja                     method="update" ,
                     args=[{"visible" : [False, False, True, True]},
                           {"title": "Yahoo Low" ,
                            "annotations" : low_annotations }]),
                dict(label="Both",
                     method="update" ,
                     args=[{"visible" : [True, True, True, True]},
                           {"title": "Yahoo",
                            "annotations" : high_annotations  + low_annotations }]),
            ]),
        )
    ])
# Set title
fig.update_layout (title_text ="Yahoo")
fig.show()
It is straight forward to create each potential view as a separate graph and then use Jinja to insert each potential view into a div on a JavaScript enabled webpage with
a dropdown that chooses which div to display. This approach produces code that requires little customization or updating as you e.g. add, drop, or reorder views or
traces, so it is particularly compelling for prototyping and rapid iteration. It produces web pages that are larger than the webpages produced through the built in
method which is a consideration for very large figures with hundreds or thousands of data points in traces that appear in multiple selections. This approach requires
both a Python program and a Jinja template file. The documentation on 
 is relevant background.
using Jinja templates with Plotly (https://plotly.com/python/interactive-html-export/#inserting-
plotly-output-into-html-using-a-jinja2-template)Apr 2015Jul 2015Oct 2015Jan 2016Apr 2016Jul 2016Oct 2016Jan 201790100110120130High
LowYahoo
None ▼
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 10/13

--- Página 11 ---
Python Code File
Jinja HTML Templateimport plotly.express  as px
from jinja2 import Template
import collections
# Load the gapminder dataset
df = px.data.gapminder ()
# Create a dictionary with Plotly figures as values
fig_dict  = {}
# we need to fill that dictionary with figures.  this example assumes that each figure has a title and that
# we want to use the titles as descriptions in the drop down
# This example happens to fill the dictionary by creating a scatter plot for each continent using the 2007 Gapminder data
for continent  in df['continent' ].unique():
    # Filter data for the current continent 
    continent_data  = df[(df['continent' ] == continent ) &amp; (df['year'] == 2007)]
    fig_dict [continent ] = px.scatter(continent_data , x='gdpPercap' , y='lifeExp' , 
                     title=f'GDP vs Life Expectancy for {continent }',
                     labels={'gdpPercap' : 'GDP per Capita (USD)' , 'lifeExp' : 'Life Expectancy (Years)' },
                     hover_name ='country' ,size="pop", size_max =55 
                     )
    #Standardizing the axes makes the graphs easier to compare
    fig_dict [continent ].update_xaxes (range=[0,50000])
    fig_dict [continent ].update_yaxes (range=[25,90])
# Create a dictionary, data_for_jinja with two entries:
# the value for the "dropdown_entries" key is a string containing a series of &lt;option&gt; tags, one tag for each item in the drop down
# the value for the "divs" key is a string with a series of &lt;div&gt; tags, each containing the content that appears only when the user selects the cor
responding item from the dropdown
# in this example, the content of each div is a figure and descriptive text.  
data_for_jinja = collections .defaultdict (str)
text_dict  = {}
for n, figname in enumerate (fig_dict .keys()):
    text_dict [figname]=f"Here is some custom text about the {figname} figure"   #This is a succinct way to populate text_dict; in practice you'd pro
bably populate it manually elsewhere
    data_for_jinja ["dropdown_entries" ]+=f"&lt;option value=' {figname}'&gt;{fig_dict [figname].layout.title.text}&lt;/option&gt;"
    #YOU MAY NEED TO UPDATE THE LINK TO THE LATEST PLOTLY.JS
    fig_html  = fig_dict [figname].to_html(full_html =False, config=dict(responsive =False, scrollZoom =False, doubleClick =False), include_plotlyjs  = "c
dn")
    initially_hide_divs_other_than_the_first  = "style=""display:none;""" *(n&gt;0)   
    data_for_jinja ["divs"]+=f'&lt;div id=" {figname}" class="content-div" {initially_hide_divs_other_than_the_first }&gt;{fig_html }{text_dict [figname]}&lt;/di
v&gt;'
# Insert data into the template and write the file to disk
# You'll need to add the path to your template and to your preferred output location
input_template_path =r"&lt;path-to-Jinja-template.html&gt;"
output_html_path =r"&lt;path-to-output-file.html&gt;"
with open(output_html_path , "w", encoding ='utf-8') as output_file :
    with open(input_template_path ) as template_file :
        j2_template  = Template (template_file .read())
        output_file .write(j2_template .render(data_for_jinja ))
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 11/13

--- Página 12 ---
Reference
What About Dash?&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="container" &gt;
        &lt;h1&gt;Select an analysis &lt;/h1&gt;
        &lt;select id="dropdown"  class="form-control" &gt;
    {{ dropdown_entries }}
        &lt;/select&gt;
        {{ divs }}
    &lt;/div&gt;
    &lt;script&gt;
        document .getElementById ('dropdown' ).addEventListener ('change' , function () {
            const divs = document .querySelectorAll ('.content-div' );
            divs. forEach(div =&gt; div.style.display = 'none');
            const selectedDiv = document .getElementById (this.value);
            if (selectedDiv) {
                selectedDiv. style.display = 'block';
            }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt; 
 
See  for more information about updatemenu
dropdowns.
https://plotly.com/python/reference/layout/updatemenus/ (https://plotly.com/python/reference/layout/updatemenus/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 12/13

--- Página 13 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:03 Dropdown menus in Python
https://plotly.com/python/dropdowns/ 13/13</content>
      </file>
      <file name="Figurewidget docs in Python.pdf" path="pyvy_2x10/Figurewidget docs in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
Chart Events (/python/chart-events)
Add Custom Interactivity with Jupyter Widgets
All Plotly charts have click, hover and zoom events which can be accessed by go.FigureWidget using Jupyter Widgets.
Jupyter Widgets Interaction
(/python/figurewidget/)
Plotly FigureWidget
Overview
(/python/jupyter-lab-
tools/)
Jupyter Lab with
FigureWidget
(/python/figurewidget-
app/)
Interactive Data
Analysis with
FigureWidget ipywidgets
(/python/click-events/)
Click Events
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 07:00 Figurewidget docs in Python
https://plotly.com/python/chart-events/ 1/1</content>
      </file>
      <file name="GDP per capita _ Gapminder.pdf" path="pyvy_2x10/GDP per capita _ Gapminder.pdf" type="pdf">
        <content>--- Página 1 ---
Home&gt;GDP per capita
INCOME PER PERSON UPDATED TO 2007
Income  per person (i.e. GDP per capita) has been
updated to 2007.
Here is one example for 2007 where income per
person is plotted against Life expectancy at birth.
Note that the GDP  data will be revised in a near
future, taking into account the latest round of PPP
from the ICP.
Posted in News
Tagged Corrections &amp; updates, gdp, gdp 2007, GDP per capita, gdp per capita 2007, income per person, latest gdp, new gdp per person
DATA FOR "INCOME PER PERSON" NOW ALSO FOR 2006
The indicator “Income per person (fixed PPP$)” has
been updated with new data for the year 2006 for
173 countries and territories.
Here you can see the graph for 2006.
This data was based on the real growth rate, taken
from World Development Indicators 2008, linked to
the Income  per person at 2003. At the same time
the previous data for 2004-2006 was replaced with
the new data for all these 173 countries and
territories. This was also done for another seven
Gapminder uses cookies to improve its statistics and user experience. By continuing to use the site you agree to our cookie policy.
Close16/07/2025, 07:07 GDP per capita | Gapminder
https://www.gapminder.org/tag/gdp-per-capita/ 1/4

--- Página 2 ---
countries, for which the new data only goes to
2005.
For most of these 180 countries or territories this
has not caused any major changes in the data. The
exceptions are Equatorial Guinea, Montenegro,
Dominica and Serbia for which there seem to be
discrepancies between the old and new data of up
to 20%.
NOTE: “Life expectancy at birth” do also have data
for 2006, but many of the other indicators still have
no data for 2006.
NOTE: The documentation for “Income per person”
has also been updated (it is now called “version 2”).
Posted in News
Tagged Corrections &amp; updates, GDP per capita, income per person, PPP
HISTORY OF KAROLINSKA INSTITUTET
Alternative content
About this Flash presentationGapminder uses cookies to improve its statistics and user experience. By continuing to use the site you agree to our cookie policy.
Close16/07/2025, 07:07 GDP per capita | Gapminder
https://www.gapminder.org/tag/gdp-per-capita/ 2/4

--- Página 3 ---
A presentation about the history of Karolinska
Institutet. Gapminder made a presentation to Hans
Rosling for a presentation about the change of Head
of Karolinska Institutet (in 2004 Hans Wigzell
handed over to Harriet Wallberg-Henriksson).
Download
Download presentation
Posted in Downloads
Tagged English, Flash, GDP per capita, Karolinska Institutet, life expectancy, Stockholm, Swedish history
1 Comment
Gapminder's tools and teaching materials are free, and always will be free.
You can help us by making a donation.
Donate now
Gapminder uses cookies to improve its statistics and user experience. By continuing to use the site you agree to our cookie policy.
Close16/07/2025, 07:07 GDP per capita | Gapminder
https://www.gapminder.org/tag/gdp-per-capita/ 3/4

--- Página 4 ---
Gapminder is an independent Swedish foundation with no
political, religious or economic affiliations. Gapminder fights
devastating misconceptions and promotes a fact-based
worldview everyone can understand.
About
Contact
Donate
Press room
NewsletterFAQ
Privacy &amp; Terms of Use
Report Problem
Gapminder uses cookies to improve its statistics and user experience. By continuing to use the site you agree to our cookie policy.
Close16/07/2025, 07:07 GDP per capita | Gapminder
https://www.gapminder.org/tag/gdp-per-capita/ 4/4</content>
      </file>
      <file name="Interactive data analysis with figurewidget ipywidgets in Python.pdf" path="pyvy_2x10/Interactive data analysis with figurewidget ipywidgets in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)NYC Flights Database &gt;  &gt; Interactive Data Analysis
with FigureWidget ipywidgets
Interactive Data Analysis with FigureWidget ipywidgets in Python
Interactive Data Analysis with Plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Chart Events (/python/chart-events)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/figurewidget-app.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import datetime
import numpy as np
import pandas as pd
import plotly.graph_objects  as go
from ipywidgets  import widgets
We'll be making an application to take a look at delays from all flights out of NYC in the year 2013.
df = pd.read_csv (
    'https://raw.githubusercontent.com/yankev/testing/master/datasets/nycflights.csv' )
df = df.drop(df.columns[[0]], axis=1)
df.sample(3)
Let's get the set of all the airlines, so that we can type the right things into the search box later.
df['carrier' ].unique()
Let's assign the widgets that we're going to be using in our app. In general all these widgets will be used to filter the data set, and thus what we visualize. yearmonthdaydep_timedep_delayarr_timearr_delaycarriertailnumflightorigindestair_timedistancehourminute
624472013118639.02.0 918.0-11.0UAN429UA240EWRMCO135.09376.039.0
1703532013461318.019.0 1452.021.0UAN493UA308EWRORD125.071913.018.0
5630320131111245.00.0 1555.0-5.0 UAN374621289EWRSFO349.0256512.045.0
array(['UA', 'AA', 'B6', 'DL', 'EV', 'MQ', 'US', 'WN', 'VX', 'FL', 'AS',
'9E', 'F9', 'HA', 'YV', 'OO'], dtype=object)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:00 Interactive data analysis with figurewidget ipywidgets in Python
https://plotly.com/python/figurewidget-app/ 1/5

--- Página 2 ---
month = widgets.IntSlider (
    value=1.0,
    min=1.0,
    max=12.0,
    step=1.0,
    description ='Month:' ,
    continuous_update =False
)
use_date  = widgets.Checkbox (
    description ='Date: ' ,
    value=True,
)
container  = widgets.HBox(children =[use_date , month])
textbox = widgets.Dropdown (
    description ='Airline:   ' ,
    value='DL',
    options=df['carrier' ].unique().tolist()
)
origin = widgets.Dropdown (
    options=list(df['origin' ].unique()),
    value='LGA',
    description ='Origin Airport:' ,
)
# Assign an empty figure widget with two traces
trace1 = go.Histogram (x=df['arr_delay' ], opacity=0.75, name='Arrival Delays' )
trace2 = go.Histogram (x=df['dep_delay' ], opacity=0.75, name='Departure Delays' )
g = go.FigureWidget (data=[trace1, trace2],
                    layout=go.Layout(
                        title=dict(
                            text='NYC FlightDatabase'
                        ),
                        barmode='overlay'
                    ))
Let now write a function that will handle the input from the widgets, and alter the state of the graph.
16/07/2025, 07:00 Interactive data analysis with figurewidget ipywidgets in Python
https://plotly.com/python/figurewidget-app/ 2/5

--- Página 3 ---
def validate ():
    if origin.value in df['origin' ].unique() and textbox.value in df['carrier' ].unique():
        return True
    else:
        return False
def response (change):
    if validate ():
        if use_date .value:
            filter_list  = [i and j and k for i, j, k in
                           zip(df['month'] == month.value, df['carrier' ] == textbox.value,
                               df['origin' ] == origin.value)]
            temp_df = df[filter_list ]
        else:
            filter_list  = [i and j for i, j in
                           zip(df['carrier' ] == 'DL', df['origin' ] == origin.value)]
            temp_df = df[filter_list ]
        x1 = temp_df['arr_delay' ]
        x2 = temp_df['dep_delay' ]
        with g.batch_update ():
            g.data[0].x = x1
            g.data[1].x = x2
            g.layout.barmode = 'overlay'
            g.layout.xaxis.title = 'Delay in Minutes'
            g.layout.yaxis.title = 'Number of Delays'
origin.observe(response , names="value")
textbox.observe(response , names="value")
month.observe(response , names="value")
use_date .observe(response , names="value")
Time to try the app out!!
container2  = widgets.HBox([origin, textbox])
widgets.VBox([container ,
              container2 ,
              g])
16/07/2025, 07:00 Interactive data analysis with figurewidget ipywidgets in Python
https://plotly.com/python/figurewidget-app/ 3/5

--- Página 4 ---
Reference%%html
&lt;img src = 'https://cloud.githubusercontent.com/assets/12302455/16637308/4e476280-43ac-11e6-9fd3-ada2c9506ee1.gif'  &gt;
help(go.FigureWidget )
Help on class FigureWidget in module plotly.graph_objs._figurewidget:
class FigureWidget(plotly.basewidget.BaseFigureWidget)
|  FigureWidget(data=None, layout=None, frames=None, skip_invalid=False, **kwargs)
|  
|  Method resolution order:
|      FigureWidget
|      plotly.basewidget.BaseFigureWidget
|      plotly.basedatatypes.BaseFigure
|      anywidget.widget.AnyWidget
|      ipywidgets.widgets.domwidget.DOMWidget
|      ipywidgets.widgets.widget.Widget
|ipywidgetswidgetswidgetLoggingHasTraits
16/07/2025, 07:00 Interactive data analysis with figurewidget ipywidgets in Python
https://plotly.com/python/figurewidget-app/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:00 Interactive data analysis with figurewidget ipywidgets in Python
https://plotly.com/python/figurewidget-app/ 5/5</content>
      </file>
      <file name="Intro to animations in Python.pdf" path="pyvy_2x10/Intro to animations in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Animated figures with Plotly Express
Animated figures in Dash &gt;  &gt; Intro to
Animations
Intro to Animations in Python
An introduction to creating animations with Plotly in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Animations (/python/#animations)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/animations.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Several  functions support the creation of animated figures through the animation_frame and animation_group arguments.
Plotly Express (/python/plotly-express/)
Here is an example of an animated scatter plot created with Plotly Express. Note that you should always fix the x_range and y_range to ensure that your data remains
visible throughout the animation.
import plotly.express  as px
df = px.data.gapminder ()
px.scatter(df, x="gdpPercap" , y="lifeExp" , animation_frame ="year", animation_group ="country" ,
           size="pop", color="continent" , hover_name ="country" ,
           log_x=True, size_max =55, range_x=[100,100000], range_y=[25,90])
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
1002 5 10002 5 10k2 5 100k30405060708090
continent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007gdpPercaplifeExp
▶ ◼
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 1/11

--- Página 2 ---
Animated Bar Charts with Plotly Express
Note that you should always fix the y_range to ensure that your data remains visible throughout the animation.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Animated GDP and population over decades'),
    html.P("Select an animation:"),
    dcc.RadioItems(
        id='selection',
        options=["GDP - Scatter", "Population - Bar"],
        value='GDP - Scatter',
    ),
    dcc.Loading(dcc.Graph(id="graph"), type="cube")
])
@app.callback(
    Output("graph", "figure"),
    Input("selection", "value"))
def display_animated_graph(selection):
    df = px.data.gapminder() # replace with your own data source
    animations = {
        'GDP - Scatter': px.scatter(
 df "dP " "lifE" iti f " "DOWNLOAD
Animated GDP and population over decades
Select an animation:
GDP - Scatter
Population - Bar
1002 510002 510k2 5100k30405060708090
continent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007gdpPercaplifeExp
▶ ◼
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 2/11

--- Página 3 ---
Current Animation Limitations and Caveats
Animations are designed to work well when each row of input is present across all animation frames, and when categorical values mapped to symbol, color
and facet are constant across frames. Animations may be misleading or inconsistent if these constraints are not met.
Although Plotly Express supports animation for many chart and map types, smooth inter-frame transitions are today only possible for scatter and bar
Plotly Express will not automatically compute the union of all x/y/color ranges, so these must be specified manually to avoid scale jumps across frames
Animated figures with Graph Objects
Frames
Adding Control Buttons to Animationsimport plotly.express  as px
df = px.data.gapminder ()
fig = px.bar(df, x="continent" , y="pop", color="continent" ,
  animation_frame ="year", animation_group ="country" , range_y=[0,4000000000 ])
fig.show()
The remainder of this section describes the low-level  API for constructing animated figures manually.
graph objects (/python/graph-objects/)
Along with data and layout, frames can be added as a key in a figure object. The frames key points to a list of figures, each of which will be cycled through when
animation is triggered.
You can add play and pause buttons to control your animated charts by adding an updatemenus array to the layout of your figure. More information on style and
placement of the buttons is available in Plotly's .
The buttons are defined as follows:
updatemenus reference (https://plotly.com/python/reference/layout/updatemenus/)
"updatemenus": [{"type": "buttons" ,
                 "buttons" : [{"label": "Your Label" ,
                              "method" : "animate" ,
                              "args": [See Below]}]}] 
 Asia Europe Africa Americas Oceania00.5B1B1.5B2B2.5B3B3.5B4B
continent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007continentpop
▶ ◼
  1
  2
  3
  4
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 3/11

--- Página 4 ---
Defining Button Arguments
None: Setting "args" to undefined (i.e. "args": [None]) will create a simple play button that will animate all frames.
string: Animate all frames with group "&lt;some string&gt;". This is a way of scoping the animations in case you would prefer to animate without explicitly
enumerating all frames.
["frame1", "frame2", ...]: Animate a sequence of named frames.
[{data: [], layout: {}, traces: []}, {...}]: Nearly identical to animating named frames; though this variant lets you inline data instead of adding it as named frames.
This can be useful for interaction where it's undesirable to add and manage named frames for ephemeral changes.
[null]: A simple way to create a pause button (requires mode: "immediate"). This argument dumps the currently queued frames (mode: "immediate"), and then
animates an empty sequence of frames ([null]).
Please Note: We do not recommend using: [ ]. This syntax may cause confusion because it looks indistinguishable from a "pause button", but nested
properties have logic that treats empty arrays as entirely removable, so it will function as a play button.
Refer to the examples below to see the buttons in action!
Simple Play Button
Moving Point on a Curveimport plotly.graph_objects  as go
fig = go.Figure(
    data=[go.Scatter(x=[0, 1], y=[0, 1])],
    layout=go.Layout(
        xaxis=dict(range=[0, 5], autorange =False),
        yaxis=dict(range=[0, 5], autorange =False),
        title=dict(text="Start Title" ),
        updatemenus =[dict(
            type="buttons" ,
            buttons=[dict(label="Play",
                          method="animate" ,
                          args=[None])])]
    ),
    frames=[go.Frame(data=[go.Scatter(x=[1, 2], y=[1, 2])]),
            go.Frame(data=[go.Scatter(x=[1, 4], y=[1, 4])]),
            go.Frame(data=[go.Scatter(x=[3, 4], y=[3, 4])],
                     layout=go.Layout(title_text ="End Title" ))]
)
fig.show()
0 1 2 3 4 5012345Start Title
Play
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 4/11

--- Página 5 ---
Moving Frenet Frame Along a Planar Curveimport plotly.graph_objects  as go
import numpy as np
# Generate curve data
t = np.linspace (-1, 1, 100)
x = t + t ** 2
y = t - t ** 2
xm = np.min(x) - 1.5
xM = np.max(x) + 1.5
ym = np.min(y) - 1.5
yM = np.max(y) + 1.5
N = 25
s = np.linspace (-1, 1, N)
xx = s + s ** 2
yy = s - s ** 2
# Create figure
fig = go.Figure(
    data=[go.Scatter(x=x, y=y,
                     mode="lines",
                     line=dict(width=2, color="blue")),
          go.Scatter(x=[xx[0]], y=[yy[0]],
                     mode="markers" ,
                     marker=dict(color="red", size=10))])
fig.update_layout (width=600, height=450,
        xaxis=dict(range=[xm, xM], autorange =False, zeroline =False),
        yaxis=dict(range=[ym, yM], autorange =False, zeroline =False),
        title_text ="Kinematic Generation of a Planar Curve" , title_x=0.5,
        updatemenus  = [dict(type = "buttons" ,
        buttons = [
            dict(
                args = [None, {"frame": {"duration" : 10, "redraw" : False},
                                "fromcurrent" : True, "transition" : {"duration" : 10}}],
                label = "Play",
                method = "animate" ,
                )])])
fig.update(frames=[go.Frame(
                        data=[go.Scatter(
                                   x=[xx[k]],
                                   y=[yy[k]])],
                        traces=[1]) # fig.data[1] is updated by each frame
        for k in range(N)])
fig.show()
−1 0 1 2 3−3−2−101trace 0
trace 1Kinematic Generation of a Planar Curve
Play
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 5/11

--- Página 6 ---
import plotly.graph_objects  as go
import numpy as np
# Generate curve data
t = np.linspace (-1, 1, 100)
x = t + t ** 2
y = t - t ** 2
xm = np.min(x) - 1.5
xM = np.max(x) + 1.5
ym = np.min(y) - 1.5
yM = np.max(y) + 1.5
N = 50
s = np.linspace (-1, 1, N)
xx = s + s ** 2
yy = s - s ** 2
vx = 1 + 2 * s
vy = 1 - 2 * s  # v=(vx, vy) is the velocity
speed = np.sqrt(vx ** 2 + vy ** 2)
ux = vx / speed  # (ux, uy) unit tangent vector, (-uy, ux) unit normal vector
uy = vy / speed
xend = xx + ux  # end coordinates for the unit tangent vector at (xx, yy)
yend = yy + uy
xnoe = xx - uy  # end coordinates for the unit normal vector at (xx,yy)
ynoe = yy + ux
# Create figure
fig = go.Figure(
    data=[go.Scatter(x=x, y=y,
                     name="frame",
                     mode="lines",
                     line=dict(width=2, color="blue")),
          go.Scatter(x=x, y=y,
                     name="curve",
                     mode="lines",
                     line=dict(width=2, color="blue"))
          ],
    layout=go.Layout(width=600, height=600,
                     xaxis=dict(range=[xm, xM], autorange =False, zeroline =False),
                     yaxis=dict(range=[ym, yM], autorange =False, zeroline =False),
                     title=dict(text="Moving Frenet Frame Along a Planar Curve" ),
                     hovermode ="closest" ,
                     updatemenus =[dict(type="buttons" ,
                                       buttons=[dict(label="Play",
                                                     method="animate" ,
                                                     args=[None])])]),
    frames=[go.Frame(
        data=[go.Scatter(
            x=[xx[k], xend[k], None, xx[k], xnoe[k]],
            y=[yy[k], yend[k], None, yy[k], ynoe[k]],
            mode="lines",
            line=dict(color="red", width=2))
        ]) for k in range(N)]
)
fig.show()
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 6/11

--- Página 7 ---
Using a Slider and Buttons
The following example uses the well known  to exemplify animation capabilities. This bubble
chart animation shows the change in 'GDP per Capita' against the 'Life Expectancy' of several countries from the year 1952 to 2007, colored by their respective
continent and sized by population.
Gapminder dataset (https://www.gapminder.org/tag/gdp-per-capita/)
This is also an example of building up the structure of a figure as a Python dictionary, and then constructing a graph object figure from that dictionary.−1 0 1 2 3−3−2−101frame
curveMoving Frenet Frame Along a Planar Curve
Play
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 7/11

--- Página 8 ---
import plotly.graph_objects  as go
import pandas as pd
url = "https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv"
dataset = pd.read_csv (url)
years = ["1952", "1962", "1967", "1972", "1977", "1982", "1987", "1992", "1997", "2002",
         "2007"]
# make list of continents
continents  = []
for continent  in dataset["continent" ]:
    if continent  not in continents :
        continents .append(continent )
# make figure
fig_dict  = {
    "data": [],
    "layout" : {},
    "frames" : []
}
# fill in most of layout
fig_dict ["layout" ]["xaxis"] = {"range": [30, 85], "title": "Life Expectancy" }
fig_dict ["layout" ]["yaxis"] = {"title": "GDP per Capita" , "type": "log"}
fig_dict ["layout" ]["hovermode" ] = "closest"
fig_dict ["layout" ]["updatemenus" ] = [
    {
        "buttons" : [
            {
                "args": [None, {"frame": {"duration" : 500, "redraw" : False},
                                "fromcurrent" : True, "transition" : {"duration" : 300,
                                                                    "easing" : "quadratic-in-out" }}],
                "label": "Play",
                "method" : "animate"
            },
            {
                "args": [[None], {"frame": {"duration" : 0, "redraw" : False},
                                  "mode": "immediate" ,
                                  "transition" : {"duration" : 0}}],
                "label": "Pause",
                "method" : "animate"
            }
        ],
        "direction" : "left",
        "pad": {"r": 10, "t": 87},
        "showactive" : False,
        "type": "buttons" ,
        "x": 0.1,
        "xanchor" : "right",
        "y": 0,
        "yanchor" : "top"
    }
]
sliders_dict  = {
    "active" : 0,
    "yanchor" : "top",
    "xanchor" : "left",
    "currentvalue" : {
        "font": {"size": 20},
        "prefix" : "Year:",
        "visible" : True,
        "xanchor" : "right"
    },
    "transition" : {"duration" : 300, "easing" : "cubic-in-out" },
    "pad": {"b": 10, "t": 50},
    "len": 0.9,
    "x": 0.1,
    "y": 0,
    "steps": []
}
# make data
year = 1952
for continent  in continents :
    dataset_by_year  = dataset[dataset["year"] == year]
    dataset_by_year_and_cont  = dataset_by_year [
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 8/11

--- Página 9 ---
        dataset_by_year ["continent" ] == continent ]
    data_dict  = {
        "x": list(dataset_by_year_and_cont ["lifeExp" ]),
        "y": list(dataset_by_year_and_cont ["gdpPercap" ]),
        "mode": "markers" ,
        "text": list(dataset_by_year_and_cont ["country" ]),
        "marker" : {
            "sizemode" : "area",
            "sizeref" : 200000,
            "size": list(dataset_by_year_and_cont ["pop"])
        },
        "name": continent
    }
    fig_dict ["data"].append(data_dict )
# make frames
for year in years:
    frame = {"data": [], "name": str(year)}
    for continent  in continents :
        dataset_by_year  = dataset[dataset["year"] == int(year)]
        dataset_by_year_and_cont  = dataset_by_year [
            dataset_by_year ["continent" ] == continent ]
        data_dict  = {
            "x": list(dataset_by_year_and_cont ["lifeExp" ]),
            "y": list(dataset_by_year_and_cont ["gdpPercap" ]),
            "mode": "markers" ,
            "text": list(dataset_by_year_and_cont ["country" ]),
            "marker" : {
                "sizemode" : "area",
                "sizeref" : 200000,
                "size": list(dataset_by_year_and_cont ["pop"])
            },
            "name": continent
        }
        frame["data"].append(data_dict )
    fig_dict ["frames" ].append(frame)
    slider_step  = {"args": [
        [year],
        {"frame": {"duration" : 300, "redraw" : False},
         "mode": "immediate" ,
         "transition" : {"duration" : 300}}
    ],
        "label": year,
        "method" : "animate" }
    sliders_dict ["steps"].append(slider_step )
fig_dict ["layout" ]["sliders" ] = [sliders_dict ]
fig = go.Figure(fig_dict )
fig.show()
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 9/11

--- Página 10 ---
Important Notes
Defining redraw: Setting redraw: false is an optimization for scatter plots so that animate just makes changes without redrawing the whole plot. For other plot
types, such as contour plots, every frame must be a total plot redraw, i.e. redraw: true.
Reference
What About Dash?For additional information and attributes for creating bubble charts in Plotly see: .
For more documentation on creating animations with Plotly, see .
https://plotly.com/python/bubble-charts/ (https://plotly.com/python/bubble-charts/)
https://plotly.com/python/#animations (https://plotly.com/python/#animations)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
30 40 50 60 70 801002510002510k25100kAsia
Europe
Africa
Americas
Oceania
Year:1952
19521962196719721977198219871992199720022007Life ExpectancyGDP per Capita
PlayPause
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 10/11

--- Página 11 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
press
Caveats
ts
ons
r Curve16/07/2025, 07:07 Intro to animations in Python
https://plotly.com/python/animations/ 11/11</content>
      </file>
      <file name="Jupyter lab with figurewidget in Python.pdf" path="pyvy_2x10/Jupyter lab with figurewidget in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Create a New View for Output
View Live Updates &gt;  &gt; Jupyter Lab with
FigureWidget
Jupyter Lab with FigureWidget in Python
Using Plotly FigureWidgets with Jupyter Lab
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Chart Events (/python/chart-events)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/jupyter-
lab-tools.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Display a FigureWidget and then create a new window to display it in so that you can scroll through your code but still keep an eye on what you're doing.
With the output view it is easy to take full advantage of FigureWidgets new imperative-style graph updates since you can see your code and your graph at the same
time.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:00 Jupyter lab with figurewidget in Python
https://plotly.com/python/jupyter-lab-tools/ 1/2

--- Página 2 ---
Reference
What About Dash?See  for even more FigureWidget examples.
these Jupyter notebooks (https://github.com/jonmmease/plotly_ipywidget_notebooks)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:00 Jupyter lab with figurewidget in Python
https://plotly.com/python/jupyter-lab-tools/ 2/2</content>
      </file>
      <file name="Layout.updatemenus in Python.pdf" path="pyvy_2x10/Layout.updatemenus in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; layout.updatemenus
Python Figure Reference: layout.updatemenus
Code:fig.update_layout(updatemenus=list(...))
Type: list of dict where each dict has one or more of the keys listed below.
Parent:layout.updatemenus[]
Type: integer greater than or equal to -1
Default:0
Determines which button (by index starting from 0) is considered active.
Parent:layout.updatemenus[]
Type: color
Sets the background color of the update menu buttons.
Parent:layout.updatemenus[]
Type: color
Default:"#BEC8D9"
Sets the color of the border enclosing the update menu.
Parent:layout.updatemenus[]
Type: number greater than or equal to 0
Default:1
Sets the width (in px) of the border enclosing the update menu.
Parent:layout.updatemenus[]
Type: list of dict where each dict has one or more of the keys listed below.
Parent:layout.updatemenus[].buttons[]
Type: list
Sets the arguments values to be passed to the Plotly method set in `method` on click.
Parent:layout.updatemenus[].buttons[]
Type: list
Sets a 2nd set of `args`, these arguments values are passed to the Plotly method set in `method` when clicking this button
while in the active state. Use this to create toggle buttons.
Parent:layout.updatemenus[].buttons[]
Type: boolean
Default:True
Python (/python)
Figure Reference (/python/reference/index/)
updatemenus
active
bgcolor
bordercolor
borderwidth
buttons
args
args2
execute
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:03 Layout.updatemenus in Python
https://plotly.com/python/reference/layout/updatemenus/ 1/5

--- Página 2 ---
When True, the API method is executed. When False, all other behaviors are the same and command execution is
skipped. This may be useful when hooking into, for example, the `plotly_buttonclicked` method and executing the API
command manually without losing the benefit of the updatemenu automatically binding to the state of the plot through
the specification of `method` and `args`.
Parent:layout.updatemenus[].buttons[]
Type: string
Default:""
Sets the text label to appear on the button.
Parent:layout.updatemenus[].buttons[]
Type: enumerated , one of ( "restyle" | "relayout" | "animate" | "update" | "skip" )
Default:"restyle"
Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but
will perform no API calls and will not bind automatically to state updates. This may be used to create a component
interface and attach to updatemenu events manually via JavaScript.
Parent:layout.updatemenus[].buttons[]
Type: string
When used in a template, named items are created in the output figure in addition to any items the figure already has in
this array. You can modify these items in the output figure by making your own item with `templateitemname` matching
this `name` alongside your modifications (including `visible: False` or `enabled: False` to hide it). Has no effect outside of a
template.
Parent:layout.updatemenus[].buttons[]
Type: string
Used to refer to a named item in this array in the template. Named items from the template will be created even without
a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its
`name`, alongside your modifications (including `visible: False` or `enabled: False` to hide it). If there is no template or no
matching item, this item will be hidden unless you explicitly show it with `visible: True`.
Parent:layout.updatemenus[].buttons[]
Type: boolean
Determines whether or not this button is visible.
Parent:layout.updatemenus[]
Type: enumerated , one of ( "left" | "right" | "up" | "down" )
Default:"down"
Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left`
and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.
Parent:layout.updatemenus[]
Type: dict containing one or more of the keys listed below.
Sets the font of the update menu button text.
Parent:layout.updatemenus[].font
Type: color
label
method
name
templateitemname
visible
direction
font
color
16/07/2025, 07:03 Layout.updatemenus in Python
https://plotly.com/python/reference/layout/updatemenus/ 2/5

--- Página 3 ---
Parent:layout.updatemenus[].font
Type: string
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font
if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the
preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-
studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and
supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One",
"Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Parent:layout.updatemenus[].font
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Parent:layout.updatemenus[].font
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color.
See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Parent:layout.updatemenus[].font
Type: number greater than or equal to 1
Parent:layout.updatemenus[].font
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Parent:layout.updatemenus[].font
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
Parent:layout.updatemenus[].font
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Parent:layout.updatemenus[].font
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
family
lineposition
shadow
size
style
textcase
variant
weight
16/07/2025, 07:03 Layout.updatemenus in Python
https://plotly.com/python/reference/layout/updatemenus/ 3/5

--- Página 4 ---
Parent:layout.updatemenus[]
Type: string
When used in a template, named items are created in the output figure in addition to any items the figure already has in this
array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name`
alongside your modifications (including `visible: False` or `enabled: False` to hide it). Has no effect outside of a template.
Parent:layout.updatemenus[]
Type: dict containing one or more of the keys listed below.
Sets the padding around the buttons or dropdown menu.
Parent:layout.updatemenus[].pad
Type: number
Default:0
The amount of padding (in px) along the bottom of the component.
Parent:layout.updatemenus[].pad
Type: number
Default:0
The amount of padding (in px) on the left side of the component.
Parent:layout.updatemenus[].pad
Type: number
Default:0
The amount of padding (in px) on the right side of the component.
Parent:layout.updatemenus[].pad
Type: number
Default:0
The amount of padding (in px) along the top of the component.
Parent:layout.updatemenus[]
Type: boolean
Default:True
Highlights active dropdown item or active button if True.
Parent:layout.updatemenus[]
Type: string
Used to refer to a named item in this array in the template. Named items from the template will be created even without a
matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`,
alongside your modifications (including `visible: False` or `enabled: False` to hide it). If there is no template or no matching item,
this item will be hidden unless you explicitly show it with `visible: True`.
Parent:layout.updatemenus[]
Type: enumerated , one of ( "dropdown" | "buttons" )
Default:"dropdown"
name
pad
b
l
r
t
showactive
templateitemname
type
16/07/2025, 07:03 Layout.updatemenus in Python
https://plotly.com/python/reference/layout/updatemenus/ 4/5

--- Página 5 ---
Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or
vertically
Parent:layout.updatemenus[]
Type: boolean
Determines whether or not the update menu is visible.
Parent:layout.updatemenus[]
Type: number between or equal to -2 and 3
Default:-0.05
Sets the x position (in normalized coordinates) of the update menu.
Parent:layout.updatemenus[]
Type: enumerated , one of ( "auto" | "left" | "center" | "right" )
Default:"right"
Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the
range selector.
Parent:layout.updatemenus[]
Type: number between or equal to -2 and 3
Default:1
Sets the y position (in normalized coordinates) of the update menu.
Parent:layout.updatemenus[]
Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" )
Default:"top"
Sets the update menu's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the
range selector.
visible
x
xanchor
y
yanchor
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:03 Layout.updatemenus in Python
https://plotly.com/python/reference/layout/updatemenus/ 5/5</content>
      </file>
      <file name="Layout.xaxis in Python.pdf" path="pyvy_2x10/Layout.xaxis in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; layout.xaxis
Python Figure Reference: layout.xaxis
Code:fig.update_xaxes(...)
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(anchor=&lt;VALUE&gt;)
Type: enumerated , one of ( "free" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" )
If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this
axis' position is determined by `position`.
Code:fig.update_xaxes(automargin=&lt;VALUE&gt;)
Type: flaglist string. Any combination of "height", "width", "left", "right", "top", "bottom" joined with a "+" OR True or
False.
Examples:"height", "width", "height+width", "height+width+left", "True"
Determines whether long tick labels automatically grow the figure margins.
Code:fig.update_xaxes(autorange=&lt;VALUE&gt;)
Type: enumerated , one of ( True | False | "reversed" | "min reversed" | "max reversed" | "min" | "max" )
Default:True
Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If
`range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "False". Using "min" applies
autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies
autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a
reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.
Code:fig.update_xaxes(autorangeoptions=dict(...))
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(autorangeoptions_clipmax=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
Code:fig.update_xaxes(autorangeoptions_clipmin=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
Code:fig.update_xaxes(autorangeoptions_include=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Ensure this value is included in autorange.
Code:fig.update_xaxes(autorangeoptions_maxallowed=&lt;VALUE&gt;)
Python (/python)
Figure Reference (/python/reference/index/)
xaxis
anchor
automargin
autorange
autorangeoptions
clipmax
clipmin
include
maxallowed
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 1/22

--- Página 2 ---
Type: number or categorical coordinate string
Use this value exactly as autorange maximum.
Code:fig.update_xaxes(autorangeoptions_minallowed=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Use this value exactly as autorange minimum.
Code:fig.update_xaxes(autotickangles=list(...))
Type: list
Default:[0, 30, 90]
When `tickangle` is set to "auto", it will be set to the first angle in this array that is large enough to prevent label overlap.
Code:fig.update_xaxes(autotypenumbers=&lt;VALUE&gt;)
Type: enumerated , one of ( "convert types" | "strict" )
Default:"convert types"
Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data
may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
Code:fig.update_xaxes(calendar=&lt;VALUE&gt;)
Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" |
"julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" )
Default:"gregorian"
Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on
this axis, that's specified in the trace or via the global `layout.calendar`
Code:fig.update_xaxes(categoryarray=&lt;VALUE&gt;)
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with
`categoryorder`.
Code:fig.update_xaxes(categoryorder=&lt;VALUE&gt;)
Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total
descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum
descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" |
"median ascending" | "median descending" )
Default:"trace"
Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is
present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be
determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the
attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be
identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to
"total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order
can be determined by the min, max, sum, mean, geometric mean or median of all the values.
Code:fig.update_xaxes(color=&lt;VALUE&gt;)
Type: color
Default:"#444"
minallowed
autotickangles
autotypenumbers
calendar
categoryarray
categoryorder
color
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 2/22

--- Página 3 ---
Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending
this with the plot background Individual pieces can override this.
Code:fig.update_xaxes(constrain=&lt;VALUE&gt;)
Type: enumerated , one of ( "range" | "domain" )
If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines
how that happens: by increasing the "range", or by decreasing the "domain". Default is "domain" for axes containing image
traces, "range" otherwise.
Code:fig.update_xaxes(constraintoward=&lt;VALUE&gt;)
Type: enumerated , one of ( "left" | "center" | "right" | "top" | "middle" | "bottom" )
If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines
which direction we push the originally specified plot area. Options are "left", "center" (default), and "right" for x axes, and "top",
"middle" (default), and "bottom" for y axes.
Code:fig.update_xaxes(dividercolor=&lt;VALUE&gt;)
Type: color
Default:"#444"
Sets the color of the dividers Only has an effect on "multicategory" axes.
Code:fig.update_xaxes(dividerwidth=&lt;VALUE&gt;)
Type: number
Default:1
Sets the width (in px) of the dividers Only has an effect on "multicategory" axes.
Code:fig.update_xaxes(domain=list(...))
Type: list
Default:[0, 1]
Sets the domain of this axis (in plot fraction).
Code:fig.update_xaxes(dtick=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and
"date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick
mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125,
625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number,
gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc.
To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If
the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one
day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a
positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4
years, set `dtick` to "M48"
Code:fig.update_xaxes(exponentformat=&lt;VALUE&gt;)
Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" )
Default:"B"
Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as
1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.
constrain
constraintoward
dividercolor
dividerwidth
domain
dtick
exponentformat
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 3/22

--- Página 4 ---
Code:fig.update_xaxes(fixedrange=&lt;VALUE&gt;)
Type: boolean
Determines whether or not this axis is zoom-able. If True, then zoom is disabled.
Code:fig.update_xaxes(gridcolor=&lt;VALUE&gt;)
Type: color
Default:"#eee"
Sets the color of the grid lines.
Code:fig.update_xaxes(griddash=&lt;VALUE&gt;)
Type: string
Default:"solid"
Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash
length list in px (eg "5px,10px,2px,2px").
Code:fig.update_xaxes(gridwidth=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:1
Sets the width (in px) of the grid lines.
Code:fig.update_xaxes(hoverformat=&lt;VALUE&gt;)
Type: string
Default:""
Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers,
see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-
format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as
well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f"
would display "09~15~23.46"
Code:fig.update_xaxes(insiderange=list(...))
Type: list
Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has
"inside". Not implemented for axes with `type` "log". This would be ignored when `range` is provided.
Code:fig.update_xaxes(labelalias=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to
Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative
numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of
-1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or
MathJax.
Code:fig.update_xaxes(layer=&lt;VALUE&gt;)
Type: enumerated , one of ( "above traces" | "below traces" )
Default:"above traces"
fixedrange
gridcolor
griddash
gridwidth
hoverformat
insiderange
labelalias
layer
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 4/22

--- Página 5 ---
Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below
traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like
traces with `cliponaxis` set to "False" to show markers and/or text nodes above this axis.
Code:fig.update_xaxes(linecolor=&lt;VALUE&gt;)
Type: color
Default:"#444"
Sets the axis line color.
Code:fig.update_xaxes(linewidth=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:1
Sets the width (in px) of the axis line.
Code:fig.update_xaxes(matches=&lt;VALUE&gt;)
Type: enumerated , one of ( "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" )
If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates
space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes
simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes
must have the same `type`.
Code:fig.update_xaxes(maxallowed=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Determines the maximum range of this axis.
Code:fig.update_xaxes(minallowed=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Determines the minimum range of this axis.
Code:fig.update_xaxes(minexponent=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:3
Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".
Code:fig.update_xaxes(minor=dict(...))
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(minor_dtick=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log"
and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to
set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at
1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a
positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put
ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5).
`tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For
linecolor
linewidth
matches
maxallowed
minallowed
minexponent
minor
dtick
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 5/22

--- Página 6 ---
example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;"
gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month,
set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"
Code:fig.update_xaxes(minor_gridcolor=&lt;VALUE&gt;)
Type: color
Default:"#eee"
Sets the color of the grid lines.
Code:fig.update_xaxes(minor_griddash=&lt;VALUE&gt;)
Type: string
Default:"solid"
Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a
dash length list in px (eg "5px,10px,2px,2px").
Code:fig.update_xaxes(minor_gridwidth=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Sets the width (in px) of the grid lines.
Code:fig.update_xaxes(minor_nticks=&lt;VALUE&gt;)
Type: integer greater than or equal to 0
Default:5
Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to
be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".
Code:fig.update_xaxes(minor_showgrid=&lt;VALUE&gt;)
Type: boolean
Determines whether or not grid lines are drawn. If "True", the grid lines are drawn at every tick mark.
Code:fig.update_xaxes(minor_tick0=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of
your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more
info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a
number, using the scale where each category is assigned a serial number from zero in the order it appears.
Code:fig.update_xaxes(minor_tickcolor=&lt;VALUE&gt;)
Type: color
Default:"#444"
Sets the tick color.
Code:fig.update_xaxes(minor_ticklen=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Sets the tick length (in px).
gridcolor
griddash
gridwidth
nticks
showgrid
tick0
tickcolor
ticklen
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 6/22

--- Página 7 ---
Code:fig.update_xaxes(minor_tickmode=&lt;VALUE&gt;)
Type: enumerated , one of ( "auto" | "linear" | "array" )
Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is
determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are
provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value
if `tickvals` is provided).
Code:fig.update_xaxes(minor_ticks=&lt;VALUE&gt;)
Type: enumerated , one of ( "outside" | "inside" | "" )
Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn
outside (inside) the axis lines.
Code:fig.update_xaxes(minor_tickvals=&lt;VALUE&gt;)
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.
Code:fig.update_xaxes(minor_tickwidth=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Sets the tick width (in px).
Code:fig.update_xaxes(mirror=&lt;VALUE&gt;)
Type: enumerated , one of ( True | "ticks" | False | "all" | "allticks" )
Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "True", the axis lines are
mirrored. If "ticks", the axis lines and ticks are mirrored. If "False", mirroring is disable. If "all", axis lines are mirrored on all
shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.
Code:fig.update_xaxes(nticks=&lt;VALUE&gt;)
Type: integer greater than or equal to 0
Default:0
Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less
than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".
Code:fig.update_xaxes(overlaying=&lt;VALUE&gt;)
Type: enumerated , one of ( "free" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" )
If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both
axes. If "False", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-
numbered axis will be visible.
Code:fig.update_xaxes(position=&lt;VALUE&gt;)
Type: number between or equal to 0 and 1
Default:0
Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".
Code:fig.update_xaxes(range=list(...))
Type: list
tickmode
ticks
tickvals
tickwidth
mirror
nticks
overlaying
position
range
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 7/22

--- Página 8 ---
Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1
to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and
unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale
where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null`
impacts the default `autorange`.
Code:fig.update_xaxes(rangebreaks=list(...))
Type: list of dict where each dict has one or more of the keys listed below.
Parent:layout.xaxis.rangebreaks[]
Type: list
Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.
Parent:layout.xaxis.rangebreaks[]
Type: number greater than or equal to 0
Default:86400000
Sets the size of each `values` item. The default is one day in milliseconds.
Parent:layout.xaxis.rangebreaks[]
Type: boolean
Default:True
Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for "date" axis
type.
Parent:layout.xaxis.rangebreaks[]
Type: string
When used in a template, named items are created in the output figure in addition to any items the figure already has in
this array. You can modify these items in the output figure by making your own item with `templateitemname` matching
this `name` alongside your modifications (including `visible: False` or `enabled: False` to hide it). Has no effect outside of a
template.
Parent:layout.xaxis.rangebreaks[]
Type: enumerated , one of ( "day of week" | "hour" | "" )
Determines a pattern on the time line that generates breaks. If "day of week" - days of the week in English e.g. 'Sunday' or
`sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers
between 0 and 6. If "hour" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - {
pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the
weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).
Parent:layout.xaxis.rangebreaks[]
Type: string
Used to refer to a named item in this array in the template. Named items from the template will be created even without
a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its
`name`, alongside your modifications (including `visible: False` or `enabled: False` to hide it). If there is no template or no
matching item, this item will be hidden unless you explicitly show it with `visible: True`.
Parent:layout.xaxis.rangebreaks[]
Type: list
rangebreaks
bounds
dvalue
enabled
name
pattern
templateitemname
values
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 8/22

--- Página 9 ---
Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of
the values along the axis.
Code:fig.update_xaxes(rangemode=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" )
Default:"normal"
If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of
the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.
Code:fig.update_xaxes(rangeselector=dict(...))
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(rangeselector_activecolor=&lt;VALUE&gt;)
Type: color
Sets the background color of the active range selector button.
Code:fig.update_xaxes(rangeselector_bgcolor=&lt;VALUE&gt;)
Type: color
Default:"#eee"
Sets the background color of the range selector buttons.
Code:fig.update_xaxes(rangeselector_bordercolor=&lt;VALUE&gt;)
Type: color
Default:"#444"
Sets the color of the border enclosing the range selector.
Code:fig.update_xaxes(rangeselector_borderwidth=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:0
Sets the width (in px) of the border enclosing the range selector.
Code:fig.update_xaxes(rangeselector_buttons=list(...))
Type: list of dict where each dict has one or more of the keys listed below.
Parent:layout.xaxis.rangeselector.buttons[]
Type: number greater than or equal to 0
Default:1
Sets the number of steps to take to update the range. Use with `step` to specify the update interval.
Parent:layout.xaxis.rangeselector.buttons[]
Type: string
Sets the text label to appear on the button.
Parent:layout.xaxis.rangeselector.buttons[]
rangemode
rangeselector
activecolor
bgcolor
bordercolor
borderwidth
buttons
count
label
name
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 9/22

--- Página 10 ---
Type: string
When used in a template, named items are created in the output figure in addition to any items the figure already
has in this array. You can modify these items in the output figure by making your own item with
`templateitemname` matching this `name` alongside your modifications (including `visible: False` or `enabled:
False` to hide it). Has no effect outside of a template.
Parent:layout.xaxis.rangeselector.buttons[]
Type: enumerated , one of ( "month" | "year" | "day" | "hour" | "minute" | "second" | "all" )
Default:"month"
The unit of measurement that the `count` value will set the range by.
Parent:layout.xaxis.rangeselector.buttons[]
Type: enumerated , one of ( "backward" | "todate" )
Default:"backward"
Sets the range update mode. If "backward", the range update shifts the start of range back "count" times "step"
milliseconds. If "todate", the range update shifts the start of range back to the first timestamp from "count" times
"step" milliseconds back. For example, with `step` set to "year" and `count` set to "1" the range update shifts the
start of the range back to January 01 of the current year. Month and year "todate" are currently available only for
the built-in (Gregorian) calendar.
Parent:layout.xaxis.rangeselector.buttons[]
Type: string
Used to refer to a named item in this array in the template. Named items from the template will be created even
without a matching item in the input figure, but you can modify one by making an item with `templateitemname`
matching its `name`, alongside your modifications (including `visible: False` or `enabled: False` to hide it). If there is
no template or no matching item, this item will be hidden unless you explicitly show it with `visible: True`.
Parent:layout.xaxis.rangeselector.buttons[]
Type: boolean
Default:True
Determines whether or not this button is visible.
Code:fig.update_xaxes(rangeselector_font=dict(...))
Type: dict containing one or more of the keys listed below.
Sets the font of the range selector button text.
Code:fig.update_xaxes(rangeselector_font_color=&lt;VALUE&gt;)
Type: color
Code:fig.update_xaxes(rangeselector_font_family=&lt;VALUE&gt;)
Type: string
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to
apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas,
to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at
https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts
are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans
Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New
Roman".
step
stepmode
templateitemname
visible
font
color
family
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 10/22

--- Página 11 ---
Code:fig.update_xaxes(rangeselector_font_lineposition=&lt;VALUE&gt;)
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Code:fig.update_xaxes(rangeselector_font_shadow=&lt;VALUE&gt;)
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font
color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_xaxes(rangeselector_font_size=&lt;VALUE&gt;)
Type: number greater than or equal to 1
Code:fig.update_xaxes(rangeselector_font_style=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_xaxes(rangeselector_font_textcase=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
Code:fig.update_xaxes(rangeselector_font_variant=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" |
"unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_xaxes(rangeselector_font_weight=&lt;VALUE&gt;)
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_xaxes(rangeselector_visible=&lt;VALUE&gt;)
Type: boolean
Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type`
set to or auto-typed to "date".
Code:fig.update_xaxes(rangeselector_x=&lt;VALUE&gt;)
Type: number between or equal to -2 and 3
lineposition
shadow
size
style
textcase
variant
weight
visible
x
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 11/22

--- Página 12 ---
Sets the x position (in normalized coordinates) of the range selector.
Code:fig.update_xaxes(rangeselector_xanchor=&lt;VALUE&gt;)
Type: enumerated , one of ( "auto" | "left" | "center" | "right" )
Default:"left"
Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of
the range selector.
Code:fig.update_xaxes(rangeselector_y=&lt;VALUE&gt;)
Type: number between or equal to -2 and 3
Sets the y position (in normalized coordinates) of the range selector.
Code:fig.update_xaxes(rangeselector_yanchor=&lt;VALUE&gt;)
Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" )
Default:"bottom"
Sets the range selector's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of
the range selector.
Code:fig.update_xaxes(rangeslider=dict(...))
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(rangeslider_autorange=&lt;VALUE&gt;)
Type: boolean
Default:True
Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then
`autorange` is set to "False".
Code:fig.update_xaxes(rangeslider_bgcolor=&lt;VALUE&gt;)
Type: color
Default:"#fff"
Sets the background color of the range slider.
Code:fig.update_xaxes(rangeslider_bordercolor=&lt;VALUE&gt;)
Type: color
Default:"#444"
Sets the border color of the range slider.
Code:fig.update_xaxes(rangeslider_borderwidth=&lt;VALUE&gt;)
Type: integer greater than or equal to 0
Default:0
Sets the border width of the range slider.
Code:fig.update_xaxes(rangeslider_range=list(...))
Type: list
xanchor
y
yanchor
rangeslider
autorange
bgcolor
bordercolor
borderwidth
range
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 12/22

--- Página 13 ---
Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is "log", then you must take
the log of your desired range. If the axis `type` is "date", it should be date strings, like date data, though Date objects and
unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using
the scale where each category is assigned a serial number from zero in the order it appears.
Code:fig.update_xaxes(rangeslider_thickness=&lt;VALUE&gt;)
Type: number between or equal to 0 and 1
Default:0.15
The height of the range slider as a fraction of the total plot area height.
Code:fig.update_xaxes(rangeslider_visible=&lt;VALUE&gt;)
Type: boolean
Default:True
Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`
Code:fig.update_xaxes(rangeslider_yaxis=dict(...))
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(rangeslider_yaxis_range=list(...))
Type: list
Sets the range of this axis for the rangeslider.
Code:fig.update_xaxes(rangeslider_yaxis_rangemode=&lt;VALUE&gt;)
Type: enumerated , one of ( "auto" | "fixed" | "match" )
Default:"match"
Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when
zooming in/out. If "auto", the autorange will be used. If "fixed", the `range` is used. If "match", the current range of
the corresponding y-axis on the main subplot is used.
Code:fig.update_xaxes(scaleanchor=&lt;VALUE&gt;)
Type: enumerated , one of ( "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" | False )
If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that
the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the
same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can
chain these, ie `yaxis: {scaleanchor: "x"}, xaxis2: {scaleanchor: "y"}` but you can only link axes of the same `type`. The linked axis
can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis:
{scaleanchor: "x"}, xaxis: {scaleanchor: "y"}` or longer) are redundant and the last constraint encountered will be ignored to
avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a
`matches` constraint is currently forbidden. Setting `False` allows to remove a default constraint (occasionally, you may need to
prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set
automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: False}` allows to remove the constraint).
Code:fig.update_xaxes(scaleratio=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:1
If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then
every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an
elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
thickness
visible
yaxis
range
rangemode
scaleanchor
scaleratio
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 13/22

--- Página 14 ---
Code:fig.update_xaxes(separatethousands=&lt;VALUE&gt;)
Type: boolean
If "True", even 4-digit integers are separated
Code:fig.update_xaxes(showdividers=&lt;VALUE&gt;)
Type: boolean
Default:True
Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on "multicategory"
axes.
Code:fig.update_xaxes(showexponent=&lt;VALUE&gt;)
Type: enumerated , one of ( "all" | "first" | "last" | "none" )
Default:"all"
If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the
exponent of the last tick is shown. If "none", no exponents appear.
Code:fig.update_xaxes(showgrid=&lt;VALUE&gt;)
Type: boolean
Determines whether or not grid lines are drawn. If "True", the grid lines are drawn at every tick mark.
Code:fig.update_xaxes(showline=&lt;VALUE&gt;)
Type: boolean
Determines whether or not a line bounding this axis is drawn.
Code:fig.update_xaxes(showspikes=&lt;VALUE&gt;)
Type: boolean
Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
Code:fig.update_xaxes(showticklabels=&lt;VALUE&gt;)
Type: boolean
Default:True
Determines whether or not the tick labels are drawn.
Code:fig.update_xaxes(showtickprefix=&lt;VALUE&gt;)
Type: enumerated , one of ( "all" | "first" | "last" | "none" )
Default:"all"
If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is
displayed with a suffix. If "none", tick prefixes are hidden.
Code:fig.update_xaxes(showticksuffix=&lt;VALUE&gt;)
Type: enumerated , one of ( "all" | "first" | "last" | "none" )
Default:"all"
Same as `showtickprefix` but for tick suffixes.
separatethousands
showdividers
showexponent
showgrid
showline
showspikes
showticklabels
showtickprefix
showticksuffix
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 14/22

--- Página 15 ---
Code:fig.update_xaxes(side=&lt;VALUE&gt;)
Type: enumerated , one of ( "top" | "bottom" | "left" | "right" )
Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.
Code:fig.update_xaxes(spikecolor=&lt;VALUE&gt;)
Type: color
Sets the spike color. If undefined, will use the series color
Code:fig.update_xaxes(spikedash=&lt;VALUE&gt;)
Type: string
Default:"dash"
Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash
length list in px (eg "5px,10px,2px,2px").
Code:fig.update_xaxes(spikemode=&lt;VALUE&gt;)
Type: flaglist string. Any combination of "toaxis", "across", "marker" joined with a "+"
Examples:"toaxis", "across", "toaxis+across", "toaxis+across+marker"
Default:"toaxis"
Determines the drawing mode for the spike line If "toaxis", the line is drawn from the data point to the axis the series is plotted
on. If "across", the line is drawn across the entire plot area, and supercedes "toaxis". If "marker", then a marker dot is drawn on
the axis the series is plotted on
Code:fig.update_xaxes(spikesnap=&lt;VALUE&gt;)
Type: enumerated , one of ( "data" | "cursor" | "hovered data" )
Default:"hovered data"
Determines whether spikelines are stuck to the cursor or to the closest datapoints.
Code:fig.update_xaxes(spikethickness=&lt;VALUE&gt;)
Type: number
Default:3
Sets the width (in px) of the zero line.
Code:fig.update_xaxes(tick0=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your
starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the
axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the
scale where each category is assigned a serial number from zero in the order it appears.
Code:fig.update_xaxes(tickangle=&lt;VALUE&gt;)
Type: angle
Default:"auto"
Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
Code:fig.update_xaxes(tickcolor=&lt;VALUE&gt;)
side
spikecolor
spikedash
spikemode
spikesnap
spikethickness
tick0
tickangle
tickcolor
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 15/22

--- Página 16 ---
Type: color
Default:"#444"
Sets the tick color.
Code:fig.update_xaxes(tickfont=dict(...))
Type: dict containing one or more of the keys listed below.
Sets the tick font.
Code:fig.update_xaxes(tickfont_color=&lt;VALUE&gt;)
Type: color
Code:fig.update_xaxes(tickfont_family=&lt;VALUE&gt;)
Type: string
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font
if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the
preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-
studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and
supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One",
"Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".
Code:fig.update_xaxes(tickfont_lineposition=&lt;VALUE&gt;)
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Code:fig.update_xaxes(tickfont_shadow=&lt;VALUE&gt;)
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color.
See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_xaxes(tickfont_size=&lt;VALUE&gt;)
Type: number greater than or equal to 1
Code:fig.update_xaxes(tickfont_style=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_xaxes(tickfont_textcase=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
tickfont
color
family
lineposition
shadow
size
style
textcase
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 16/22

--- Página 17 ---
Code:fig.update_xaxes(tickfont_variant=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_xaxes(tickfont_weight=&lt;VALUE&gt;)
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_xaxes(tickformat=&lt;VALUE&gt;)
Type: string
Default:""
Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers,
see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-
format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as
well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f"
would display "09~15~23.46"
Code:fig.update_xaxes(tickformatstops=list(...))
Type: list of dict where each dict has one or more of the keys listed below.
Parent:layout.xaxis.tickformatstops[]
Type: list
range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or
"max" value by passing "null"
Parent:layout.xaxis.tickformatstops[]
Type: boolean
Default:True
Determines whether or not this stop is used. If `False`, this stop is ignored even within its `dtickrange`.
Parent:layout.xaxis.tickformatstops[]
Type: string
When used in a template, named items are created in the output figure in addition to any items the figure already has in
this array. You can modify these items in the output figure by making your own item with `templateitemname` matching
this `name` alongside your modifications (including `visible: False` or `enabled: False` to hide it). Has no effect outside of a
template.
Parent:layout.xaxis.tickformatstops[]
Type: string
Used to refer to a named item in this array in the template. Named items from the template will be created even without
a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its
`name`, alongside your modifications (including `visible: False` or `enabled: False` to hide it). If there is no template or no
matching item, this item will be hidden unless you explicitly show it with `visible: True`.
variant
weight
tickformat
tickformatstops
dtickrange
enabled
name
templateitemname
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 17/22

--- Página 18 ---
Parent:layout.xaxis.tickformatstops[]
Type: string
Default:""
string - dtickformat for described zoom level, the same as "tickformat"
Code:fig.update_xaxes(ticklabelindex=&lt;VALUE&gt;)
Type: integer or array of integers
Only for axes with `type` "date" or "linear". Instead of drawing the major tick label, draw the label for the minor tick that is n
positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose
`ticklabelindex` -1. This is useful for date axes with `ticklabelmode` "period" if you want to label the period that ends with each
major tick instead of the period that begins there.
Code:fig.update_xaxes(ticklabelmode=&lt;VALUE&gt;)
Type: enumerated , one of ( "instant" | "period" )
Default:"instant"
Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of
`type` "date" When set to "period", tick labels are drawn in the middle of the period between ticks.
Code:fig.update_xaxes(ticklabeloverflow=&lt;VALUE&gt;)
Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" )
Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for
inside tick labels is "hide past domain". Otherwise on "category" and "multicategory" axes the default is "allow". In other cases
the default is "hide past div".
Code:fig.update_xaxes(ticklabelposition=&lt;VALUE&gt;)
Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" |
"inside right" | "outside bottom" | "inside bottom" )
Default:"outside"
Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when
`ticklabelmode` is set to "period". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to "period". Has no
effect on "multicategory" axes or when `tickson` is set to "boundaries". When used on axes linked by `matches` or `scaleanchor`,
no extra padding for inside labels would be added by autorange, so that the scales could match.
Code:fig.update_xaxes(ticklabelshift=&lt;VALUE&gt;)
Type: integer
Default:0
Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive
direction of the axis.
Code:fig.update_xaxes(ticklabelstandoff=&lt;VALUE&gt;)
Type: integer
Default:0
Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the
labels farther away from the plot area if `ticklabelposition` is "outside", and deeper into the plot area if `ticklabelposition` is
"inside". A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside
ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.
value
ticklabelindex
ticklabelmode
ticklabeloverflow
ticklabelposition
ticklabelshift
ticklabelstandoff
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 18/22

--- Página 19 ---
Code:fig.update_xaxes(ticklabelstep=&lt;VALUE&gt;)
Type: integer greater than or equal to 1
Default:1
Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a
label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which
labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".
Code:fig.update_xaxes(ticklen=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:5
Sets the tick length (in px).
Code:fig.update_xaxes(tickmode=&lt;VALUE&gt;)
Type: enumerated , one of ( "auto" | "linear" | "array" | "sync" )
Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is
determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If
"array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is
provided). If "sync", the number of ticks will sync with the overlayed axis set by `overlaying` property.
Code:fig.update_xaxes(tickprefix=&lt;VALUE&gt;)
Type: string
Default:""
Sets a tick label prefix.
Code:fig.update_xaxes(ticks=&lt;VALUE&gt;)
Type: enumerated , one of ( "outside" | "inside" | "" )
Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside
(inside) the axis lines.
Code:fig.update_xaxes(tickson=&lt;VALUE&gt;)
Type: enumerated , one of ( "labels" | "boundaries" )
Default:"labels"
Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of
`type` "category" or "multicategory". When set to "boundaries", ticks and grid lines are drawn half a category to the left/bottom
of labels.
Code:fig.update_xaxes(ticksuffix=&lt;VALUE&gt;)
Type: string
Default:""
Sets a tick label suffix.
Code:fig.update_xaxes(ticktext=&lt;VALUE&gt;)
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.
Code:fig.update_xaxes(tickvals=&lt;VALUE&gt;)
ticklabelstep
ticklen
tickmode
tickprefix
ticks
tickson
ticksuffix
ticktext
tickvals
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 19/22

--- Página 20 ---
Type: list, numpy array, or Pandas series of numbers, strings, or datetimes.
Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.
Code:fig.update_xaxes(tickwidth=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Default:1
Sets the tick width (in px).
Code:fig.update_xaxes(title=dict(...))
Type: dict containing one or more of the keys listed below.
Code:fig.update_xaxes(title_font=dict(...))
Type: dict containing one or more of the keys listed below.
Sets this axis' title font.
Code:fig.update_xaxes(title_font_color=&lt;VALUE&gt;)
Type: color
Code:fig.update_xaxes(title_font_family=&lt;VALUE&gt;)
Type: string
HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to
apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas,
to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at
https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts
are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans
Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New
Roman".
Code:fig.update_xaxes(title_font_lineposition=&lt;VALUE&gt;)
Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none".
Examples:"under", "over", "under+over", "under+over+through", "none"
Default:"none"
Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g.
"under+over", etc.
Code:fig.update_xaxes(title_font_shadow=&lt;VALUE&gt;)
Type: string
Default:"none"
Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font
color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
Code:fig.update_xaxes(title_font_size=&lt;VALUE&gt;)
Type: number greater than or equal to 1
Code:fig.update_xaxes(title_font_style=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "italic" )
Default:"normal"
tickwidth
title
font
color
family
lineposition
shadow
size
style
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 20/22

--- Página 21 ---
Sets whether a font should be styled with a normal or italic face from its family.
Code:fig.update_xaxes(title_font_textcase=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" )
Default:"normal"
Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word
capitalized.
Code:fig.update_xaxes(title_font_variant=&lt;VALUE&gt;)
Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" |
"unicase" )
Default:"normal"
Sets the variant of the font.
Code:fig.update_xaxes(title_font_weight=&lt;VALUE&gt;)
Type: integer between or equal to 1 and 1000
Default:normal
Sets the weight (or boldness) of the font.
Code:fig.update_xaxes(title_standoff=&lt;VALUE&gt;)
Type: number greater than or equal to 0
Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick
labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the
margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on
`automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
Code:fig.update_xaxes(title_text=&lt;VALUE&gt;)
Type: string
Sets the title of this axis.
Code:fig.update_xaxes(type=&lt;VALUE&gt;)
Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" | "multicategory" )
Default:"-"
Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced
the axis in question.
Code:fig.update_xaxes(uirevision=&lt;VALUE&gt;)
Type: number or categorical coordinate string
Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: True` configuration. Defaults to
`layout.uirevision`.
Code:fig.update_xaxes(visible=&lt;VALUE&gt;)
Type: boolean
A single toggle to hide the axis while preserving interaction like dragging. Default is True when a cheater plot is present on the
axis, otherwise False
textcase
variant
weight
standoff
text
type
uirevision
visible
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 21/22

--- Página 22 ---
Code:fig.update_xaxes(zeroline=&lt;VALUE&gt;)
Type: boolean
Determines whether or not a line is drawn at along the 0 value of this axis. If "True", the zero line is drawn on top of the grid
lines.
Code:fig.update_xaxes(zerolinecolor=&lt;VALUE&gt;)
Type: color
Default:"#444"
Sets the line color of the zero line.
Code:fig.update_xaxes(zerolinewidth=&lt;VALUE&gt;)
Type: number
Default:1
Sets the width (in px) of the zero line.
zeroline
zerolinecolor
zerolinewidth
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:05 Layout.xaxis in Python
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector 22/22</content>
      </file>
      <file name="Plotly figurewidget overview in Python.pdf" path="pyvy_2x10/Plotly figurewidget overview in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Create a Simple FigureWidget &gt;  &gt; Plotly
FigureWidget Overview
Plotly FigureWidget Overview in Python
Introduction to the new Plotly FigureWidget
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Chart Events (/python/chart-events)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/figurewidget.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Create an empty FigureWidget and then view it.
import plotly.graph_objects  as go
f = go.FigureWidget ()
f
Add traces or update the layout and then watch the output above update in real time.
f.add_scatter (y=[2, 1, 4, 3]);
f.add_bar(y=[1, 4, 3, 2]);
f.layout.title = 'Hello FigureWidget'
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
gure16/07/2025, 07:00 Plotly figurewidget overview in Python
https://plotly.com/python/figurewidget/ 1/4

--- Página 2 ---
Update the Data and the Layout
Construct a FigureWidget from a Figure graph object
Reference
# update scatter data
scatter = f.data[0]
scatter.y = [3, 1, 4, 3]
# update bar data
bar = f.data[1]
bar.y = [5, 3, 2, 8]
f.layout.title.text = 'This is a new title'
A standard Figure object can be passed to the FigureWidget constructor.
import plotly.graph_objects  as go
trace = go.Heatmap(z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
                   x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                   y=['Morning' , 'Afternoon' , 'Evening' ])
data=[trace]
layout = go.Layout(title=dict(text='Activity Heatmap' ))
figure = go.Figure(data=data, layout=layout)
f2 = go.FigureWidget (figure)
f2
See  for even more FigureWidget examples.
these Jupyter notebooks (https://github.com/jonmmease/plotly_ipywidget_notebooks)
gure16/07/2025, 07:00 Plotly figurewidget overview in Python
https://plotly.com/python/figurewidget/ 2/4

--- Página 3 ---
What About Dash?help(go.FigureWidget )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Help on class FigureWidget in module plotly.graph_objs._figurewidget:
class FigureWidget(plotly.basewidget.BaseFigureWidget)
|  FigureWidget(data=None, layout=None, frames=None, skip_invalid=False, **kwargs)
|  
|  Method resolution order:
|      FigureWidget
|      plotly.basewidget.BaseFigureWidget
|      plotly.basedatatypes.BaseFigure
|      anywidget.widget.AnyWidget
|      ipywidgets.widgets.domwidget.DOMWidget
|      ipywidgets.widgets.widget.Widget
|ipywidgetswidgetswidgetLoggingHasTraits
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
gure16/07/2025, 07:00 Plotly figurewidget overview in Python
https://plotly.com/python/figurewidget/ 3/4

--- Página 4 ---
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
gure16/07/2025, 07:00 Plotly figurewidget overview in Python
https://plotly.com/python/figurewidget/ 4/4</content>
      </file>
      <file name="Range slider and selector in Python.pdf" path="pyvy_2x10/Range slider and selector in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Range Slider and Range Selectors &gt;  &gt; Range Slider
and Selector
Range Slider and Selector in Python
Now you can implement range sliders and selectors in your Plotly graphs purely with python!
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Custom Controls (/python/#controls)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/range-
slider.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 1/8

--- Página 2 ---
import plotly.graph_objects  as go
import pandas as pd
# Load data
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv" )
df.columns = [col.replace("AAPL.", "") for col in df.columns]
# Create figure
fig = go.Figure()
fig.add_trace (
    go.Scatter(x=list(df.Date), y=list(df.High)))
# Set title
fig.update_layout (
    title_text ="Time series with range slider and selectors"
)
# Add range slider
fig.update_layout (
    xaxis=dict(
        rangeselector =dict(
            buttons=list([
                dict(count=1,
                     label="1m",
                     step="month",
                     stepmode ="backward" ),
                dict(count=6,
                     label="6m",
                     step="month",
                     stepmode ="backward" ),
                dict(count=1,
                     label="YTD",
                     step="year",
                     stepmode ="todate" ),
                dict(count=1,
                     label="1y",
                     step="year",
                     stepmode ="backward" ),
                dict(step="all")
            ])
        ),
        rangeslider =dict(
            visible=True
        ),
        type="date"
    )
)
fig.show()
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 2/8

--- Página 3 ---
Range Slider with Vertically Stacked SubplotsApr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 2017901001101201301m6mYTD1yallTime series with range slider and selectors
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 3/8

--- Página 4 ---
import plotly.graph_objects  as go
# Create figure
fig = go.Figure()
# Add traces
fig.add_trace (go.Scatter(
    x=["2013-01-15" , "2013-01-29" , "2013-02-26" , "2013-04-19" , "2013-07-02" ,
       "2013-08-27" ,
       "2013-10-22" , "2014-01-20" , "2014-05-05" , "2014-07-01" , "2015-02-09" ,
       "2015-04-13" ,
       "2015-05-13" , "2015-06-08" , "2015-08-05" , "2016-02-25" ],
    y=["8", "3", "2", "10", "5", "5", "6", "8", "3", "3", "7", "5", "10", "10", "9",
       "14"],
    name="var0",
    text=["8", "3", "2", "10", "5", "5", "6", "8", "3", "3", "7", "5", "10", "10", "9",
          "14"],
    yaxis="y",
))
fig.add_trace (go.Scatter(
    x=["2015-04-13" , "2015-05-13" , "2015-06-08" , "2015-08-05" , "2016-02-25" ],
    y=["53.0", "69.0", "89.0", "41.0", "41.0"],
    name="var1",
    text=["53.0", "69.0", "89.0", "41.0", "41.0"],
    yaxis="y2",
))
fig.add_trace (go.Scatter(
    x=["2013-01-29" , "2013-02-26" , "2013-04-19" , "2013-07-02" , "2013-08-27" ,
       "2013-10-22" ,
       "2014-01-20" , "2014-04-09" , "2014-05-05" , "2014-07-01" , "2014-09-30" ,
       "2015-02-09" ,
       "2015-04-13" , "2015-06-08" , "2016-02-25" ],
    y=["9.6", "4.6", "2.7", "8.3", "18", "7.3", "3", "7.5", "1.0", "0.5", "2.8", "9.2",
       "13", "5.8", "6.9"],
    name="var2",
    text=["9.6", "4.6", "2.7", "8.3", "18", "7.3", "3", "7.5", "1.0", "0.5", "2.8",
          "9.2",
          "13", "5.8", "6.9"],
    yaxis="y3",
))
fig.add_trace (go.Scatter(
    x=["2013-01-29" , "2013-02-26" , "2013-04-19" , "2013-07-02" , "2013-08-27" ,
       "2013-10-22" ,
       "2014-01-20" , "2014-04-09" , "2014-05-05" , "2014-07-01" , "2014-09-30" ,
       "2015-02-09" ,
       "2015-04-13" , "2015-06-08" , "2016-02-25" ],
    y=["6.9", "7.5", "7.3", "7.3", "6.9", "7.1", "8", "7.8", "7.4", "7.9", "7.9", "7.6",
       "7.2", "7.2", "8.0"],
    name="var3",
    text=["6.9", "7.5", "7.3", "7.3", "6.9", "7.1", "8", "7.8", "7.4", "7.9", "7.9",
          "7.6",
          "7.2", "7.2", "8.0"],
    yaxis="y4",
))
fig.add_trace (go.Scatter(
    x=["2013-02-26" , "2013-07-02" , "2013-09-26" , "2013-10-22" , "2013-12-04" ,
       "2014-01-02" ,
       "2014-01-20" , "2014-05-05" , "2014-07-01" , "2015-02-09" , "2015-05-05" ],
    y=["290", "1078", "263", "407", "660", "740", "33", "374", "95", "734", "3000"],
    name="var4",
    text=["290", "1078", "263", "407", "660", "740", "33", "374", "95", "734", "3000"],
    yaxis="y5",
))
# style all the traces
fig.update_traces (
    hoverinfo ="name+x+text" ,
    line={"width": 0.5},
    marker={"size": 8},
    mode="lines+markers" ,
    showlegend =False
)
# Add annotations
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 4/8

--- Página 5 ---
fig.update_layout (
    annotations =[
        dict(
            x="2013-06-01" ,
            y=0,
            arrowcolor ="rgba(63, 81, 181, 0.2)" ,
            arrowsize =0.3,
            ax=0,
            ay=30,
            text="state1" ,
            xref="x",
            yanchor="bottom" ,
            yref="y"
        ),
        dict(
            x="2014-09-13" ,
            y=0,
            arrowcolor ="rgba(76, 175, 80, 0.1)" ,
            arrowsize =0.3,
            ax=0,
            ay=30,
            text="state2" ,
            xref="x",
            yanchor="bottom" ,
            yref="y"
        )
    ],
)
# Add shapes
fig.update_layout (
    shapes=[
        dict(
            fillcolor ="rgba(63, 81, 181, 0.2)" ,
            line={"width": 0},
            type="rect",
            x0="2013-01-15" ,
            x1="2013-10-17" ,
            xref="x",
            y0=0,
            y1=0.95,
            yref="paper"
        ),
        dict(
            fillcolor ="rgba(76, 175, 80, 0.1)" ,
            line={"width": 0},
            type="rect",
            x0="2013-10-22" ,
            x1="2015-08-05" ,
            xref="x",
            y0=0,
            y1=0.95,
            yref="paper"
        )
    ]
)
# Update axes
fig.update_layout (
    xaxis=dict(
        autorange =True,
        range=["2012-10-31 18:36:37.3129" , "2016-05-10 05:23:22.6871" ],
        rangeslider =dict(
            autorange =True,
            range=["2012-10-31 18:36:37.3129" , "2016-05-10 05:23:22.6871" ]
        ),
        type="date"
    ),
    yaxis=dict(
        anchor="x",
        autorange =True,
        domain=[0, 0.2],
        linecolor ="#673ab7" ,
        mirror=True,
        range=[-60.0858369099 , 28.4406294707 ],
        showline =True,
        side="right",
        tickfont ={"color": "#673ab7" },
        tickmode ="auto",
        ticks="",
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 5/8

--- Página 6 ---
        title=dict(
            font=dict(
                color="#673ab7"
            )
        ),
        type="linear" ,
        zeroline =False
    ),
    yaxis2=dict(
        anchor="x",
        autorange =True,
        domain=[0.2, 0.4],
        linecolor ="#E91E63" ,
        mirror=True,
        range=[29.3787777032 , 100.621222297 ],
        showline =True,
        side="right",
        tickfont ={"color": "#E91E63" },
        tickmode ="auto",
        ticks="",
        title=dict(
            font=dict(
                color="#E91E63"
            )
        ),
        type="linear" ,
        zeroline =False
    ),
    yaxis3=dict(
        anchor="x",
        autorange =True,
        domain=[0.4, 0.6],
        linecolor ="#795548" ,
        mirror=True,
        range=[-3.73690396239 , 22.2369039624 ],
        showline =True,
        side="right",
        tickfont ={"color": "#795548" },
        tickmode ="auto",
        ticks="",
        title=dict(
            text="mg/L",
            font=dict(
                color="#795548"
            )
        ),
        type="linear" ,
        zeroline =False
    ),
    yaxis4=dict(
        anchor="x",
        autorange =True,
        domain=[0.6, 0.8],
        linecolor ="#607d8b" ,
        mirror=True,
        range=[6.63368032236 , 8.26631967764 ],
        showline =True,
        side="right",
        tickfont ={"color": "#607d8b" },
        tickmode ="auto",
        ticks="",
        title=dict(
            text="mmol/L" ,
            font=dict(
                color="#607d8b"
            )
        ),
        type="linear" ,
        zeroline =False
    ),
    yaxis5=dict(
        anchor="x",
        autorange =True,
        domain=[0.8, 1],
        linecolor ="#2196F3" ,
        mirror=True,
        range=[-685.336803224 , 3718.33680322 ],
        showline =True,
        side="right",
        tickfont ={"color": "#2196F3" },
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 6/8

--- Página 7 ---
Reference        tickmode ="auto",
        ticks="",
        title=dict(
            text="mg/Kg",
            font=dict(
                color="#2196F3"
            )
        ),
        type="linear" ,
        zeroline =False
    )
)
# Update layout
fig.update_layout (
    dragmode ="zoom",
    hovermode ="x",
    legend=dict(traceorder ="reversed" ),
    height=600,
    template ="plotly_white" ,
    margin=dict(
        t=100,
        b=100
    ),
)
fig.show()
See 
and 
for more information and attribute options!
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector)
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeslider (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeslider)Jan 2013 Jul 2013 Jan 2014 Jul 2014 Jan 2015 Jul 2015 Jan 2016−100104060800510152077.580100020003000
mg/Lmmol/Lmg/Kg
state1
 state2
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 7/8

--- Página 8 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
tors16/07/2025, 07:04 Range slider and selector in Python
https://plotly.com/python/range-slider/ 8/8</content>
      </file>
      <file name="Reference index in Python.pdf" path="pyvy_2x10/Reference index in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; Reference Index
Python Figure Reference
The pages linked in the sidebar together form the exhaustive reference for all of the attributes in the core  that the plotly
library operates on. They are automatically-generated from the 
.
How to use these Reference pages
Figures are represented as trees with named nodes called "attributes". The root node of the tree has three top-level attributes: data, layout and frames. Attributes are
referred to in text and in this reference by their full "path" i.e. the dot-delimited concatenation of their parents. For example "layout.width" refers to the attribute whose
key is "width" inside a dict which is the value associated with a key "layout" at the root of the figure. If one of the parents is a list rather than a dict, a set of brackets is
inserted in the path when referring to the attribute in the abstract, e.g. "layout.annotations[].text". Finally, as explained below, the top-level "data" attribute defines a list
of typed objects called "traces" with the schema dependent upon the type, and these attributes' paths are listed in this reference as "data[type=scatter].name". When
, attributes can be set either directly using Python object attributes e.g.
fig.layout.title.font.family="Open Sans" or using  e.g.
fig.update_layout(title_font_family="Open Sans")
When building a figure, it is not necessary to populate every attribute of every object. At render-time, the JavaScript layer will compute default values for each required
unspecified attribute, depending upon the ones that are specified, as documented in this page. An example of this would be layout.xaxis.range, which may be specified
explicitly, but if not will be computed based on the range of x values for every trace linked to that axis. The JavaScript layer will ignore unknown attributes or malformed
values, although the plotly.graph_objects module provides Python-side validation for attribute values. Note also that if 
 then default values will be drawn first from the contents of the template and only if missing from there will the JavaScript layer infer further
defaults. The built-in template can be disabled by setting layout.template="none".
Python (/python)
Figure Reference (/python/reference/index/)
figure data structure (/python/figure-structure/)
machine-readable Plotly.js schema reference
(https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json)
manipulating a plotly.graph_objects.Figure object (/python/creating-and-updating-figures/)
update methods and "magic underscores" (/python/creating-and-updating-figures/#magic-underscore-notation)
the layout.template key is present (as it is by
default) (/python/templates/)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:04 Reference index in Python
https://plotly.com/python/reference/index/ 1/1</content>
      </file>
      <file name="Sliders in Python.pdf" path="pyvy_2x10/Sliders in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Slider Control &gt;  &gt; Sliders
Sliders in Python
How to add slider controls to your plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Custom Controls (/python/#controls)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/sliders.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Sliders can be used in Plotly to change the data displayed or style of a plot.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 07:03 Sliders in Python
https://plotly.com/python/sliders/ 1/4

--- Página 2 ---
import plotly.graph_objects  as go
import numpy as np
# Create figure
fig = go.Figure()
# Add traces, one for each slider step
for step in np.arange(0, 5, 0.1):
    fig.add_trace (
        go.Scatter(
            visible=False,
            line=dict(color="#00CED1" , width=6),
            name=" 𝜈 = " + str(step),
            x=np.arange(0, 10, 0.01),
            y=np.sin(step * np.arange(0, 10, 0.01))))
# Make 10th trace visible
fig.data[10].visible = True
# Create and add slider
steps = []
for i in range(len(fig.data)):
    step = dict(
        method="update" ,
        args=[{"visible" : [False] * len(fig.data)},
              {"title": "Slider switched to step: "  + str(i)}],  # layout attribute
    )
    step["args"][0]["visible" ][i] = True  # Toggle i'th trace to "visible"
    steps.append(step)
sliders = [dict(
    active=10,
    currentvalue ={"prefix" : "Frequency: " },
    pad={"t": 50},
    steps=steps
)]
fig.update_layout (
    sliders=sliders
)
fig.show()
0 1 2 3 4 5 6 7 8 9−1−0.500.51
Frequency: step-10
step-0step-4step-8step-12step-16step-20step-24step-28step-32step-36step-40step-44step-48
16/07/2025, 07:03 Sliders in Python
https://plotly.com/python/sliders/ 2/4

--- Página 3 ---
Methods
"update": modify data and layout attributes (as above)
"restyle": modify data attributes
"relayout": modify layout attributes
"animate": start or pause an animation
Sliders in Plotly Express
ReferenceThe method determines which  will be used to update the chart. Plotly can use several
 methods to add the
slider:
plotly.js function (https://plot.ly/javascript/plotlyjs-function-reference/)
updatemenu (https://plot.ly/python/reference/layout/updatemenus/#layout-updatemenus-items-updatemenu-buttons-items-button-method)
Plotly Express provide sliders, but with implicit animation using the "animate" method described above. The animation play button can be omitted by removing
updatemenus in the layout:
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , animation_frame ="year", animation_group ="country" ,
           size="pop", color="continent" , hover_name ="country" ,
           log_x=True, size_max =55, range_x=[100,100000], range_y=[25,90])
fig["layout" ].pop("updatemenus" ) # optional, drop animation buttons
fig.show()
Check out  for more information!
https://plotly.com/python/reference/layout/updatemenus/ (https://plotly.com/python/reference/layout/updatemenus/)
1002 5 10002 5 10k2 5 100k30405060708090
continent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007gdpPercaplifeExp
16/07/2025, 07:03 Sliders in Python
https://plotly.com/python/sliders/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 07:03 Sliders in Python
https://plotly.com/python/sliders/ 4/4</content>
      </file>
    </category>
    <category name="pyvy_2x3" path="pyvy_2x3">
      <file name="2d histogram contour in Python.pdf" path="pyvy_2x3/2d histogram contour in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)2D Histogram Contours or Density Contours
Density Contours with Plotly Express &gt;  &gt; 2D
Histogram Contour
2D Histogram Contour in Python
How to make 2D Histogram Contour plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/2d-
histogram-contour.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A 2D histogram contour plot, also known as a density contour plot, is a 2-dimensional generalization of a  which resembles a 
 but is computed by grouping a set of points specified by their x and y coordinates into bins, and applying an aggregation function such as
count or sum (if z is provided) to compute the value to be used to compute contours. This kind of visualization (and the related 
) is often used to manage over-plotting, or situations where showing large data sets as  would result in
points overlapping each other and hiding patterns.
histogram (/python/histograms/)
contour
plot (/python/contour-plots/)
2D histogram, or density heatmap
(/python/2d-histogram/)
scatter plots (/python/line-and-scatter/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . The Plotly Express function density_contour() can be used to produce density contours.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip")
fig.show()
Marginal plots can be added to visualize the 1-dimensional distributions of the two variables. Here we use a marginal . Other
allowable values are violin, box and rug.
histogram (/python/histograms/)0 10 20 30 40 500246810
total_billtip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 1/9

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip", marginal_x ="histogram" , marginal_y ="histogram" )
fig.show()
Density contours can also be  and :
faceted (/python/facet-plots/)
discretely colored (/python/discrete-color/)
import plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip", facet_col ="sex", color="smoker" )
fig.show()
Plotly Express density contours can be  and labeled:
continuously-colored (/python/colorscales/)010203040500246810
total_billtip
0 20 400246810
0 20 40smoker
No
Yes
total_bill total_billtipsex=Female sex=Male
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 2/9

--- Página 3 ---
Other aggregation functions than countimport plotly.express  as px
df = px.data.tips()
fig = px.density_contour (df, x="total_bill" , y="tip")
fig.update_traces (contours_coloring ="fill", contours_showlabels  = True)
fig.show()
By passing in a z value and a histfunc, density contours can perform basic aggregation operations. Here we show average Sepal Length grouped by Petal Length and
Petal Width for the Iris dataset.
import plotly.express  as px
df = px.data.iris()
fig = px.density_contour (df, x="petal_length" , y="petal_width" , z="sepal_length" , histfunc ="avg")
fig.show()5
1015
20
25
0 10 20 30 40 500246810
051015202530
total_billtip
0 2 4 6 8−0.500.511.522.53
petal_lengthpetal_width
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 3/9

--- Página 4 ---
2D Histograms with Graph Objects
Basic 2D Histogram Contour
2D Histogram Contour ColorscaleTo build this kind of figure with  without using Plotly Express, we can use the go.Histogram2d class.
graph objects (/python/graph-objects/)
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
x = np.random.uniform(-1, 1, size=500)
y = np.random.uniform(-1, 1, size=500)
fig = go.Figure(go.Histogram2dContour (
        x = x,
        y = y
))
fig.show()
−1.5 −1 −0.5 0 0.5 1 1.5−1−0.500.51
051015202530
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 4/9

--- Página 5 ---
2D Histogram Contour Styledimport plotly.graph_objects  as go
import numpy as np
x = np.random.uniform(-1, 1, size=500)
y = np.random.uniform(-1, 1, size=500)
fig = go.Figure(go.Histogram2dContour (
        x = x,
        y = y,
        colorscale  = 'Blues'
))
fig.show()
−1.5 −1 −0.5 0 0.5 1 1.5−1.5−1−0.500.511.5
05101520253035
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 5/9

--- Página 6 ---
2D Histogram Contour Subplotimport plotly.graph_objects  as go
import numpy as np
x = np.random.uniform(-1, 1, size=500)
y = np.random.uniform(-1, 1, size=500)
fig = go.Figure(go.Histogram2dContour (
        x = x,
        y = y,
        colorscale  = 'Jet',
        contours  = dict(
            showlabels  = True,
            labelfont  = dict(
                family = 'Raleway' ,
                color = 'white'
            )
        ),
        hoverlabel  = dict(
            bgcolor = 'white',
            bordercolor  = 'black',
            font = dict(
                family = 'Raleway' ,
                color = 'black'
            )
        )
))
fig.show()
5
5
1015
2025
30
3540
−1.5 −1 −0.5 0 0.5 1 1.5−1.5−1−0.500.511.5
010203040
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 6/9

--- Página 7 ---
import plotly.graph_objects  as go
import numpy as np
t = np.linspace (-1, 1.2, 2000)
x = (t**3) + (0.3 * np.random.randn(2000))
y = (t**6) + (0.3 * np.random.randn(2000))
fig = go.Figure()
fig.add_trace (go.Histogram2dContour (
        x = x,
        y = y,
        colorscale  = 'Blues',
        reversescale  = True,
        xaxis = 'x',
        yaxis = 'y'
    ))
fig.add_trace (go.Scatter(
        x = x,
        y = y,
        xaxis = 'x',
        yaxis = 'y',
        mode = 'markers' ,
        marker = dict(
            color = 'rgba(0,0,0,0.3)' ,
            size = 3
        )
    ))
fig.add_trace (go.Histogram (
        y = y,
        xaxis = 'x2',
        marker = dict(
            color = 'rgba(0,0,0,1)'
        )
    ))
fig.add_trace (go.Histogram (
        x = x,
        yaxis = 'y2',
        marker = dict(
            color = 'rgba(0,0,0,1)'
        )
    ))
fig.update_layout (
    autosize  = False,
    xaxis = dict(
        zeroline  = False,
        domain = [0,0.85],
        showgrid  = False
    ),
    yaxis = dict(
        zeroline  = False,
        domain = [0,0.85],
        showgrid  = False
    ),
    xaxis2 = dict(
        zeroline  = False,
        domain = [0.85,1],
        showgrid  = False
    ),
    yaxis2 = dict(
        zeroline  = False,
        domain = [0.85,1],
        showgrid  = False
    ),
    height = 600,
    width = 600,
    bargap = 0,
    hovermode  = 'closest' ,
    showlegend  = False
)
fig.show()
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 7/9

--- Página 8 ---
Reference
What About Dash?See  for more information and chart attribute
options!
https://plotly.com/python/reference/histogram2dcontour/ (https://plotly.com/python/reference/histogram2dcontour/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter−1012−1−0.500.511.522.533.505010015005010015020001020304050607080
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 8/9

--- Página 9 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
Contours
s
ount16/07/2025, 06:34 2d histogram contour in Python
https://plotly.com/python/2d-histogram-contour/ 9/9</content>
      </file>
      <file name="2d histograms in Python.pdf" path="pyvy_2x3/2d histograms in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)2D Histograms or Density Heatmaps
Density Heatmaps with Plotly Express &gt;  &gt; 2D
Histograms
2D Histograms in Python
How to make 2D Histograms in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/2D-
Histogram.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A 2D histogram, also known as a density heatmap, is the 2-dimensional generalization of a  which resembles a 
 but is computed by grouping a set of points specified by their x and y coordinates into bins, and applying an aggregation function such as count
or sum (if z is provided) to compute the color of the tile representing the bin. This kind of visualization (and the related 
) is often used to manage over-plotting, or situations where showing large data sets as 
 would result in points overlapping each other and hiding patterns. For data sets of more than a few thousand points, a better approach than the ones
listed here would be to  to precompute the aggregations before displaying the data with Plotly.
histogram (/python/histograms/)
heatmap
(/python/heatmaps/)
2D histogram contour, or density contour
(https://plotly.com/python/2d-histogram-contour/)
scatter plots (/python/line-
and-scatter/)
use Plotly with Datashader (/python/datashader/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . The Plotly Express function density_heatmap() can be used to produce density heatmaps.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip")
fig.show()
The number of bins can be controlled with nbinsx and nbinsy and the  with color_continuous_scale.
color scale (/python/colorscales/)
0 10 20 30 40 500246810
051015202530count
total_billtip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 1/10

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", nbinsx=20, nbinsy=20, color_continuous_scale ="Viridis" )
fig.show()
Marginal plots can be added to visualize the 1-dimensional distributions of the two variables. Here we use a marginal . Other
allowable values are violin, box and rug.
histogram (/python/histograms/)
import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", marginal_x ="histogram" , marginal_y ="histogram" )
fig.show()
Density heatmaps can also be :
faceted (/python/facet-plots/)
0 10 20 30 40 5012345678910
0510152025count
total_billtip
010203040500246810
051015202530count
total_billtip
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 2/10

--- Página 3 ---
Displaying Textimport plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", facet_row ="sex", facet_col ="smoker" )
fig.show()
New in v5.5
You can add the z values as text using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting string will
control the output format.
import plotly.express  as px
df = px.data.tips()
fig = px.density_heatmap (df, x="total_bill" , y="tip", text_auto =True)
fig.show()
0 20 400246810
0 20 40
0246810
024681012count
total_bill total_billtip tipsmoker=No smoker=Yessex=Male sex=Female
0 0 0 0 0 0 0 0 0 0 01 12 22 8 0 1 1 0 0 0 00 2 34 23 13 3 2 0 1 0 00 0 6 29 18 6 5 2 1 1 00 1 1 7 5 7 1 2 1 0 00 1 0 0 4 6 5 1 2 1 00 0 0 0 1 1 2 0 0 1 00 0 0 0 0 0 0 1 0 0 00 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 1 00 0 0 0 0 0 0 0 0 0 1
0 10 20 30 40 500246810
051015202530count
total_billtip
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 3/10

--- Página 4 ---
Other aggregation functions than count
2D Histograms with Graph ObjectsBy passing in a z value and a histfunc, density heatmaps can perform basic aggregation operations. Here we show average Sepal Length grouped by Petal Length and
Petal Width for the Iris dataset.
import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="petal_length" , y="petal_width" , z="sepal_length" , histfunc ="avg")
fig.show()
To build this kind of figure using  without using Plotly Express, we can use the go.Histogram2d class.
graph objects (/python/graph-objects/)
01234567800.511.522.5
55.566.577.5avg of sepal_length
petal_lengthpetal_width
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 4/10

--- Página 5 ---
2D Histogram of a Bivariate Normal Distribution
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
x = np.random.randn(500)
y = np.random.randn(500)+1
fig = go.Figure(go.Histogram2d (
        x=x,
        y=y
    ))
fig.show()
−3 −2 −1 0 1 2 3−2−1012345
05101520
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 5/10

--- Página 6 ---
2D Histogram Binning and Styling Options
Sharing bin settings between 2D Histogramsimport plotly.graph_objects  as go
import numpy as np
x = np.random.randn(500)
y = np.random.randn(500)+1
fig = go.Figure(go.Histogram2d (x=x, y=y, histnorm ='probability' ,
        autobinx =False,
        xbins=dict(start=-3, end=3, size=0.1),
        autobiny =False,
        ybins=dict(start=-2.5, end=4, size=0.1),
        colorscale =[[0, 'rgb(12,51,131)' ], [0.25, 'rgb(10,136,186)' ], [0.5, 'rgb(242,211,56)' ], [0.75, 'rgb(242,143,56)' ], [1, 'rgb(217,30,30)' ]]
    ))
fig.show()
This example shows how to use  attribute to have a compatible bin settings for both
histograms. To define start, end and size value of x-axis and y-axis separately, set 
 and xbins.
bingroup (https://plotly.com/python/reference/histogram/#histogram-bingroup)
ybins
(https://plotly.com/python/reference/histogram2dcontour/#histogram2dcontour-ybins)
−3 −2 −1 0 1 2 3−2−101234
00.0020.0040.0060.0080.01
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 6/10

--- Página 7 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (2,2)
fig.add_trace (go.Histogram2d (
    x = [ 1, 2, 2, 3, 4 ],
    y = [ 1, 2, 2, 3, 4 ],
    coloraxis  = "coloraxis" ,
    xbins = {'start':1, 'size':1}), 1,1)
fig.add_trace (go.Histogram2d (
    x = [ 4, 5, 5, 5, 6 ],
    y = [ 4, 5, 5, 5, 6 ],
    coloraxis  = "coloraxis" ,
    ybins = {'start': 3, 'size': 1}),1,2)
fig.add_trace (go.Histogram2d (
    x = [ 1, 2, 2, 3, 4 ],
    y = [ 1, 2, 2, 3, 4 ],
    bingroup  = 1,
    coloraxis  = "coloraxis" ,
    xbins = {'start':1, 'size':1}), 2,1)
fig.add_trace (go.Histogram2d (
    x = [ 4, 5, 5, 5, 6 ],
    y = [ 4, 5, 5, 5, 6 ],
    bingroup  = 1,
    coloraxis  = "coloraxis" ,
    ybins = {'start': 3, 'size': 1}),2,2)
fig.show()
12345024
4 5 634567
2 4 6246
4 5 6 734567
00.511.522.53
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 7/10

--- Página 8 ---
2D Histogram Overlaid with a Scatter Chart
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn(100)/5. + 0.5  # 5. enforces float division
y0 = np.random.randn(100)/5. + 0.5
x1 = np.random.rand(50)
y1 = np.random.rand(50) + 1.0
x = np.concatenate ([x0, x1])
y = np.concatenate ([y0, y1])
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x0,
    y=y0,
    mode='markers' ,
    showlegend =False,
    marker=dict(
        symbol='x',
        opacity=0.7,
        color='white',
        size=8,
        line=dict(width=1),
    )
))
fig.add_trace (go.Scatter(
    x=x1,
    y=y1,
    mode='markers' ,
    showlegend =False,
    marker=dict(
        symbol='circle' ,
        opacity=0.7,
        color='white',
        size=8,
        line=dict(width=1),
    )
))
fig.add_trace (go.Histogram2d (
    x=x,
    y=y,
    colorscale ='YlGnBu' ,
    zmax=10,
    nbinsx=14,
    nbinsy=14,
    zauto=False,
))
fig.update_layout (
    xaxis=dict( ticks='', showgrid =False, zeroline =False, nticks=20 ),
    yaxis=dict( ticks='', showgrid =False, zeroline =False, nticks=20 ),
    autosize =False,
    height=550,
    width=550,
    hovermode ='closest' ,
)
fig.show()
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 8/10

--- Página 9 ---
Text on 2D Histogram Points
ReferenceIn this example we add text to 2D Histogram points. We use the values from the z attribute for the text.
import plotly.graph_objects  as go
from plotly import data
df = data.tips()
fig = go.Figure(go.Histogram2d (
        x=df.total_bill ,
        y=df.tip,
        texttemplate = "%{z}"
    ))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/histogram2d/ (https://plotly.com/python/reference/histogram2d/)
00.10.20.30.40.50.60.70.80.9100.20.40.60.811.21.41.61.82
0246810
0 0 0 0 0 0 0 0 0 0 01 12 22 8 0 1 1 0 0 0 00 2 34 23 13 3 2 0 1 0 00 0 6 29 18 6 5 2 1 1 00 1 1 7 5 7 1 2 1 0 00 1 0 0 4 6 5 1 2 1 00 0 0 0 1 1 2 0 0 1 00 0 0 0 0 0 0 1 0 0 00 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 1 00 0 0 0 0 0 0 0 0 0 1
0 10 20 30 40 500246810
051015202530
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 9/10

--- Página 10 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
ss
ount
Options
stograms
er Chart16/07/2025, 06:32 2d histograms in Python
https://plotly.com/python/2D-Histogram/ 10/10</content>
      </file>
      <file name="Box plots in Python.pdf" path="pyvy_2x3/Box plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Box Plot with plotly.express &gt;  &gt; Box
Plots
Box Plots in Python
How to make Box Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/box-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a statistical representation of the distribution of a variable through its quartiles. The ends of the box represent
the lower and upper quartiles, while the median (second quartile) is marked by a line inside the box. For other statistical representations of numerical data, see 
.
box plot (https://en.wikipedia.org/wiki/Box_plot)
other
statistical charts (https://plotly.com/python/statistical-charts/)
Alternatives to box plots for visualizing distributions include , , 
 and .
histograms (https://plotly.com/python/histograms/)
violin plots (https://plotly.com/python/violin/)
ECDF
plots (https://plotly.com/python/ecdf-plots/)
strip charts (https://plotly.com/python/strip-charts/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
In a box plot created by px.box, the distribution of the column given as y argument is represented.
import plotly.express  as px
df = px.data.tips()
fig = px.box(df, y="total_bill" )
fig.show()
If a column name is given as x argument, a box plot is drawn for each value of x.1020304050total_bill
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 1/21

--- Página 2 ---
Box Plots in Dashimport plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="time", y="total_bill" )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)Dinner Lunch1020304050
timetotal_bill
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 2/21

--- Página 3 ---
Display the underlying dataSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
With the points argument, display underlying data points with either all points (all), outliers only (outliers, default), or none of them (False).

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Analysis of the restaurant's revenue"),
    html.P("x-axis:"),
    dcc.Checklist(
        id='x-axis',
        options=['smoker', 'day', 'time', 'sex'],
        value=['time'],
        inline=True
    ),
    html.P("y-axis:"),
    dcc.RadioItems(
        id='y-axis',
        options=['total_bill', 'tip', 'size'],
        value='total_bill',
        inline=True
    ),
    dcc.Graph(id="graph"),
])DOWNLOAD
Analysis of the restaurant's revenue
x-axis:
smokerdaytimesex
y-axis:
total_billtipsize
Dinner Lunch1020304050
valuetotal_bill
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 3/21

--- Página 4 ---
Choosing The Algorithm For Computing Quartilesimport plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="time", y="total_bill" , points="all")
fig.show()
By default, quartiles for box plots are computed using the linear method (for more about linear interpolation, see #10 listed on
 and 
 for more details).
http://jse.amstat.org/v14n3/langford.html (http://jse.amstat.org/v14n3/langford.html)
https://en.wikipedia.org/wiki/Quartile
(https://en.wikipedia.org/wiki/Quartile)
However, you can also choose to use an exclusive or an inclusive algorithm to compute quartiles.
The exclusive algorithm uses the median to divide the ordered dataset into two halves. If the sample is odd, it does not include the median in either half. Q1 is then the
median of the lower half and Q3 is the median of the upper half.
The inclusive algorithm also uses the median to divide the ordered dataset into two halves, but if the sample is odd, it includes the median in both halves. Q1 is then
the median of the lower half and Q3 the median of the upper half.Dinner Lunch1020304050
timetotal_bill
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 4/21

--- Página 5 ---
Difference Between Quartile Algorithmsimport plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="day", y="total_bill" , color="smoker" )
fig.update_traces (quartilemethod ="exclusive" ) # or "inclusive", or "linear" by default
fig.show()
It can sometimes be difficult to see the difference between the linear, inclusive, and exclusive algorithms for computing quartiles. In the following example, the same
dataset is visualized using each of the three different quartile computation algorithms.Sun Sat Thur Fri1020304050smoker
No
Yes
daytotal_bill
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 5/21

--- Página 6 ---
Styled box plotimport plotly.express  as px
import pandas as pd
data = [1,2,3,4,5,6,7,8,9]
df = pd.DataFrame (dict(
    linear=data,
    inclusive =data,
    exclusive =data
)).melt(var_name ="quartilemethod" )
fig = px.box(df, y="value", facet_col ="quartilemethod" , color="quartilemethod" ,
             boxmode="overlay" , points='all')
fig.update_traces (quartilemethod ="linear" , jitter=0, col=1)
fig.update_traces (quartilemethod ="inclusive" , jitter=0, col=2)
fig.update_traces (quartilemethod ="exclusive" , jitter=0, col=3)
fig.show()
For the interpretation of the notches, see .
https://en.wikipedia.org/wiki/Box_plot#Variations (https://en.wikipedia.org/wiki/Box_plot#Variations)123456789quartilemethod
linear
inclusive
exclusivevaluequartilemethod=linear quartilemethod=inclusive quartilemethod=exclusive
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 6/21

--- Página 7 ---
import plotly.express  as px
df = px.data.tips()
fig = px.box(df, x="time", y="total_bill" , color="smoker" ,
             notched=True, # used notched shape
             title="Box plot of total bill" ,
             hover_data =["day"] # add day column to hover data
            )
fig.show()
Dinner Lunch1020304050smoker
No
YesBox plot of total bill
timetotal_bill
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 7/21

--- Página 8 ---
Box plot with go.Box
Basic Box PlotIf Plotly Express does not provide a good starting point, it is also possible to use . All
available options for go.Box are described in the reference page .
the more generic go.Box class from plotly.graph_objects (/python/graph-objects/)
https://plotly.com/python/reference/box/ (https://plotly.com/python/reference/box/)
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
y0 = np.random.randn(50) - 1
y1 = np.random.randn(50) + 1
fig = go.Figure()
fig.add_trace (go.Box(y=y0))
fig.add_trace (go.Box(y=y1))
fig.show()
trace 0 trace 1−3−2−10123trace 0
trace 1
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 8/21

--- Página 9 ---
Basic Horizontal Box Plot
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn(50)
x1 = np.random.randn(50) + 2 # shift mean
fig = go.Figure()
# Use x instead of y argument for horizontal plot
fig.add_trace (go.Box(x=x0))
fig.add_trace (go.Box(x=x1))
fig.show()
−2 −1 0 1 2 3 4trace 0trace 1trace 0
trace 1
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 9/21

--- Página 10 ---
Box Plot That Displays The Underlying Data
Modifying The Algorithm For Computing Quartilesimport plotly.graph_objects  as go
fig = go.Figure(data=[go.Box(y=[0, 1, 1, 2, 3, 5, 8, 13, 21],
            boxpoints ='all', # can also be outliers, or suspectedoutliers, or False
            jitter=0.3, # add some jitter for a better separation between points
            pointpos =-1.8 # relative position of points wrt box
              )])
fig.show()
For an explanation of how each algorithm works, see .
Choosing The Algorithm For Computing Quartilestrace 005101520
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 10/21

--- Página 11 ---
Box Plot With Precomputed Quartilesimport plotly.graph_objects  as go
data = [1, 2, 3, 4, 5, 6, 7, 8, 9]
fig = go.Figure()
fig.add_trace (go.Box(y=data, quartilemethod ="linear" , name="Linear Quartile Mode" ))
fig.add_trace (go.Box(y=data, quartilemethod ="inclusive" , name="Inclusive Quartile Mode" ))
fig.add_trace (go.Box(y=data, quartilemethod ="exclusive" , name="Exclusive Quartile Mode" ))
fig.update_traces (boxpoints ='all', jitter=0)
fig.show()
You can specify precomputed quartile attributes rather than using a built-in quartile computation algorithm.
This could be useful if you have already pre-computed those values or if you need to use a different algorithm than the ones provided.Linear Quartile Mode Inclusive Quartile Mode Exclusive Quartile Mode123456789 Linear Quartile Mode
Inclusive Quartile Mode
Exclusive Quartile Mode
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 11/21

--- Página 12 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Box(q1=[ 1, 2, 3 ], median=[ 4, 5, 6 ],
                  q3=[ 7, 8, 9 ], lowerfence =[-1, 0, 1],
                  upperfence =[7, 8, 9], mean=[ 2.2, 2.8, 3.2 ],
                  sd=[ 0.2, 0.4, 0.6 ], notchspan =[ 0.2, 0.4, 0.6 ], name="Precompiled Quartiles" ))
fig.show()
0 1 202468
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 12/21

--- Página 13 ---
Colored Box Plot
import plotly.graph_objects  as go
import numpy as np
y0 = np.random.randn(50)
y1 = np.random.randn(50) + 1 # shift mean
fig = go.Figure()
fig.add_trace (go.Box(y=y0, name='Sample A' ,
                marker_color  = 'indianred' ))
fig.add_trace (go.Box(y=y1, name = 'Sample B' ,
                marker_color  = 'lightseagreen' ))
fig.show()
Sample A Sample B−2−10123Sample A
Sample B
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 13/21

--- Página 14 ---
Box Plot Styling Mean &amp; Standard Deviation
Styling Outliersimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Box(
    y=[2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],
    name='Only Mean' ,
    marker_color ='darkblue' ,
    boxmean=True # represent mean
))
fig.add_trace (go.Box(
    y=[2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],
    name='Mean &amp; SD' ,
    marker_color ='royalblue' ,
    boxmean='sd' # represent mean and standard deviation
))
fig.show()
The example below shows how to use the boxpoints argument. If "outliers", only the sample points lying outside the whiskers are shown. If "suspectedoutliers", the
outlier points are shown and points either less than 4Q1-3Q3 or greater than 4Q3-3Q1 are highlighted (using outliercolor). If "all", all sample points are shown. If False,
only the boxes are shown with no sample points.Only Mean Mean &amp; SD012345
Only Mean
Mean &amp; SD
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 14/21

--- Página 15 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Box(
    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,
       8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
    name="All Points" ,
    jitter=0.3,
    pointpos =-1.8,
    boxpoints ='all', # represent all points
    marker_color ='rgb(7,40,89)' ,
    line_color ='rgb(7,40,89)'
))
fig.add_trace (go.Box(
    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,
        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
    name="Only Whiskers" ,
    boxpoints =False, # no data points
    marker_color ='rgb(9,56,125)' ,
    line_color ='rgb(9,56,125)'
))
fig.add_trace (go.Box(
    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,
        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
    name="Suspected Outliers" ,
    boxpoints ='suspectedoutliers' , # only suspected outliers
    marker=dict(
        color='rgb(8,81,156)' ,
        outliercolor ='rgba(219, 64, 82, 0.6)' ,
        line=dict(
            outliercolor ='rgba(219, 64, 82, 0.6)' ,
            outlierwidth =2)),
    line_color ='rgb(8,81,156)'
))
fig.add_trace (go.Box(
    y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15,
        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
    name="Whiskers and Outliers" ,
    boxpoints ='outliers' , # only outliers
    marker_color ='rgb(107,174,214)' ,
    line_color ='rgb(107,174,214)'
))
fig.update_layout (title_text ="Box Plot Styling Outliers" )
fig.show()
All Points Only Whiskers Suspected OutliersWhiskers and Outliers05101520All Points
Only Whiskers
Suspected Outliers
Whiskers and OutliersBox Plot Styling Outliers
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 15/21

--- Página 16 ---
Grouped Box Plots
import plotly.graph_objects  as go
x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']
fig = go.Figure()
fig.add_trace (go.Box(
    y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],
    x=x,
    name='kale',
    marker_color ='#3D9970'
))
fig.add_trace (go.Box(
    y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],
    x=x,
    name='radishes' ,
    marker_color ='#FF4136'
))
fig.add_trace (go.Box(
    y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],
    x=x,
    name='carrots' ,
    marker_color ='#FF851B'
))
fig.update_layout (
    yaxis=dict(
        title=dict(
            text='normalized moisture' )
    ),
    boxmode='group' # group together boxes of the different traces for each value of x
)
fig.show()
day 1 day 200.20.40.60.81 kale
radishes
carrotsnormalized moisture
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 16/21

--- Página 17 ---
Grouped Horizontal Box Plot
import plotly.graph_objects  as go
y = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']
fig = go.Figure()
fig.add_trace (go.Box(
    x=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],
    y=y,
    name='kale',
    marker_color ='#3D9970'
))
fig.add_trace (go.Box(
    x=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],
    y=y,
    name='radishes' ,
    marker_color ='#FF4136'
))
fig.add_trace (go.Box(
    x=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],
    y=y,
    name='carrots' ,
    marker_color ='#FF851B'
))
fig.update_layout (
    xaxis=dict(title=dict(text='normalized moisture' ), zeroline =False),
    boxmode='group'
)
fig.update_traces (orientation ='h') # horizontal box plots
fig.show()
0 0.2 0.4 0.6 0.8 1day 1day 2kale
radishes
carrots
normalized moisture
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 17/21

--- Página 18 ---
Rainbow Box Plots
import plotly.graph_objects  as go
import numpy as np
N = 30     # Number of boxes
# generate an array of rainbow colors by fixing the saturation and lightness of the HSL
# representation of colour and marching around the hue.
# Plotly accepts any CSS color format, see e.g. http://www.w3schools.com/cssref/css_colors_legal.asp.
c = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace (0, 360, N)]
# Each box is represented by a dict that contains the data, the type, and the colour.
# Use list comprehension to describe N boxes, each with a different colour and with different randomly generated data:
fig = go.Figure(data=[go.Box(
    y=3.5 * np.sin(np.pi * i/N) + i/N + (1.5 + 0.5 * np.cos(np.pi*i/N)) * np.random.rand(10),
    marker_color =c[i]
    ) for i in range(int(N))])
# format the layout
fig.update_layout (
    xaxis=dict(showgrid =False, zeroline =False, showticklabels =False),
    yaxis=dict(zeroline =False, gridcolor ='white'),
    paper_bgcolor ='rgb(233,233,233)' ,
    plot_bgcolor ='rgb(233,233,233)' ,
)
fig.show()
012345trace 0
trace 1
trace 2
trace 3
trace 4
trace 5
trace 6
trace 7
trace 8
trace 9
trace 10
trace 11
trace 12
trace 13
trace 14
trace 15
trace 16
trace 17
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 18/21

--- Página 19 ---
Fully Styled Box Plots
import plotly.graph_objects  as go
x_data = ['Carmelo Anthony' , 'Dwyane Wade' ,
          'Deron Williams' , 'Brook Lopez' ,
          'Damian Lillard' , 'David West' ,]
N = 50
y0 = (10 * np.random.randn(N) + 30).astype(int)
y1 = (13 * np.random.randn(N) + 38).astype(int)
y2 = (11 * np.random.randn(N) + 33).astype(int)
y3 = (9 * np.random.randn(N) + 36).astype(int)
y4 = (15 * np.random.randn(N) + 31).astype(int)
y5 = (12 * np.random.randn(N) + 40).astype(int)
y_data = [y0, y1, y2, y3, y4, y5]
colors = ['rgba(93, 164, 214, 0.5)' , 'rgba(255, 144, 14, 0.5)' , 'rgba(44, 160, 101, 0.5)' ,
          'rgba(255, 65, 54, 0.5)' , 'rgba(207, 114, 255, 0.5)' , 'rgba(127, 96, 0, 0.5)' ]
fig = go.Figure()
for xd, yd, cls in zip(x_data, y_data, colors):
        fig.add_trace (go.Box(
            y=yd,
            name=xd,
            boxpoints ='all',
            jitter=0.5,
            whiskerwidth =0.2,
            fillcolor =cls,
            marker_size =2,
            line_width =1)
        )
fig.update_layout (
    title=dict(text='Points Scored by the Top 9 Scoring NBA Players in 2012' ),
    yaxis=dict(
        autorange =True,
        showgrid =True,
        zeroline =True,
        dtick=5,
        gridcolor ='rgb(255, 255, 255)' ,
        gridwidth =1,
        zerolinecolor ='rgb(255, 255, 255)' ,
        zerolinewidth =2,
    ),
    margin=dict(
        l=40,
        r=30,
        b=80,
        t=100,
    ),
    paper_bgcolor ='rgb(243, 243, 243)' ,
    plot_bgcolor ='rgb(243, 243, 243)' ,
    showlegend =False
)
fig.show()
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 19/21

--- Página 20 ---
Box Plot With Only Points
ReferenceA  is like a box plot with points showing, and no box:
strip chart (/python/strip-charts/)
import plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x='day', y='tip')
fig.show()
See  or 
 for more information and chart attribute options!
function reference for px.box() (https://plotly.com/python-api-reference/generated/plotly.express.box)
https://plotly.com/python/reference/box/
(https://plotly.com/python/reference/box/)Carmelo Anthony Dwyane Wade Deron Williams Brook Lopez Damian Lillard David West−10−505101520253035404550556065707580Points Scored by the Top 9 Scoring NBA Players in 2012
Sun Sat Thur Fri246810
daytip
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 20/21

--- Página 21 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ting
hms
ng Data
uting
es
viation16/07/2025, 06:31 Box plots in Python
https://plotly.com/python/box-plots/ 21/21</content>
      </file>
      <file name="Continuous error bands in Python.pdf" path="pyvy_2x3/Continuous error bands in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Filling within a single trace &gt;  &gt;
Continuous Error Bands
Continuous Error Bands in Python
Add continuous error bands to charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/continuous-error-bars.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Continuous error bands are a graphical representation of error or uncertainty as a shaded region around a main trace, rather than as discrete whisker-like error bars.
They can be implemented in a manner similar to  using scatter traces with the fill attribute.
filled area plots (/python/filled-area-plots/)
In this example we show how to construct a trace that goes from low to high X values along the upper Y edge of a region, and then from high to low X values along the
lower Y edge of the region. This trace is then 'self-filled' using fill='toself'.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:35 Continuous error bands in Python
https://plotly.com/python/continuous-error-bars/ 1/4

--- Página 2 ---
Filling between two tracesimport plotly.graph_objs  as go
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [1, 2, 7, 4, 5, 6, 7, 8, 9, 10]
y_upper = [2, 3, 8, 5, 6, 7, 8, 9, 10, 11]
y_lower = [0, 1, 5, 3, 4, 5, 6, 7, 8, 9]
fig = go.Figure([
    go.Scatter(
        x=x,
        y=y,
        line=dict(color='rgb(0,100,80)' ),
        mode='lines'
    ),
    go.Scatter(
        x=x+x[::-1], # x, then x reversed
        y=y_upper+y_lower[::-1], # upper, then lower reversed
        fill='toself' ,
        fillcolor ='rgba(0,100,80,0.2)' ,
        line=dict(color='rgba(255,255,255,0)' ),
        hoverinfo ="skip",
        showlegend =False
    )
])
fig.show()
In this example we show how to construct the bounds of the band using two traces, with the lower trace using fill='tonexty' to fill an area up to the upper trace.1 2 3 4 5 6 7 8 9 100246810trace 0
16/07/2025, 06:35 Continuous error bands in Python
https://plotly.com/python/continuous-error-bars/ 2/4

--- Página 3 ---
import plotly.graph_objs  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv' )
fig = go.Figure([
    go.Scatter(
        name='Measurement' ,
        x=df['Time'],
        y=df['10 Min Sampled Avg' ],
        mode='lines',
        line=dict(color='rgb(31, 119, 180)' ),
    ),
    go.Scatter(
        name='Upper Bound' ,
        x=df['Time'],
        y=df['10 Min Sampled Avg' ]+df['10 Min Std Dev' ],
        mode='lines',
        marker=dict(color="#444"),
        line=dict(width=0),
        showlegend =False
    ),
    go.Scatter(
        name='Lower Bound' ,
        x=df['Time'],
        y=df['10 Min Sampled Avg' ]-df['10 Min Std Dev' ],
        marker=dict(color="#444"),
        line=dict(width=0),
        mode='lines',
        fillcolor ='rgba(68, 68, 68, 0.3)' ,
        fill='tonexty' ,
        showlegend =False
    )
])
fig.update_layout (
    yaxis=dict(title=dict(text='Wind speed (m/s)' )),
    title=dict(text='Continuous, variable value error bars' ),
    hovermode ="x"
)
fig.show()
12:00
Jun 11, 200118:00 00:00
Jun 12, 200106:00 12:00 18:0005101520253035MeasurementContinuous, variable value error barsWind speed (m/s)
16/07/2025, 06:35 Continuous error bands in Python
https://plotly.com/python/continuous-error-bars/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:35 Continuous error bands in Python
https://plotly.com/python/continuous-error-bars/ 4/4</content>
      </file>
      <file name="Distplots in Python.pdf" path="pyvy_2x3/Distplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Combined statistical representations with px.histogram &gt;  &gt;
Distplots
Distplots in Python
How to make interactive Distplots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/distplot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Several representations of statistical distributions are available in plotly, such as , 
,  (see ). It is also
possible to combine several representations in the same plot.
histograms (https://plotly.com/python/histograms/)
violin plots
(https://plotly.com/python/violin/)
box plots (https://plotly.com/python/box-plots/)
the complete list here (https://plotly.com/python/statistical-charts/)
For example, the plotly.express function px.histogram can add a subplot with a different statistical representation than the histogram, given by the parameter
marginal.  is the easy-to-use, high-level interface to Plotly, which 
and produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", marginal ="rug",
                   hover_data =df.columns)
fig.show()
10 20 30 40 50020406080sex
Female
Male
total_billsum of tip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 1/14

--- Página 2 ---
Combined statistical representations in Dashimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex",
                   marginal ="box", # or violin, rug
                   hover_data =df.columns)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)10 20 30 40 50020406080sex
Female
Male
total_billsum of tip
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 2/14

--- Página 3 ---
Combined statistical representations with distplot figure factory
Basic DistplotSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
The distplot  displays a combination of statistical representations of numerical data, such as histogram, kernel density
estimation or normal curve, and rug plot.
figure factory (/python/figure-factories/)
A histogram, a kde plot and a rug plot are displayed.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4("Analysis of the restaurant's revenue"),
    html.P("Select Distribution:"),
    dcc.RadioItems(
        id='distribution',
        options=['box', 'violin', 'rug'],
        value='box', inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("distribution", "value"))
def display_graph(distribution):
    df = px.data.tips() # replace with your own data source
    fig = px.histogram(
        df, x="total_bill", y="tip", color="sex",
        marginal=distribution, range_x=[-5, 60],
 h dtdf l )DOWNLOAD
Analysis of the restaurant's revenue
Select Distribution:
boxviolinrug
0 10 20 30 40 50 60020406080sex
Female
Male
total_billsum of tip
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 3/14

--- Página 4 ---
Plot Multiple Datasetsimport plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
x = np.random.randn(1000)
hist_data  = [x]
group_labels  = ['distplot' ] # name of the dataset
fig = ff.create_distplot (hist_data , group_labels )
fig.show()
00.10.20.30.4
−3 −2 −1 0 1 2 3 4distplot
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 4/14

--- Página 5 ---
Use Multiple Bin Sizesimport plotly.figure_factory  as ff
import numpy as np
# Add histogram data
x1 = np.random.randn(200) - 2
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 2
x4 = np.random.randn(200) + 4
# Group data together
hist_data  = [x1, x2, x3, x4]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' , 'Group 4' ]
# Create distplot with custom bin_size
fig = ff.create_distplot (hist_data , group_labels , bin_size =.2)
fig.show()
Different bin sizes are used for the different datasets with the bin_size argument.
00.20.40.6
−4 −2 0 2 4 6 8Group 4
Group 3
Group 2
Group 1
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 5/14

--- Página 6 ---
Customize Rug Text, Colors &amp; Titleimport plotly.figure_factory  as ff
import numpy as np
# Add histogram data
x1 = np.random.randn(200)-2
x2 = np.random.randn(200)
x3 = np.random.randn(200)+2
x4 = np.random.randn(200)+4
# Group data together
hist_data  = [x1, x2, x3, x4]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' , 'Group 4' ]
# Create distplot with custom bin_size
fig = ff.create_distplot (hist_data , group_labels , bin_size =[.1, .25, .5, 1])
fig.show()
00.20.40.6
−4 −2 0 2 4 6Group 4
Group 3
Group 2
Group 1
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 6/14

--- Página 7 ---
Plot Normal Curveimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(26)
x2 = np.random.randn(26) + .5
group_labels  = ['2014', '2015']
rug_text_one  = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                'u', 'v', 'w', 'x', 'y', 'z']
rug_text_two  = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj',
                'kk', 'll', 'mm', 'nn', 'oo', 'pp', 'qq', 'rr', 'ss', 'tt',
                'uu', 'vv', 'ww', 'xx', 'yy', 'zz']
rug_text  = [rug_text_one , rug_text_two ] # for hover in rug plot
colors = ['rgb(0, 0, 100)' , 'rgb(0, 200, 200)' ]
# Create distplot with custom bin_size
fig = ff.create_distplot (
    [x1, x2], group_labels , bin_size =.2,
    rug_text =rug_text , colors=colors)
fig.update_layout (title_text ='Customized Distplot' )
fig.show()
00.20.40.60.81
−1.5 −1 −0.5 0 0.5 1 1.5 2 2.52015
2014
Customized Distplot
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 7/14

--- Página 8 ---
Plot Only Curve and Rugimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200)
x2 = np.random.randn(200) + 2
group_labels  = ['Group 1' , 'Group 2' ]
colors = ['slategray' , 'magenta' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot ([x1, x2], group_labels , bin_size =.5,
                         curve_type ='normal' , # override default 'kde'
                         colors=colors)
# Add title
fig.update_layout (title_text ='Distplot with Normal Distribution' )
fig.show()
00.10.20.30.4
−2 −1 0 1 2 3 4 5Group 2
Group 1
Distplot with Normal Distribution
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 8/14

--- Página 9 ---
Plot Only Hist and Rugimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 1
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 1
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#333F44' , '#37AA9C' , '#94F3E4' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot (hist_data , group_labels , show_hist =False, colors=colors)
# Add title
fig.update_layout (title_text ='Curve and Rug Plot' )
fig.show()
00.10.20.30.4
−4 −3 −2 −1 0 1 2 3Group 3
Group 2
Group 1Curve and Rug Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 9/14

--- Página 10 ---
Plot Hist and Rug with Different Bin Sizesimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 1
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 1
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#835AF1' , '#7FA6EE' , '#B8F7D4' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot (hist_data , group_labels , colors=colors, bin_size =.25,
                         show_curve =False)
# Add title
fig.update_layout (title_text ='Hist and Rug Plot' )
fig.show()
00.10.20.30.40.5
−4 −3 −2 −1 0 1 2 3 4Group 3
Group 2
Group 1
Hist and Rug Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 10/14

--- Página 11 ---
Plot Only Hist and Curveimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 2
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 2
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#393E46' , '#2BCDC1' , '#F66095' ]
fig = ff.create_distplot (hist_data , group_labels , colors=colors,
                         bin_size =[0.3, 0.2, 0.1], show_curve =False)
# Add title
fig.update(layout_title_text ='Hist and Rug Plot' )
fig.show()
00.10.20.30.40.50.6
−4 −2 0 2 4Group 3
Group 2
Group 1
Hist and Rug Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 11/14

--- Página 12 ---
Distplot with Pandasimport plotly.figure_factory  as ff
import numpy as np
x1 = np.random.randn(200) - 2
x2 = np.random.randn(200)
x3 = np.random.randn(200) + 2
hist_data  = [x1, x2, x3]
group_labels  = ['Group 1' , 'Group 2' , 'Group 3' ]
colors = ['#A56CC1' , '#A6ACEC' , '#63F5EF' ]
# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot (hist_data , group_labels , colors=colors,
                         bin_size =.2, show_rug =False)
# Add title
fig.update_layout (title_text ='Hist and Curve Plot' )
fig.show()
−4 −2 0 2 400.10.20.30.40.5 Group 3
Group 2
Group 1
Hist and Curve Plot
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 12/14

--- Página 13 ---
Reference
What About Dash?import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df = pd.DataFrame ({'2012': np.random.randn(200),
                   '2013': np.random.randn(200)+1})
fig = ff.create_distplot ([df[c] for c in df.columns], df.columns, bin_size =.25)
fig.show()
For more info on ff.create_distplot(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_distplot.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
00.10.20.30.40.50.6
−3 −2 −1 0 1 2 3 42013
2012
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 13/14

--- Página 14 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ns with
ns in
ns with
Sizes16/07/2025, 06:32 Distplots in Python
https://plotly.com/python/distplot/ 14/14</content>
      </file>
      <file name="Empirical cumulative distribution plots in Python.pdf" path="pyvy_2x3/Empirical cumulative distribution plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview
Simple ECDF Plots &gt;  &gt; Empirical
Cumulative Distribution Plots
Empirical Cumulative Distribution Plots in Python
How to add empirical cumulative distribution function (ECDF) plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/ecdf-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 are a way to visualize the distribution of a variable, and
Plotly Express has a built-in function, px.ecdf() to generate such plots.  is the easy-to-use, high-level interface to Plotly, which
 and produces .
Empirical cumulative distribution function plots (https://en.wikipedia.org/wiki/Empirical_distribution_function)
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Alternatives to ECDF plots for visualizing distributions include , , 
 and .
histograms (https://plotly.com/python/histograms/)
violin plots (https://plotly.com/python/violin/)
box
plots (https://plotly.com/python/box-plots/)
strip charts (https://plotly.com/python/strip-charts/)
Providing a single column to the x variable yields a basic ECDF plot.
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" )
fig.show()
Providing multiple columns leverage's Plotly Express'  to show multiple variables on the same plot.
wide-form data support (https://plotly.com/python/wide-form/)510152025303540455000.20.40.60.81
total_billprobability
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 1/9

--- Página 2 ---
Configuring the Y axisimport plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x=["total_bill" , "tip"])
fig.show()
It is also possible to map another variable to the color dimension of a plot.
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex")
fig.show()
By default, the Y axis shows probability, but it is also possible to show raw counts by setting the ecdfnorm argument to None or to show percentages by setting it to
percent.10 20 30 40 5000.20.40.60.81variable
total_bill
tip
valueprobability
510152025303540455000.20.40.60.81sex
Female
Male
total_billprobability
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 2/9

--- Página 3 ---
Reversed and Complementary CDF plotsimport plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", ecdfnorm =None)
fig.show()
If a y value is provided, the Y axis is set to the sum of y rather than counts.
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , y="tip", color="sex", ecdfnorm =None)
fig.show()
By default, the Y value represents the fraction of the data that is at or below the value on on the X axis. Setting ecdfmode to "reversed" reverses this, with the Y axis
representing the fraction of the data at or above the X value. Setting ecdfmode to "complementary" plots 1-ECDF, meaning that the Y values represent the fraction of
the data above the X value.
In standard mode (the default), the right-most point is at 1 (or the total count/sum, depending on ecdfnorm) and the right-most point is above 0.5101520253035404550020406080100120140160 sex
Female
Male
total_billcount
51015202530354045500100200300400500sex
Female
Male
total_billsum of tip
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 3/9

--- Página 4 ---
import plotly.express  as px
fig = px.ecdf(df, x=[1,2,3,4], markers=True, ecdfmode ="standard" ,
              title="ecdfmode='standard' (Y=fraction at or below X value, this the default)" )
fig.show()
In reversed mode, the right-most point is at 1 (or the total count/sum, depending on ecdfnorm) and the left-most point is above 0.
import plotly.express  as px
fig = px.ecdf(df, x=[1,2,3,4], markers=True, ecdfmode ="reversed" ,
              title="ecdfmode='reversed' (Y=fraction at or above X value)" )
fig.show()
In complementary mode, the right-most point is at 0 and no points are at 1 (or the total count/sum) per the definition of the CCDF as 1-ECDF, which has no point at 0.11.522.533.5400.20.40.60.81ecdfmode='standard' (Y=fraction at or below X value, this the default)
xprobability
11.522.533.5400.20.40.60.81ecdfmode='reversed' (Y=fraction at or above X value)
xprobability
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 4/9

--- Página 5 ---
Orientation
Markers and/or Linesimport plotly.express  as px
fig = px.ecdf(df, x=[1,2,3,4], markers=True, ecdfmode ="complementary" ,
              title="ecdfmode='complementary' (Y=fraction above X value)" )
fig.show()
By default, plots are oriented vertically (i.e. the variable is on the X axis and counted/summed upwards), but this can be overridden with the orientation argument.
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , y="tip", color="sex", ecdfnorm =None, orientation ="h")
fig.show()
ECDF Plots can be configured to show lines and/or markers.11.522.533.5400.10.20.30.40.50.60.7ecdfmode='complementary' (Y=fraction above X value)
xprobability
050010001500200025003000246810sex
Female
Male
sum of total_billtip
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 5/9

--- Página 6 ---
Marginal Plotsimport plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", markers=True)
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", markers=True, lines=False)
fig.show()
ECDF plots also support 
marginal plots (https://plotly.com/python/marginal-plots/)10 20 30 40 5000.20.40.60.81sex
Female
Male
total_billprobability
10 20 30 40 5000.20.40.60.81sex
Female
Male
total_billprobability
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 6/9

--- Página 7 ---
Facetsimport plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", markers=True, lines=False, marginal ="histogram" )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", marginal ="rug")
fig.show()
ECDF Plots also support 
faceting (https://plotly.com/python/facet-plots/)10 20 30 40 5000.20.40.60.81
sex
Female
Male
total_billprobability
10 20 30 40 5000.20.40.60.81sex
Female
Male
total_billprobability
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 7/9

--- Página 8 ---
What About Dash?import plotly.express  as px
df = px.data.tips()
fig = px.ecdf(df, x="total_bill" , color="sex", facet_row ="time", facet_col ="day")
fig.show()
 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter1020304050102030405000.20.40.60.81sex
Female
Male
total_bill total_billprobabilityday=Sun day=Sat day=Thur day=Fritime=Lunch time=Dinner
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 8/9

--- Página 9 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
plots16/07/2025, 06:35 Empirical cumulative distribution plots in Python
https://plotly.com/python/ecdf-plots/ 9/9</content>
      </file>
      <file name="Error bars in Python.pdf" path="pyvy_2x3/Error bars in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Error Bars with Plotly Express
Asymmetric Error Bars with Plotly Express &gt;  &gt;
Error Bars
Error Bars in Python
How to add error-bars to charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/error-
bars.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . For functions representing 2D data points such as 
, ,  etc., error bars are given as a column name which is the value
of the error_x (for the error on x position) and error_y (for the error on y position).
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
px.scatter (https://plotly.com/python/line-and-
scatter/)
px.line (https://plotly.com/python/line-charts/)
px.bar (https://plotly.com/python/bar-charts/)
import plotly.express  as px
df = px.data.iris()
df["e"] = df["sepal_width" ]/100
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 error_x="e", error_y="e")
fig.show()
2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 1/10

--- Página 2 ---
Error Bars with graph_objects
Basic Symmetric Error Barsimport plotly.express  as px
df = px.data.iris()
df["e_plus" ] = df["sepal_width" ]/100
df["e_minus" ] = df["sepal_width" ]/40
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="species" ,
                 error_y="e_plus" , error_y_minus ="e_minus" )
fig.show()
2 2.5 3 3.5 4 4.54.555.566.577.58 species
setosa
versicolor
virginica
sepal_widthsepal_length
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 2/10

--- Página 3 ---
Asymmetric Error Barsimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[0, 1, 2],
        y=[6, 10, 2],
        error_y=dict(
            type='data', # value of error bar given in data coordinates
            array=[1, 2, 3],
            visible=True)
    ))
fig.show()
0 0.5 1 1.5 2024681012
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 3/10

--- Página 4 ---
Error Bars as a Percentage of the y Valueimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_y=dict(
            type='data',
            symmetric =False,
            array=[0.1, 0.2, 0.1, 0.1],
            arrayminus =[0.2, 0.4, 1, 0.2])
        ))
fig.show()
1 1.5 2 2.5 3 3.5 40.511.522.533.54
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 4/10

--- Página 5 ---
Asymmetric Error Bars with a Constant Offsetimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[0, 1, 2],
        y=[6, 10, 2],
        error_y=dict(
            type='percent' , # value of error bar given as percentage of y value
            value=50,
            visible=True)
    ))
fig.show()
0 0.5 1 1.5 22468101214
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 5/10

--- Página 6 ---
Horizontal Error Barsimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_y=dict(
            type='percent' ,
            symmetric =False,
            value=15,
            valueminus =25)
    ))
fig.show()
1 1.5 2 2.5 3 3.5 411.522.533.544.5
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 6/10

--- Página 7 ---
Bar Chart with Error Barsimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_x=dict(
            type='percent' ,
            value=10)
    ))
fig.show()
1 1.5 2 2.5 3 3.5 4 4.511.522.533.54
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 7/10

--- Página 8 ---
Colored and Styled Error Barsimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    name='Control' ,
    x=['Trial 1' , 'Trial 2' , 'Trial 3' ], y=[3, 6, 4],
    error_y=dict(type='data', array=[1, 0.5, 1.5])
))
fig.add_trace (go.Bar(
    name='Experimental' ,
    x=['Trial 1' , 'Trial 2' , 'Trial 3' ], y=[4, 7, 3],
    error_y=dict(type='data', array=[0.5, 1, 2])
))
fig.update_layout (barmode='group')
fig.show()
Trial 1 Trial 2 Trial 3012345678 Control
Experimental
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 8/10

--- Página 9 ---
Referenceimport plotly.graph_objects  as go
import numpy as np
x_theo = np.linspace (-4, 4, 100)
sincx = np.sinc(x_theo)
x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]
y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]
fig = go.Figure()
fig.add_trace (go.Scatter(
    x=x_theo, y=sincx,
    name='sinc(x)'
))
fig.add_trace (go.Scatter(
    x=x, y=y,
    mode='markers' ,
    name='measured' ,
    error_y=dict(
        type='constant' ,
        value=0.1,
        color='purple' ,
        thickness =1.5,
        width=3,
    ),
    error_x=dict(
        type='constant' ,
        value=0.2,
        color='purple' ,
        thickness =1.5,
        width=3,
    ),
    marker=dict(color='purple' , size=8)
))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/scatter/ (https://plotly.com/python/reference/scatter/)−4 −3 −2 −1 0 1 2 3 4−0.4−0.200.20.40.60.811.2
sinc(x)
measured
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 9/10

--- Página 10 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
xpress
Value
ant16/07/2025, 06:30 Error bars in Python
https://plotly.com/python/error-bars/ 10/10</content>
      </file>
      <file name="Facet and trellis plots in Python.pdf" path="pyvy_2x3/Facet and trellis plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Facet and Trellis Plots
Scatter Plot Column Facets
Bar Chart Row Facets &gt;  &gt; Facet and
Trellis Plots
Facet and Trellis Plots in Python
How to make Facet and Trellis Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/facet-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Facet plots, also known as trellis plots or small multiples, are figures made up of multiple subplots which have the same set of axes, where each subplot shows a
subset of the data. While it is straightforward to use plotly's  to make such figures, it's far easier to use the built-in facet_row
and facet_col arguments in the various Plotly Express functions.
subplot capabilities (/python/subplots/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" , facet_col ="sex")
fig.show()
There is a more presentation-ready horizontal, faceted bar chart in the 
horizontal bar documentation (/python/horizontal-bar-charts/#Small-multiple-horizontal-bar-
charts-show-each-component's-size-more-clearly-than-a-stacked-bar)0 10 20 30 40 50246810
0 10 20 30 40 50smoker
No
Yes
total_bill total_billtipsex=Female sex=Male
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 1/11

--- Página 2 ---
Wrapping Column Facetsimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="size", y="total_bill" , color="sex", facet_row ="smoker" )
fig.show()
When the facet dimension has a large number of unique values, it is possible to wrap columns using the facet_col_wrap argument.
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x='gdpPercap' , y='lifeExp' , color='continent' , size='pop',
                facet_col ='year', facet_col_wrap =4)
fig.show()1 2 3 4 5 60500100005001000sex
Female
Male
sizetotal_bill total_billsmoker=Yes smoker=No
0 50k100k20406080
0 50k100k 0 50k100k 0 50k100k2040608020406080
 continent
Asia
Europe
Africa
Americas
Oceania
gdpPercap gdpPercap gdpPercap gdpPercaplifeExp lifeExp lifeExp
year=1992 year=1997 year=2002 year=2007year=1972 year=1977 year=1982 year=1987year=1952 year=1957 year=1962 year=1967
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 2/11

--- Página 3 ---
Histogram Facet Grids
Choropleth Column Facetsimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", facet_row ="time", facet_col ="day",
       category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "time": ["Lunch", "Dinner" ]})
fig.show()
new in version 4.1320 400102030
20 40 20 40 20 400102030sex
Female
Male
total_bill total_bill total_bill total_billsum of tip sum of tipday=Thur day=Fri day=Sat day=Suntime=Dinner time=Lunch
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 3/11

--- Página 4 ---
Adding Lines and Rectangles to Facet Plotsimport plotly.express  as px
df = px.data.election ()
df = df.melt(id_vars="district" , value_vars =["Coderre" , "Bergeron" , "Joly"],
            var_name ="candidate" , value_name ="votes")
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="votes", facet_col ="candidate" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.show()
introduced in plotly 4.12
It is possible to add  to facet plots using .add_hline(), .add_vline(), .add_hrect()
or .add_vrect(). The default row and col values are "all" but this can be overridden, as with the rectangle below, which only appears in the first column.
labelled horizontal and vertical lines and rectangles (/python/horizontal-vertical-shapes/)100020003000400050006000votescandidate=Coderre candidate=Bergeron candidate=Joly
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 4/11

--- Página 5 ---
Adding the Same Trace to All Facetsimport plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df, facet_col ="company" , facet_col_wrap =2)
fig.add_hline (y=1, line_dash ="dot",
              annotation_text ="Jan 1, 2018 baseline" ,
              annotation_position ="bottom right" )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , col=1,
              annotation_text ="decline" , annotation_position ="top left" ,
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()
introduced in plotly 4.12
The .add_trace() method can be used to add a copy of the same trace to each facet, for example an overall linear regression line as below. The
legendgroup/showlegend pattern below is recommended to avoid having a separate legend item for each copy of the trace. Note that as of v5.2.1, there is 
 that uses this technique under the hood.
a built-in
option to add an overall trendline to all facets (https://plotly.com/python/linear-fits/)Jan 2018 Jul 2018 Jan 2019 Jul 201911.52
Jan 2018 Jul 2018 Jan 2019 Jul 201911.5211.52
company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
date datevalue value value
company=NFLX company=MSFTcompany=AMZN company=FBcompany=GOOG company=AAPL
Jan 1, 2018 baseline Jan 1, 2018 baselineJan 1, 2018 baseline Jan 1, 2018 baselineJan 1, 2018 baseline Jan 1, 2018 baseline
declinedeclinedecline
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 5/11

--- Página 6 ---
Facets With Independent Axesimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color='sex',
                 facet_col ="day", facet_row ="time")
import statsmodels.api  as sm
import plotly.graph_objects  as go
df = df.sort_values (by="total_bill" )
model = sm.OLS(df["tip"], sm.add_constant (df["total_bill" ])).fit()
#create the trace to be added to all facets
trace = go.Scatter(x=df["total_bill" ], y=model.predict(),
                   line_color ="black", name="overall OLS" )
# give it a legend group and hide it from the legend
trace.update(legendgroup ="trendline" , showlegend =False)
# add it to all rows/cols, but not to empty subplots
fig.add_trace (trace, row="all", col="all", exclude_empty_subplots =True)
# set only the last trace added to appear in the legend
# `selector=-1` introduced in plotly v4.13
fig.update_traces (selector =-1, showlegend =True)
fig.show()
By default, facet axes are linked together: zooming inside one of the facets will also zoom in the other facets. You can disable this behaviour when you use facet_row
only, by disabling matches on the Y axes, or when using facet_col only, by disabling matches on the X axes. It is not recommended to use this approach when using
facet_row and facet_col together, as in this case it becomes very hard to understand the labelling of axes and grid lines.0 20 40 0 20 40246810 sex
Female
Male
overall OLS
total_bill total_billtipday=Sun day=Sat day=Thur day=Fritime=Lunch time=Dinner
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 6/11

--- Página 7 ---
Customizing Subplot Figure Titlesimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color='sex', facet_row ="day")
fig.update_yaxes (matches=None)
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color='sex', facet_col ="day")
fig.update_xaxes (matches=None)
fig.show()
Since subplot figure titles are , you can use the for_each_annotation function to
customize them, for example to remove the equal-sign (=).
annotations (https://plotly.com/python/text-and-annotations/#simple-annotation)
In the following example, we pass a lambda function to for_each_annotation in order to change the figure subplot titles from smoker=No and smoker=Yes to just No
and Yes.10 20 30 40 50123452460510246 sex
Female
Male
total_billtip tiptiptipday=Fri day=Thur day=Sat day=Sun
1020304050246810
0 20 40 10203040 10203040sex
Female
Male
total_bill total_bill total_bill total_billtipday=Sun day=Sat day=Thur day=Fri
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 7/11

--- Página 8 ---
Controlling Facet Orderingimport plotly.express  as px
fig = px.scatter(px.data.tips(), x="total_bill" , y="tip", facet_col ="smoker" )
fig.for_each_annotation (lambda a: a.update(text=a.text.split("=")[-1]))
fig.show()
By default, Plotly Express lays out categorical data in the order in which it appears in the underlying data. Every 2-d cartesian Plotly Express function also includes a
category_orders keyword argument which can be used to control , but beyond that can also
control , and the order in which facets are laid out.
the order in which categorical axes are drawn (/python/categorical-axes/)
the order in which discrete colors appear in the legend (/python/discrete-color/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="group", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.show()0 10 20 30 40 50246810
0 10 20 30 40 50
total_bill total_billtipNo Yes
Thur Fri Sat Sun0100200300400500600700800900
Thur Fri Sat Sunsmoker
Yes
No
day daytotal_billsex=Male sex=Female
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 8/11

--- Página 9 ---
Controlling Facet Spacing
Synchronizing axes in subplots with matchesThe facet_row_spacing and facet_col_spacing arguments can be used to control the spacing between rows and columns. These values are specified in fractions of the
plotting area in paper coordinates and not in pixels, so they will grow or shrink with the width and height of the figure.
The defaults work well with 1-4 rows or columns at the default figure size with the default font size, but need to be reduced to around 0.01 for very large figures or
figures with many rows or columns. Conversely, if activating tick labels on all facets, the spacing will need to be increased.
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Africa'" )
fig = px.line(df, x="year", y="lifeExp" , facet_col ="country" , facet_col_wrap =7,
              facet_row_spacing =0.04, # default is 0.07 when facet_col_wrap is used
              facet_col_spacing =0.04, # default is 0.03
              height=600, width=800,
              title="Life Expectancy in Africa" )
fig.for_each_annotation (lambda a: a.update(text=a.text.split("=")[-1]))
fig.update_yaxes (showticklabels =True)
fig.show()
Using facet_col from plotly.express let  and 
 each facet to the same range implicitly. However, if the subplots are created with
make_subplots, the axis needs to be updated with matches parameter to update all the subplots accordingly.
zoom (https://help.plotly.com/zoom-pan-hover-controls/#step-3-zoom-in-and-zoom-out-autoscale-the-plot)
pan
(https://help.plotly.com/zoom-pan-hover-controls/#step-6-pan-along-axes)
Zoom in one trace below, to see the other subplots zoomed to the same x-axis range. To pan all the subplots, click and drag from the center of x-axis to the side:
1960198020004060196019802000406019601980200040604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
4060Life Expectancy in Africa
year year yearlifeExplifeExplifeExplifeExplifeExplifeExplifeExplifeExp
Uganda Zambia ZimbabweSomaliaSouth Africa Sudan Swaziland Tanzania Togo TunisiaNiger Nigeria Reunion RwandaSao Tome and PrincipeSenegalSierra LeoneMalawi Mali MauritaniaMauritius MoroccoMozambiqueNamibiaGuineaGuinea-BissauKenya Lesotho Liberia Libya MadagascarEgyptEquatorial GuineaEritrea Ethiopia Gabon Gambia GhanaCentral African RepublicChad ComorosCongo, Dem. Rep.Congo, Rep.Cote d'IvoireDjiboutiAlgeria Angola Benin BotswanaBurkina FasoBurundiCameroon
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 9/11

--- Página 10 ---
What About Dash?import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
N = 20
x = np.linspace (0, 1, N)
fig = make_subplots (1, 3)
for i in range(1, 4):
    fig.add_trace (go.Scatter(x=x, y=np.random.random(N)), 1, i)
fig.update_xaxes (matches='x')
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter0 0.5 10.20.30.40.50.60.70.80.9
0 0.5 100.20.40.60.8
0 0.5 100.20.40.60.81
trace 0
trace 1
trace 2
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 10/11

--- Página 11 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
et Plots
16/07/2025, 06:32 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 11/11</content>
      </file>
      <file name="Histograms in Python.pdf" path="pyvy_2x3/Histograms in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Histograms with Plotly Express &gt;  &gt;
Histograms
Histograms in Python
How to make Histograms in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/histograms.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In statistics, a  is representation of the distribution of numerical data, where the data are binned and the count for
each bin is represented. More generally, in Plotly a histogram is an aggregated bar chart, with several possible aggregation functions (e.g. sum, average, count...)
which can be used to visualize data on categorical and date axes as well as linear axes.
histogram (https://en.wikipedia.org/wiki/Histogram)
Alternatives to histogram plots for visualizing distributions include , ,
 and .
violin plots (https://plotly.com/python/violin/)
box plots (https://plotly.com/python/box-plots/)
ECDF plots (https://plotly.com/python/ecdf-plots/)
strip charts (https://plotly.com/python/strip-charts/)
If you're looking instead for bar charts, i.e. representing raw, unaggregated data with rectangular bar, go to the .
Bar Chart tutorial (/python/bar-charts/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" )
fig.show()
10 20 30 40 50051015202530
total_billcount
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 1/23

--- Página 2 ---
Choosing the number of bins
Histograms on Date Dataimport plotly.express  as px
df = px.data.tips()
# Here we use a column with categorical data
fig = px.histogram (df, x="day")
fig.show()
By default, the number of bins is chosen so that this number is comparable to the typical number of samples in a bin. This number can be customized, as well as the
range of values.
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , nbins=20)
fig.show()
Plotly histograms will automatically bin date data in addition to numerical data:Sun Sat Thur Fri0102030405060708090
daycount
0 10 20 30 40 50010203040506070
total_billcount
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 2/23

--- Página 3 ---
Histograms on Categorical Dataimport plotly.express  as px
df = px.data.stocks()
fig = px.histogram (df, x="date")
fig.update_layout (bargap=0.2)
fig.show()
Plotly histograms will automatically bin numerical or date data but can also be used on raw categorical data, as in the following example, where the X-axis value is the
categorical "day" variable:
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", category_orders =dict(day=["Thur", "Fri", "Sat", "Sun"]))
fig.show()Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 201902468101214
datecount
Thur Fri Sat Sun0102030405060708090
daycount
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 3/23

--- Página 4 ---
Histograms in Dash
Accessing the counts (y-axis) values is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
Sign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
JavaScript calculates the y-axis (count) values on the fly in the browser, so it's not accessible in the fig. You can manually calculate it using np.histogram.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import numpy as np
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive normal distribution'),
    dcc.Graph(id="graph"),
    html.P("Mean:"),
    dcc.Slider(id="mean", min=-3, max=3, value=0,
               marks={-3: '-3', 3: '3'}),
    html.P("Standard Deviation:"),
    dcc.Slider(id="std", min=1, max=3, value=1,
               marks={1: '1', 3: '3'}),
])
@app.callback(
    Output("graph", "figure"),
    Input("mean", "value"),
    Input("std", "value"))
def display_color(mean, std):
    data = np.random.normal(mean, std, size=500) # replace with your own data source
 fi hit (dt [1010])DOWNLOAD
Interactive normal distribution
Mean:
Standard Deviation:−10 −5 0 5 100510152025303540variable
0
valuecount
-3 3
1 3
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 4/23

--- Página 5 ---
Type of normalizationimport plotly.express  as px
import numpy as np
df = px.data.tips()
# create the bins
counts, bins = np.histogram (df.total_bill , bins=range(0, 60, 5))
bins = 0.5 * (bins[:-1] + bins[1:])
fig = px.bar(x=bins, y=counts, labels={'x':'total_bill' , 'y':'count'})
fig.show()
The default mode is to represent the count of samples in each bin. With the histnorm argument, it is also possible to represent the percentage or fraction of samples
in each bin (histnorm='percent' or probability), or a density histogram (the sum of all bar areas equals the total number of sample points, density), or a probability
density histogram (the sum of all bar areas equals 1, probability density).
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , histnorm ='probability density' )
fig.show()0 10 20 30 40 50010203040506070
total_billcount
10 20 30 40 5000.010.020.030.040.050.06
total_billprobability density
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 5/23

--- Página 6 ---
Aspect of the histogram plot
Several histograms for the different values of one columnimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" ,
                   title='Histogram of bills' ,
                   labels={'total_bill' :'total bill' }, # can specify one label per df column
                   opacity=0.8,
                   log_y=True, # represent bars with log scale
                   color_discrete_sequence =['indianred' ] # color of histogram bars
                   )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , color="sex")
fig.show()
10 20 30 40 5091234567891023Histogram of bills
total billcount
10 20 30 40 50051015202530sex
Female
Male
total_billcount
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 6/23

--- Página 7 ---
Aggregating with other functions than count
For each bin of x, one can compute a function of data using histfunc. The argument of histfunc is the dataframe column given as the y argument. Below the plot shows
that the average tip increases with the total bill.
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", histfunc ='avg')
fig.show()
The default histfunc is sum if y is given, and works with categorical as well as binned numeric data on the x axis:
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , category_orders =dict(day=["Thur", "Fri", "Sat", "Sun"]))
fig.show()10 20 30 40 500246810
total_billavg of tip
Thur Fri Sat Sun020040060080010001200140016001800
daysum of total_bill
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 7/23

--- Página 8 ---
Visualizing the distributionNew in v5.0
Histograms afford the use of  in addition to color:
patterns (also known as hatching or texture) (/python/pattern-hatching-texture/)
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="sex", y="total_bill" , color="sex", pattern_shape ="smoker" )
fig.show()
With the marginal keyword, a  is drawn alongside the histogram, visualizing the distribution. See 
 for more examples of combined statistical representations.
marginal (https://plotly.com/python/marginal-plots/)
the distplot page
(https://plotly.com/python/distplot/)
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , color="sex", marginal ="rug", # can be `box`, `violin`
                         hover_data =df.columns)
fig.show()Female Male050010001500200025003000sex, smoker
Female, No
Female, Yes
Male, No
Male, Yes
sexsum of total_bill
10 20 30 40 50051015202530sex
Female
Male
total_billcount
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 8/23

--- Página 9 ---
Adding text labels
New in v5.5
You can add text to histogram bars using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting string
will control the output format.
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", histfunc ="avg", nbins=8, text_auto =True)
fig.show()
1.8376472.4552313.6076924.1909094.9410
0 10 20 30 40 50 600246810
total_billavg of tip
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 9/23

--- Página 10 ---
Histograms with go.Histogram
Basic HistogramIf Plotly Express does not provide a good starting point, it is also possible to use 
. All of the available histogram options are described in the histogram section of the reference page: 
.
the more generic go.Histogram class from plotly.graph_objects (/python/graph-
objects/)
https://plotly.com/python/reference#histogram
(https://plotly.com/python/reference#histogram)
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
x = np.random.randn(500)
fig = go.Figure(data=[go.Histogram (x=x)])
fig.show()
−2 −1 0 1 2 3051015202530354045
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 10/23

--- Página 11 ---
Normalized Histogram
import plotly.graph_objects  as go
import numpy as np
x = np.random.randn(500)
fig = go.Figure(data=[go.Histogram (x=x, histnorm ='probability' )])
fig.show()
−3 −2 −1 0 1 2 3 400.020.040.060.080.1
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 11/23

--- Página 12 ---
Horizontal Histogram
import plotly.graph_objects  as go
import numpy as np
y = np.random.randn(500)
# Use `y` argument instead of `x` for horizontal histogram
fig = go.Figure(data=[go.Histogram (y=y)])
fig.show()
0 5 10 15 20 25 30 35 40 45−3−2−10123
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 12/23

--- Página 13 ---
Overlaid Histogram
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn(500)
# Add 1 to shift the mean of the Gaussian distribution
x1 = np.random.randn(500) + 1
fig = go.Figure()
fig.add_trace (go.Histogram (x=x0))
fig.add_trace (go.Histogram (x=x1))
# Overlay both histograms
fig.update_layout (barmode='overlay' )
# Reduce opacity to see both histograms
fig.update_traces (opacity=0.75)
fig.show()
−2 −1 0 1 2 3 4051015202530354045trace 0
trace 1
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 13/23

--- Página 14 ---
Stacked Histograms
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn(2000)
x1 = np.random.randn(2000) + 1
fig = go.Figure()
fig.add_trace (go.Histogram (x=x0))
fig.add_trace (go.Histogram (x=x1))
# The two histograms are drawn on top of another
fig.update_layout (barmode='stack')
fig.show()
−3 −2 −1 0 1 2 3 4020406080100120140160trace 1
trace 0
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 14/23

--- Página 15 ---
Styled Histogram
import plotly.graph_objects  as go
import numpy as np
x0 = np.random.randn(500)
x1 = np.random.randn(500) + 1
fig = go.Figure()
fig.add_trace (go.Histogram (
    x=x0,
    histnorm ='percent' ,
    name='control' , # name used in legend and hover labels
    xbins=dict( # bins used for histogram
        start=-4.0,
        end=3.0,
        size=0.5
    ),
    marker_color ='#EB89B5' ,
    opacity=0.75
))
fig.add_trace (go.Histogram (
    x=x1,
    histnorm ='percent' ,
    name='experimental' ,
    xbins=dict(
        start=-3.0,
        end=4,
        size=0.5
    ),
    marker_color ='#330C73' ,
    opacity=0.75
))
fig.update_layout (
    title_text ='Sampled Results' , # title of plot
    xaxis_title_text ='Value', # xaxis label
    yaxis_title_text ='Count', # yaxis label
    bargap=0.2, # gap between bars of adjacent location coordinates
    bargroupgap =0.1 # gap between bars of the same location coordinates
)
fig.show()
−3 −2 −1 0 1 2 3 405101520control
experimental
Sampled Results
ValueCount
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 15/23

--- Página 16 ---
Histogram Bar Text
You can add text to histogram bars using the texttemplate argument. In this example we add the x-axis values as text following the format %{variable}. We also adjust
the size of the text using textfont_size.
import plotly.graph_objects  as go
numbers = ["5", "10", "3", "10", "5", "8", "5", "5"]
fig = go.Figure()
fig.add_trace (go.Histogram (x=numbers, name="count", texttemplate ="%{x}", textfont_size =20))
fig.show()
5
10
3 8
5 10 3 800.511.522.533.54
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 16/23

--- Página 17 ---
Cumulative Histogram
import plotly.graph_objects  as go
import numpy as np
x = np.random.randn(500)
fig = go.Figure(data=[go.Histogram (x=x, cumulative_enabled =True)])
fig.show()
−3 −2 −1 0 1 2 3 40100200300400500
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 17/23

--- Página 18 ---
Specify Aggregation Function
Custom Binningimport plotly.graph_objects  as go
x = ["Apples" ,"Apples" ,"Apples" ,"Oranges" , "Bananas" ]
y = ["5","10","3","10","5"]
fig = go.Figure()
fig.add_trace (go.Histogram (histfunc ="count", y=y, x=x, name="count"))
fig.add_trace (go.Histogram (histfunc ="sum", y=y, x=x, name="sum"))
fig.show()
For custom binning along x-axis, use the attribute . Please note that the autobin algorithm
will choose a 'nice' round bin size that may result in somewhat fewer than nbinsx total bins. Alternatively, you can set the exact values for 
 along with autobinx = False.
nbinsx (https://plotly.com/python/reference/histogram/#histogram-nbinsx)
xbins
(https://plotly.com/python/reference/histogram/#histogram-xbins)Apples Oranges Bananas024681012141618 count
sum
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 18/23

--- Página 19 ---
See also: Bar Chartsimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
x = ['1970-01-01' , '1970-01-01' , '1970-02-01' , '1970-04-01' , '1970-01-02' ,
     '1972-01-31' , '1970-02-13' , '1971-04-19' ]
fig = make_subplots (rows=3, cols=2)
trace0 = go.Histogram (x=x, nbinsx=4)
trace1 = go.Histogram (x=x, nbinsx = 8)
trace2 = go.Histogram (x=x, nbinsx=10)
trace3 = go.Histogram (x=x,
                      xbins=dict(
                      start='1969-11-15' ,
                      end='1972-03-31' ,
                      size='M18'), # M18 stands for 18 months
                      autobinx =False
                     )
trace4 = go.Histogram (x=x,
                      xbins=dict(
                      start='1969-11-15' ,
                      end='1972-03-31' ,
                      size='M4'), # 4 months bin size
                      autobinx =False
                      )
trace5 = go.Histogram (x=x,
                      xbins=dict(
                      start='1969-11-15' ,
                      end='1972-03-31' ,
                      size= 'M2'), # 2 months
                      autobinx  = False
                      )
fig.add_trace (trace0, 1, 1)
fig.add_trace (trace1, 1, 2)
fig.add_trace (trace2, 2, 1)
fig.add_trace (trace3, 2, 2)
fig.add_trace (trace4, 3, 1)
fig.add_trace (trace5, 3, 2)
fig.show()
If you want to display information about the individual items within each histogram bar, then create a stacked bar chart with hover information as shown below. Note
that this is not technically the histogram chart type, but it will have a similar effect as shown below by comparing the output of px.histogram and px.bar. For more
information, see the .
tutorial on bar charts (/python/bar-charts/)1970 1971 19720246
Jan 1970Jul 1970Jan 1971Jul 1971Jan 19720246
Jan 1970Jul 1970Jan 1971Jul 1971Jan 1972024
1970 1971 19720246
Jan 1970Jul 1970Jan 1971Jul 1971Jan 1972024
Jan 1970Jul 1970Jan 1971Jul 1971Jan 19720123trace 0
trace 1
trace 2
trace 3
trace 4
trace 5
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 19/23

--- Página 20 ---
Share bins between histogramsimport plotly.express  as px
df = px.data.tips()
fig1 = px.bar(df, x='day', y='tip', height=300,
              title='Stacked Bar Chart - Hover on individual items' )
fig2 = px.histogram (df, x='day', y='tip', histfunc ='sum', height=300,
                    title='Histogram Chart' )
fig1.show()
fig2.show()
In this example both histograms have a compatible bin settings using  attribute. Note
that traces on the same subplot, and with the same barmode ("stack", "relative", "group") are forced into the same bingroup, however traces with barmode = "overlay"
and on different axes (of the same axis type) can have compatible bin settings. Histogram and  trace can share
the same bingroup.
bingroup (https://plotly.com/python/reference/histogram/#histogram-bingroup)
histogram2d (https://plotly.com/python/2D-Histogram/)Sun Sat Thur Fri0100200Stacked Bar Chart - Hover on individual items
daytip
Sun Sat Thur Fri0100200Histogram Chart
daysum of tip
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 20/23

--- Página 21 ---
Sort Histogram by Category Orderimport plotly.graph_objects  as go
import numpy as np
fig = go.Figure(go.Histogram (
    x=np.random.randint(7, size=100),
    bingroup =1))
fig.add_trace (go.Histogram (
    x=np.random.randint(7, size=20),
    bingroup =1))
fig.update_layout (
    barmode="overlay" ,
    bargap=0.1)
fig.show()
Histogram bars can also be sorted based on the ordering logic of the categorical values using the 
 attribute of the x-axis. Sorting of histogram bars using categoryorder also works with
multiple traces on the same x-axis. In the following examples, the histogram bars are sorted based on the total numerical values.
categoryorder
(https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-categoryorder)0 1 2 3 4 5 605101520
trace 0
trace 1
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 21/23

--- Página 22 ---
Referenceimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day").update_xaxes (categoryorder ='total ascending' )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", color="smoker" ).update_xaxes (categoryorder ='total descending' )
fig.show()
See  or
 for more information and chart attribute options!
function reference for px.histogram() (https://plotly.com/python-api-reference/generated/plotly.express.histogram)
https://plotly.com/python/reference/histogram/ (https://plotly.com/python/reference/histogram/)Fri Thur Sun Sat0102030405060708090
daycount
Sat Sun Thur Fri0102030405060708090smoker
No
Yes
daycount
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 22/23

--- Página 23 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
t values
an count16/07/2025, 06:31 Histograms in Python
https://plotly.com/python/histograms/ 23/23</content>
      </file>
      <file name="Linear and non-linear trendlines in Python.pdf" path="pyvy_2x3/Linear and non-linear trendlines in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Linear fit trendlines with Plotly Express
Fitting multiple lines and retrieving the model parameters &gt;  &gt; Linear and Non-
Linear Trendlines
Linear and Non-Linear Trendlines in Python
Add linear Ordinary Least Squares (OLS) regression trendlines or non-linear Locally Weighted Scatterplot Smoothing (LOWESS) trendlines to scatterplots in Python.
Options for moving averages (rolling means) as well as exponentially-weighted and expanding functions.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/linear-fits.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Plotly Express allows you to add  regression trendline to scatterplots with the trendline
argument. In order to do so, you will need to . Hovering over the trendline
will show the equation of the line and its R-squared value.
Ordinary Least Squares (https://en.wikipedia.org/wiki/Ordinary_least_squares)
install statsmodels and its dependencies (https://www.statsmodels.org/stable/install.html)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", trendline ="ols")
fig.show()
Plotly Express will fit a trendline per trace, and allows you to access the underlying model parameters for all the models.10 20 30 40 50246810
total_billtip
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 1/10

--- Página 2 ---
Displaying a single trendline with multiple tracesimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_col ="smoker" , color="sex", trendline ="ols")
fig.show()
results = px.get_trendline_results (fig)
print(results)
results.query("sex == 'Male' and smoker == 'Yes'" ).px_fit_results .iloc[0].summary()
new in v5.2
To display a single trendline using the entire dataset, set the trendline_scope argument to "overall". The same trendline will be overlaid on all facets and animation
frames. The trendline color can be overridden with trendline_color_override.OLS Regression Results
Dep. Variable:y R-squared: 0.232
Model: OLS Adj. R-squared:0.219
Method: Least SquaresF-statistic: 17.56
Date: Tue, 08 Jul 2025Prob (F-statistic):9.61e-05
Time: 20:26:57 Log-Likelihood:-101.03
No. Observations:60 AIC: 206.1
Df Residuals:58 BIC: 210.2
Df Model: 1
Covariance Type:nonrobust
coefstd errtP&gt;|t|[0.0250.975]
const1.42530.4243.3610.0010.5762.274
x10.07300.0174.1900.0000.0380.108
Omnibus: 21.841Durbin-Watson:1.383
Prob(Omnibus):0.000Jarque-Bera (JB):33.031
Skew: 1.315Prob(JB): 6.72e-08
Kurtosis: 5.510Cond. No. 60.4
Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.0 20 40246810
0 20 40sex
Female
Male
total_bill total_billtipsmoker=No smoker=Yes
sex smoker                                     px_fit_results
0  Female     No  &lt;statsmodels.regression.linear_model.Regressio...
1  Female    Yes  &lt;statsmodels.regression.linear_model.Regressio...
2    Male     No  &lt;statsmodels.regression.linear_model.Regressio...
3    Male    Yes  &lt;statsmodels.regression.linear_model.Regressio...
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 2/10

--- Página 3 ---
OLS Parametersimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", symbol="smoker" , color="sex", trendline ="ols", trendline_scope ="overall" )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", facet_col ="smoker" , color="sex", 
                 trendline ="ols", trendline_scope ="overall" , trendline_color_override ="black")
fig.show()
new in v5.2
OLS trendlines can be fit with log transformations to both X or Y data using the trendline_options argument, independently of whether or not the plot has 
.
logarithmic
axes (https://plotly.com/python/log-plot/)10 20 30 40 50246810sex, smoker
Female, No
Female, Yes
Male, No
Male, Yes
Overall Trendline
total_billtip
0 20 40246810
0 20 40sex
Female
Male
Overall Trendline
total_bill total_billtipsmoker=No smoker=Yes
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 3/10

--- Página 4 ---
Locally WEighted Scatterplot Smoothing (LOWESS)import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , 
                 trendline ="ols", trendline_options =dict(log_x=True),
                 title="Log-transformed fit on linear axes" )
fig.show()
import plotly.express  as px
df = px.data.gapminder (year=2007)
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , log_x=True, 
                 trendline ="ols", trendline_options =dict(log_x=True),
                 title="Log-scaled X axis and log-transformed fit" )
fig.show()
Plotly Express also supports non-linear  trendlines. In order use this feature, you will need to 
.
LOWESS (https://en.wikipedia.org/wiki/Local_regression)
install
statsmodels and its dependencies (https://www.statsmodels.org/stable/install.html)0 10k 20k 30k 40k 50k4050607080Log-transformed fit on linear axes
gdpPercaplifeExp
345678910002 345678910k2 34564050607080Log-scaled X axis and log-transformed fit
gdpPercaplifeExp
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 4/10

--- Página 5 ---
import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="lowess" )
fig.show()
new in v5.2
The level of smoothing can be controlled via the frac trendline option, which indicates the fraction of the data that the LOWESS smoother should include. The default
is a fairly smooth line with frac=0.6666 and lowering this fraction will give a line that more closely follows the data.
import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="lowess" , trendline_options =dict(frac=0.1))
fig.show()Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2
dateGOOG
Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2
dateGOOG
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 5/10

--- Página 6 ---
Moving Averages
new in v5.2
Plotly Express can leverage Pandas' , 
 and 
 functions in trendlines as well, for example to display moving averages. Values
passed to trendline_options are passed directly to the underlying Pandas function (with the exception of the function and function_options keys, see below).
rolling (https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rolling.html)
ewm
(https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.ewm.html)
expanding
(https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.expanding.html)
import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="rolling" , trendline_options =dict(window=5),
                title="5-point moving average" )
fig.show()
Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.25-point moving average
dateGOOG
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 6/10

--- Página 7 ---
Other Functionsimport plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="ewm", trendline_options =dict(halflife =2),
                title="Exponentially-weighted moving average (halflife of 2 points)" )
fig.show()
import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="expanding" , title="Expanding mean" )
fig.show()
The rolling, expanding and ewm trendlines support other functions than the default mean, enabling, for example, a moving-median trendline, or an expanding-max
trendline.Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2Exponentially-weighted moving average (halflife of 2 points)
dateGOOG
Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2Expanding mean
dateGOOG
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 7/10

--- Página 8 ---
import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="rolling" , trendline_options =dict(function ="median" , window=5),
                title="Rolling Median" )
fig.show()
import plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="expanding" , trendline_options =dict(function ="max"),
                title="Expanding Maximum" )
fig.show()
In some cases, it is necessary to pass options into the underying Pandas function, for example the std parameter must be provided if the win_type argument to rolling
is "gaussian". This is possible with the function_args trendline option.Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2Rolling Median
dateGOOG
Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2Expanding Maximum
dateGOOG
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 8/10

--- Página 9 ---
Displaying only the trendlinesimport plotly.express  as px
df = px.data.stocks(datetimes =True)
fig = px.scatter(df, x="date", y="GOOG", trendline ="rolling" , 
                 trendline_options =dict(window=5, win_type ="gaussian" , function_args =dict(std=2)),
                title="Rolling Mean with Gaussian Window" )
fig.show()
In some cases, it may be desirable to show only the trendlines, by removing the scatter points.
import plotly.express  as px
df = px.data.stocks(indexed=True, datetimes =True)
fig = px.scatter(df, trendline ="rolling" , trendline_options =dict(window=5),
                title="5-point moving average" )
fig.data = [t for t in fig.data if t.mode == "lines"]
fig.update_traces (showlegend =True) #trendlines have showlegend=False by default
fig.show()Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019Jan 20200.90.9511.051.11.151.2Rolling Mean with Gaussian Window
dateGOOG
Jan 2018Apr 2018 Jul 2018 Oct 2018 Jan 2019Apr 2019 Jul 2019 Oct 20190.811.21.41.61.8company
GOOG
AAPL
AMZN
FB
NFLX
MSFT5-point moving average
datevalue
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 9/10

--- Página 10 ---
What About Dash? 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ress
the
ultiple
hing16/07/2025, 06:34 Linear and non-linear trendlines in Python
https://plotly.com/python/linear-fits/ 10/10</content>
      </file>
      <file name="Marginal distribution plots in Python.pdf" path="pyvy_2x3/Marginal distribution plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview
Scatter Plot Marginals &gt;  &gt; Marginal
Distribution Plots
Marginal Distribution Plots in Python
How to add marginal distribution plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/marginal-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Marginal distribution plots are small subplots above or to the right of a main plot, which show the distribution of data along only one dimension. Marginal distribution
plot capabilities are built into various Plotly Express functions such as scatter and histogram.  is the easy-to-use, high-level
interface to Plotly, which  and produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The marginal_x and marginal_y arguments accept one of "histogram", "rug", "box", or "violin" (see also how to create , 
 and  as the main figure).
histograms (/python/histograms/)
box plots
(/python/box-plots/)
violin plots (/python/violin-plots/)
Marginal plots are linked to the main plot: try zooming or panning on the main plot.
Marginal plots also support hover, including per-point hover as with the rug-plot on the right: try hovering over the points on the right marginal plot.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , marginal_x ="histogram" , marginal_y ="rug")
fig.show()
44.555.566.577.5822.533.544.5
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 1/6

--- Página 2 ---
Marginal Plots and Colorimport plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_length" , y="sepal_width" , marginal_x ="box", marginal_y ="violin" )
fig.show()
Marginal plots respect the color argument as well, and are linked to the respective legend elements. Try clicking on the legend items.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" , 
                 marginal_x ="box", marginal_y ="violin" ,
                  title="Click on the legend items!" )
fig.show()
44.555.566.577.5822.533.544.5
024681012141618count
sepal_lengthsepal_width
5 6 7 822.533.544.5species
setosa
versicolor
virginicaClick on the legend items!
sepal_lengthsepal_width
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 2/6

--- Página 3 ---
Marginal Plots on Histograms
 are often used to show the distribution of a variable, and they also support marginal plots in Plotly Express, with the marginal
argument:
Histograms (/python/histograms/)
import plotly.express  as px
df = px.data.iris()
fig = px.histogram (df, x="sepal_length" , color="species" , marginal ="box")
fig.show()
Try hovering over the rug plot points to identify individual country values in the histogram below:
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.histogram (df, x="lifeExp" , color="continent" , marginal ="rug", hover_name ="country" ,
                  title="Hover over the rug plot!" )
fig.show()4.254.755.255.756.256.757.257.75051015202530species
setosa
versicolor
virginica
sepal_lengthcount
40 50 60 70 80010203040continent
Asia
Europe
Africa
Americas
OceaniaHover over the rug plot!
lifeExpcount
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 3/6

--- Página 4 ---
Marginal Plots and Facets
Marginal plots can be used in conjunction with  so long as they go along different directions:
Plotly Express facets (/python/facet-plots/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex", facet_col ="day",
                  marginal_x ="box")
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex", facet_row ="time",
                  marginal_y ="box")
fig.show()02040246810
020400204002040sex
Female
Male
total_bill total_bill total_bill total_billtipday=Sun day=Sat day=Thur day=Fri
01020304050246810246810 sex
Female
Male
total_billtip tiptime=Lunch time=Dinner
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 4/6

--- Página 5 ---
What About Dash?import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", facet_col ="day",
                  marginal ="box")
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)2040051015202530
2040 2040 2040sex
Female
Male
total_bill total_bill total_bill total_billsum of tipday=Sun day=Sat day=Thur day=Fri
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 5/6

--- Página 6 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:34 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 6/6</content>
      </file>
      <file name="Parallel categories diagram in Python.pdf" path="pyvy_2x3/Parallel categories diagram in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Parallel Categories Diagram
Basic Parallel Category Diagram with plotly.express &gt;  &gt;
Parallel Categories Diagram
Parallel Categories Diagram in Python
How to make parallel categories diagrams in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/parallel-
categories-diagram.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of multi-dimensional categorical data sets. Each variable in the data
set is represented by a column of rectangles, where each rectangle corresponds to a discrete value taken on by that variable. The relative heights of the rectangles
reflect the relative frequency of occurrence of the corresponding value.
Combinations of category rectangles across dimensions are connected by ribbons, where the height of the ribbon corresponds to the relative frequency of occurrence
of the combination of categories in the data set.
For other representations of multivariate data, also see ,  and 
. A visually-similar but more generic type of visualization is the .
parallel coordinates (/python/parallel-coordinates-plot/)
radar charts (/python/radar-chart/)
scatterplot
matrix (SPLOM) (/python/splom/)
sankey diagrams (/python/sankey-diagram/)
This example visualizes the restaurant bills of a sample of 244 people. Hovering over a category rectangle (sex, smoker, etc) displays a tooltip with the number of
people with that single trait. Hovering over a ribbon in the diagram displays a tooltip with the number of people with a particular combination of the five traits
connected by the ribbon.
By default, px.parallel_categories will display any column in the data_frame that has a cardinality (or number of unique values) of less than 50. This can be overridden
either by passing in a specific list of columns to dimensions or by setting dimensions_max_cardinality to something other than 50.
import plotly.express  as px
df = px.data.tips()
fig = px.parallel_categories (df)
fig.show()
Femalesex
MaleNosmoker
YesSunday
Sat
Thur
FriDinnertime
Lunch2size
3
4
1
6
5
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 1/10

--- Página 2 ---
Style Diagram
Basic Parallel Categories Diagram with graph_objectsIn this example dimensions represents a list of stings or the columns of data frame, and labels is a dictionary with string keys (column name) and string values
('desired label to be displayed'). See  for more
information.
Plotly express reference page (https://plotly.com/python-api-reference/generated/plotly.express.parallel_categories)
import plotly.express  as px
df = px.data.tips()
fig = px.parallel_categories (df, dimensions =['sex', 'smoker' , 'day'],
                color="size", color_continuous_scale =px.colors.sequential .Inferno,
                labels={'sex':'Payer sex' , 'smoker' :'Smokers at the table' , 'day':'Day of week' })
fig.show()
This example illustrates the hair color, eye color, and sex of a sample of 8 people. The dimension labels can be dragged horizontally to reorder the dimensions and the
category rectangles can be dragged vertically to reorder the categories within a dimension.FemalePayer sex
MaleNoSmokers at the table
YesSunDay of week
Sat
Thur
Fri123456size
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 2/10

--- Página 3 ---
Basic Parallel Categories Diagram with Countsimport plotly.graph_objects  as go
fig = go.Figure(go.Parcats(
    dimensions =[
        {'label': 'Hair',
         'values' : ['Black', 'Black', 'Black', 'Brown', 'Brown', 'Brown', 'Red', 'Brown']},
        {'label': 'Eye',
         'values' : ['Brown', 'Brown', 'Brown', 'Brown', 'Brown', 'Blue', 'Blue', 'Blue']},
        {'label': 'Sex',
         'values' : ['Female' , 'Female' , 'Female' , 'Male', 'Female' , 'Male', 'Male', 'Male']}]
))
fig.show()
If the frequency of occurrence for each combination of attributes is known in advance, this can be specified using the counts propertyBlackHair
Brown
RedBrownEye
BlueFemaleSex
Male
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 3/10

--- Página 4 ---
Multi-Color Parallel Categories Diagramimport plotly.graph_objects  as go
fig = go.Figure(go.Parcats(
    dimensions =[
        {'label': 'Hair',
         'values' : ['Black', 'Brown', 'Brown', 'Brown', 'Red']},
        {'label': 'Eye',
         'values' : ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},
        {'label': 'Sex',
         'values' : ['Female' , 'Male', 'Female' , 'Male', 'Male']}],
    counts=[6, 10, 40, 23, 7]
))
fig.show()
The color of the ribbons can be specified with the line.color property. Similar to other trace types, this property may be set to an array of numbers, which are then
mapped to colors according to the the colorscale specified in the line.colorscale property.
Here is an example of visualizing the survival rate of passengers in the titanic dataset, where the ribbons are colored based on survival outcome.
By setting the hoveron property to 'color' and the hoverinfo property to 'count+probability' the tooltips now display count and probability information for each color
(survival outcome) per category.
By setting the arrangement property to 'freeform' it is now possible to drag categories horizontally to reorder dimensions as well as vertically to reorder categories
within the dimension.BlackHair
Brown
RedBrownEye
BlueFemaleSex
Male
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 4/10

--- Página 5 ---
Parallel Categories Linked Brushingimport plotly.graph_objects  as go
import pandas as pd
titanic_df  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv" )
# Create dimensions
class_dim  = go.parcats.Dimension (
    values=titanic_df .Pclass,
    categoryorder ='category ascending' , label="Class"
)
gender_dim  = go.parcats.Dimension (values=titanic_df .Sex, label="Gender" )
survival_dim  = go.parcats.Dimension (
    values=titanic_df .Survived , label="Outcome" , categoryarray =[0, 1],
    ticktext =['perished' , 'survived' ]
)
# Create parcats trace
color = titanic_df .Survived ;
colorscale  = [[0, 'lightsteelblue' ], [1, 'mediumseagreen' ]];
fig = go.Figure(data = [go.Parcats(dimensions =[class_dim , gender_dim , survival_dim ],
        line={'color': color, 'colorscale' : colorscale },
        hoveron='color', hoverinfo ='count+probability' ,
        labelfont ={'size': 18, 'family' : 'Times'},
        tickfont ={'size': 16, 'family' : 'Times'},
        arrangement ='freeform' )])
fig.show()
This example demonstrates how the on_selection and on_click callbacks can be used to implement linked brushing between 3 categorical dimensions displayed with a
parcats trace and 2 continuous dimensions displayed with a scatter trace.
This example also sets the line.shape property to hspline to cause the ribbons to curve between categories.
Note: In order for the callback functions to be executed the figure must be a FigureWidget, and the figure should display itself.1Class
2
3maleGender
femaleperishedOutcome
survived
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 5/10

--- Página 6 ---
import plotly.graph_objects  as go
from ipywidgets  import widgets
import pandas as pd
import numpy as np
cars_df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv' )
# Build parcats dimensions
categorical_dimensions  = ['body-style' , 'drive-wheels' , 'fuel-type' ];
dimensions  = [dict(values=cars_df[label], label=label) for label in categorical_dimensions ]
# Build colorscale
color = np.zeros(len(cars_df), dtype='uint8')
colorscale  = [[0, 'gray'], [1, 'firebrick' ]]
# Build figure as FigureWidget
fig = go.FigureWidget (
    data=[go.Scatter(x=cars_df.horsepower , y=cars_df['highway-mpg' ],
    marker={'color': 'gray'}, mode='markers' , selected ={'marker' : {'color': 'firebrick' }},
    unselected ={'marker' : {'opacity' : 0.3}}), go.Parcats(
        domain={'y': [0, 0.4]}, dimensions =dimensions ,
        line={'colorscale' : colorscale , 'cmin': 0,
              'cmax': 1, 'color': color, 'shape': 'hspline' })
    ])
fig.update_layout (
        height=800, xaxis={'title': 'Horsepower' },
        yaxis={'title': 'MPG', 'domain' : [0.6, 1]},
        dragmode ='lasso', hovermode ='closest' )
# Update color callback
def update_color (trace, points, state):
    # Update scatter selection
    fig.data[0].selectedpoints  = points.point_inds
    # Update parcats colors
    new_color  = np.zeros(len(cars_df), dtype='uint8')
    new_color [points.point_inds ] = 1
    fig.data[1].line.color = new_color
# Register callback on scatter selection...
fig.data[0].on_selection (update_color )
# and parcats click
fig.data[1].on_click (update_color )
fig
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 6/10

--- Página 7 ---
Parallel Categories with Multi-Color Linked Brushing
This example extends the previous example to support brushing with multiple colors. The toggle buttons above may be used to select the active color, and this color
will be applied when points are selected in the scatter trace and when categories or ribbons are clicked in the parcats trace.
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 7/10

--- Página 8 ---
import plotly.graph_objects  as go
import ipywidgets  as widgets
import pandas as pd
import numpy as np
cars_df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv' )
# Build parcats dimensions
categorical_dimensions  = ['body-style' , 'drive-wheels' , 'fuel-type' ]
dimensions  = [dict(values=cars_df[label], label=label) for label in categorical_dimensions ]
# Build colorscale
color = np.zeros(len(cars_df), dtype='uint8')
colorscale  = [[0, 'gray'], [0.33, 'gray'],
              [0.33, 'firebrick' ], [0.66, 'firebrick' ],
              [0.66, 'blue'], [1.0, 'blue']]
cmin = -0.5
cmax = 2.5
# Build figure as FigureWidget
fig = go.FigureWidget (
    data=[go.Scatter(x=cars_df.horsepower , y=cars_df['highway-mpg' ],
                marker={'color': color, 'cmin': cmin, 'cmax': cmax,
                        'colorscale' : colorscale , 'showscale' : True,
                        'colorbar' : {'tickvals' : [0, 1, 2], 'ticktext' : ['None', 'Red', 'Blue']}},
                     mode='markers' ),
      go.Parcats(domain={'y': [0, 0.4]}, dimensions =dimensions ,
                   line={'colorscale' : colorscale , 'cmin': cmin,
                   'cmax': cmax, 'color': color, 'shape': 'hspline' })]
)
fig.update_layout (height=800, xaxis={'title': 'Horsepower' },
                  yaxis={'title': 'MPG', 'domain' : [0.6, 1]},
                  dragmode ='lasso', hovermode ='closest' )
# Build color selection widget
color_toggle  = widgets.ToggleButtons (
    options=['None', 'Red', 'Blue'],
    index=1, description ='Brush Color:' , disabled =False)
# Update color callback
def update_color (trace, points, state):
    # Compute new color array
    new_color  = np.array(fig.data[0].marker.color)
    new_color [points.point_inds ] = color_toggle .index
    with fig.batch_update ():
        # Update scatter color
        fig.data[0].marker.color = new_color
        # Update parcats colors
        fig.data[1].line.color = new_color
# Register callback on scatter selection...
fig.data[0].on_selection (update_color )
# and parcats click
fig.data[1].on_click (update_color )
# Display figure
widgets.VBox([color_toggle , fig])
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 8/10

--- Página 9 ---
Reference
What About Dash?
See  or 
 for more information and chart attribute options!
function reference for px.parallel_categories() (https://plotly.com/python-api-reference/generated/plotly.express.parallel_categories)
reference page
(https://plotly.com/python/reference/parcats/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 9/10

--- Página 10 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
h
with
with
ram
Linked16/07/2025, 06:32 Parallel categories diagram in Python
https://plotly.com/python/parallel-categories-diagram/ 10/10</content>
      </file>
      <file name="Scatterplot matrix in Python.pdf" path="pyvy_2x3/Scatterplot matrix in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Scatter matrix with Plotly Express &gt;  &gt;
Scatterplot Matrix
Scatterplot Matrix in Python
How to make scatterplot matrices or sploms natively in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/splom.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A scatterplot matrix is a matrix associated to n numerical arrays (data variables), $X_1,X_2,…,X_n$ , of the same length. The cell (i,j) of such a matrix displays the scatter
plot of the variable Xi versus Xj.
Here we show the Plotly Express function px.scatter_matrix to plot the scatter matrix for the columns of the dataframe. By default, all columns are considered.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df)
fig.show()
Specify the columns to be represented with the dimensions argument, and set colors using a column of the dataframe:45678
234
246
012
setosaversicolorvirginica
45678123
234 246012 setosaversicolorvirginica123
sepal_lengthsepal_widthpetal_lengthpetal_width
speciesspecies_idsepal_length sepal_width petal_length petal_widthspecies
species_id
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 1/11

--- Página 2 ---
Styled Scatter Matrix with Plotly Expressimport plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df,
    dimensions =["sepal_length" , "sepal_width" , "petal_length" , "petal_width" ],
    color="species" )
fig.show()
The scatter matrix plot can be configured thanks to the parameters of px.scatter_matrix, but also thanks to fig.update_traces for fine tuning (see the next section to
learn more about the options).
import plotly.express  as px
df = px.data.iris()
fig = px.scatter_matrix (df,
    dimensions =["sepal_length" , "sepal_width" , "petal_length" , "petal_width" ],
    color="species" , symbol="species" ,
    title="Scatter matrix of iris data set" ,
    labels={col:col.replace('_', ' ') for col in df.columns}) # remove underscore
fig.update_traces (diagonal_visible =False)
fig.show()45678
234
246
45678012
2 3 4 246 0 1 2
species
setosa
versicolor
virginica
sepal_length sepal_width petal_length petal_widthsepal_length sepal_width petal_length petal_width
45678234
246
012
2 3 445678
246 0 1 2
species
setosa
versicolor
virginicaScatter matrix of iris data set
sepal length sepal width petal length petal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 2/11

--- Página 3 ---
Scatter matrix (splom) with go.Splom
Splom of the Iris data setIf Plotly Express does not provide a good starting point, it is possible to use . All its
parameters are documented in the reference page .
the more generic go.Splom class from plotly.graph_objects (/python/graph-objects/)
https://plotly.com/python/reference/splom/ (https://plotly.com/python/reference/splom/)
The Plotly splom trace implementation for the scatterplot matrix does not require to set $x=Xi$ , and $y=Xj$, for each scatter plot. All arrays, $X_1,X_2,…,X_n$ , are
passed once, through a list of dicts called dimensions, i.e. each array/variable represents a dimension.
A trace of type splom is defined as follows:
trace=go.Splom(dimensions=[ dict(label='string-1' ,
                                values=X1),
                           dict(label='string-2' ,
                                values=X2),
                           .
                           .
                           .
                           dict(label='string-n' ,
                                values=Xn)],
                           ....
               ) 
 
The label in each dimension is assigned to the axes titles of the corresponding matrix cell.
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 3/11

--- Página 4 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv' )
# The Iris dataset contains four data variables, sepal length, sepal width, petal length,
# petal width, for 150 iris flowers. The flowers are labeled as `Iris-setosa`,
# `Iris-versicolor`, `Iris-virginica`.
# Define indices corresponding to flower categories, using pandas label encoding
index_vals  = df['class'].astype('category' ).cat.codes
fig = go.Figure(data=go.Splom(
                dimensions =[dict(label='sepal length' ,
                                 values=df['sepal length' ]),
                            dict(label='sepal width' ,
                                 values=df['sepal width' ]),
                            dict(label='petal length' ,
                                 values=df['petal length' ]),
                            dict(label='petal width' ,
                                 values=df['petal width' ])],
                text=df['class'],
                marker=dict(color=index_vals ,
                            showscale =False, # colors encode categorical variables
                            line_color ='white', line_width =0.5)
                ))
fig.update_layout (
    title=dict(text='Iris Data set' ),
    dragmode ='select' ,
    width=600,
    height=600,
    hovermode ='closest' ,
)
fig.show()
The scatter plots on the principal diagonal can be removed by setting diagonal_visible=False:45678
234
246
45678012
234 246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 4/11

--- Página 5 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv' )
index_vals  = df['class'].astype('category' ).cat.codes
fig = go.Figure(data=go.Splom(
                dimensions =[dict(label='sepal length' ,
                                 values=df['sepal length' ]),
                            dict(label='sepal width' ,
                                 values=df['sepal width' ]),
                            dict(label='petal length' ,
                                 values=df['petal length' ]),
                            dict(label='petal width' ,
                                 values=df['petal width' ])],
                diagonal_visible =False, # remove plots on diagonal
                text=df['class'],
                marker=dict(color=index_vals ,
                            showscale =False, # colors encode categorical variables
                            line_color ='white', line_width =0.5)
                ))
fig.update_layout (
    title=dict(text='Iris Data set' ),
    width=600,
    height=600,
)
fig.show()
To plot only the lower/upper half of the splom we switch the default showlowerhalf=True/showupperhalf=True to False:45678234
246
012
23445678
246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 5/11

--- Página 6 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv' )
index_vals  = df['class'].astype('category' ).cat.codes
fig = go.Figure(data=go.Splom(
                dimensions =[dict(label='sepal length' ,
                                 values=df['sepal length' ]),
                            dict(label='sepal width' ,
                                 values=df['sepal width' ]),
                            dict(label='petal length' ,
                                 values=df['petal length' ]),
                            dict(label='petal width' ,
                                 values=df['petal width' ])],
                showupperhalf =False, # remove plots on diagonal
                text=df['class'],
                marker=dict(color=index_vals ,
                            showscale =False, # colors encode categorical variables
                            line_color ='white', line_width =0.5)
                ))
fig.update_layout (
    title=dict(text='Iris Data set' ),
    width=600,
    height=600,
)
fig.show()
Each dict in the list dimensions has a key, visible, set by default on True. We can choose to remove a variable from splom, by setting visible=False in its corresponding
dimension. In this case the default grid associated to the scatterplot matrix keeps its number of cells, but the cells in the row and column corresponding to the visible
false dimension are empty:45678
234
246
45678012
234 246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 6/11

--- Página 7 ---
Splom for the diabetes datasetimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv' )
index_vals  = df['class'].astype('category' ).cat.codes
fig = go.Figure(data=go.Splom(
                dimensions =[dict(label='sepal length' ,
                                 values=df['sepal length' ]),
                            dict(label='sepal width' ,
                                 values=df['sepal width' ],
                                 visible=False),
                            dict(label='petal length' ,
                                 values=df['petal length' ]),
                            dict(label='petal width' ,
                                 values=df['petal width' ])],
                text=df['class'],
                marker=dict(color=index_vals ,
                            showscale =False, # colors encode categorical variables
                            line_color ='white', line_width =0.5)
                ))
fig.update_layout (
    title=dict(text='Iris Data set' ),
    width=600,
    height=600,
)
fig.show()
Diabetes dataset is downloaded from . It is used to predict the onset of diabetes based
on 8 diagnostic measures. The diabetes file contains the diagnostic measures for 768 patients, that are labeled as non-diabetic (Outcome=0), respectively diabetic
(Outcome=1). The splom associated to the 8 variables can illustrate the strength of the relationship between pairs of measures for diabetic/nondiabetic patients.
kaggle (https://www.kaggle.com/uciml/pima-indians-diabetes-database/data)45678
024
246
45678012
0246246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 7/11

--- Página 8 ---
import plotly.graph_objs  as go
import pandas as pd
dfd = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv' )
textd = ['non-diabetic'  if cl==0 else 'diabetic'  for cl in dfd['Outcome' ]]
fig = go.Figure(data=go.Splom(
                  dimensions =[dict(label='Pregnancies' , values=dfd['Pregnancies' ]),
                              dict(label='Glucose' , values=dfd['Glucose' ]),
                              dict(label='BloodPressure' , values=dfd['BloodPressure' ]),
                              dict(label='SkinThickness' , values=dfd['SkinThickness' ]),
                              dict(label='Insulin' , values=dfd['Insulin' ]),
                              dict(label='BMI', values=dfd['BMI']),
                              dict(label='DiabPedigreeFun' , values=dfd['DiabetesPedigreeFunction' ]),
                              dict(label='Age', values=dfd['Age'])],
                  marker=dict(color=dfd['Outcome' ],
                              size=5,
                              colorscale ='Bluered' ,
                              line=dict(width=0.5,
                                        color='rgb(230,230,230)' )),
                  text=textd,
                  diagonal =dict(visible=False)))
title = "Scatterplot Matrix (SPLOM) for Diabetes Dataset&lt;br&gt;Data source:" +\
        " &lt;a href='https://www.kaggle.com/uciml/pima-indians-diabetes-database/data'&gt;[1]&lt;/a&gt;"
fig.update_layout (title=title,
                  dragmode ='select' ,
                  width=1000,
                  height=1000,
                  hovermode ='closest' )
fig.show()
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 8/11

--- Página 9 ---
Hover Effects
New in 5.21
Set hoversubplots='axis' with hovermode set to x, x unified, y, or y unified for hover effects to appear across a column or row. For more on hover effects, see the
 page.
Hover Text and Formatting (/python/hover-text-and-formatting/)051015050100150200
050100
050100
0500
0204060
012
20406080050100150200051015
0501000501000500 020406001220406080
Scatterplot Matrix (SPLOM) for Diabetes Dataset
Data source: 
[1]
Pregnancies
GlucoseBloodPressureSkinThicknessInsulin BMIDiabPedigreeFunAgePregnanciesGlucose BloodPressure SkinThickness InsulinBMIDiabPedigreeFunAge
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 9/11

--- Página 10 ---
Referenceimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv"
)
index_vals  = df["class"].astype("category" ).cat.codes
fig = go.Figure(
    data=go.Splom(
        dimensions =[
            dict(label="sepal length" , values=df["sepal length" ]),
            dict(label="sepal width" , values=df["sepal width" ]),
            dict(label="petal length" , values=df["petal length" ]),
            dict(label="petal width" , values=df["petal width" ]),
        ],
        showupperhalf =False,
        text=df["class"],
        marker=dict(
            color=index_vals ,
            showscale =False,
            line_color ="white",
            line_width =0.5,
        ),
    )
)
fig.update_layout (
    title=dict(text="Iris Data set" ),
    hoversubplots ="axis",
    width=600,
    height=600,
    hovermode ="x",
)
fig.show()
See  or
 for more information and chart attribute options!
function reference for px.scatter_matrix() (https://plotly.com/python-api-reference/generated/plotly.express.scatter_matrix)
https://plotly.com/python/reference/splom/ (https://plotly.com/python/reference/splom/)45678
234
246
45678012
234 246012
Iris Data set
sepal lengthsepal widthpetal lengthpetal widthsepal length sepal width petal length petal width
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 10/11

--- Página 11 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
m16/07/2025, 06:32 Scatterplot matrix in Python
https://plotly.com/python/splom/ 11/11</content>
      </file>
      <file name="Statistical charts in Python.pdf" path="pyvy_2x3/Statistical charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Statistical charts in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to get
the code and run python app.py.
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
Python (/python)
Statistical Charts (/python/statistical-charts)Plotly Python Open Source Graphing Library Statistical Charts
Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make statistical charts such as box plots, histograms, and
distribution plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/error-bars/)
Error Bars
(/python/box-plots/)
Box Plots
(/python/histograms/)
Histograms
(/python/distplot/)
Distplots
(/python/2D-Histogram/)
2D Histograms
(/python/splom/)
Scatterplot Matrix
(/python/facet-plots/)
Facet and Trellis Plots
(/python/parallel-
categories-diagram/)
Parallel Categories
Diagram
(/python/tree-plots/)
Tree-plots
(/python/violin/)
Violin Plots
(/python/2d-histogram-
contour/)
2D Histogram Contour
(/python/linear-fits/)
Linear and Non-Linear
Trendlines
(/python/marginal-
plots/)
Marginal Distribution
Plots
(/python/strip-charts/)
Strip Charts
(/python/continuous-
error-bars/)
Continuous Error Bands
(/python/ecdf-plots/)
Empirical Cumulative
Distribution Plots
Dash (https://plotly.com/dash/)
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:33 Statistical charts in Python
https://plotly.com/python/statistical-charts/ 1/3

--- Página 2 ---

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import numpy as np
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Interactive normal distribution'),
    dcc.Graph(id="graph"),
    html.P("Mean:"),
    dcc.Slider(id="mean", min=-3, max=3, value=0,
               marks={-3: '-3', 3: '3'}),
    html.P("Standard Deviation:"),
    dcc.Slider(id="std", min=1, max=3, value=1,
               marks={1: '1', 3: '3'}),
])
@app.callback(
    Output("graph", "figure"),
    Input("mean", "value"),
    Input("std", "value"))
def display_color(mean, std):
    data = np.random.normal(mean, std, size=500) # replace with your own data source
 fi hit (dt [1010])DOWNLOAD
Interactive normal distribution
Mean:
Standard Deviation:−10 −5 0 5 10010203040variable
0
valuecount
-3 3
1 3
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:33 Statistical charts in Python
https://plotly.com/python/statistical-charts/ 2/3

--- Página 3 ---
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:33 Statistical charts in Python
https://plotly.com/python/statistical-charts/ 3/3</content>
      </file>
      <file name="Strip charts in Python.pdf" path="pyvy_2x3/Strip charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Strip Charts with Plotly Express &gt;  &gt; Strip
Charts
Strip Charts in Python
Strip charts are like 1-dimensional jittered scatter plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/strip-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The px.strip() function will make strip charts using underlying box traces with the box hidden.
See also  and .
box plots (/python/box-plots/)
violin plots (/python/violin/)
import plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x="total_bill" , y="day")
fig.show()
Strip charts support  and :
faceting (/python/facet-plots/)
discrete color (/python/discrete-color/)10 20 30 40 50SunSatThurFri
total_billday
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:34 Strip charts in Python
https://plotly.com/python/strip-charts/ 1/3

--- Página 2 ---
Reference
What About Dash?import plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x="total_bill" , y="time", color="sex", facet_col ="day")
fig.show()
See  for more information and chart attribute options!
function reference for px.strip() (https://plotly.com/python-api-reference/generated/plotly.express.strip)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter2040DinnerLunch
2040 2040 2040sex
Female
Male
total_bill total_bill total_bill total_billtimeday=Sun day=Sat day=Thur day=Fri
16/07/2025, 06:34 Strip charts in Python
https://plotly.com/python/strip-charts/ 2/3

--- Página 3 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:34 Strip charts in Python
https://plotly.com/python/strip-charts/ 3/3</content>
      </file>
      <file name="Styling plotly express figures in Python.pdf" path="pyvy_2x3/Styling plotly express figures in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Styling Figures made with Plotly Express
1. Control common parameters like width &amp; height, titles, labeling and colors using built-in Plotly Express function arguments
2. Updating the figure attributes using 
3. Using Plotly's  via the template argument to every Plotly Express function
4. Setting default values for common parameters using px.defaults
Built-in Plotly Express Styling Arguments
title to set the figure title
width and height to set the figure dimensions
template to  (see below for more details)
labels to override the default axis and legend labels behaviour, which is to use the data frame column name if available, and otherwise to use the label name
itself like "x", "y", "color" etc. labels accepts a dict whose keys are the label to rename and whose values are the desired labels. These labels appear in axis
labels, legend and color bar titles, and in hover labels.
category_orders to override the default category ordering behaviour, which is to use the order in which the data appears in the input. category_orders accepts
a dict whose keys are the column name to reorder and whose values are a list of values in the desired order. These orderings apply everywhere categories
appear: in legends, on axes, in bar stacks, in the order of facets, in the order of animation frames etc.
hover_data and hover_name to control which attributes appear in the hover label and how they are formatted.
 such as color_continuous_scale, color_range, color_discrete_sequence and/or color_discrete_map set the
colors used in the figure. color_discrete_map accepts a dict whose keys are values mapped to color and whose values are the desired CSS colors. &gt;  &gt; Styling
Plotly Express Figures
Styling Plotly Express Figures in Python
Figures made with Plotly Express can be customized in all the same ways as figures made with graph objects, as well as with PX-specific function arguments.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/styling-
plotly-express.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which . Every
Plotly Express function returns  whose data and layout has been pre-populated according to the provided
arguments.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
a plotly.graph_objects.Figure object (/python/graph-objects/)
You can style and customize figures made with Plotly Express in all the same ways as you can style figures made more manually by explicitly assembling
graph_objects into a figure.
More specifically, here are the 4 ways you can style and customize figures made with Plotly Express:
update methods or by directly setting attributes (/python/creating-and-updating-figures/)
theming/templating mechanism (/python/templates/)
Many common styling options can be set directly in the px function call. Every Plotly Express function accepts the following arguments:
set many styling parameters at once (/python/templates/)
Various color-related attributes (/python/colorscales/)
To illustrate each of these, here is a simple, default figure made with Plotly Express. Note the default orderings for the x-axis categories and the usage of lowercase &amp;
snake_case data frame columns for axis labelling.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
ments
e with
plates
ts16/07/2025, 06:31 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 1/6

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex")
fig.show()
Here is the same figure, restyled by adding some extra parameters to the initial Plotly Express call:
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week" ,
            width=600, height=400,
            labels={ # replaces default labels by column name
                "sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts"
            },
            category_orders ={ # replaces default order by column name
                "day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]
            },
            color_discrete_map ={ # replaces default color mapping by value
                "Male": "RebeccaPurple" , "Female" : "MediumPurple"
            },
            template ="simple_white"
            )
fig.show()Sun Sat Thur Fri020040060080010001200140016001800 sex
Female
Male
daysum of total_bill
Thur Fri Sat Sun050010001500Payer Gender
Male
FemaleReceipts by Payer Gender and Day of Week
Day of Weeksum of Receipts
press
ments
e with
plates
ts16/07/2025, 06:31 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 2/6

--- Página 3 ---
Updating or Modifying Figures made with Plotly Express
If none of the built-in Plotly Express arguments allow you to customize the figure the way you need to, you can use 
 on  returned by the PX function to make any further
modifications to the figure. This approach is the one used throughout the Plotly.py documentation to , control 
 and , add  and  etc.
the update_* and add_* methods
(/python/creating-and-updating-figures/)
the plotly.graph_objects.Figure object (/python/graph-objects/)
customize axes (/python/axes/)
legends
(/python/legend/)
colorbars (/python/colorscales/)
shapes (/python/shapes/)
annotations (/python/text-and-annotations/)
Here is the same figure as above, with some additional customizations to the axes and legend via .update_yaxes(), and .update_layout(), as well as some annotations
added via .add_shape() and .add_annotation().
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week vs Target" ,
            width=600, height=400,
            labels={"sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts" },
            category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]},
            color_discrete_map ={"Male": "RebeccaPurple" , "Female" : "MediumPurple" },
            template ="simple_white"
            )
fig.update_yaxes ( # the y-axis is in dollars
    tickprefix ="$", showgrid =True
)
fig.update_layout ( # customize font and legend orientation &amp; position
    font_family ="Rockwell" ,
    legend=dict(
        title=None, orientation ="h", y=1, yanchor="bottom" , x=0.5, xanchor="center"
    )
)
fig.add_shape ( # add a horizontal "target" line
    type="line", line_color ="salmon" , line_width =3, opacity=1, line_dash ="dot",
    x0=0, x1=1, xref="paper", y0=950, y1=950, yref="y"
)
fig.add_annotation ( # add a text callout with arrow
    text="below target!" , x="Fri", y=400, arrowhead =1, showarrow =True
)
fig.show()
Thur Fri Sat Sun$0$500$1000$1500Male FemaleReceipts by Payer Gender and Day of Week vs Target
Day of Weeksum of Receipts
below target!
press
ments
e with
plates
ts16/07/2025, 06:31 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 3/6

--- Página 4 ---
How Plotly Express Works with Templates
Plotly Express methods will use the default template if one is set in plotly.io (by default, this is set to plotly) or in plotly.express.defaults (see below)
The template in use can always be overridden via the template argument to every PX function
The default color_continuous_scale will be the value of layout.colorscales.sequential in the template in use, unless it is overridden via the corresponding
function argument or via plotly.express.defaults (see below)
The default color_discrete_sequence will be the value of layout.colorway in the template in use, unless it is overridden via the corresponding function argument
or via plotly.express.defaults (see below)
Setting Plotly Express Styling Defaults
width and height can be set once globally for all Plotly Express functions
template can override the setting of plotly.io.templates.default for all Plotly Express functions
color_continuous_scale and color_discrete_scale can override the contents of the template in use for all Plotly Express functions that accept these arguments
line_dash_sequence, symbol_sequence and size_max can be set once globally for all Plotly Express functions that accept these arguments
we set the Plotly-wide default template to simple_white, but
we override the default template for Plotly Express to be ggplot2, but
we also set the default color_continuous_scale, and
we set the default height and width to 400 by 600, but
we override the default width to 400 via the function argument.Plotly has a  and figures created with Plotly Express interact smoothly with this system:
theming system based on templates (/python/templates/)
By way of example, in the following figure, simply setting the template argument will automatically change the default continuous color scale, even though we have
not specified color_continuous_scale directly.
import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , template ="seaborn" )
fig.show()
Plotly Express supports a simple default-configuration system via the plotly.express.defaults singleton object. The values of the properties set on this object are used
for the rest of the active session in place of None as the default values for any argument to a PX function with a matching name:
To illustrate this "defaults hierarchy", in the following example:
As a result, any figure produced with Plotly Express thereafter uses the ggplot2 settings for all attributes except for the continuous color scale (visible because
simple_white doesn't set a plot background, and neither the simple_white nor ggplot2 template uses Blackbody as a color scale), and uses the Plotly Express defaults
for height but not width (visible because the figure height is the same as the figure width, despite the default).
2 2.5 3 3.5 4 4.544.555.566.577.58
024681012141618count
sepal_widthsepal_length
press
ments
e with
plates
ts16/07/2025, 06:31 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 4/6

--- Página 5 ---
What About Dash?import plotly.express  as px
import plotly.io  as pio
pio.templates .default = "simple_white"
px.defaults .template  = "ggplot2"
px.defaults .color_continuous_scale  = px.colors.sequential .Blackbody
px.defaults .width = 600
px.defaults .height = 400
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , width=400)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)2 3 45678
567sepal_length
sepal_widthsepal_length
press
ments
e with
plates
ts16/07/2025, 06:31 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 5/6

--- Página 6 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
ments
e with
plates
ts16/07/2025, 06:31 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 6/6</content>
      </file>
      <file name="Tree-plots in Python.pdf" path="pyvy_2x3/Tree-plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Set Up Tree with 
Create Plotly Traces &gt;  &gt;
Tree-plots
Tree-plots in Python
How to make interactive tree-plot in Python with Plotly. An examples of a tree-plot in Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/tree-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
igraph (http://igraph.org/python/)
Install igraph with pip install igraph.
!pip install igraph
import igraph
from igraph import Graph, EdgeSeq
nr_vertices  = 25
v_label = list(map(str, range(nr_vertices )))
G = Graph.Tree(nr_vertices , 2) # 2 stands for children number
lay = G.layout('rt')
position  = {k: lay[k] for k in range(nr_vertices )}
Y = [lay[k][1] for k in range(nr_vertices )]
M = max(Y)
es = EdgeSeq(G) # sequence of edges
E = [e.tuple for e in G.es] # list of edges
L = len(position )
Xn = [position [k][0] for k in range(L)]
Yn = [2*M-position [k][1] for k in range(L)]
Xe = []
Ye = []
for edge in E:
    Xe+=[position [edge[0]][0],position [edge[1]][0], None]
    Ye+=[2*M-position [edge[0]][1],2*M-position [edge[1]][1], None]
labels = v_labelCollecting igraph
Downloading igraph-0.11.9-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.4 kB)
Collecting texttable&gt;=1.6.2 (from igraph)
Downloading texttable-1.7.0-py2.py3-none-any.whl.metadata (9.8 kB)
Downloading igraph-0.11.9-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.4 MB)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.4/4.4 MB92.0 MB/s eta 0:00:00
Downloading texttable-1.7.0-py2.py3-none-any.whl (10 kB)
Installing collected packages: texttable, igraph
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2/2 [igraph]
Successfully installed igraph-0.11.9 texttable-1.7.0
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
notations
the16/07/2025, 06:32 Tree-plots in Python
https://plotly.com/python/tree-plots/ 1/4

--- Página 2 ---
Create Text Inside the Circle via Annotations
Add Axis Specifications and Create the Layoutimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scatter(x=Xe,
                   y=Ye,
                   mode='lines',
                   line=dict(color='rgb(210,210,210)' , width=1),
                   hoverinfo ='none'
                   ))
fig.add_trace (go.Scatter(x=Xn,
                  y=Yn,
                  mode='markers' ,
                  name='bla',
                  marker=dict(symbol='circle-dot' ,
                                size=18,
                                color='#6175c1' ,    #'#DB4551',
                                line=dict(color='rgb(50,50,50)' , width=1)
                                ),
                  text=labels,
                  hoverinfo ='text',
                  opacity=0.8
                  ))
def make_annotations (pos, text, font_size =10, font_color ='rgb(250,250,250)' ):
    L=len(pos)
    if len(text)!=L:
        raise ValueError ('The lists pos and text must have the same len' )
    annotations  = []
    for k in range(L):
        annotations .append(
            dict(
                text=labels[k], # or replace labels with a different list for the text within the circle
                x=pos[k][0], y=2*M-position [k][1],
                xref='x1', yref='y1',
                font=dict(color=font_color , size=font_size ),
                showarrow =False)
        )
    return annotations
−6 −4 −2 0 25678910trace 0
bla
notations
the16/07/2025, 06:32 Tree-plots in Python
https://plotly.com/python/tree-plots/ 2/4

--- Página 3 ---
Referenceaxis = dict(showline =False, # hide axis line, grid, ticklabels and  title
            zeroline =False,
            showgrid =False,
            showticklabels =False,
            )
fig.update_layout (title= 'Tree with Reingold-Tilford Layout' ,
              annotations =make_annotations (position , v_label),
              font_size =12,
              showlegend =False,
              xaxis=axis,
              yaxis=axis,
              margin=dict(l=40, r=40, b=85, t=100),
              hovermode ='closest' ,
              plot_bgcolor ='rgb(248,248,248)'
              )
fig.show()
See  for more information and chart attribute options and 
 for more information about the igraph package!
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)
http://igraph.org/python/
(http://igraph.org/python/)
Tree with Reingold-Tilford Layout
0
12
3 45 6
7 8 9 1011 12 13 14
15 16 17 18 19 20 21 2223 24
notations
the16/07/2025, 06:32 Tree-plots in Python
https://plotly.com/python/tree-plots/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
notations
the16/07/2025, 06:32 Tree-plots in Python
https://plotly.com/python/tree-plots/ 4/4</content>
      </file>
      <file name="Violin plots in Python.pdf" path="pyvy_2x3/Violin plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Violin Plot with Plotly Express
Basic Violin Plot with Plotly Express &gt;  &gt; Violin
Plots
Violin Plots in Python
How to make violin plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/violin.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a statistical representation of numerical data. It is similar to a ,
with the addition of a rotated  plot on each side.
violin plot (https://en.wikipedia.org/wiki/Violin_plot)
box plot (https://plotly.com/python/box-plots/)
kernel density (https://en.wikipedia.org/wiki/Kernel_density_estimation)
Alternatives to violin plots for visualizing distributions include , ,
 and .
histograms (https://plotly.com/python/histograms/)
box plots (https://plotly.com/python/box-plots/)
ECDF plots (https://plotly.com/python/ecdf-plots/)
strip charts (https://plotly.com/python/strip-charts/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="total_bill" )
fig.show()
01020304050total_bill
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 1/12

--- Página 2 ---
Violin plot with box and data points
Multiple Violin Plotsimport plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="total_bill" , box=True, # draw box plot inside the violin
                points='all', # can be 'outliers', or False
               )
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="tip", x="smoker" , color="sex", box=True, points="all",
          hover_data =df.columns)
fig.show()01020304050total_bill
No Yes0246810sex
Female
Male
smokertip
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 2/12

--- Página 3 ---
Violin Plot with go.Violin
Basic Violin Plotimport plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="tip", color="sex",
                violinmode ='overlay' , # draw violins on top of each other
                # default violinmode is 'group' as in example above
                hover_data =df.columns)
fig.show()
If Plotly Express does not provide a good starting point, you can use . All the
options of go.Violin are documented in the reference 
the more generic go.Violin class from plotly.graph_objects (/python/graph-objects/)
https://plotly.com/python/reference/violin/ (https://plotly.com/python/reference/violin/)0246810sex
Female
Maletip
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 3/12

--- Página 4 ---
Multiple Tracesimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
fig = go.Figure(data=go.Violin(y=df['total_bill' ], box_visible =True, line_color ='black',
                               meanline_visible =True, fillcolor ='lightseagreen' , opacity=0.6,
                               x0='Total Bill' ))
fig.update_layout (yaxis_zeroline =False)
fig.show()
Total Bill01020304050
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 4/12

--- Página 5 ---
Grouped Violin Plotimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
fig = go.Figure()
days = ['Thur', 'Fri', 'Sat', 'Sun']
for day in days:
    fig.add_trace (go.Violin(x=df['day'][df['day'] == day],
                            y=df['total_bill' ][df['day'] == day],
                            name=day,
                            box_visible =True,
                            meanline_visible =True))
fig.show()
Thur Fri Sat Sun0102030405060Thur
Fri
Sat
Sun
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 5/12

--- Página 6 ---
Split Violin Plotimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
fig = go.Figure()
fig.add_trace (go.Violin(x=df['day'][ df['sex'] == 'Male' ],
                        y=df['total_bill' ][ df['sex'] == 'Male' ],
                        legendgroup ='M', scalegroup ='M', name='M',
                        line_color ='blue')
             )
fig.add_trace (go.Violin(x=df['day'][ df['sex'] == 'Female'  ],
                        y=df['total_bill' ][ df['sex'] == 'Female'  ],
                        legendgroup ='F', scalegroup ='F', name='F',
                        line_color ='orange' )
             )
fig.update_traces (box_visible =True, meanline_visible =True)
fig.update_layout (violinmode ='group')
fig.show()
Sun Sat Thur Fri−100102030405060M
F
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 6/12

--- Página 7 ---
Advanced Violin Plotimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
fig = go.Figure()
fig.add_trace (go.Violin(x=df['day'][ df['smoker' ] == 'Yes' ],
                        y=df['total_bill' ][ df['smoker' ] == 'Yes' ],
                        legendgroup ='Yes', scalegroup ='Yes', name='Yes',
                        side='negative' ,
                        line_color ='blue')
             )
fig.add_trace (go.Violin(x=df['day'][ df['smoker' ] == 'No' ],
                        y=df['total_bill' ][ df['smoker' ] == 'No' ],
                        legendgroup ='No', scalegroup ='No', name='No',
                        side='positive' ,
                        line_color ='orange' )
             )
fig.update_traces (meanline_visible =True)
fig.update_layout (violingap =0, violinmode ='overlay' )
fig.show()
Sat Thur Fri Sun−100102030405060Yes
No
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 7/12

--- Página 8 ---
Ridgeline plotimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv" )
pointpos_male  = [-0.9,-1.1,-0.6,-0.3]
pointpos_female  = [0.45,0.55,1,0.4]
show_legend  = [True,False,False,False]
fig = go.Figure()
for i in range(0,len(pd.unique(df['day']))):
    fig.add_trace (go.Violin(x=df['day'][(df['sex'] == 'Male') &amp;
                                        (df['day'] == pd.unique(df['day'])[i])],
                            y=df['total_bill' ][(df['sex'] == 'Male')&amp;
                                               (df['day'] == pd.unique(df['day'])[i])],
                            legendgroup ='M', scalegroup ='M', name='M',
                            side='negative' ,
                            pointpos =pointpos_male [i], # where to position points
                            line_color ='lightseagreen' ,
                            showlegend =show_legend [i])
             )
    fig.add_trace (go.Violin(x=df['day'][(df['sex'] == 'Female' ) &amp;
                                        (df['day'] == pd.unique(df['day'])[i])],
                            y=df['total_bill' ][(df['sex'] == 'Female' )&amp;
                                               (df['day'] == pd.unique(df['day'])[i])],
                            legendgroup ='F', scalegroup ='F', name='F',
                            side='positive' ,
                            pointpos =pointpos_female [i],
                            line_color ='mediumpurple' ,
                            showlegend =show_legend [i])
             )
# update characteristics shared by all traces
fig.update_traces (meanline_visible =True,
                  points='all', # show all points
                  jitter=0.05,  # add some jitter on points for better visibility
                  scalemode ='count') #scale violin plot area with total count
fig.update_layout (
    title_text ="Total bill distribution&lt;br&gt;&lt;i&gt;scaled by number of bills per gender" ,
    violingap =0, violingroupgap =0, violinmode ='overlay' )
fig.show()
A ridgeline plot ( ) shows the distribution of a numerical value for several
groups. They can be used for visualizing changes in distributions over time or space.
previously known as Joy Plot (https://serialmentor.com/blog/2017/9/15/goodbye-joyplots)Sun Sat Thur Fri−100102030405060M
FTotal bill distribution
scaled by number of bills per gender
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 8/12

--- Página 9 ---
Violin Plot With Only Pointsimport plotly.graph_objects  as go
from plotly.colors  import n_colors
import numpy as np
np.random.seed(1)
# 12 sets of normal distributed random data, with increasing mean and standard deviation
data = (np.linspace (1, 2, 12)[:, np.newaxis] * np.random.randn(12, 200) +
            (np.arange(12) + 2 * np.random.random(12))[:, np.newaxis])
colors = n_colors ('rgb(5, 200, 200)' , 'rgb(200, 10, 10)' , 12, colortype ='rgb')
fig = go.Figure()
for data_line , color in zip(data, colors):
    fig.add_trace (go.Violin(x=data_line , line_color =color))
fig.update_traces (orientation ='h', side='positive' , width=3, points=False)
fig.update_layout (xaxis_showgrid =False, xaxis_zeroline =False)
fig.show()
A  is like a violin plot with points showing, and no violin:
strip chart (/python/strip-charts/)0 5 10 15 20trace 0trace 1trace 2trace 3trace 4trace 5trace 6trace 7trace 8trace 9trace 10trace 11trace 0
trace 1
trace 2
trace 3
trace 4
trace 5
trace 6
trace 7
trace 8
trace 9
trace 10
trace 11
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 9/12

--- Página 10 ---
Choosing The Algorithm For Computing Quartilesimport plotly.express  as px
df = px.data.tips()
fig = px.strip(df, x='day', y='tip')
fig.show()
New in 5.10
By default, quartiles for violin plots are computed using the linear method (for more about linear interpolation, see #10 listed on
 and 
 for more details).
http://jse.amstat.org/v14n3/langford.html (http://jse.amstat.org/v14n3/langford.html)
https://en.wikipedia.org/wiki/Quartile
(https://en.wikipedia.org/wiki/Quartile)
However, you can also choose to use an exclusive or an inclusive algorithm to compute quartiles.
The exclusive algorithm uses the median to divide the ordered dataset into two halves. If the sample is odd, it does not include the median in either half. Q1 is then the
median of the lower half and Q3 is the median of the upper half.
The inclusive algorithm also uses the median to divide the ordered dataset into two halves, but if the sample is odd, it includes the median in both halves. Q1 is then
the median of the lower half and Q3 the median of the upper half.Sun Sat Thur Fri246810
daytip
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 10/12

--- Página 11 ---
Reference
What About Dash?import plotly.express  as px
df = px.data.tips()
fig = px.violin(df, y="total_bill" )
fig.update_traces (quartilemethod ="exclusive" ) # or "inclusive", or "linear" by default
fig.show()
See  or 
 for more information and chart attribute options!
function reference for px.violin() (https://plotly.com/python-api-reference/generated/plotly.express.violin)
https://plotly.com/python/reference/violin/
(https://plotly.com/python/reference/violin/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter01020304050total_bill
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 11/12

--- Página 12 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ting16/07/2025, 06:34 Violin plots in Python
https://plotly.com/python/violin/ 12/12</content>
      </file>
    </category>
    <category name="pyvy_2x4" path="pyvy_2x4">
      <file name="Bubble maps in Python.pdf" path="pyvy_2x4/Bubble maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Base Map Configuration
Bubble map with Plotly Express &gt;  &gt; Bubble Maps
Bubble Maps in Python
How to make bubble maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bubble-maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly figures made with px.scatter_geo, px.line_geo or px.choropleth functions or containing go.Choropleth or go.Scattergeo
 have a go.layout.Geo object which can be used to  onto
which data is plotted.
Plotly Express (/python/plotly-express/)
graph objects (/python/graph-objects/)
control the appearance of the base map (/python/map-configuration/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.scatter_geo, each line of the dataframe is represented as a marker point. The column set as
the size argument gives the size of markers.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.scatter_geo (df, locations ="iso_alpha" , color="continent" ,
                     hover_name ="country" , size="pop",
                     projection ="natural earth" )
fig.show()
continent
Asia
Europe
Africa
Americas
Oceania
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 1/6

--- Página 2 ---
Bubble Map with animation
Bubble Map with go.Scattergeo
United States Bubble Mapimport plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter_geo (df, locations ="iso_alpha" , color="continent" ,
                     hover_name ="country" , size="pop",
                     animation_frame ="year",
                     projection ="natural earth" )
fig.show()
Note about sizeref:
To scale the bubble size, use the attribute sizeref. We recommend using the following formula to calculate a sizeref value:
sizeref = 2. * max(array of size values) / (desired maximum marker size ** 2)
Note that setting sizeref to a value greater than $1$, decreases the rendered marker sizes, while setting sizeref to less than $1$, increases the rendered marker sizes.
See  for more information.
Additionally, we recommend setting the sizemode attribute: 
 to area.
https://plotly.com/python/reference/scatter/#scatter-marker-sizeref (https://plotly.com/python/reference/scatter/#scatter-marker-sizeref)
https://plotly.com/python/reference/scatter/#scatter-marker-sizemode
(https://plotly.com/python/reference/scatter/#scatter-marker-sizemode)
continent
Asia
Europe
Africa
Americas
Oceania
year=1952
195219571962196719721977198219871992199720022007▶ ◼
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 2/6

--- Página 3 ---
Ebola Cases in West Africaimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv' )
df.head()
df['text'] = df['name'] + '&lt;br&gt;Population '  + (df['pop']/1e6).astype(str)+' million'
limits = [(0,3),(3,11),(11,21),(21,50),(50,3000)]
colors = ["royalblue" ,"crimson" ,"lightseagreen" ,"orange" ,"lightgrey" ]
cities = []
scale = 5000
fig = go.Figure()
for i in range(len(limits)):
    lim = limits[i]
    df_sub = df[lim[0]:lim[1]]
    fig.add_trace (go.Scattergeo (
        locationmode  = 'USA-states' ,
        lon = df_sub['lon'],
        lat = df_sub['lat'],
        text = df_sub['text'],
        marker = dict(
            size = df_sub['pop']/scale,
            color = colors[i],
            line_color ='rgb(40,40,40)' ,
            line_width =0.5,
            sizemode  = 'area'
        ),
        name = '{0} - {1}'.format(lim[0],lim[1])))
fig.update_layout (
        title_text  = '2014 US city populations&lt;br&gt;(Click legend to toggle traces)' ,
        showlegend  = True,
        geo = dict(
            scope = 'usa',
            landcolor  = 'rgb(217, 217, 217)' ,
        )
    )
fig.show()
0 - 3
3 - 11
11 - 21
21 - 50
50 - 3000
2014 US city populations
(Click legend to toggle traces)
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv' )
df.head()
colors = ['rgb(239,243,255)' ,'rgb(189,215,231)' ,'rgb(107,174,214)' ,'rgb(33,113,181)' ]
months = {6:'June',7:'July',8:'Aug',9:'Sept'}
fig = go.Figure()
for i in range(6,10)[::-1]:
    df_month  = df.query('Month == %d' %i)
    fig.add_trace (go.Scattergeo (
            lon = df_month ['Lon'],
            lat = df_month ['Lat'],
            text = df_month ['Value'],
            name = months[i],
            marker = dict(
                size = df_month ['Value']/50,
                color = colors[i-6],
                line_width  = 0
            )))
df_sept = df.query('Month == 9' )
fig['data'][0].update(mode='markers+text' , textposition ='bottom center' ,
                      text=df_sept['Value'].map('{:.0f}'.format).astype(str)+' '+\
                      df_sept['Country' ])
# Inset
fig.add_trace (go.Choropleth (
        locationmode  = 'country names' ,
        locations  = df_sept['Country' ],
        z = df_sept['Value'],
        text = df_sept['Country' ],
        colorscale  = [[0,'rgb(0, 0, 0)' ],[1,'rgb(0, 0, 0)' ]],
        autocolorscale  = False,
        showscale  = False,
        geo = 'geo2'
    ))
fig.add_trace (go.Scattergeo (
        lon = [21.0936],
        lat = [7.1881],
        text = ['Africa' ],
        mode = 'text',
        showlegend  = False,
        geo = 'geo2'
    ))
fig.update_layout (
    title = go.layout.Title(
        text = 'Ebola cases reported by month in West Africa 2014&lt;br&gt; \
Source: &lt;a href="https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases"&gt; \
HDX&lt;/a&gt;' ),
    geo = go.layout.Geo(
        resolution  = 50,
        scope = 'africa' ,
        showframe  = False,
        showcoastlines  = True,
        landcolor  = "rgb(229, 229, 229)" ,
        countrycolor  = "white" ,
        coastlinecolor  = "white",
        projection_type  = 'mercator' ,
        lonaxis_range = [ -15.0, -5.0 ],
        lataxis_range = [ 0.0, 12.0 ],
        domain = dict(x = [ 0, 1 ], y = [ 0, 1 ])
    ),
    geo2 = go.layout.Geo(
        scope = 'africa' ,
        showframe  = False,
        landcolor  = "rgb(229, 229, 229)" ,
        showcountries  = False,
        domain = dict(x = [ 0, 0.6 ], y = [ 0, 0.6 ]),
        bgcolor = 'rgba(255, 255, 255, 0.0)' ,
    ),
    legend_traceorder  = 'reversed'
)
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 4/6

--- Página 5 ---
Reference
What About Dash?fig.show()
See  or
 and 
 for more information and chart attribute options!
function reference for px.(scatter_geo) (https://plotly.com/python-api-reference/generated/plotly.express.scatter_geo)
https://plotly.com/python/reference/choropleth/ (https://plotly.com/python/reference/choropleth/)
https://plotly.com/python/reference/scattergeo/
(https://plotly.com/python/reference/scattergeo/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
1022 Guinea
3362 Liberia1940 Sierra Leone
AfricaJune
July
Aug
Sept
Ebola cases reported by month in West Africa 2014
 Source: 
HDX
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 5/6

--- Página 6 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:36 Bubble maps in Python
https://plotly.com/python/bubble-maps/ 6/6</content>
      </file>
      <file name="Choropleth maps in Python.pdf" path="pyvy_2x4/Choropleth maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Base Map Configuration
Introduction: main parameters for choropleth outline maps
1. Geometry information:
A. This can either be a supplied GeoJSON file where each feature has either an id field or some identifying value in properties; or
B. one of the built-in geometries within plotly: US states and world countries (see below)
2. A list of values indexed by feature identifier.
Choropleth Map with plotly.express
GeoJSON with feature.id &gt;  &gt; Choropleth
Maps
Choropleth Maps in Python
How to make choropleth maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/choropleth-
maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a map composed of colored polygons. It is used to represent spatial variations of a quantity. This
page documents how to build outline choropleth maps, but you can also build .
Choropleth Map (https://en.wikipedia.org/wiki/Choropleth_map)
choropleth tile maps (/python/tile-county-choropleth)
Below we show how to create Choropleth Maps using either Plotly Express' px.choropleth function or the lower-level go.Choropleth graph object.
Plotly figures made with px.scatter_geo, px.line_geo or px.choropleth functions or containing go.Choropleth or go.Scattergeo
 have a go.layout.Geo object which can be used to  onto
which data is plotted.
Plotly Express (/python/plotly-express/)
graph objects (/python/graph-objects/)
control the appearance of the base map (/python/map-configuration/)
Making choropleth maps requires two main types of input:
The GeoJSON data is passed to the geojson argument, and the data is passed into the color argument of px.choropleth (z if using graph_objects), in the same order as
the IDs are passed into the location argument.
Note the geojson attribute can also be the URL to a GeoJSON file, which can speed up map rendering in certain cases.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Here we load a GeoJSON file containing the geometry information for US counties, where feature.id is a .
FIPS code (https://en.wikipedia.org/wiki/FIPS_county_code)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 1/13

--- Página 2 ---
Data indexed by id
Choropleth map using GeoJSONfrom urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
counties ["features" ][0]
Here we load unemployment data by county, also indexed by .
FIPS code (https://en.wikipedia.org/wiki/FIPS_county_code)
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
df.head()
Note In this example we set layout.geo.scope to usa to automatically configure the map to display USA-centric data in an appropriate projection. See the 
 for more information on scopes.
Geo map
configuration documentation (/python/map-configuration/){'type': 'Feature',
'properties': {'GEO_ID': '0500000US01001',
'STATE': '01',
'COUNTY': '001',
'NAME': 'Autauga',
'LSAD': 'County',
'CENSUSAREA': 594.436},
'geometry': {'type': 'Polygon',
'coordinates': [[[-86.496774, 32.344437],
[-86.717897, 32.402814],
[-86.814912, 32.340803],
[-86.890581, 32.502974],
[-86.917595, 32.664169],
[-86.71339, 32.661732],
[-86.714219, 32.705694],
[-86.413116, 32.707386],
[-86.411172, 32.409937],
[-86.496774, 32.344437]]]},
'id': '01001'}
fipsunemp
0010015.3
1010035.4
2010058.6
3010076.6
4010095.5
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 2/13

--- Página 3 ---
Indexing by GeoJSON Propertiesfrom urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.express  as px
fig = px.choropleth (df, geojson=counties , locations ='fips', color='unemp',
                           color_continuous_scale ="Viridis" ,
                           range_color =(0, 12),
                           scope="usa",
                           labels={'unemp':'unemployment rate' }
                          )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
If the GeoJSON you are using either does not have an id field or you wish to use one of the keys in the properties field, you may use the featureidkey parameter to
specify where to match the values of locations.
In the following GeoJSON object/data-file pairing, the values of properties.district match the values of the district column:
import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
print(df["district" ][2])
print(geojson["features" ][0]["properties" ])
To use them together, we set locations to district and featureidkey to "properties.district". The color is set to the number of votes by the candidate named Bergeron.
Note In this example we set layout.geo.visible to False to hide the base map and frame, and we set layout.geo.fitbounds to 'locations' to automatically zoom the map
to show just the area of interest. See the  for more information on projections and bounds.
Geo map configuration documentation (/python/map-configuration/)024681012unemployment rate
11-Sault-au-Récollet
{'district': '11-Sault-au-Récollet'}
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 3/13

--- Página 4 ---
Choropleth maps in Dashimport plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="Bergeron" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)100020003000400050006000Bergeron
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 4/13

--- Página 5 ---
Discrete ColorsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
In addition to , we can  our choropleth maps by setting color to a non-numerical
column, like the name of the winner of an election.
continuous colors (/python/colorscales/)
discretely-color (/python/discrete-color/)
Note In this example we set layout.geo.visible to False to hide the base map and frame, and we set layout.geo.fitbounds to 'locations' to automatically zoom the map
to show just the area of interest. See the  for more information on projections and bounds.
Geo map configuration documentation (/python/map-configuration/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Political candidate voting pool analysis'),
    html.P("Select a candidate:"),
    dcc.RadioItems(
        id='candidate',
        options=["Joly", "Coderre", "Bergeron"],
        value="Coderre",
        inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("candidate", "value"))
def display_choropleth(candidate):
    df = px.data.election() # replace with your own data source
    geojson = px.data.election_geojson()
 fi h lth(DOWNLOAD
Political candidate voting pool analysis
Select a candidate:
JolyCoderreBergeron
0100020003000400050006000Coderre
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 5/13

--- Página 6 ---
Using GeoPandas Data Framesimport plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="winner" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator" , hover_data =["Bergeron" , "Coderre" , "Joly"]
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
px.choropleth accepts the geometry of a  data frame as the input to geojson if the geometry contains polygons.
GeoPandas (https://geopandas.org/)winner
Joly
Coderre
Bergeron
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 6/13

--- Página 7 ---
Using Built-in Country and State Geometries
1. USA States
2. Countries as defined in the Natural Earth dataset.import plotly.express  as px
import geopandas  as gpd
df = px.data.election ()
geo_df = gpd.GeoDataFrame .from_features (
    px.data.election_geojson ()["features" ]
).merge(df, on="district" ).set_index ("district" )
fig = px.choropleth (geo_df,
                   geojson=geo_df.geometry ,
                   locations =geo_df.index,
                   color="Joly",
                   projection ="mercator" )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.show()
Plotly comes with two built-in geometries which do not require an external GeoJSON file:
Note and disclaimer: cultural (as opposed to physical) features are by definition subject to change, debate and dispute. Plotly includes data from Natural Earth "as-is"
and defers to the 
which read:
Natural Earth policy regarding disputed borders (https://www.naturalearthdata.com/downloads/50m-cultural-vectors/50m-admin-0-countries-2/)
Natural Earth Vector draws boundaries of countries according to defacto status. We show who actually controls the situation on the ground.
To use the built-in countries geometry, provide locations as .
three-letter ISO country codes (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)500100015002000250030003500Joly
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 7/13

--- Página 8 ---
Choropleth Maps with go.Choropleth
United States Choropleth Mapimport plotly.express  as px
df = px.data.gapminder ().query("year==2007" )
fig = px.choropleth (df, locations ="iso_alpha" ,
                    color="lifeExp" , # lifeExp is a column of gapminder
                    hover_name ="country" , # column to add to hover information
                    color_continuous_scale =px.colors.sequential .Plasma)
fig.show()
To use the USA States geometry, set locationmode='USA-states' and provide locations as two-letter state abbreviations:
import plotly.express  as px
fig = px.choropleth (locations =["CA", "TX", "NY"], locationmode ="USA-states" , color=[1,2,3], scope="usa")
fig.show()404550556065707580lifeExp
11.522.53color
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 8/13

--- Página 9 ---
Customize choropleth chartimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv' )
fig = go.Figure(data=go.Choropleth (
    locations =df['code'], # Spatial coordinates
    z = df['total exports' ].astype(float), # Data to be color-coded
    locationmode  = 'USA-states' , # set of locations match entries in `locations`
    colorscale  = 'Reds',
    colorbar_title  = "Millions USD" ,
))
fig.update_layout (
    title_text  = '2011 US Agriculture Exports by State' ,
    geo_scope ='usa', # limite map scope to USA
)
fig.show()
2k4k6k8k10k12k14k16kMillions USD2011 US Agriculture Exports by State
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 9/13

--- Página 10 ---
World Choropleth Mapimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv' )
for col in df.columns:
    df[col] = df[col].astype(str)
df['text'] = df['state'] + '&lt;br&gt;' + \
    'Beef ' + df['beef'] + ' Dairy '  + df['dairy'] + '&lt;br&gt;' + \
    'Fruits '  + df['total fruits' ] + ' Veggies '  + df['total veggies' ] + '&lt;br&gt;' + \
    'Wheat '  + df['wheat'] + ' Corn '  + df['corn']
fig = go.Figure(data=go.Choropleth (
    locations =df['code'],
    z=df['total exports' ].astype(float),
    locationmode ='USA-states' ,
    colorscale ='Reds',
    autocolorscale =False,
    text=df['text'], # hover text
    marker_line_color ='white', # line markers between states
    colorbar =dict(
        title=dict(
            text="Millions USD"
            )
    )
))
fig.update_layout (
    title_text ='2011 US Agriculture Exports by State&lt;br&gt;(Hover for breakdown)' ,
    geo = dict(
        scope='usa',
        projection =go.layout.geo.Projection (type = 'albers usa' ),
        showlakes =True, # lakes
        lakecolor ='rgb(255, 255, 255)' ),
)
fig.show()
2k4k6k8k10k12k14k16kMillions USD2011 US Agriculture Exports by State
(Hover for breakdown)
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 10/13

--- Página 11 ---
County Choropleth Figure Factoryimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv' )
fig = go.Figure(data=go.Choropleth (
    locations  = df['CODE'],
    z = df['GDP (BILLIONS)' ],
    text = df['COUNTRY' ],
    colorscale  = 'Blues',
    autocolorscale =False,
    reversescale =True,
    marker_line_color ='darkgray' ,
    marker_line_width =0.5,
    colorbar_tickprefix  = '$',
    colorbar_title  = 'GDP&lt;br&gt;Billions US$' ,
))
fig.update_layout (
    title_text ='2014 Global GDP' ,
    geo=dict(
        showframe =False,
        showcoastlines =False,
        projection_type ='equirectangular'
    ),
    annotations  = [dict(
        x=0.55,
        y=0.1,
        xref='paper',
        yref='paper',
        text='Source: &lt;a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html"&gt; \
            CIA World Factbook&lt;/a&gt;' ,
        showarrow  = False
    )]
)
fig.show()
Plotly also includes a .
legacy "figure factory" for creating US county-level choropleth maps (/python/county-choropleth/)$0$5k$10k$15kGDP
Billions US$2014 Global GDP
Source: 
            CIA World Factbook
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 11/13

--- Página 12 ---
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv' )
df_sample ['State FIPS Code' ] = df_sample ['State FIPS Code' ].apply(lambda x: str(x).zfill(2))
df_sample ['County FIPS Code' ] = df_sample ['County FIPS Code' ].apply(lambda x: str(x).zfill(3))
df_sample ['FIPS'] = df_sample ['State FIPS Code' ] + df_sample ['County FIPS Code' ]
colorscale  = ["#f7fbff" , "#ebf3fb" , "#deebf7" , "#d2e3f3" , "#c6dbef" , "#b3d2e9" , "#9ecae1" ,
    "#85bcdb" , "#6baed6" , "#57a0ce" , "#4292c6" , "#3082be" , "#2171b5" , "#1361a9" ,
    "#08519c" , "#0b4083" , "#08306b"
]
endpts = list(np.linspace (1, 12, len(colorscale ) - 1))
fips = df_sample ['FIPS'].tolist()
values = df_sample ['Unemployment Rate (%)' ].tolist()
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['usa'],
    binning_endpoints =endpts, colorscale =colorscale ,
    show_state_data =False,
    show_hover =True,
    asp = 2.9,
    title_text  = 'USA by Unemployment %' ,
    legend_title  = '% unemployed'
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
&gt; 12.0
11.27 - 12.0
10.53 - 11.27
9.8 - 10.53
9.07 - 9.8
8.33 - 9.07
7.6 - 8.33
6.87 - 7.6
6.13 - 6.87
5.4 - 6.13
4.67 - 5.4
3.93 - 4.67
3.2 - 3.93
2.47 - 3.2
1.73 - 2.47
1.0 - 1.73USA by Unemployment %
% unemployed
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 12/13

--- Página 13 ---
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px.(choropleth) (https://plotly.com/python-api-reference/generated/plotly.express.choropleth)
https://plotly.com/python/reference/choropleth/ (https://plotly.com/python/reference/choropleth/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ometries
th16/07/2025, 06:37 Choropleth maps in Python
https://plotly.com/python/choropleth-maps/ 13/13</content>
      </file>
      <file name="Density heatmap in Python.pdf" path="pyvy_2x4/Density heatmap in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Density map with plotly.express
Density map with plotly.graph_objects &gt;  &gt; Density
Heatmap
Density Heatmap in Python
How to make a density heatmap in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/density-
heatmaps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.density_map, each row of the DataFrame is represented as a point smoothed with a given radius of influence.
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.express  as px
fig = px.density_map (df, lat='Latitude' , lon='Longitude' , z='Magnitude' , radius=10,
                        center=dict(lat=0, lon=180), zoom=0,
                        map_style ="open-street-map" )
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Densitymap class from plotly.graph_objects (/python/graph-
objects/)
©  contributors
OpenStreetMap (https://www.openstreetmap.org/copyright)5.566.577.588.59Magnitude
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ts
pbox
 y16/07/2025, 06:36 Density heatmap in Python
https://plotly.com/python/density-heatmaps/ 1/4

--- Página 2 ---
Mapbox Mapsimport pandas as pd
quakes = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.graph_objects  as go
fig = go.Figure(go.Densitymap (lat=quakes.Latitude , lon=quakes.Longitude , z=quakes.Magnitude ,
                                 radius=10))
fig.update_layout (map_style ="open-street-map" , map_center_lon =180)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Mapbox traces are deprecated and may be removed in a future version of Plotly.py.
The earlier examples using px.density_map and go.Densitymap use  for rendering. These traces were introduced
in Plotly.py 5.24. These trace types are now the recommended way to make tile-based density heatmaps. There are also traces that use 
: density_mapbox and go.Densitymapbox.
Maplibre (https://maplibre.org/maplibre-gl-js/docs/)
Mapbox
(https://docs.mapbox.com)
To use these trace types, in some cases you may need a Mapbox account and a public . See our 
 documentation for more information.
Mapbox Access Token (https://www.mapbox.com/studio)
Mapbox Map
Layers (/python/mapbox-layers/)
Here's one of the earlier examples rewritten to use px.density_mapbox.
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.express  as px
fig = px.density_mapbox (df, lat='Latitude' , lon='Longitude' , z='Magnitude' , radius=10,
                        center=dict(lat=0, lon=180), zoom=0,
                        mapbox_style ="open-street-map" )
fig.show()
5.566.577.588.59
ts
pbox
 y16/07/2025, 06:36 Density heatmap in Python
https://plotly.com/python/density-heatmaps/ 2/4

--- Página 3 ---
Stamen Terrain base map with Mapbox (Stadia Maps token needed): density heatmap with
plotly.express
Reference
What About Dash?Some base maps require a token. To use "stamen" base maps, you'll need a  token, which you can provide to the
mapbox_accesstoken parameter on fig.update_layout. Here, we have the token saved in a file called .mapbox_token, load it in to the variable token, and then pass it to
mapbox_accesstoken.
Stadia Maps (https://www.stadiamaps.com)
import plotly.express  as px
import pandas as pd
token = open(".mapbox_token" ).read() # you will need your own token
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
fig = px.density_mapbox (df, lat='Latitude' , lon='Longitude' , z='Magnitude' , radius=10,
                        center=dict(lat=0, lon=180), zoom=0,
                        map_style ="stamen-terrain" )
fig.update_layout (mapbox_accesstoken =token)
fig.show()
See  or
 for available attribute options.
function reference for px.(density_map) (https://plotly.com/python-api-reference/generated/plotly.express.density_mapbox)
https://plotly.com/python/reference/densitymap/ (https://plotly.com/python/reference/densitymap/)
For Mapbox-based maps, see  or
.
function reference for px.(density_mapbox) (https://plotly.com/python-api-reference/generated/plotly.express.density_mapbox)
https://plotly.com/python/reference/densitymapbox/ (https://plotly.com/python/reference/densitymapbox/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
ts
pbox
 y16/07/2025, 06:36 Density heatmap in Python
https://plotly.com/python/density-heatmaps/ 3/4

--- Página 4 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ts
pbox
 y16/07/2025, 06:36 Density heatmap in Python
https://plotly.com/python/density-heatmaps/ 4/4</content>
      </file>
      <file name="Filled area on tile maps in Python.pdf" path="pyvy_2x4/Filled area on tile maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Using a  trace and setting the fill attribute to 'toself'
Using a map layout (i.e. by minimally using an empty  trace) and adding a GeoJSON layer
Using the  trace type
Filled Scattermap Trace &gt;  &gt; Filled Area on Tile
Maps
Filled Area on Tile Maps in Python
How to make an area on tile-based maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/filled-area-tile-
maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
There are three different ways to show a filled area on a tile-based map:
Scattermap (https://plotly.com/python/reference/scattermap/)
Scattermap (https://plotly.com/python/reference/scattermap/)
Choroplethmap (https://plotly.com/python/tile-county-choropleth/)
The following example uses Scattermap and sets fill = 'toself'
import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    fill = "toself" ,
    lon = [-74, -70, -70, -74], lat = [47, 47, 45, 45],
    marker = { 'size': 10, 'color': "orange"  }))
fig.update_layout (
    map = {
        'style': "open-street-map" ,
        'center' : {'lon': -73, 'lat': 46 },
        'zoom': 5},
    showlegend  = False)
fig.show()
©  contributors
OpenStreetMap (https://www.openstreetmap.org/copyright)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
map16/07/2025, 06:36 Filled area on tile maps in Python
https://plotly.com/python/filled-area-tile-maps/ 1/5

--- Página 2 ---
Multiple Filled Areas with a Scattermap trace
GeoJSON LayersThe following example shows how to use None in your data to draw multiple filled areas. Such gaps in trace data are unconnected by default, but this can be
controlled via the  attribute.
connectgaps (https://plotly.com/python/reference/scattermap/#scattermap-connectgaps)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "lines", fill = "toself" ,
    lon = [-10, -10, 8, 8, -10, None, 30, 30, 50, 50, 30, None, 100, 100, 80, 80, 100],
    lat = [30, 6, 6, 30, 30,    None, 20, 30, 30, 20, 20, None, 40, 50, 50, 40, 40]))
fig.update_layout (
    map = {'style': "open-street-map" , 'center' : {'lon': 30, 'lat': 30}, 'zoom': 2},
    showlegend  = False,
    margin = {'l':0, 'r':0, 'b':0, 't':0})
fig.show()
In this map we add a GeoJSON layer.
map16/07/2025, 06:36 Filled area on tile maps in Python
https://plotly.com/python/filled-area-tile-maps/ 2/5

--- Página 3 ---
import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers" ,
    lon = [-73.605], lat = [45.51],
    marker = {'size': 20, 'color': ["cyan"]}))
fig.update_layout (
    map = {
        'style': "open-street-map" ,
        'center' : { 'lon': -73.6, 'lat': 45.5},
        'zoom': 12, 'layers' : [{
            'source' : {
                'type': "FeatureCollection" ,
                'features' : [{
                    'type': "Feature" ,
                    'geometry' : {
                        'type': "MultiPolygon" ,
                        'coordinates' : [[[
                            [-73.606352888 , 45.507489991 ], [-73.606133883 , 45.50687600 ],
                            [-73.605905904 , 45.506773980 ], [-73.603533905 , 45.505698946 ],
                            [-73.602475870 , 45.506856969 ], [-73.600031904 , 45.505696003 ],
                            [-73.599379992 , 45.505389066 ], [-73.599119902 , 45.505632008 ],
                            [-73.598896977 , 45.505514039 ], [-73.598783894 , 45.505617001 ],
                            [-73.591308727 , 45.516246185 ], [-73.591380782 , 45.516280145 ],
                            [-73.596778656 , 45.518690062 ], [-73.602796770 , 45.521348046 ],
                            [-73.612239983 , 45.525564037 ], [-73.612422919 , 45.525642061 ],
                            [-73.617229085 , 45.527751983 ], [-73.617279234 , 45.527774160 ],
                            [-73.617304713 , 45.527741334 ], [-73.617492052 , 45.527498362 ],
                            [-73.617533258 , 45.527512253 ], [-73.618074188 , 45.526759105 ],
                            [-73.618271651 , 45.526500673 ], [-73.618446320 , 45.526287943 ],
                            [-73.618968507 , 45.525698560 ], [-73.619388002 , 45.525216750 ],
                            [-73.619532966 , 45.525064183 ], [-73.619686662 , 45.524889290 ],
                            [-73.619787038 , 45.524770086 ], [-73.619925742 , 45.524584939 ],
                            [-73.619954486 , 45.524557690 ], [-73.620122362 , 45.524377961 ],
                            [-73.620201713 , 45.524298907 ], [-73.620775593 , 45.523650879 ]
                        ]]]
                    }
                }]
            },
            'type': "fill", 'below': "traces" , 'color': "royalblue" }]},
    margin = {'l':0, 'r':0, 'b':0, 't':0})
fig.show()
map16/07/2025, 06:36 Filled area on tile maps in Python
https://plotly.com/python/filled-area-tile-maps/ 3/5

--- Página 4 ---
Mapbox Maps
Reference
What About Dash?Mapbox traces are deprecated and may be removed in a future version of Plotly.py.
The earlier examples using go.Scattermap use  for rendering. This trace was introduced in Plotly.py 5.24 and is
now the recommended way to draw filled areas on tile-based maps. There is also a trace that uses , called go.Scattermapbox.
Maplibre (https://maplibre.org/maplibre-gl-js/docs/)
Mapbox (https://docs.mapbox.com)
To use the Scattermapbox trace type, in some cases you may need a Mapbox account and a public . See our
 documentation for more information.
Mapbox Access Token (https://www.mapbox.com/studio)
Mapbox Map Layers (/python/mapbox-layers/)
Here's one of the earlier examples rewritten to use Scattermapbox.
import plotly.graph_objects  as go
fig = go.Figure(go.Scattermapbox (
    fill = "toself" ,
    lon = [-74, -70, -70, -74], lat = [47, 47, 45, 45],
    marker = { 'size': 10, 'color': "orange"  }))
fig.update_layout (
    mapbox = {
        'style': "open-street-map" ,
        'center' : {'lon': -73, 'lat': 46 },
        'zoom': 5},
    showlegend  = False)
fig.show()
See  for available attribute options, or for go.Scattermapbox, see
.
https://plotly.com/python/reference/scattermap/ (https://plotly.com/python/reference/scattermap/)
https://plotly.com/python/reference/scattermapbox/ (https://plotly.com/python/reference/scattermapbox/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
map16/07/2025, 06:36 Filled area on tile maps in Python
https://plotly.com/python/filled-area-tile-maps/ 4/5

--- Página 5 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
map16/07/2025, 06:36 Filled area on tile maps in Python
https://plotly.com/python/filled-area-tile-maps/ 5/5</content>
      </file>
      <file name="Hexbin mapbox in Python.pdf" path="pyvy_2x4/Hexbin mapbox in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Count Hexbin
Count Hexbin with Minimum Count and Opacity &gt;  &gt; Hexbin
Mapbox
Hexbin Mapbox in Python
How to make a map with Hexagonal Binning of data in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/hexbin-
mapbox.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page details the use of a . For more examples with Choropleth maps, see .
figure factory (/python/figure-factories/)
this page (/python/choropleth-maps/)
In order to use mapbox styles that require a mapbox token, set the token with plotly.express. You can also use styles that do not require a mapbox token. See more
information on .
this page (/python/mapbox-layers/)
import plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Point Count" },
)
fig.update_layout (margin=dict(b=0, t=0, l=0, r=0))
fig.show()
05101520Point Count
(https://www.mapbox.com/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 1/7

--- Página 2 ---
Display the Underlying Dataimport plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1,
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 2/7

--- Página 3 ---
Compute the Mean Value per Hexbinimport plotly.figure_factory  as ff
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.5, labels={"color": "Point Count" },
    min_count =1, color_continuous_scale ="Viridis" ,
    show_original_data =True,
    original_data_marker =dict(size=4, opacity=0.6, color="deeppink" )
)
fig.show()
5101520Point Count
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 3/7

--- Página 4 ---
Compute the Sum Value per Hexbinimport plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Average Peak Hour" },
    color="peak_hour" , agg_func =np.mean, color_continuous_scale ="Icefire" , range_color =[0,23]
)
fig.show()
05101520Average Peak Hour
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 4/7

--- Página 5 ---
Hexbin with Animationimport plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = ff.create_hexbin_mapbox (
    data_frame =df, lat="centroid_lat" , lon="centroid_lon" ,
    nx_hexagon =10, opacity=0.9, labels={"color": "Summed Car.Hours" },
    color="car_hours" , agg_func =np.sum, color_continuous_scale ="Magma"
)
fig.show()
5k10k15kSummed Car.Hours
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 5/7

--- Página 6 ---
Referenceimport plotly.figure_factory  as ff
import plotly.express  as px
import numpy as np
px.set_mapbox_access_token (open(".mapbox_token" ).read())
np.random.seed(0)
N = 500
n_frames  = 12
lat = np.concatenate ([
    np.random.randn(N) * 0.5 + np.cos(i / n_frames  * 2 * np.pi) + 10
    for i in range(n_frames )
])
lon = np.concatenate ([
    np.random.randn(N) * 0.5 + np.sin(i / n_frames  * 2 * np.pi)
    for i in range(n_frames )
])
frame = np.concatenate ([
    np.ones(N, int) * i for i in range(n_frames )
])
fig = ff.create_hexbin_mapbox (
    lat=lat, lon=lon, nx_hexagon =15, animation_frame =frame,
    color_continuous_scale ="Cividis" , labels={"color": "Point Count" , "frame": "Period" },
    opacity=0.5, min_count =1,
    show_original_data =True, original_data_marker =dict(opacity=0.6, size=4, color="deeppink" )
)
fig.update_layout (margin=dict(b=0, t=0, l=0, r=0))
fig.layout.sliders[0].pad.t=20
fig.layout.updatemenus [0].pad.t=40
fig.show()
For more info on Plotly maps, see: .
For more info on using colorscales with Plotly see: 
For more info on ff.create_annotated_heatmap(), see the 
https://plotly.com/python/maps (https://plotly.com/python/maps)
https://plotly.com/python/heatmap-and-contour-colorscales/ (https://plotly.com/python/heatmap-and-contour-
colorscales/)
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_hexbin_mapbox.html#plotly.figure_factory.create_hexbin_mapbox)
Period=0
0123456789101151015202530354045Point Count
▶ ◼
(https://www.mapbox.com/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
and
in
n16/07/2025, 06:38 Hexbin mapbox in Python
https://plotly.com/python/hexbin-mapbox/ 7/7</content>
      </file>
      <file name="Lines on maps in Python.pdf" path="pyvy_2x4/Lines on maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Base Map Configuration
Lines on Maps with Plotly Express
Lines on Maps from GeoPandas &gt;  &gt; Lines on Maps
Lines on Maps in Python
How to draw lines, great circles, and contours on maps in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/lines-on-maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Below we show how to create geographical line plots using either Plotly Express with px.line_geo function or the lower-level go.Scattergeo object.
Plotly figures made with px.scatter_geo, px.line_geo or px.choropleth functions or containing go.Choropleth or go.Scattergeo
 have a go.layout.Geo object which can be used to  onto
which data is plotted.
Plotly Express (/python/plotly-express/)
graph objects (/python/graph-objects/)
control the appearance of the base map (/python/map-configuration/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.line_geo (df, locations ="iso_alpha" ,
                  color="continent" , # "continent" is one of the columns of gapminder
                  projection ="orthographic" )
fig.show()
Given a GeoPandas geo-data frame with linestring or multilinestring features, one can extra point data and use px.line_geo().continent
Asia
Europe
Africa
Americas
Oceania
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 1/10

--- Página 2 ---
import plotly.express  as px
import geopandas  as gpd
import shapely.geometry
import numpy as np
import wget
# download a zipped shapefile
wget.download ("https://plotly.github.io/datasets/ne_50m_rivers_lake_centerlines.zip" )
# open a zipped shapefile with the zip:// pseudo-protocol
geo_df = gpd.read_file ("zip://ne_50m_rivers_lake_centerlines.zip" )
lats = []
lons = []
names = []
for feature, name in zip(geo_df.geometry , geo_df.name):
    if isinstance (feature, shapely.geometry .linestring .LineString ):
        linestrings  = [feature]
    elif isinstance (feature, shapely.geometry .multilinestring .MultiLineString ):
        linestrings  = feature.geoms
    else:
        continue
    for linestring  in linestrings :
        x, y = linestring .xy
        lats = np.append(lats, y)
        lons = np.append(lons, x)
        names = np.append(names, [name]*len(y))
        lats = np.append(lats, None)
        lons = np.append(lons, None)
        names = np.append(names, None)
fig = px.line_geo (lat=lats, lon=lons, hover_name =names)
fig.show()
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 2/10

--- Página 3 ---
Lines on Maps with plotly.graph_objects
US Flight Paths Map
import plotly.graph_objects  as go
import pandas as pd
df_airports  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df_airports .head()
df_flight_paths  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv' )
df_flight_paths .head()
fig = go.Figure()
fig.add_trace (go.Scattergeo (
    locationmode  = 'USA-states' ,
    lon = df_airports ['long'],
    lat = df_airports ['lat'],
    hoverinfo  = 'text',
    text = df_airports ['airport' ],
    mode = 'markers' ,
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)' ,
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))
flight_paths  = []
for i in range(len(df_flight_paths )):
    fig.add_trace (
        go.Scattergeo (
            locationmode  = 'USA-states' ,
            lon = [df_flight_paths ['start_lon' ][i], df_flight_paths ['end_lon' ][i]],
            lat = [df_flight_paths ['start_lat' ][i], df_flight_paths ['end_lat' ][i]],
            mode = 'lines',
            line = dict(width = 1,color = 'red'),
            opacity = float(df_flight_paths ['cnt'][i]) / float(df_flight_paths ['cnt'].max()),
        )
    )
fig.update_layout (
    title_text  = 'Feb. 2011 American Airline flight paths&lt;br&gt;(Hover for airport names)' ,
    showlegend  = False,
    geo = dict(
        scope = 'north america' ,
        projection_type  = 'azimuthal equal area' ,
        showland  = True,
        landcolor  = 'rgb(243, 243, 243)' ,
        countrycolor  = 'rgb(204, 204, 204)' ,
    ),
)
fig.show()
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 3/10

--- Página 4 ---
Performance improvement: put many lines in the same trace
For very large amounts (&gt;1000) of lines, performance may become critical. If you can relinquish setting individual line styles (e.g. opacity), you can put multiple paths
into one trace. This makes the map render faster and reduces the script execution time and memory consumption.
Use None between path coordinates to create a break in the otherwise connected paths.
Feb. 2011 American Airline flight paths
(Hover for airport names)
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 4/10

--- Página 5 ---
import plotly.graph_objects  as go
import pandas as pd
df_airports  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df_airports .head()
df_flight_paths  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv' )
df_flight_paths .head()
fig = go.Figure()
fig.add_trace (go.Scattergeo (
    locationmode  = 'USA-states' ,
    lon = df_airports ['long'],
    lat = df_airports ['lat'],
    hoverinfo  = 'text',
    text = df_airports ['airport' ],
    mode = 'markers' ,
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)' ,
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))
lons = []
lats = []
import numpy as np
lons = np.empty(3 * len(df_flight_paths ))
lons[::3] = df_flight_paths ['start_lon' ]
lons[1::3] = df_flight_paths ['end_lon' ]
lons[2::3] = None
lats = np.empty(3 * len(df_flight_paths ))
lats[::3] = df_flight_paths ['start_lat' ]
lats[1::3] = df_flight_paths ['end_lat' ]
lats[2::3] = None
fig.add_trace (
    go.Scattergeo (
        locationmode  = 'USA-states' ,
        lon = lons,
        lat = lats,
        mode = 'lines',
        line = dict(width = 1,color = 'red'),
        opacity = 0.5
    )
)
fig.update_layout (
    title_text  = 'Feb. 2011 American Airline flight paths&lt;br&gt;(Hover for airport names)' ,
    showlegend  = False,
    geo = go.layout.Geo(
        scope = 'north america' ,
        projection_type  = 'azimuthal equal area' ,
        showland  = True,
        landcolor  = 'rgb(243, 243, 243)' ,
        countrycolor  = 'rgb(204, 204, 204)' ,
    ),
    height=700,
)
fig.show()
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 5/10

--- Página 6 ---
Feb. 2011 American Airline flight paths
(Hover for airport names)
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 6/10

--- Página 7 ---
London to NYC Great Circle
import plotly.graph_objects  as go
fig = go.Figure(data=go.Scattergeo (
    lat = [40.7127, 51.5072],
    lon = [-74.0059, 0.1275],
    mode = 'lines',
    line = dict(width = 2, color = 'blue'),
))
fig.update_layout (
    title_text  = 'London to NYC Great Circle' ,
    showlegend  = False,
    geo = dict(
        resolution  = 50,
        showland  = True,
        showlakes  = True,
        landcolor  = 'rgb(204, 204, 204)' ,
        countrycolor  = 'rgb(204, 204, 204)' ,
        lakecolor  = 'rgb(255, 255, 255)' ,
        projection_type  = "equirectangular" ,
        coastlinewidth  = 2,
        lataxis = dict(
            range = [20, 60],
            showgrid  = True,
            dtick = 10
        ),
        lonaxis = dict(
            range = [-100, 20],
            showgrid  = True,
            dtick = 20
        ),
    )
)
fig.show()
London to NYC Great Circle
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 7/10

--- Página 8 ---
Contour lines on globe
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv' )
df.head()
scl = ['rgb(213,62,79)' , 'rgb(244,109,67)' , 'rgb(253,174,97)' , \
    'rgb(254,224,139)' , 'rgb(255,255,191)' , 'rgb(230,245,152)' , \
    'rgb(171,221,164)' , 'rgb(102,194,165)' , 'rgb(50,136,189)'
]
n_colors  = len(scl)
fig = go.Figure()
for i, (lat, lon) in enumerate (zip(df.columns[::2], df.columns[1::2])):
    fig.add_trace (go.Scattergeo (
        lon = df[lon],
        lat = df[lat],
        mode = 'lines',
        line = dict(width = 2, color = scl[i % n_colors ]
        )))
fig.update_layout (
    title_text  = 'Contour lines over globe&lt;br&gt;(Click and drag to rotate)' ,
    showlegend  = False,
    geo = dict(
        showland  = True,
        showcountries  = True,
        showocean  = True,
        countrywidth  = 0.5,
        landcolor  = 'rgb(230, 145, 56)' ,
        lakecolor  = 'rgb(0, 255, 255)' ,
        oceancolor  = 'rgb(0, 255, 255)' ,
        projection  = dict(
            type = 'orthographic' ,
            rotation  = dict(
                lon = -100,
                lat = 40,
                roll = 0
            )
        ),
        lonaxis = dict(
            showgrid  = True,
            gridcolor  = 'rgb(102, 102, 102)' ,
            gridwidth  = 0.5
        ),
        lataxis = dict(
            showgrid  = True,
            gridcolor  = 'rgb(102, 102, 102)' ,
            gridwidth  = 0.5
        )
    )
)
fig.show()
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 8/10

--- Página 9 ---
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px.(line_geo) (https://plotly.com/python-api-reference/generated/plotly.express.line_geo)
https://plotly.com/python/reference/scattergeo/ (https://plotly.com/python/reference/scattergeo/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Contour lines over globe
(Click and drag to rotate)
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 9/10

--- Página 10 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ects
ny lines16/07/2025, 06:36 Lines on maps in Python
https://plotly.com/python/lines-on-maps/ 10/10</content>
      </file>
      <file name="Lines on tile maps in Python.pdf" path="pyvy_2x4/Lines on tile maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Lines on tile maps using Plotly Express
Lines on maps from GeoPandas &gt;  &gt; Lines on Tile
Maps
Lines on Tile Maps in Python
How to draw a line on tile-based maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/lines-on-tile-
maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
To draw a line on a map, you either can use px.line_map in Plotly Express, or go.Scattermap in Plotly Graph Objects. Here's an example of drawing a line on a tile-
based map using Plotly Express.
import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
us_cities  = us_cities .query("State in ['New York', 'Ohio']" )
import plotly.express  as px
fig = px.line_map (us_cities , lat="lat", lon="lon", color="State", zoom=3, height=300)
fig.update_layout (map_style ="open-street-map" , map_zoom =4, map_center_lat  = 41,
    margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Given a GeoPandas geo-data frame with linestring or multilinestring features, one can extra point data and use px.line_map.
State
Ohio
New York
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ess
aces16/07/2025, 06:36 Lines on tile maps in Python
https://plotly.com/python/lines-on-tile-maps/ 1/5

--- Página 2 ---
Lines on maps using Scattermap tracesimport plotly.express  as px
import geopandas  as gpd
import shapely.geometry
import numpy as np
import wget
# download a zipped shapefile
wget.download ("https://plotly.github.io/datasets/ne_50m_rivers_lake_centerlines.zip" )
# open a zipped shapefile with the zip:// pseudo-protocol
geo_df = gpd.read_file ("zip://ne_50m_rivers_lake_centerlines.zip" )
lats = []
lons = []
names = []
for feature, name in zip(geo_df.geometry , geo_df.name):
    if isinstance (feature, shapely.geometry .linestring .LineString ):
        linestrings  = [feature]
    elif isinstance (feature, shapely.geometry .multilinestring .MultiLineString ):
        linestrings  = feature.geoms
    else:
        continue
    for linestring  in linestrings :
        x, y = linestring .xy
        lats = np.append(lats, y)
        lons = np.append(lons, x)
        names = np.append(names, [name]*len(y))
        lats = np.append(lats, None)
        lons = np.append(lons, None)
        names = np.append(names, None)
fig = px.line_map (lat=lats, lon=lons, hover_name =names,
                     map_style ="open-street-map" , zoom=1)
fig.show()
This example uses go.Scattermap and sets the  attribute to a combination of markers
and line.
mode (https://plotly.com/python/reference/scattermapbox/#scattermap-mode)
©  contributors
OpenStreetMap (https://www.openstreetmap.org/copyright)
ess
aces16/07/2025, 06:36 Lines on tile maps in Python
https://plotly.com/python/lines-on-tile-maps/ 2/5

--- Página 3 ---
Mapbox Mapsimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers+lines" ,
    lon = [10, 20, 30],
    lat = [10, 20,30],
    marker = {'size': 10}))
fig.add_trace (go.Scattermap (
    mode = "markers+lines" ,
    lon = [-50, -60,40],
    lat = [30, 10, -20],
    marker = {'size': 10}))
fig.update_layout (
    margin ={'l':0,'t':0,'b':0,'r':0},
    map = {
        'center' : {'lon': 10, 'lat': 10},
        'style': "open-street-map" ,
        'center' : {'lon': -20, 'lat': -20},
        'zoom': 1})
fig.show()
Mapbox traces are deprecated and may be removed in a future version of Plotly.py.
The earlier examples using px.line_map and go.Scattermap use  for rendering. These traces were introduced in
Plotly.py 5.24 and are now the recommended way to draw lines on tile-based maps. There are also traces that use :
px.line_mapbox and go.Scattermapbox
Maplibre (https://maplibre.org/maplibre-gl-js/docs/)
Mapbox (https://docs.mapbox.com)
To plot on Mapbox maps with Plotly you may need a Mapbox account and a public . See our 
 documentation for more information.
Mapbox Access Token (https://www.mapbox.com/studio)
Mapbox Map
Layers (/python/mapbox-layers/)
To draw a line on your map, you either can use  in Plotly
Express, or  traces. Below we show you how to draw a line on Mapbox using Plotly Express.
px.line_mapbox (https://plotly.com/python-api-reference/generated/plotly.express.line_mapbox.html)
Scattermapbox (https://plotly.com/python/reference/scattermapbox/)
Here's an example of using Scattermapbox.
trace 0
trace 1
ess
aces16/07/2025, 06:36 Lines on tile maps in Python
https://plotly.com/python/lines-on-tile-maps/ 3/5

--- Página 4 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermapbox (
    mode = "markers+lines" ,
    lon = [10, 20, 30],
    lat = [10, 20,30],
    marker = {'size': 10}))
fig.add_trace (go.Scattermapbox (
    mode = "markers+lines" ,
    lon = [-50, -60,40],
    lat = [30, 10, -20],
    marker = {'size': 10}))
fig.update_layout (
    margin ={'l':0,'t':0,'b':0,'r':0},
    mapbox = {
        'center' : {'lon': 10, 'lat': 10},
        'style': "open-street-map" ,
        'center' : {'lon': -20, 'lat': -20},
        'zoom': 1})
fig.show()
See  or
 for more information about the attributes available.
function reference for px.line_map (https://plotly.com/python-api-reference/generated/plotly.express.line_map)
https://plotly.com/python/reference/scattermap/ (https://plotly.com/python/reference/scattermap/)
For Mapbox-based tile maps, see  or
.
function reference for px.line_mapbox (https://plotly.com/python-api-reference/generated/plotly.express.line_mapbox)
https://plotly.com/python/reference/scattermapbox/ (https://plotly.com/python/reference/scattermapbox/)/tmp/ipykernel_11054/3823995118.py:3: DeprecationWarning:
*scattermapbox* is deprecated! Use *scattermap* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
/tmp/ipykernel_11054/3823995118.py:9: DeprecationWarning:
*scattermapbox* is deprecated! Use *scattermap* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
trace 0
trace 1
ess
aces16/07/2025, 06:36 Lines on tile maps in Python
https://plotly.com/python/lines-on-tile-maps/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ess
aces16/07/2025, 06:36 Lines on tile maps in Python
https://plotly.com/python/lines-on-tile-maps/ 5/5</content>
      </file>
      <file name="Map configuration and styling on geo maps in Python.pdf" path="pyvy_2x4/Map configuration and styling on geo maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Tile Maps vs Outline Maps
Outline-based maps
Physical Base Maps &gt;  &gt; Map Configuration and
Styling on Geo Maps
Map Configuration and Styling on Geo Maps in Python
How to configure and style base maps for outline-based Geo Maps.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/map-
configuration.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly supports two different kinds of maps:
Tile-based maps (https://en.wikipedia.org/wiki/Tiled_web_map)
If your figure is created with a px.scatter_map, px.scatter_mapbox, px.line_map, px.line_mapbox, px.choropleth_map, px.choropleth_mapbox, px.density_map, or
px.density_mapbox function or otherwise contains one or more traces of type go.Scattermap, go.Scattermapbox, go.Choroplethmap, go.Choroplethmapbox,
go.Densitymap, or go.Densitymapbox, the layout.map object in your figure contains configuration information for the map itself.
Geo maps are outline-based maps. If your figure is created with a px.scatter_geo, px.line_geo or px.choropleth function or otherwise contains one or more traces of
type go.Scattergeo or go.Choropleth, the layout.geo object in your figure contains configuration information for the map itself.
This page documents Geo outline-based maps, and the  describes how to configure tile-based
maps.
Tile Map Layers documentation (/python/tile-map-layers/)
Note: Plotly Express cannot create empty figures, so the examples below mostly create an "empty" map using fig = go.Figure(go.Scattergeo()). That said, every
configuration option here is equally applicable to non-empty maps created with the Plotly Express px.scatter_geo, px.line_geo or px.choropleth functions.
Plotly Geo maps have a built-in base map layer composed of "physical" and "cultural" (i.e. administrative border) data from the 
. Various lines and area fills can be shown or hidden, and their color and line-widths specified. In the 
, a map frame and physical features such as a coastal outline and filled land areas are shown, at a small-scale 1:110m resolution:
Natural Earth Dataset
(https://www.naturalearthdata.com/downloads/)
default plotly
template (/python/templates/)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 1/7

--- Página 2 ---
Disabling Base MapsHere is a map with all physical features enabled and styled, at a larger-scale 1:50m resolution:
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    resolution =50,
    showcoastlines =True, coastlinecolor ="RebeccaPurple" ,
    showland =True, landcolor ="LightGreen" ,
    showocean =True, oceancolor ="LightBlue" ,
    showlakes =True, lakecolor ="Blue",
    showrivers =True, rivercolor ="Blue"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
In certain cases, such as large scale , the default physical map can be distracting. In this case the layout.geo.visible
attribute can be set to False to hide all base map attributes except those which are explicitly set to true. For example in the following map we hide all physical features
except rivers and lakes, neither of which are shown by default:
choropleth maps (/python/choropleth-maps/)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    visible=False,
    resolution =50,
    showlakes =True, lakecolor ="Blue",
    showrivers =True, rivercolor ="Blue"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 2/7

--- Página 3 ---
Cultural Base Maps
Map ProjectionsIn addition to physical base map features, a "cultural" base map is included which is composed of country borders and selected sub-country borders such as states.
Note and disclaimer: cultural features are by definition subject to change, debate and dispute. Plotly includes data from Natural Earth "as-is" and defers to the
 which read:
Natural Earth policy regarding disputed borders (https://www.naturalearthdata.com/downloads/50m-cultural-vectors/50m-admin-0-countries-2/)
Natural Earth Vector draws boundaries of countries according to defacto status. We show who actually controls the situation on the ground.
To create a map with your own cultural features please refer to our .
choropleth documentation (/python/choropleth-maps/)
Here is a map with only cultural features enabled and styled, at a 1:50m resolution, which includes only country boundaries. See below for country sub-unit cultural
base map features:
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    visible=False, resolution =50,
    showcountries =True, countrycolor ="RebeccaPurple"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Geo maps are drawn according to a given map  that flattens the Earth's roughly-spherical surface into a 2-
dimensional space. In the following examples, we show the 'orthographic' and 'natural earth' projections, two of the many projection types available. For a full list of
available projection types, see the .
projection (https://en.wikipedia.org/wiki/Map_projection)
layout.geo reference documentation (https://plotly.com/python/reference/layout/geo/#layout-geo-projection-type)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (projection_type ="orthographic" )
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 3/7

--- Página 4 ---
Automatic Zooming or Bounds Fittingimport plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (projection_type ="natural earth" )
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Map projections can be rotated using the layout.geo.projection.rotation attribute, and maps can be translated using the layout.geo.center attributed, as well as
truncated to a certain longitude and latitude range using the layout.geo.lataxis.range and layout.geo.lonaxis.range.
The map below uses all of these attributes to demonstrate the types of effect this can yield:
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    center=dict(lon=-30, lat=-30),
    projection_rotation =dict(lon=30, lat=30, roll=30),
    lataxis_range =[-50,20], lonaxis_range =[0, 200]
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
The layout.geo.fitbounds attribute can be set to locations to automatically set the center and latitude and longitude range according to the data being plotted. See the
 documentation for more information.
choropleth maps (/python/choropleth-maps/)
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 4/7

--- Página 5 ---
Named Map Scopes and Country Sub-Unitsimport plotly.express  as px
fig = px.line_geo (lat=[0,15,20,35], lon=[5,10,25,30])
fig.update_geos (fitbounds ="locations" )
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
In addition, the named "scope" of a map defines a sub-set of the earth's surface to draw. Each scope has a default projection type, center and roll, as well as bounds, and
certain scopes contain country sub-unit cultural layers certain resolutions, such as scope="north america" at resolution=50 which contains US state and Canadian
province boundaries.
The available scopes are: 'world', 'usa', 'europe', 'asia', 'africa', 'north america', 'south america'.
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    visible=False, resolution =50, scope="north america" ,
    showcountries =True, countrycolor ="Black",
    showsubunits =True, subunitcolor ="Blue"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
The "usa" scope contains state boundaries at both resolutions, and uses the special 'albers usa' projection which moves Alaska and Hawaii closer to the "lower 48
states" to reduce projection distortion and produce a more compact map.
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 5/7

--- Página 6 ---
Graticules (Latitude and Longitude Grid Lines)
Referenceimport plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (
    visible=False, resolution =110, scope="usa",
    showcountries =True, countrycolor ="Black",
    showsubunits =True, subunitcolor ="Blue"
)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
A graticule can be drawn using layout.geo.lataxis.showgrid and layout.geo.lonaxis.showgrid with options similar to .
2d cartesian ticks (/python/axes/)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattergeo ())
fig.update_geos (lataxis_showgrid =True, lonaxis_showgrid =True)
fig.update_layout (height=300, margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/layout/geo/ (https://plotly.com/python/reference/layout/geo/)
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ng
ub-Units
Grid16/07/2025, 06:37 Map configuration and styling on geo maps in Python
https://plotly.com/python/map-configuration/ 7/7</content>
      </file>
      <file name="Maplibre migration in Python.pdf" path="pyvy_2x4/Maplibre migration in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; MapLibre
Migration
MapLibre Migration in Python
Migrating from Mapbox traces to MapLibre traces.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/migrate-to-
maplibre.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 1/7

--- Página 2 ---
Migrating from Mapbox traces to MapLibre traces
px.scatter_map
px.line_map
px.choropleth_map
px.density_map
go.Choroplethmap
go.Scattermap
go.Densitymap
1. Change trace names from *mapbox to *map. For any existing trace name ending in *mapbox, ensure you've removed the "box" suffix.
2. If in use, update layout.mapbox argument in your layout configuration to layout.map. The nested properties are identical in the new map traces, so no other
changes should be required.
3. If in use, update mapbox_style to map_style.
4. Verify your map_style settings. With mapbox traces, we bundle basic, streets, outdoors, light, dark, satellite, and satellite-streets styles, using Mapbox styling.
These style names are still available, but they now reference slightly different styles provided by other tools.
Style changesWith the release of Plotly.py v5.24.0, we are introducing a new set of trace types for maps with tile underlays, including from Plotly Express:
as well as Plotly Graph Objects:
These traces replace the existing Mapbox traces, px.scatter_mapbox, px.line_mapbox, etc., but use  as the map renderer rather than
Mapbox.
MapLibre (https://maplibre.org)
When switching to the new traces, keep an eye out for improved rendering performance, WebGL2 support, and over time, improved features in the Plotly map traces
inherited from the MapLibre renderer, including projection support, globe views, terrain support, and support for modern mapping standards.
You can learn more about the motivations for this change in our .
announcement post (https://plotly.com/blog/plotly-is-switching-to-maplibre/)
As a result of removing Mapbox as the rendering engine, we're also removing the Mapbox branding from these trace names. This means that migrating from Mapbox
traces to MapLibre traces will require some code changes in your projects.
Note that Mapbox API keys are no longer required for Plotly-provided styles, but using external styles in your Plotly maps remains supported with the existing API.
Built-in styles in map traces are free styles from  and . Several names are re-used from the previous
Mapbox styles.
Carto (https://carto.com)
ESRI (https://www.esri.com/en-us/home)
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 2/7

--- Página 3 ---
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 3/7

--- Página 4 ---
Compare to the previous Mapbox styles:
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 4/7

--- Página 5 ---
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 5/7

--- Página 6 ---
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
apLibre16/07/2025, 06:35 Maplibre migration in Python
https://plotly.com/python/mapbox-to-maplibre/ 7/7</content>
      </file>
      <file name="Maps in Python.pdf" path="pyvy_2x4/Maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Maps in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to get
the code and run python app.py.
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
Python (/python)
Maps (/python/maps)Plotly Python Open Source Graphing Library Maps
Plotly's Python graphing library makes interactive, publication-quality maps online.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/mapbox-to-
maplibre/)
MapLibre Migration
(/python/tile-county-
choropleth/)
Tile Choropleth Maps
(/python/lines-on-tile-
maps/)
Lines on Tile Maps
(/python/filled-area-tile-
maps/)
Filled Area on Tile Maps
(/python/bubble-maps/)
Bubble Maps
(/python/density-
heatmaps/)
Density Heatmap
(/python/lines-on-maps/)
Lines on Maps
(/python/choropleth-
maps/)
Choropleth Maps
(/python/tile-map-
layers/)
Tile Map Layers
(/python/tile-scatter-
maps/)
Scatter Plots on Tile
Maps
(/python/county-
choropleth/)
USA County Choropleth
Maps
(/python/scatter-plots-
on-maps/)
Scatter Plots on Maps
(/python/map-
configuration/)
Map Configuration and
Styling on Geo Maps
(/python/hexbin-
mapbox/)
Hexbin Mapbox
Dash (https://plotly.com/dash/)
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:38 Maps in Python
https://plotly.com/python/maps/ 1/3

--- Página 2 ---

    dcc.adoes(
        id='candidate',
        options=["Joly", "Coderre", "Bergeron"],
        value="Coderre",
        inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("candidate", "value"))
def display_choropleth(candidate):
    df = px.data.election() # replace with your own data source
    geojson = px.data.election_geojson()
    fig = px.choropleth(
        df, geojson=geojson, color=candidate,
        locations="district", featureidkey="properties.district",
        projection="mercator", range_color=[0, 6500])
    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    return fig
app.run(debug=True)
Political candidate voting pool analysis
Select a candidate:
JolyCoderreBergeron
0100020003000400050006000Coderre
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:38 Maps in Python
https://plotly.com/python/maps/ 2/3

--- Página 3 ---
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:38 Maps in Python
https://plotly.com/python/maps/ 3/3</content>
      </file>
      <file name="Scatter plots on maps in Python.pdf" path="pyvy_2x4/Scatter plots on maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Base Map Configuration
Geographical Scatter Plot with px.scatter_geo
Customize geographical scatter plot &gt;  &gt; Scatter Plots on
Maps
Scatter Plots on Maps in Python
How to make scatter plots on maps in Python. Scatter plots on maps highlight geographic areas and can be colored by value.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/scatter-plots-on-
maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly figures made with px.scatter_geo, px.line_geo or px.choropleth functions or containing go.Choropleth or go.Scattergeo
 have a go.layout.Geo object which can be used to  onto
which data is plotted.
Plotly Express (/python/plotly-express/)
graph objects (/python/graph-objects/)
control the appearance of the base map (/python/map-configuration/)
Here we show the  function px.scatter_geo for a geographical scatter plot. The size argument is used to set the size of markers
from a given column of the DataFrame.
Plotly Express (/python/plotly-express/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter_geo (df, locations ="iso_alpha" ,
                     size="pop", # size of markers, "pop" is one of the columns of gapminder
                     )
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 1/8

--- Página 2 ---
Basic Example with GeoPandasimport plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter_geo (df, locations ="iso_alpha" ,
                     color="continent" , # which column to use to set the color of markers
                     hover_name ="country" , # column added to hover information
                     size="pop", # size of markers
                     projection ="natural earth" )
fig.show()
px.scatter_geo can work well with  dataframes whose geometry is of type Point.
GeoPandas (https://geopandas.org/)
continent
Asia
Europe
Africa
Americas
Oceania
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 2/8

--- Página 3 ---
U.S. Airports Map
Simple U.S. Airports Mapimport plotly.express  as px
import geopandas  as gpd
geo_df = gpd.read_file (gpd.datasets .get_path ('naturalearth_cities' ))
px.set_mapbox_access_token (open(".mapbox_token" ).read())
fig = px.scatter_geo (geo_df,
                    lat=geo_df.geometry .y,
                    lon=geo_df.geometry .x,
                    hover_name ="name")
fig.show()
Here we show how to use go.Scattergeo from plotly.graph_objects.
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 3/8

--- Página 4 ---
Styled U.S. Airports Mapimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df['text'] = df['airport' ] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: '  + df['cnt'].astype(str)
fig = go.Figure(data=go.Scattergeo (
        lon = df['long'],
        lat = df['lat'],
        text = df['text'],
        mode = 'markers' ,
        marker_color  = df['cnt'],
        ))
fig.update_layout (
        title = 'Most trafficked US airports&lt;br&gt;(Hover for airport names)' ,
        geo_scope ='usa',
    )
fig.show()
Most trafficked US airports
(Hover for airport names)
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 4/8

--- Página 5 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv' )
df['text'] = df['airport' ] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: '  + df['cnt'].astype(str)
fig = go.Figure(data=go.Scattergeo (
        locationmode  = 'USA-states' ,
        lon = df['long'],
        lat = df['lat'],
        text = df['text'],
        mode = 'markers' ,
        marker = dict(
            size = 8,
            opacity = 0.8,
            reversescale  = True,
            autocolorscale  = False,
            symbol = 'square' ,
            line = dict(
                width=1,
                color='rgba(102, 102, 102)'
            ),
            colorscale  = 'Blues',
            cmin = 0,
            color = df['cnt'],
            cmax = df['cnt'].max(),
            colorbar =dict(
                title=dict(
                    text="Incoming flights&lt;br&gt;February 2011"
                )
            )
        )))
fig.update_layout (
        title = 'Most trafficked US airports&lt;br&gt;(Hover for airport names)' ,
        geo = dict(
            scope='usa',
            projection_type ='albers usa' ,
            showland  = True,
            landcolor  = "rgb(250, 250, 250)" ,
            subunitcolor  = "rgb(217, 217, 217)" ,
            countrycolor  = "rgb(217, 217, 217)" ,
            countrywidth  = 0.5,
            subunitwidth  = 0.5
        ),
    )
fig.show()
05k10k15k20k25kIncoming flights
February 2011Most trafficked US airports
(Hover for airport names)
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 5/8

--- Página 6 ---
North American Precipitation Map
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv' )
scl = [0,"rgb(150,0,90)" ],[0.125,"rgb(0, 0, 200)" ],[0.25,"rgb(0, 25, 255)" ],\
[0.375,"rgb(0, 152, 255)" ],[0.5,"rgb(44, 255, 150)" ],[0.625,"rgb(151, 255, 0)" ],\
[0.75,"rgb(255, 234, 0)" ],[0.875,"rgb(255, 111, 0)" ],[1,"rgb(255, 0, 0)" ]
fig = go.Figure(data=go.Scattergeo (
    lat = df['Lat'],
    lon = df['Lon'],
    text = df['Globvalue' ].astype(str) + ' inches' ,
    marker = dict(
        color = df['Globvalue' ],
        colorscale  = scl,
        reversescale  = True,
        opacity = 0.7,
        size = 2,
        colorbar  = dict(
            title = dict(
                side="right"
            ),
            outlinecolor  = "rgba(68, 68, 68, 0)" ,
            ticks = "outside" ,
            showticksuffix  = "last",
            dtick = 0.1
        )
    )
))
fig.update_layout (
    geo = dict(
        scope = 'north america' ,
        showland  = True,
        landcolor  = "rgb(212, 212, 212)" ,
        subunitcolor  = "rgb(255, 255, 255)" ,
        countrycolor  = "rgb(255, 255, 255)" ,
        showlakes  = True,
        lakecolor  = "rgb(255, 255, 255)" ,
        showsubunits  = True,
        showcountries  = True,
        resolution  = 50,
        projection  = dict(
            type = 'conic conformal' ,
            rotation_lon  = -100
        ),
        lonaxis = dict(
            showgrid  = True,
            gridwidth  = 0.5,
            range= [ -140.0, -55.0 ],
            dtick = 5
        ),
        lataxis = dict (
            showgrid  = True,
            gridwidth  = 0.5,
            range= [ 20.0, 60.0 ],
            dtick = 5
        )
    ),
    title=dict(text='US Precipitation 06-30-2015&lt;br&gt;Source: &lt;a href="http://water.weather.gov/precip/"&gt;NOAA&lt;/a&gt;' ),
)
fig.show()
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 6/8

--- Página 7 ---
Reference
What About Dash?See  or
 and 
 for more information and chart attribute options!
function reference for px.(scatter_geo) (https://plotly.com/python-api-reference/generated/plotly.express.scatter_geo)
https://plotly.com/python/reference/scattergeo/ (https://plotly.com/python/reference/scattergeo/)
https://plotly.com/python/reference/layout/geo/
(https://plotly.com/python/reference/layout/geo/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
0.10.20.30.40.50.60.70.80.911.11.21.3US Precipitation 06-30-2015
Source: 
NOAA
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 7/8

--- Página 8 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
cattergeo
t16/07/2025, 06:37 Scatter plots on maps in Python
https://plotly.com/python/scatter-plots-on-maps/ 8/8</content>
      </file>
      <file name="Scatter plots on tile maps in Python.pdf" path="pyvy_2x4/Scatter plots on tile maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic example with Plotly Express
Basic Example with GeoPandas &gt;  &gt; Scatter Plots on Tile
Maps
Scatter Plots on Tile Maps in Python
How to make scatter plots on tile maps in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/tile-scatter-
maps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Here we show the  function px.scatter_map for a scatter plot on a tile map.
Plotly Express (/python/plotly-express/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.carshare ()
fig = px.scatter_map (df, lat="centroid_lat" , lon="centroid_lon" ,     color="peak_hour" , size="car_hours" ,
                  color_continuous_scale =px.colors.cyclical .IceFire, size_max =15, zoom=10)
fig.show()
px.scatter_map can work well with  dataframes whose geometry is of type Point.
GeoPandas (https://geopandas.org/)
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)05101520peak_hour
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 1/12

--- Página 2 ---
Basic Exampleimport plotly.express  as px
import geopandas  as gpd
geo_df = gpd.read_file (gpd.datasets .get_path ('naturalearth_cities' ))
fig = px.scatter_map (geo_df,
                        lat=geo_df.geometry .y,
                        lon=geo_df.geometry .x,
                        hover_name ="name",
                        zoom=1)
fig.show()
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 2/12

--- Página 3 ---
Multiple Markersimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
        lat=['45.5017' ],
        lon=['-73.5673' ],
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=14
        ),
        text=['Montreal' ],
    ))
fig.update_layout (
    hovermode ='closest' ,
    map=dict(
        bearing=0,
        center=go.layout.map.Center(
            lat=45,
            lon=-73
        ),
        pitch=0,
        zoom=5
    )
)
fig.show()
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 3/12

--- Página 4 ---
Nuclear Waste Sites on Campusesimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
        lat=['38.91427' ,'38.91538' ,'38.91458' ,
             '38.92239' ,'38.93222' ,'38.90842' ,
             '38.91931' ,'38.93260' ,'38.91368' ,
             '38.88516' ,'38.921894' ,'38.93206' ,
             '38.91275' ],
        lon=['-77.02827' ,'-77.02013' ,'-77.03155' ,
             '-77.04227' ,'-77.02854' ,'-77.02419' ,
             '-77.02518' ,'-77.03304' ,'-77.04509' ,
             '-76.99656' ,'-77.042438' ,'-77.02821' ,
             '-77.01239' ],
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=9
        ),
        text=["The coffee bar" ,"Bistro Bohem" ,"Black Cat" ,
             "Snap","Columbia Heights Coffee" ,"Azi's Cafe" ,
             "Blind Dog Cafe" ,"Le Caprice" ,"Filter" ,
             "Peregrine" ,"Tryst","The Coupe" ,
             "Big Bear Cafe" ],
    ))
fig.update_layout (
    autosize =True,
    hovermode ='closest' ,
    map=dict(
        bearing=0,
        center=dict(
            lat=38.92,
            lon=-77.07
        ),
        pitch=0,
        zoom=10
    ),
)
fig.show()
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 4/12

--- Página 5 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Nuclear%20Waste%20Sites %20on%20American%20Campuses.csv' )
site_lat  = df.lat
site_lon  = df.lon
locations_name  = df.text
fig = go.Figure()
fig.add_trace (go.Scattermap (
        lat=site_lat ,
        lon=site_lon ,
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=17,
            color='rgb(255, 0, 0)' ,
            opacity=0.7
        ),
        text=locations_name ,
        hoverinfo ='text'
    ))
fig.add_trace (go.Scattermap (
        lat=site_lat ,
        lon=site_lon ,
        mode='markers' ,
        marker=go.scattermap .Marker(
            size=8,
            color='rgb(242, 177, 172)' ,
            opacity=0.7
        ),
        hoverinfo ='none'
    ))
fig.update_layout (
    title=dict(text='Nuclear Waste Sites on Campus' ),
    autosize =True,
    hovermode ='closest' ,
    showlegend =False,
    map=dict(
        bearing=0,
        center=dict(
            lat=38,
            lon=-94
        ),
        pitch=0,
        zoom=3,
        style='light'
    ),
)
fig.show()
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 5/12

--- Página 6 ---
Set Marker Symbols
You can define the symbol on your map by setting  attribute.
symbol (https://plotly.com/python/reference/scattermap/#scattermap-marker-symbol)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers+text+lines" ,
    lon = [-75, -80, -50], lat = [45, 20, -20],
    marker = {'size': 20, 'symbol' : ["bus", "harbor" , "airport" ]},
    text = ["Bus", "Harbor" , "airport" ],textposition  = "bottom right" ))
fig.update_layout (
    map = {
        'style': "outdoors" , 'zoom': 0.7},
    showlegend  = False)
fig.show()
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)Nuclear Waste Sites on Campus
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 6/12

--- Página 7 ---
Add Clusters
Font CustomizationNew in 5.11
Display clusters of data points by setting cluster. Here, we enable clusters with enabled=True. You can also enable clusters by setting other cluster properties. Other
available properties include color (for setting the color of the clusters), size (for setting the size of a cluster step), and step (for configuring how many points it takes to
create a cluster or advance to the next cluster step).
import plotly.express  as px
import pandas as pd
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv"
)
fig = px.scatter_map (df, lat="lat", lon="long", size="cnt", zoom=3)
fig.update_traces (cluster=dict(enabled=True))
fig.show()
You can customize the font on go.Scattermap traces with textfont. For example, you can set the font family.
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 7/12

--- Página 8 ---
Font Weightimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers+text+lines" ,
    lon = [-75, -80, -50], lat = [45, 20, -20],
    marker = {'size': 20, 'symbol' : ["bus", "harbor" , "airport" ]},
    text = ["Bus", "Harbor" , "airport" ], textposition  = "bottom right" ,
    textfont  = dict(size=18, color="black", family="Open Sans Bold" )
    ))
fig.update_layout (
    map = {
        'style': "outdoors" , 'zoom': 0.7},
    showlegend  = False,)
fig.show()
go.Scattermap supports the following values for textfont.family:
'Metropolis Black Italic', 'Metropolis Black', 'Metropolis Bold Italic', 'Metropolis Bold', 'Metropolis Extra Bold Italic', 'Metropolis Extra Bold', 'Metropolis Extra Light Italic',
'Metropolis Extra Light', 'Metropolis Light Italic', 'Metropolis Light', 'Metropolis Medium Italic', 'Metropolis Medium', 'Metropolis Regular Italic', 'Metropolis Regular',
'Metropolis Semi Bold Italic', 'Metropolis Semi Bold', 'Metropolis Thin Italic', 'Metropolis Thin', 'Open Sans Bold Italic', 'Open Sans Bold', 'Open Sans Extrabold Italic',
'Open Sans Extrabold', 'Open Sans Italic', 'Open Sans Light Italic', 'Open Sans Light', 'Open Sans Regular', 'Open Sans Semibold Italic', 'Open Sans Semibold',
'Klokantech Noto Sans Bold', 'Klokantech Noto Sans CJK Bold', 'Klokantech Noto Sans CJK Regular', 'Klokantech Noto Sans Italic', and 'Klokantech Noto Sans Regular'.
New in 5.23
You can specify a numeric font weight on go.Scattermap with textfont.weight.
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 8/12

--- Página 9 ---
Mapbox Mapsimport plotly.graph_objects  as go
fig = go.Figure(go.Scattermap (
    mode = "markers+text+lines" ,
    lon = [-75, -80, -50], lat = [45, 20, -20],
    marker = dict(size=20, symbol=["bus", "harbor" , "airport" ]),
    text = ["Bus", "Harbor" , "airport" ], textposition  = "bottom right" ,
    textfont  = dict(size=18, color="black", weight=900)
    ))
fig.update_layout (
    map = dict(
        style="outdoors" , zoom=0.7),
    showlegend  = False,)
fig.show()
Mapbox traces are deprecated and may be removed in a future version of Plotly.py.
The earlier examples using px.scatter_map and go.Scattermap use  for rendering. These traces were introduced in
Plotly.py 5.24 and are now the recommended way to create scatter plots on tile-based maps. There are also traces that use :
px.scatter_mapbox and go.Scattermapbox
Maplibre (https://maplibre.org/maplibre-gl-js/docs/)
Mapbox (https://docs.mapbox.com)
To plot on Mapbox maps with Plotly you may need a Mapbox account and a public . See our 
 documentation for more information.
Mapbox Access Token (https://www.mapbox.com/studio)
Mapbox Map
Layers (/python/mapbox-layers/)
Here's the first example rewritten to use px.scatter_mapbox.
© , © 
contributors
CARTO (https://carto.com/about-carto/)
OpenStreetMap (http://www.openstreetmap.org/about/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 9/12

--- Página 10 ---
import plotly.express  as px
px.set_mapbox_access_token (open(".mapbox_token" ).read())
df = px.data.carshare ()
fig = px.scatter_mapbox (df, lat="centroid_lat" , lon="centroid_lon" ,     color="peak_hour" , size="car_hours" ,
                  color_continuous_scale =px.colors.cyclical .IceFire, size_max =15, zoom=10)
fig.show()
And here's an example using Graph Objects:/tmp/ipykernel_17752/3814773356.py:4: DeprecationWarning:
*scatter_mapbox* is deprecated! Use *scatter_map* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
05101520peak_hour
(https://www.mapbox.com/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 10/12

--- Página 11 ---
Referenceimport plotly.graph_objects  as go
mapbox_access_token  = open(".mapbox_token" ).read()
fig = go.Figure(go.Scattermapbox (
        lat=['45.5017' ],
        lon=['-73.5673' ],
        mode='markers' ,
        marker=go.scattermapbox .Marker(
            size=14
        ),
        text=['Montreal' ],
    ))
fig.update_layout (
    hovermode ='closest' ,
    mapbox=dict(
        accesstoken =mapbox_access_token ,
        bearing=0,
        center=go.layout.mapbox.Center(
            lat=45,
            lon=-73
        ),
        pitch=0,
        zoom=5
    )
)
fig.show()
See  or
 for more information about the attributes available.
function reference for px.scatter_map (https://plotly.com/python-api-reference/generated/plotly.express.scatter_map)
https://plotly.com/python/reference/scattermap/ (https://plotly.com/python/reference/scattermap/)
For Mapbox-based tile maps, see  or
.
function reference for px.scatter_mapbox (https://plotly.com/python-api-reference/generated/plotly.express.scatter_mapbox)
https://plotly.com/python/reference/scattermapbox/ (https://plotly.com/python/reference/scattermapbox/)/tmp/ipykernel_17752/3799354564.py:5: DeprecationWarning:
*scattermapbox* is deprecated! Use *scattermap* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
(https://www.mapbox.com/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 11/12

--- Página 12 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:37 Scatter plots on tile maps in Python
https://plotly.com/python/tile-scatter-maps/ 12/12</content>
      </file>
      <file name="Tile choropleth maps in Python.pdf" path="pyvy_2x4/Tile choropleth maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Introduction: main parameters for choropleth tile maps
1. GeoJSON-formatted geometry information where each feature has either an id field or some identifying value in properties.
2. A list of values indexed by feature identifier.
GeoJSON with feature.id &gt;  &gt; Tile Choropleth
Maps
Tile Choropleth Maps in Python
How to make tile choropleth maps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/tile-county-
choropleth.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a map composed of colored polygons. It is used to represent spatial variations of a quantity. This
page documents how to build tile-map choropleth maps, but you can also build .
Choropleth Map (https://en.wikipedia.org/wiki/Choropleth_map)
outline choropleth maps (/python/choropleth-maps)
Below we show how to create Choropleth Maps using either Plotly Express' px.choropleth_map function or the lower-level go.Choroplethmap graph object.
Making choropleth maps requires two main types of input:
The GeoJSON data is passed to the geojson argument, and the data is passed into the color argument of px.choropleth_map (z if using graph_objects), in the same
order as the IDs are passed into the location argument.
Note the geojson attribute can also be the URL to a GeoJSON file, which can speed up map rendering in certain cases.
Here we load a GeoJSON file containing the geometry information for US counties, where feature.id is a .
FIPS code (https://en.wikipedia.org/wiki/FIPS_county_code)
from urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
counties ["features" ][0]
{'type': 'Feature',
'properties': {'GEO_ID': '0500000US01001',
'STATE': '01',
'COUNTY': '001',
'NAME': 'Autauga',
'LSAD': 'County',
'CENSUSAREA': 594.436},
'geometry': {'type': 'Polygon',
'coordinates': [[[-86.496774, 32.344437],
[-86.717897, 32.402814],
[-86.814912, 32.340803],
[-86.890581, 32.502974],
[-86.917595, 32.664169],
[-86.71339, 32.661732],
[-86.714219, 32.705694],
[-86.413116, 32.707386],
[-86.411172, 32.409937],
[-86.496774, 32.344437]]]},
'id': '01001'}
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 1/10

--- Página 2 ---
Data indexed by id
Choropleth map using plotly.express and carto base mapHere we load unemployment data by county, also indexed by .
FIPS code (https://en.wikipedia.org/wiki/FIPS_county_code)
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
df.head()
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.choropleth_map, each row of the DataFrame is represented as a region of the choropleth.fipsunemp
0010015.3
1010035.4
2010058.6
3010076.6
4010095.5
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 2/10

--- Página 3 ---
Choropleth maps in Dashfrom urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.express  as px
fig = px.choropleth_map (df, geojson=counties , locations ='fips', color='unemp',
                           color_continuous_scale ="Viridis" ,
                           range_color =(0, 12),
                           map_style ="carto-positron" ,
                           zoom=3, center = {"lat": 37.0902, "lon": -95.7129},
                           opacity=0.5,
                           labels={'unemp':'unemployment rate' }
                          )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
024681012unemployment rate
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 3/10

--- Página 4 ---
Indexing by GeoJSON PropertiesSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
If the GeoJSON you are using either does not have an id field or you wish you use one of the keys in the properties field, you may use the featureidkey parameter to
specify where to match the values of locations.
In the following GeoJSON object/data-file pairing, the values of properties.district match the values of the district column:

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Polotical candidate voting pool analysis'),
    html.P("Select a candidate:"),
    dcc.RadioItems(
        id='candidate',
        options=["Joly", "Coderre", "Bergeron"],
        value="Coderre",
        inline=True
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("candidate", "value"))
def display_choropleth(candidate):
    df = px.data.election() # replace with your own data source
    geojson = px.data.election_geojson()DOWNLOAD
Polotical candidate voting pool analysis
Select a candidate:
JolyCoderreBergeron
© CARTO, © OpenStreetMap contributors0100020003000400050006000Coderre
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 4/10

--- Página 5 ---
Discrete Colorsimport plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
print(df["district" ][2])
print(geojson["features" ][0]["properties" ])
To use them together, we set locations to district and featureidkey to "properties.district". The color is set to the number of votes by the candidate named Bergeron.
import plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth_map (df, geojson=geojson, color="Bergeron" ,
                           locations ="district" , featureidkey ="properties.district" ,
                           center={"lat": 45.5517, "lon": -73.7073},
                           map_style ="carto-positron" , zoom=9)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
In addition to , we can  our choropleth maps by setting color to a non-numerical
column, like the name of the winner of an election.
continuous colors (/python/colorscales/)
discretely-color (/python/discrete-color/)11-Sault-au-Récollet
{'district': '11-Sault-au-Récollet'}
100020003000400050006000Bergeron
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 5/10

--- Página 6 ---
Using GeoPandas Data Framesimport plotly.express  as px
df = px.data.election ()
geojson = px.data.election_geojson ()
fig = px.choropleth_map (df, geojson=geojson, color="winner" ,
                           locations ="district" , featureidkey ="properties.district" ,
                           center={"lat": 45.5517, "lon": -73.7073},
                           map_style ="carto-positron" , zoom=9)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
px.choropleth_map accepts the geometry of a  data frame as the input to geojson if the geometry contains polygons.
GeoPandas (https://geopandas.org/)
winner
Joly
Coderre
Bergeron
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 6/10

--- Página 7 ---
Choropleth map using plotly.graph_objects and carto base mapimport plotly.express  as px
import geopandas  as gpd
df = px.data.election ()
geo_df = gpd.GeoDataFrame .from_features (
    px.data.election_geojson ()["features" ]
).merge(df, on="district" ).set_index ("district" )
fig = px.choropleth_map (geo_df,
                           geojson=geo_df.geometry ,
                           locations =geo_df.index,
                           color="Joly",
                           center={"lat": 45.5517, "lon": -73.7073},
                           map_style ="open-street-map" ,
                           zoom=8.5)
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Choroplethmap class from plotly.graph_objects (/python/graph-
objects/)
©  contributors
OpenStreetMap (https://www.openstreetmap.org/copyright)500100015002000250030003500Joly
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 7/10

--- Página 8 ---
Mapbox Mapsfrom urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.graph_objects  as go
fig = go.Figure(go.Choroplethmap (geojson=counties , locations =df.fips, z=df.unemp,
                                    colorscale ="Viridis" , zmin=0, zmax=12,
                                    marker_opacity =0.5, marker_line_width =0))
fig.update_layout (map_style ="carto-positron" ,
                  map_zoom =3, map_center  = {"lat": 37.0902, "lon": -95.7129})
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Mapbox traces are deprecated and may be removed in a future version of Plotly.py.
The earlier examples using px.choropleth_map and go.Choroplethmap use  for rendering. These traces were
introduced in Plotly.py 5.24 and are now the recommended way to create tile-based choropleth maps. There are also choropleth traces that use 
: px.choropleth_mapbox and go.Choroplethmapbox
Maplibre (https://maplibre.org/maplibre-gl-js/docs/)
Mapbox
(https://docs.mapbox.com)
To plot on Mapbox maps with Plotly you may need a Mapbox account and a public . See our 
 documentation for more information.
Mapbox Access Token (https://www.mapbox.com/studio)
Mapbox Map
Layers (/python/mapbox-layers/)
Here's an exmaple of using the Mapbox Light base map, which requires a free token.
024681012
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 8/10

--- Página 9 ---
Referencetoken = open(".mapbox_token" ).read() # you will need your own token
from urllib.request  import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json' ) as response :
    counties  = json.load(response )
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv" ,
                   dtype={"fips": str})
import plotly.graph_objects  as go
fig = go.Figure(go.Choroplethmapbox (geojson=counties , locations =df.fips, z=df.unemp,
                                    colorscale ="Viridis" , zmin=0, zmax=12, marker_line_width =0))
fig.update_layout (mapbox_style ="light", mapbox_accesstoken =token,
                  mapbox_zoom =3, mapbox_center  = {"lat": 37.0902, "lon": -95.7129})
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
See  or
 for more information about the attributes available.
function reference for px.choropleth_map (https://plotly.com/python-api-reference/generated/plotly.express.choropleth_map)
https://plotly.com/python/reference/choroplethmap/ (https://plotly.com/python/reference/choroplethmap/)
For (deprecated) Mapbox-based tile maps, see 
 or 
.
function reference for px.choropleth_mapbox (https://plotly.com/python-api-
reference/generated/plotly.express.choropleth_mapbox)
https://plotly.com/python/reference/choroplethmapbox/
(https://plotly.com/python/reference/choroplethmapbox/)/tmp/ipykernel_17706/3573937872.py:14: DeprecationWarning:
*choroplethmapbox* is deprecated! Use *choroplethmap* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
024681012
(https://www.mapbox.com/)
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 9/10

--- Página 10 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ss and
objects16/07/2025, 06:36 Tile choropleth maps in Python
https://plotly.com/python/tile-county-choropleth/ 10/10</content>
      </file>
      <file name="Tile map layers in Python.pdf" path="pyvy_2x4/Tile map layers in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt; Tile Map
Layers
Tile Map Layers in Python
How to make tile-based maps in Python with various base layers.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/tile-map-
layers.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 1/11

--- Página 2 ---
Tile Maps vs Outline Maps
Outline-based maps
Tile Map Renderers
Maplibre
layout.map.style defines the lowest layers of the map, also known as the "base map".
The various traces in data are by default rendered above the base map (although this can be controlled via the below attribute).
layout.map.layers is an array that defines more layers that are by default rendered above the traces in data (although this can also be controlled via the below
attribute.
Base Maps in layout.map.style.
"basic"
"carto-darkmatter"
"carto-darkmatter-nolabels"
"carto-positron"
"carto-positron-nolabels"
"carto-voyager"
"carto-voyager-nolabels"
"dark"
"light"
"open-street-map"
"outdoors"
"satellite"
"satellite-streets"
"streets"Plotly supports two different kinds of maps:
Tile-based maps (https://en.wikipedia.org/wiki/Tiled_web_map)
If your figure is created with a px.scatter_map, px_scatter_mapbox, px.line_map, px.line_mapbox, px.choropleth_map, px.choropleth_mapbox, px.density_map, or
px.density_mapbox function or otherwise contains one or more traces of type go.Scattermap, go.Scattermapbox, go.Choroplethmap, go.Choroplethmapbox,
go.Densitymap, or go.Densitymapbox, the layout.map or layout.mapbox object in your figure contains configuration information for the map itself.
Geo maps are outline-based maps. If your figure is created with a px.scatter_geo, px.line_geo or px.choropleth function or otherwise contains one or more traces of
type go.Scattergeo or go.Choropleth, the layout.geo object in your figure contains configuration information for the map itself.
This page documents tile-based maps, and the  describes how to configure outline-based maps.
Geo map documentation (/python/map-configuration/)
Tile-based traces in Plotly use Maplibre or Mapbox.
Maplibre-based traces (new in 5.24) are ones generated in Plotly Express using px.scatter_map, px.line_map, px.choropleth_map, px.density_map, or Graph Objects
using go.Scattermap, go.Choroplethmap, or go.Densitymap.
Mapbox-based traces are suffixed with mapbox, for example go.Scattermapbox. These are deprecated as of version 5.24 and we recommend using the Maplibre-
based traces.
New in 5.24
Maplibre-based tile maps have three different types of layers:
The accepted values for layout.map.style are one of:
"white-bg" - an empty white canvas which results in no external HTTP requests
A custom style URL. For example: 
https://tiles.stadiamaps.com/styles/stamen_watercolor.json?api_key=YOUR-API-KEY
(https://tiles.stadiamaps.com/styles/stamen_watercolor.json?api_key=YOUR-API-KEY)
A Map Style object as defined at 
https://maplibre.org/maplibre-style-spec/ (https://maplibre.org/maplibre-style-spec/)
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 2/11

--- Página 3 ---
OpenStreetMap tiles
Using layout.map.layers to Specify a Base Map
Base Tiles from the USGS: no token neededHere is a simple map rendered with OpenStreetMaps tiles.
import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (map_style ="open-street-map" )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
If you have access to your own private tile servers, or wish to use a tile server not included in the list above, the recommended approach is to set layout.map.style to
"white-bg" and to use layout.map.layers with below to specify a custom base map.
If you omit the below attribute when using this approach, your data will likely be hidden by fully-opaque raster tiles!
Here is an example of a map which uses a public USGS imagery map, specified in layout.map.layers, and which is rendered below the data layer.
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 3/11

--- Página 4 ---
Base Tiles from the USGS, radar overlay from Environment Canadaimport pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (
    map_style ="white-bg" ,
    map_layers =[
        {
            "below": 'traces' ,
            "sourcetype" : "raster" ,
            "sourceattribution" : "United States Geological Survey" ,
            "source" : [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/ {z}/{y}/{x}"
            ]
        }
      ])
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Here is the same example, with in addition, a WMS layer from Environment Canada which displays near-real-time radar imagery in partly-transparent raster tiles,
rendered above the go.Scattermap trace, as is the default:
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 4/11

--- Página 5 ---
Dark tiles exampleimport pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (
    map_style ="white-bg" ,
    map_layers =[
        {
            "below": 'traces' ,
            "sourcetype" : "raster" ,
            "sourceattribution" : "United States Geological Survey" ,
            "source" : [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/ {z}/{y}/{x}"
            ]
        },
        {
            "sourcetype" : "raster" ,
            "sourceattribution" : "Government of Canada" ,
            "source" : ["https://geo.weather.gc.ca/geomet/?"
                       "SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX={bbox-epsg-3857}&amp;CRS=EPSG:3857"
                       "&amp;WIDTH=1000&amp;HEIGHT=1000&amp;LAYERS=RADAR_1KM_RDBR&amp;TILED=true&amp;FORMAT=image/png" ],
        }
      ])
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Here is a map rendered with the "dark" style.
import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_map (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (map_style ="dark")
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 5/11

--- Página 6 ---
Stamen Watercolor using a Custom Style URL
Mapbox
How Layers Work in Mapbox Tile Maps
1. layout.mapbox.style defines is the lowest layers, also known as your "base map"
2. The various traces in data are by default rendered above the base map (although this can be controlled via the below attribute).
3. layout.mapbox.layers is an array that defines more layers that are by default rendered above the traces in data (although this can also be controlled via the
below attribute).
Mapbox Access Tokens and When You Need Them
Base Maps in layout.mapbox.style
"white-bg" yields an empty white canvas which results in no external HTTP requests
"open-street-map", "carto-positron", and "carto-darkmatter" yield maps composed of raster tiles from various public tile servers which do not require signups or
access tokens.
"basic", "streets", "outdoors", "light", "dark", "satellite", or "satellite-streets" yield maps composed of vector tiles from the Mapbox service, and do require a
Mapbox Access Token or an on-premise Mapbox installation.
"stamen-terrain", "stamen-toner" or "stamen-watercolor" yield maps composed of raster tiles from the , and
require a Stadia Maps account and token.
A Mapbox service style URL, which requires a Mapbox Access Token or an on-premise Mapbox installation.
A Mapbox Style object as defined at 
OpenStreetMap tiles: no token neededHere's an example of using a custom style URL that points to the  service to use the
stamen_watercolor base map.
Stadia Maps (https://docs.stadiamaps.com/map-styles/stamen-watercolor)
import pandas as pd
quakes = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv' )
import plotly.graph_objects  as go
fig = go.Figure(go.Densitymap (lat=quakes.Latitude , lon=quakes.Longitude , z=quakes.Magnitude ,
                                 radius=10))
fig.update_layout (map_style ="https://tiles.stadiamaps.com/styles/stamen_watercolor.json?api_key=YOUR-API-KEY" , map_center_lon =180)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Mapbox traces are deprecated and may be removed in a future version of Plotly.py.
Mapbox tile maps are composed of various layers, of three different types:
The word "mapbox" in the trace names and layout.mapbox refers to the Mapbox GL JS open-source library, which is integrated into Plotly.py.
If your basemap in layout.mapbox.style uses data from the Mapbox service, then you will need to register for a free account at 
 and obtain a Mapbox Access token. This token should be provided in layout.mapbox.access_token (or, if using Plotly Express, via the
px.set_mapbox_access_token() configuration function).
https://mapbox.com/
(https://mapbox.com/)
If you basemap in layout.mapbox.style uses maps from the  (see below for details), you'll need to register for a
Stadia Maps account and token.
Stadia Maps service (https://www.stadiamaps.com)
The accepted values for layout.mapbox.style are one of:
Stadia Maps service (https://www.stadiamaps.com)
https://docs.mapbox.com/mapbox-gl-js/style-spec/ (https://docs.mapbox.com/mapbox-gl-js/style-spec/)
Here is a simple map rendered with OpenStreetMaps tiles, without needing a Mapbox Access Token:
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 6/11

--- Página 7 ---
Using layout.mapbox.layers to Specify a Base Map
Base Tiles from the USGS: no token neededimport pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_mapbox (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (mapbox_style ="open-street-map" )
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
If you have access to your own private tile servers, or wish to use a tile server not included in the list above, the recommended approach is to set layout.mapbox.style
to "white-bg" and to use layout.mapbox.layers with below to specify a custom base map.
If you omit the below attribute when using this approach, your data will likely be hidden by fully-opaque raster tiles!
Here is an example of a map which uses a public USGS imagery map, specified in layout.mapbox.layers, and which is rendered below the data layer./tmp/ipykernel_17712/2481563717.py:6: DeprecationWarning:
*scatter_mapbox* is deprecated! Use *scatter_map* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 7/11

--- Página 8 ---
Dark tiles from Mapbox service: free token neededimport pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_mapbox (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (
    mapbox_style ="white-bg" ,
    mapbox_layers =[
        {
            "below": 'traces' ,
            "sourcetype" : "raster" ,
            "sourceattribution" : "United States Geological Survey" ,
            "source" : [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/ {z}/{y}/{x}"
            ]
        }
      ])
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
Here is a map rendered with the "dark" style from the Mapbox service, which requires an Access Token:/tmp/ipykernel_17712/1777570246.py:6: DeprecationWarning:
*scatter_mapbox* is deprecated! Use *scatter_map* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 8/11

--- Página 9 ---
Setting Map Boundstoken = open(".mapbox_token" ).read() # you will need your own token
import pandas as pd
us_cities  = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv" )
import plotly.express  as px
fig = px.scatter_mapbox (us_cities , lat="lat", lon="lon", hover_name ="City", hover_data =["State", "Population" ],
                        color_discrete_sequence =["fuchsia" ], zoom=3, height=300)
fig.update_layout (mapbox_style ="dark", mapbox_accesstoken =token)
fig.update_layout (margin={"r":0,"t":0,"l":0,"b":0})
fig.show()
New in 5.11
Set bounds for a map to specify an area outside which a user interacting with the map can't pan or zoom. Here we set a maximum longitude of -180, a minimum
longitude of -50, a maximum latitude of 90, and a minimum latitude of 20./tmp/ipykernel_17712/373653669.py:8: DeprecationWarning:
*scatter_mapbox* is deprecated! Use *scatter_map* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/
(https://www.mapbox.com/)
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 9/11

--- Página 10 ---
Reference
What About Dash?import plotly.express  as px
import pandas as pd
us_cities  = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv"
)
fig = px.scatter_map (
    us_cities ,
    lat="lat",
    lon="lon",
    hover_name ="City",
    hover_data =["State", "Population" ],
    color_discrete_sequence =["fuchsia" ],
    zoom=3,
    height=300,
)
fig.update_layout (map_style ="open-street-map" )
fig.update_layout (margin={"r": 0, "t": 0, "l": 0, "b": 0})
fig.update_layout (map_bounds ={"west": -180, "east": -50, "south": 20, "north": 90})
fig.show()
See  for more information and options on Maplibre-based tile
maps and  for Mapbox-based tile maps.
https://plotly.com/python/reference/layout/map/ (https://plotly.com/python/reference/layout/map/)
https://plotly.com/python/reference/layout/mapbox/ (https://plotly.com/python/reference/layout/mapbox/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 10/11

--- Página 11 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
a Base
needed
rlay
Style
aps
You Need
ded
cify a
needed
e token16/07/2025, 06:37 Tile map layers in Python
https://plotly.com/python/tile-map-layers/ 11/11</content>
      </file>
      <file name="Usa county choropleth maps in Python.pdf" path="pyvy_2x4/Usa county choropleth maps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Deprecation warning
Required Packages
conda install plotly conda install geopandas
FIPS and Values &gt;  &gt; USA County
Choropleth Maps
USA County Choropleth Maps in Python
How to create colormaped representations of USA counties by FIPS values in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Maps (/python/maps)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/county-
choropleth.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page describes a  for creating map-like figures using . This is no
longer the recommended way to make county-level choropleth maps, instead we recommend using a 
 or the alternative .
legacy "figure factory" method (/python/figure-factories/)
self-filled scatter traces (/python/shapes)
GeoJSON-based approach to making outline choropleth
maps (/python/choropleth-maps/)
tile-based choropleth maps (/python/tile-county-choropleth)
plotly_geo, geopandas, pyshp and shapely must be installed for this figure factory to run.
Run the following commands to install the correct versions of the following modules:
!pip install plotly-geo ==1.0.0
!pip install geopandas ==0.8.1
!pip install pyshp==2.1.2
!pip install shapely==1.7.1
If you are using Windows, follow this post to properly install geopandas and dependencies: 
. If you are using Anaconda, do not use PIP to install the packages above. Instead use conda to install
them:
http://geoffboeing.com/2014/09/using-geopandas-windows/
(http://geoffboeing.com/2014/09/using-geopandas-windows/)
Every US state and county has an assigned ID regulated by the US Federal Government under the term FIPS (Federal Information Processing Standards) codes. There
are state codes and county codes: the 2016 state and county FIPS codes can be found at the 
.
US Census Website (https://www.census.gov/geographies/reference-
files/2016/demo/popest/2016-fips.html)
Combine a state FIPS code (eg. 06 for California) with a county FIPS code of the state (eg. 059 for Orange county) and this new state-county FIPS code (06059) uniquely
refers to the specified state and county.
ff.create_choropleth only needs a list of FIPS codes and a list of values. Each FIPS code points to one county and each corresponding value in values determines the
color of the county.Collecting plotly-geo==1.0.0
Downloading plotly_geo-1.0.0-py3-none-any.whl.metadata (834 bytes)
Downloading plotly_geo-1.0.0-py3-none-any.whl (23.7 MB)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 23.7/23.7 MB156.9 MB/s eta 0:00:00
Installing collected packages: plotly-geo
Successfully installed plotly-geo-1.0.0
Collecting geopandas==0.8.1
Downloading geopandas-0.8.1-py2.py3-none-any.whl.metadata (892 bytes)
Collecting pandas&gt;=0.23.0 (from geopandas==0.8.1)
Downloading pandas-2.3.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (91 kB)
Collecting shapely (from geopandas==0.8.1)
Downloading shapely-2.0.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
Collectingfiona(fromgeopandas==081)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 1/11

--- Página 2 ---
Simple Example
Change the ScopeA simple example of this is a choropleth a few counties in California:
import plotly.figure_factory  as ff
fips = ['06021', '06023', '06027',
        '06029', '06033', '06059',
        '06047', '06049', '06051',
        '06055', '06061']
values = range(len(fips))
fig = ff.create_choropleth (fips=fips, values=values)
fig.layout.template  = None
fig.show()
Even if your FIPS values belong to a single state, the scope defaults to the entire United States as displayed in the example above. Changing the scope of the
choropleth shifts the zoom and position of the USA map. You can define the scope with a list of state names and the zoom will automatically adjust to include the
state outlines of the selected states.
By default scope is set to ['USA'] which the API treats as identical to passing a list of all 50 state names:
['AK', 'AL', 'CA', ...]
State abbreviations (eg. CA) or the proper names (eg. California) as strings are accepted. If the state name is not recognized, the API will throw a Warning and indicate
which FIPS values were ignored.
Another param used in the example below is binning_endpoints. If your values is a list of numbers, you can bin your values into half-open intervals on the real line./home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
10
9
8
7
6
5
4
3
2
1
0
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 2/11

--- Página 3 ---
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'California' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = [
    'rgb(193, 193, 193)' ,
    'rgb(239,239,239)' ,
    'rgb(195, 196, 222)' ,
    'rgb(144,148,194)' ,
    'rgb(101,104,168)' ,
    'rgb(65, 53, 132)'
]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada' , 'Oregon' , ' Idaho' ],
    binning_endpoints =[14348, 63983, 134827, 426762, 2081313], colorscale =colorscale ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5}, round_legend_values =True,
    legend=dict(
      title=dict(
        text='Population by County'
      )
    ),
    title=dict(
      text='California and Nearby States'
    )
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 3/11

--- Página 4 ---
Single State/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
Population by County
&lt; 14,348
14,348 - 63,983
63,983 - 134,827
134,827 - 426,762
426,762 - 2,081,313
&gt; 2,081,313California and Nearby States
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 4/11

--- Página 5 ---
Multiple Statesimport plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ] == 'Florida' ]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
endpts = list(np.mgrid[min(values):max(values):4j])
colorscale  = ["#030512" ,"#1d1d3b" ,"#323268" ,"#3d4b94" ,"#3e6ab0" ,
              "#4989bc" ,"#60a7c7" ,"#85c5d3" ,"#b7e0e4" ,"#eafcfd" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=['Florida' ], show_state_data =True,
    colorscale =colorscale , binning_endpoints =endpts, round_legend_values =True,
    plot_bgcolor ='rgb(229,229,229)' ,
    paper_bgcolor ='rgb(229,229,229)' ,
    legend_title ='Population by County' ,
    county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5},
    exponent_format =True,
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1.73M - 2.59M
869.20K - 1.73M
8.28K - 869.20K
&lt; 8.28KPopulation by County
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 5/11

--- Página 6 ---
import plotly.figure_factory  as ff
import pandas as pd
NE_states  = ['Connecticut' , 'Maine', 'Massachusetts' , 'New Hampshire' , 'Rhode Island' , 'Vermont' ]
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv' )
df_sample_r  = df_sample [df_sample ['STNAME' ].isin(NE_states )]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = [
    'rgb(68.0, 1.0, 84.0)' ,
    'rgb(66.0, 64.0, 134.0)' ,
    'rgb(38.0, 130.0, 142.0)' ,
    'rgb(63.0, 188.0, 115.0)' ,
    'rgb(216.0, 226.0, 25.0)'
]
fig = ff.create_choropleth (
    fips=fips, values=values,
    scope=NE_states , county_outline ={'color': 'rgb(255,255,255)' , 'width': 0.5},
    legend_title ='Population per county'
)
fig.update_layout (
    legend_x  = 0,
    annotations  = {'x': -0.12, 'xanchor' : 'left'}
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
1537215
933835
897259
862813
806163
755618
744426
681845
628323
551082
499759
465923
402922
297820
283921
274170
215423
199005
187530
165602Population per county
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 6/11

--- Página 7 ---
Simplify County, State Lines
simplify_county determines the simplification factor for the counties. The larger the number, the fewer vertices and edges each polygon has. See
 for more information.
simplify_state simplifies the state outline polygon. See the  for more information.
Default for both simplify_county and simplify_state is 0.02Below is a choropleth that uses several other parameters. For a full list of all available params call help(ff.create_choropleth)
http://toblerity.org/shapely/manual.html#object.simplify (http://toblerity.org/shapely/manual.html#object.simplify)
documentation (http://toblerity.org/shapely/manual.html#object.simplify)
Note: This choropleth uses a divergent categorical colorscale. See  for other cool colorscales.
http://react-colorscales.getforge.io/ (http://react-colorscales.getforge.io/)
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 7/11

--- Página 8 ---
import plotly.figure_factory  as ff
import pandas as pd
scope = ['Oregon' ]
df_sample  = pd.read_csv (
    'https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv'
)
df_sample_r  = df_sample [df_sample ['STNAME' ].isin(scope)]
values = df_sample_r ['TOT_POP' ].tolist()
fips = df_sample_r ['FIPS'].tolist()
colorscale  = ["#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ,
              "#8dd3c7" , "#ffffb3" , "#bebada" , "#fb8072" ,
              "#80b1d3" , "#fdb462" , "#b3de69" , "#fccde5" ,
              "#d9d9d9" , "#bc80bd" , "#ccebc5" , "#ffed6f" ]
fig = ff.create_choropleth (
    fips=fips, values=values, scope=scope,
    colorscale =colorscale , round_legend_values =True,
    simplify_county =0, simplify_state =0,
    county_outline ={'color': 'rgb(15, 15, 55)' , 'width': 0.5},
    state_outline ={'width': 1},
    legend_title ='pop. per county' ,
    title='Oregon'
)
fig.layout.template  = None
fig.show()
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 8/11

--- Página 9 ---
The Entire USA/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:774: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
759256
547672
383857
354542
319985
206412
162277
118360
107164
100255
86430
82930
76820
76353
65912
62534
49286
46151
37301
30630Oregon
pop. per county
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 9/11

--- Página 10 ---
import plotly.figure_factory  as ff
import numpy as np
import pandas as pd
df_sample  = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv' )
df_sample ['State FIPS Code' ] = df_sample ['State FIPS Code' ].apply(lambda x: str(x).zfill(2))
df_sample ['County FIPS Code' ] = df_sample ['County FIPS Code' ].apply(lambda x: str(x).zfill(3))
df_sample ['FIPS'] = df_sample ['State FIPS Code' ] + df_sample ['County FIPS Code' ]
colorscale  = ["#f7fbff" ,"#ebf3fb" ,"#deebf7" ,"#d2e3f3" ,"#c6dbef" ,"#b3d2e9" ,"#9ecae1" ,
              "#85bcdb" ,"#6baed6" ,"#57a0ce" ,"#4292c6" ,"#3082be" ,"#2171b5" ,"#1361a9" ,
              "#08519c" ,"#0b4083" ,"#08306b" ]
endpts = list(np.linspace (1, 12, len(colorscale ) - 1))
fips = df_sample ['FIPS'].tolist()
values = df_sample ['Unemployment Rate (%)' ].tolist()
fig = ff.create_choropleth (
    fips=fips, values=values,
    binning_endpoints =endpts,
    colorscale =colorscale ,
    show_state_data =False,
    show_hover =True, centroid_marker ={'opacity' : 0},
    asp=2.9, title='USA by Unemployment %' ,
    legend_title ='% unemployed'
)
fig.layout.template  = None
fig.show()
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:808: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:330: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:357: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:847: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
/home/circleci/project/doc/.venv/lib/python3.9/site-packages/plotly/figure_factory/_county_choropleth.py:852: ShapelyDeprecationWarning:
The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.
&gt; 12.0
11.27 - 12.0
10.53 - 11.27
9.8 - 10.53
9.07 - 9.8
8.33 - 9.07
7.6 - 8.33
6.87 - 7.6
6.13 - 6.87
5.4 - 6.13
4.67 - 5.4
3.93 - 4.67
3.2 - 3.93
2.47 - 3.2
1.73 - 2.47
1.0 - 1.73USA by Unemployment %
% unemployed
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 10/11

--- Página 11 ---
Reference
What About Dash?Also see tile county choropleths made in Python: 
https://plotly.com/python/tile-county-choropleth/ (https://plotly.com/python/tile-county-choropleth/)
For more info on ff.create_choropleth(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_choropleth.html)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:37 Usa county choropleth maps in Python
https://plotly.com/python/county-choropleth/ 11/11</content>
      </file>
    </category>
    <category name="pyvy_2x5" path="pyvy_2x5">
      <file name="Annotated heatmaps in Python.pdf" path="pyvy_2x5/Annotated heatmaps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Annotated Heatmaps with Plotly Express
Basic Annotated Heatmap for z-annotations &gt;  &gt;
Annotated Heatmaps
Annotated Heatmaps in Python
How to make Annotated Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/annotated-heatmap.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
New in v5.5
As of version 5.5.0 of plotly, the recommended way to  rather than the now-deprecated
create_annotated_heatmap figure factory documented below for historical reasons.
display annotated heatmaps is to use px.imshow() (/python/heatmaps/)
New in v5.5
After creating a figure with px.imshow, you can add z-annotations with .update_traces(texttemplate="%{z}").
import plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 1/9

--- Página 2 ---
Deprecated Figure Factory
Simple Annotated Heatmap
Custom Text and X &amp; Y LabelsThe remaining examples show how to create Annotated Heatmaps with the deprecated create_annotated_heatmap .
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = ff.create_annotated_heatmap (z)
fig.show()
set annotation_text to a matrix with the same dimensions as z
WARNING: this legacy figure factory requires the y array to be provided in reverse order, and will map the z_text to the z values in reverse order. The use of
the px.imshow() version below is highly recommended
0.1 0.3 0.5 0.7 0.91 0.8 0.6 0.4 0.20.2 0 0.5 0.7 0.90.9 0.8 0.4 0.2 00.3 0.4 0.5 0.7 1
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 2/9

--- Página 3 ---
import plotly.figure_factory  as ff
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game Three' , 'Game Two' , 'Game One' ]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = ff.create_annotated_heatmap (z, x=x, y=y, annotation_text =z_text, colorscale ='Viridis' )
fig.show()
Here is the same figure using px.imshow()
Team A Team B Team C
Game Three  Game Two  Game One  
Win Lose WinLose Lose WinWin Win Lose
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 3/9

--- Página 4 ---
Annotated Heatmap with numpyimport plotly.express  as px
x = ['Team A' , 'Team B' , 'Team C' ]
y = ['Game One' , 'Game Two' , 'Game Three' ]
z = [[.1, .3, .5],
     [1.0, .8, .6],
     [.6, .4, .2]]
z_text = [['Win', 'Lose', 'Win'],
          ['Lose', 'Lose', 'Win'],
          ['Win', 'Win', 'Lose']]
fig = px.imshow(z, x=x, y=y, color_continuous_scale ='Viridis' , aspect="auto")
fig.update_traces (text=z_text, texttemplate ="%{text}")
fig.update_xaxes (side="top")
fig.show()
Win Lose Win
Lose Lose Win
Win Win LoseTeam A Team B Team C
Game ThreeGame TwoGame One
0.10.20.30.40.50.60.70.80.91
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 4/9

--- Página 5 ---
import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
z = np.random.randn(20, 20)
z_text = np.around(z, decimals =2) # Only show rounded value (full value on hover)
fig = ff.create_annotated_heatmap (z, annotation_text =z_text, colorscale ='Greys',
                                  hoverinfo ='z')
# Make text size smaller
for i in range(len(fig.layout.annotations )):
    fig.layout.annotations [i].font.size = 8
fig.show()
Here is the same figure using px.imshow()
1.62-0.61-0.53-1.070.87-2.31.74-0.760.32-0.251.46-2.06-0.32-0.381.13-1.1-0.17-0.880.040.58-1.11.140.90.50.9-0.68-0.12-0.94-0.270.53-0.69-0.4-0.69-0.85-0.67-0.01-1.120.231.660.74-0.19-0.89-0.751.690.05-0.640.192.10.120.620.3-0.35-1.14-0.35-0.210.590.840.930.290.89-0.751.250.51-0.30.49-0.081.131.522.19-1.4-1.44-0.50.160.880.32-2.02-0.310.830.230.76-0.22-0.20.190.410.20.12-0.670.380.121.131.20.19-0.38-0.640.420.08-0.340.04-0.620.7-0.451.220.40.59-1.090.170.74-0.95-0.270.03-1.370.320.85-0.860.35-1.31-0.04-1.621.120.41-0.02-0.781.271.97-1.861.241.630.34-1.20.86-0.18-0.6-1.230.550.79-0.620.52-1.140.80.05-0.19-0.10.870.750.530.140.080.620.230.68-0.31-2.431.042.190.44-0.1-0.14-0.120.02-1.12-0.52-1.00.25-0.30.5-0.170.990.212.19-1.9-0.650.92.53-0.250.04-0.231.33-0.290.68-0.32-1.270.310.51.29-0.11-0.620.560.240.28-0.071.160.371.91.110.66-1.630.60.420.811.04-0.40.82-0.561.95-1.33-1.76-1.65-0.89-1.121.96-0.33-1.341.11-0.59-1.240.880.62-0.431.410.131.620.51.560.11-1.222.45-0.55-0.2-0.7-0.20.240.20.661.79-0.12-1.23-1.18-0.67-1.670.83-0.5-0.31-0.0-1.4-0.860.670.62-0.441.81-1.31-0.34-0.23-2.791.940.37-1.042.050.590.43-0.610.11-1.530.8-0.370.131.20.280.260.28-0.730.841.540.760.88-0.88-0.87-1.441.23-0.251.4-0.78-0.440.10.920.060.210.020.18-1.120.08-0.19-0.060.49-0.68-0.08-0.30.420.78-0.960.592.07-1.47-0.83-0.88-0.281.620.01-0.690.62-0.61.120.311.39-0.663.030.820.65-0.05-0.73-0.87-0.14-0.80.28-0.830.620.96-0.711.19-0.241.160.441.12-1.0-0.111.45-0.62-2.04-1.94-2.51-2.11-0.411.28-0.440.32-0.110.01-0.17-0.170.46-1.181.010.92-0.20.81-0.7-0.540.16-0.19-0.45-0.67-0.560.94-1.940.35-0.240.730.52-2.780.580.320.02-0.470.85-0.411.830.562.14-0.79-1.760.710.850.04-1.54-0.450.62-0.18-0.12-0.18-0.93-0.53-1.431.77-0.480.48-1.020.79-1.870.92-0.042.11
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 5/9

--- Página 6 ---
import plotly.express  as px
import numpy as np
np.random.seed(1)
z = np.random.randn(20, 20)
fig = px.imshow(z, text_auto =".2f", color_continuous_scale ='Greys', aspect="auto")
fig.show()
Here is a fairly contrived example showing how one can display a periodic table with custom text and hover using ff.create_annotated_heatmap() (scroll below to see
the px.imshow() equivalent).
1.62-0.61-0.53-1.070.87-2.301.74-0.760.32-0.251.46-2.06-0.32-0.381.13-1.10-0.17-0.880.040.58
-1.101.140.900.500.90-0.68-0.12-0.94-0.270.53-0.69-0.40-0.69-0.85-0.67-0.01-1.120.231.660.74
-0.19-0.89-0.751.690.05-0.640.192.100.120.620.30-0.35-1.14-0.35-0.210.590.840.930.290.89
-0.751.250.51-0.300.49-0.081.131.522.19-1.40-1.44-0.500.160.880.32-2.02-0.310.830.230.76
-0.22-0.200.190.410.200.12-0.670.380.121.131.200.19-0.38-0.640.420.08-0.340.04-0.620.70
-0.451.220.400.59-1.090.170.74-0.95-0.270.03-1.370.320.85-0.860.35-1.31-0.04-1.621.120.41
-0.02-0.781.271.97-1.861.241.630.34-1.200.86-0.18-0.60-1.230.550.79-0.620.52-1.140.800.05
-0.19-0.100.870.750.530.140.080.620.230.68-0.31-2.431.042.190.44-0.10-0.14-0.120.02-1.12
-0.52-1.000.25-0.300.50-0.170.990.212.19-1.90-0.650.902.53-0.250.04-0.231.33-0.290.68-0.32
-1.270.310.501.29-0.11-0.620.560.240.28-0.071.160.371.901.110.66-1.630.600.420.811.04
-0.400.82-0.561.95-1.33-1.76-1.65-0.89-1.121.96-0.33-1.341.11-0.59-1.240.880.62-0.431.410.13
1.620.501.560.11-1.222.45-0.55-0.20-0.70-0.200.240.200.661.79-0.12-1.23-1.18-0.67-1.670.83
-0.50-0.310.00-1.40-0.860.670.62-0.441.81-1.31-0.34-0.23-2.791.940.37-1.042.050.590.43-0.61
0.11-1.530.80-0.370.131.200.280.260.28-0.730.841.540.760.88-0.88-0.87-1.441.23-0.251.40
-0.78-0.440.100.920.060.210.020.18-1.120.08-0.19-0.060.49-0.68-0.08-0.300.420.78-0.960.59
2.07-1.47-0.83-0.88-0.281.620.01-0.690.62-0.601.120.311.39-0.663.030.820.65-0.05-0.73-0.87
-0.14-0.800.28-0.830.620.96-0.711.19-0.241.160.441.12-1.00-0.111.45-0.62-2.04-1.94-2.51-2.11
-0.411.28-0.440.32-0.110.01-0.17-0.170.46-1.181.010.92-0.200.81-0.70-0.540.16-0.19-0.45-0.67
-0.560.94-1.940.35-0.240.730.52-2.780.580.320.02-0.470.85-0.411.830.562.14-0.79-1.760.71
0.850.04-1.54-0.450.62-0.18-0.12-0.18-0.93-0.53-1.431.77-0.480.48-1.020.79-1.870.92-0.042.11
0 5 10 15151050
−2−10123
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 6/9

--- Página 7 ---
# Periodic Table Data
symbol = [['H', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'He'],
         ['Li', 'Be', '', '', '', '', '', '', '', '', '', '', 'B', 'C', 'N', 'O', 'F', 'Ne'],
         ['Na', 'Mg', '', '', '', '', '', '', '', '', '', '', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar'],
         ['K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr'],
         ['Rb ', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe' ],
         ['Cs', 'Ba', '', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn' ],
         ['Fr', 'Ra', '', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Uut', 'Fl', 'Uup', 'Lv', 'Uus', 'Uuo'],
         ['', '', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', ''],
         ['', '', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', '' ],
         ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
         ['', 'Alkali Metal' , '', '', 'Transition Metal' , '', '', 'Actinide' , '', '', 'Semimetal' , '', '', 'Halogen' , '', '', '', ''],
         ['', 'Alkaline Metal' , '', '', 'Lanthanide' , '', '', 'Basic Metal' , '', '', 'Nonmetal' , '', '', 'Noble Gas' , '', '', '', '']]
element = [['Hydrogen' , '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Helium' ],
           ['Lithium' , 'Beryllium' , '', '', '', '', '', '', '', '', '', '', 'Boron', 'Carbon' , 'Nitrogen' , 'Oxygen' , 'Fluorine' , 'Neon'],
           ['Sodium' , 'Magnesium' , '', '', '', '', '', '', '', '', '', '', 'Aluminium' , 'Silicon' , 'Phosphorus' , 'Sulfur' , 'Chlorine' , 'Argon'],
           ['Potassium' , 'Calcium' , 'Scandium' , 'Titanium' , 'Vanadium' , 'Chromium' ,  'Manganese' , 'Iron', 'Cobalt' , 'Nickel' , 'Copper' , 'Zinc', 'Ga
llium', 'Germanium' , 'Arsenic' , 'Selenium' , 'Bromine' , 'Krypton' ],
           ['Rubidium' , 'Strontium' , 'Yttrium' , 'Zirconium' , 'Niobium' , 'Molybdenum' , 'Technetium' , 'Ruthenium' , 'Rhodium' , 'Palladium' , 'Silver' , 
'Cadmium' , 'Indium' , 'Tin', 'Antimony' , 'Tellurium' , 'Iodine' , 'Xenon'],
           ['Cesium' , 'Barium' , '',  'Hafnium' , 'Tantalum' , 'Tungsten' , 'Rhenium' , 'Osmium' , 'Iridium' , 'Platinum' , 'Gold', 'Mercury' , 'Thallium' , 
'Lead', 'Bismuth' , 'Polonium' , 'Astatine' , 'Radon'],
           ['Francium' , 'Radium' , '', 'Rutherfordium' ,'Dubnium' ,'Seaborgium' ,'Bohrium' ,'Hassium' ,'Meitnerium' ,'Darmstadtium' ,'Roentgenium' ,'Coperni
cium','Ununtrium' ,'Ununquadium' ,'Ununpentium' ,'Ununhexium' ,'Ununseptium' ,'Ununoctium' ],
           ['', '',  'Lanthanum' , 'Cerium' , 'Praseodymium' , 'Neodymium' , 'Promethium' , 'Samarium' , 'Europium' , 'Gadolinium' , 'Terbium' , 'Dysprosiu
m', 'Holmium' , 'Erbium' , 'Thulium' , 'Ytterbium' , 'Lutetium' , ''],
           ['', '', 'Actinium' , 'Thorium' , 'Protactinium' , 'Uranium' , 'Neptunium' , 'Plutonium' , 'Americium' , 'Curium' , 'Berkelium' , 'Californium' , 
'Einsteinium' ,'Fermium'  ,'Mendelevium' , 'Nobelium' , 'Lawrencium' , '' ],
           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']]
atomic_mass  = [[ 1.00794, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  4.002602 ],
     [ 6.941, 9.012182 , .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  10.811, 12.0107, 14.0067, 15.9994, 18.9984032 , 20.1797],
     [ 22.98976928 , 24.3050, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  26.9815386 , 28.0855, 30.973762 , 32.065, 35.453, 39.948],
     [ 39.0983, 40.078, 44.955912 , 47.867, 50.9415, 51.9961, 54.938045 , 55.845, 58.933195 , 58.6934, 63.546, 65.38, 69.723, 72.64, 74.92160 , 78.96, 
79.904, 83.798],
     [ 85.4678, 87.62, 88.90585 , 91.224, 92.90638 , 95.96, 98, 101.07, 102.90550 , 106.42, 107.8682 , 112.411, 114.818, 118.710, 121.760, 127.60, 126.
90447, 131.293],
     [ 132.9054519 , 137.327, .0, 178.49, 180.94788 , 183.84, 186.207, 190.23, 192.217, 195.084, 196.966569 , 200.59, 204.3833 , 207.2, 208.98040 , 209, 
210, 222],
     [223, 226, .0, 267, 268, 271, 272, 270, 276, 281, 280, 285, 284, 289, 288, 293, 'unknown' , 294],
     [.0, .0, 138.90547 , 140.116, 140.90765 , 144.242, 145, 150.36, 151.964, 157.25, 158.92535 , 162.500, 164.93032 , 167.259, 168.93421 , 173.054, 17
4.9668, .0],
     [.0, .0, 227, 232.03806 , 231.03588 , 238.02891 , 237, 244, 243, 247, 247, 251, 252, 257, 258, 259, 262, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0]]
color = [[.8, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, 1.],
     [.1, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .7, .8, .8, .8, .9, 1.],
     [.1, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .6, .7, .8, .8, .9, 1],
     [.1, .2, .3, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .7, .8, .8, .9, 1.],
     [.1, .2, .3, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .7, .7, .9, 1.],
     [.1, .2, .4, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .6, .7, .9, 1.],
     [.1, .2, .5, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .6, .6, .9, 1.],
     [.0, .0, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .0],
     [.0, .0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .0],
     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],
     [.1, .1, .1, .3, .3, .3, .5, .5, .5, .7, .7, .7, .9, .9, .9, .0, .0, .0],
     [.2, .2, .2, .4, .4, .4, .6, .6, .6, .8, .8, .8, 1., 1., 1., .0, .0, .0]]
# Set Colorscale
colorscale =[[0.0, 'rgb(255,255,255)' ], [.2, 'rgb(255, 255, 153)' ],
            [.4, 'rgb(153, 255, 204)' ], [.6, 'rgb(179, 217, 255)' ],
            [.8, 'rgb(240, 179, 255)' ],[1.0, 'rgb(255, 77, 148)' ]]
# Display element name and atomic mass on hover
hover=[]
for x in range(len(symbol)):
    hover.append([i + '&lt;br&gt;' + 'Atomic Mass: '  + str(j) if i else ''
                      for i, j in zip(element[x], atomic_mass [x])])
import plotly.figure_factory  as ff
# Make Annotated Heatmap
fig = ff.create_annotated_heatmap (color[::-1], annotation_text =symbol[::-1], text=hover[::-1],
                                 colorscale =colorscale , font_colors =['black'], hoverinfo ='text')
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 7/9

--- Página 8 ---
fig.update_layout (
     title_text ='Periodic Table' ,
     margin=dict(l=10, r=10, t=10, b=10, pad=10),
     xaxis=dict(zeroline =False, showgrid =False),
     yaxis=dict(zeroline =False, showgrid =False, scaleanchor ="x"),
)
fig.show()
Here is the same output using px.imshow() with much less array manipulation:
import plotly.express  as px
import numpy as np
fig = px.imshow(color, color_continuous_scale =colorscale , aspect="auto",
               title='Periodic Table' )
fig.update_traces (
    text=symbol, texttemplate ="%{text}", textfont_size =12,
    customdata =np.moveaxis ([element, atomic_mass ], 0,-1),
    hovertemplate ="%{customdata[0]} &lt;br&gt;Atomic Mass: % {customdata[1]:.2f} &lt;extra&gt;&lt;/extra&gt;"
)
fig.update_xaxes (visible=False)
fig.update_yaxes (visible=False)
fig.update_coloraxes (showscale =False)
fig.show()
Periodic Table
Alkaline Metal Lanthanide Basic Metal Nonmetal Noble GasAlkali Metal Transition Metal Actinide Semimetal HalogenAcThPaUNpPuAmCmBkCfEsFmMdNoLrLaCePrNdPmSmEuGdTbDyHoErTmYbLuFrRa RfDbSgBhHsMtDsRgCnUutFlUupLvUusUuoCsBa HfTaWReOsIrPtAuHgTlPbBiPoAtRnRb SrYZrNbMoTcRuRhPdAgCdInSnSbTeIXeKCaScTiVCrMnFeCoNiCuZnGaGeAsSeBrKrNaMg AlSiPSClArLiBe BCNOFNeH He
H He
LiBe BCNOFNe
NaMg AlSiPSClAr
KCaScTiVCrMnFeCoNiCuZnGaGeAsSeBrKr
Rb SrYZrNbMoTcRuRhPdAgCdInSnSbTeIXe
CsBa HfTaWReOsIrPtAuHgTlPbBiPoAtRn
FrRa RfDbSgBhHsMtDsRgCnUutFlUupLvUusUuo
LaCePrNdPmSmEuGdTbDyHoErTmYbLu
AcThPaUNpPuAmCmBkCfEsFmMdNoLr
Alkali Metal Transition Metal Actinide Semimetal Halogen
Alkaline Metal Lanthanide Basic Metal Nonmetal Noble GasPeriodic Table
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 8/9

--- Página 9 ---
Reference
What About Dash?For more info on Plotly heatmaps, see: .
For more info on using colorscales with Plotly see: 
For more info on ff.create_annotated_heatmap(), see the 
https://plotly.com/python/reference/heatmap/ (https://plotly.com/python/reference/heatmap/)
https://plotly.com/python/heatmap-and-contour-colorscales/ (https://plotly.com/python/heatmap-and-contour-
colorscales/)
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_annotated_heatmap.html#plotly.figure_factory.create_annotated_heatmap)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
otations16/07/2025, 06:43 Annotated heatmaps in Python
https://plotly.com/python/annotated-heatmap/ 9/9</content>
      </file>
      <file name="Carpet contour plot in Python.pdf" path="pyvy_2x5/Carpet contour plot in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Carpet Plot &gt;  &gt; Carpet
Contour Plot
Carpet Contour Plot in Python
How to make carpet contour plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/carpet-
contour.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Set the x and y coordinates, using x and y attributes. If x coordinate values are omitted a cheater plot will be created. To save parameter values use a and b attributes.
To make changes to the axes, use aaxis or baxis attributes. For a more detailed list of axes attributes refer to 
.
python reference
(https://plotly.com/python/reference/carpet/#carpet-aaxis)
import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis = dict(
        tickprefix  = 'a = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    ),
    baxis = dict(
        tickprefix  = 'b = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    )
))
fig.show()
a = 0a = 1 a = 2a = 3
b = 4b = 5b = 6
1 2 3 4 50.511.522.533.54
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 1/6

--- Página 2 ---
Add Contours
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Contourcarpet (
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    z = [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],
    autocontour  = False,
    contours  = dict(
        start = 1,
        end = 14,
        size = 1
    ),
    line = dict(
        width = 2,
        smoothing  = 0
    ),
    colorbar  = dict(
       len = 0.4,
        y = 0.25
    )
))
fig.add_trace (go.Carpet(
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis = dict(
        tickprefix  = 'a = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    ),
    baxis = dict(
        tickprefix  = 'b = ',
        smoothing  = 0,
        minorgridcount  = 9,
        type = 'linear'
    )
))
fig.show()
a = 0a = 1 a = 2a = 3
b = 4b = 5b = 6
1 2 3 4 50.511.522.533.54
510
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 2/6

--- Página 3 ---
Add Multiple Traces
import plotly.graph_objects  as go
import json
from urllib.request  import urlopen
url = "https://raw.githubusercontent.com/bcdunbar/datasets/master/airfoil_data.json"
data = json.load(urlopen(url))
fig=go.Figure()
fig.add_trace (go.Carpet(
    a = data[0]['a'],
    b = data[0]['b'],
    x = data[0]['x'],
    y = data[0]['y'],
    baxis = dict(
      startline  = False,
      endline = False,
      showticklabels  = "none",
      smoothing  = 0,
      showgrid  = False
    ),
    aaxis = dict(
      startlinewidth  = 2,
      startline  = True,
      showticklabels  = "none",
      endline = True,
      showgrid  = False,
      endlinewidth  = 2,
      smoothing  = 0
    )
))
fig.add_trace (go.Contourcarpet (
    z = data[1]['z'],
    autocolorscale  = False,
    zmax = 1,
    name = "Pressure" ,
    colorscale  = "Viridis" ,
    zmin = -8,
    colorbar  = dict(
      y = 0,
      yanchor = "bottom" ,
      len = 0.75,
      title = dict(
        text="Pressure coefficient, c&lt;sub&gt;p&lt;/sub&gt;" ,
        side="right")
    ),
    contours  = dict(
      start = -1,
      size = 0.025,
      end = 1.000,
      showlines  = False
    ),
    line = dict(
      smoothing  = 0
    ),
    autocontour  = False,
    zauto = False
))
fig.add_trace (go.Contourcarpet (
    z = data[2]['z'],
    opacity = 0.300,
    showlegend  = True,
    name = "Streamlines" ,
    autocontour  = True,
    ncontours  = 50,
    contours  = dict(
      coloring  = "none"
    ),
    line = dict(
      color = "white",
      width = 1
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 3/6

--- Página 4 ---
    )
))
fig.add_trace (go.Contourcarpet (
    z = data[3]['z'],
    showlegend  = True,
    name = "Pressure&lt;br&gt;contours" ,
    autocontour  = False,
    line = dict(
        color = "rgba(0, 0, 0, 0.5)" ,
        smoothing  = 1
    ),
    contours  = dict(
        size = 0.250,
        start = -4,
        coloring  = "none",
        end = 1.000,
        showlines  = True
      )
))
fig.add_trace (go.Scatter(
    x = data[4]['x'],
    y = data[4]['y'],
    legendgroup  = "g1",
    name = "Surface&lt;br&gt;pressure" ,
    mode = "lines",
    hoverinfo  = "skip",
    line = dict(
      color = "rgba(255, 0, 0, 0.5)" ,
      width = 1,
      shape = "spline" ,
      smoothing  = 1
    ),
    fill = "toself" ,
    fillcolor  = "rgba(255, 0, 0, 0.2)"
))
fig.add_trace (go.Scatter(
    x = data[5]['x'],
    y = data[5]['y'],
    showlegend  = False,
    legendgroup  = "g1",
    mode = "lines",
    hoverinfo  = "skip",
    line = dict(
      color = "rgba(255, 0, 0, 0.3)" ,
      width = 1
    )
))
fig.add_trace (go.Scatter(
    x = data[6]['x'],
    y = data[6]['y'],
    showlegend  = False,
    legendgroup  = "g1",
    name = "cp",
    text = data[6]['text'],
    hoverinfo  = "text",
    mode = "lines",
    line = dict(
      color = "rgba(255, 0, 0, 0.2)" ,
      width = 0
    )
))
fig.update_layout (
    yaxis = dict(
      zeroline  = False,
      range = [-1.800,1.800],
      showgrid  = False
    ),
    dragmode  = "pan",
    height = 700,
    xaxis = dict(
      zeroline  = False,
      scaleratio  = 1,
      scaleanchor  = 'y',
      range = [-3.800,3.800],
      showgrid  = False
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 4/6

--- Página 5 ---
Reference    ),
    title = "Flow over a Karman-Trefftz airfoil" ,
    hovermode  = "closest" ,
    margin = dict(
      r = 60,
      b = 40,
      l = 40,
      t = 80
    ),
    width = 900
)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/contourcarpet/ (https://plotly.com/python/reference/contourcarpet/)
−3 −2 −1 0 1 2 3−3−2−10123
Streamlines
Pressure
contours
Surface
pressure
−8−7−6−5−4−3−2−101
Pressure coefficient, cpFlow over a Karman-Trefftz airfoil
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:44 Carpet contour plot in Python
https://plotly.com/python/carpet-contour/ 6/6</content>
      </file>
      <file name="Carpet plots in Python.pdf" path="pyvy_2x5/Carpet plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Set X and Y Coordinates
Add Parameter Values &gt;  &gt;
Carpet Plots
Carpet Plots in Python
How to make carpet plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/carpet-
plot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
To set the x and y coordinates use x and y attributes. If x coordinate values are omitted a cheater plot will be created. The plot below has a y array specified but
requires a and b parameter values before an axis may be plotted.
import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
))
fig.show()
To save parameter values use the a and b attributes.−1 0 1 2 3 4 5 6−101234
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 1/7

--- Página 2 ---
Add A and B axisimport plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
))
fig.show()
Use aaxis or baxis list to make changes to the axes. For a more detailed list of attributes refer to .
R reference (https://plotly.com/r/reference/carpet/#carpet-aaxis)44.556
123
246810
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 2/7

--- Página 3 ---
Alternate input formatimport plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
        tickprefix  = 'a = ',
        ticksuffix  = 'm',
        smoothing  = 1,
        minorgridcount  = 9,
    ),
    baxis = dict(
        tickprefix  = 'b = ',
        ticksuffix  = 'pa',
        smoothing  = 1,
        minorgridcount  = 9,
    )
))
fig.show()
The data arrays x, y may either be specified as one-dimensional arrays of data or as arrays of arrays. If one-dimensional, then x, y, a, and b should all be the same
length. If x and y are arrays of arrays, then the length of a should match the inner dimension and the length of b the outer dimension. The plot below represents the
same plot as those above.a = 4ma = 4.5ma = 5ma = 6m
b = 1pab = 2pab = 3pa
246810
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 3/7

--- Página 4 ---
Cheater plot layoutimport plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4.5, 5, 6],
    b = [1, 2, 3],
    y = [[2, 3, 5.5, 8],
         [3.5, 4.5, 6.5, 8.5],
         [4, 5, 7.5, 10]]
))
fig.show()
The layout of cheater plots is not unique and depends upon the cheaterslope and axis cheatertype parameters. If x is not specified, each row of the x array is
constructed based on the the formula a + cheaterslope * b, where a and b are either the value or the integer index of a and b respectively, depending on the
corresponding axis cheatertype. Although the layout of the axis below is different than the plots above, it represents the same data as the axes above.44.556
123
246810
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 4/7

--- Página 5 ---
import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4.5, 5, 6],
    b = [1, 2, 3],
    y = [[2, 3, 5.5, 8],
         [3.5, 4.5, 6.5, 8.5],
         [4, 5, 7.5, 10]],
    cheaterslope  = -5,
    aaxis = dict(cheatertype  = 'index'),
    baxis = dict(cheatertype  = 'value')
))
fig.show()
44.556
123
246810
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 5/7

--- Página 6 ---
Style A and B axis
import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
        tickprefix  = 'a = ',
        ticksuffix  = 'm',
        smoothing  = 1,
        minorgridcount  = 9,
        minorgridwidth  = 0.6,
        minorgridcolor  = 'white',
        gridcolor  = 'white',
        color = 'white'
    ),
    baxis = dict(
        ticksuffix  = 'Pa',
        smoothing  = 1,
        minorgridcount  = 9,
        minorgridwidth  = 0.6,
        gridcolor  = 'white',
        minorgridcolor  = 'white',
        color = 'white'
    )
))
fig.update_layout (
    plot_bgcolor  = 'black',
    paper_bgcolor  = 'black',
    xaxis = dict(
        showgrid  = False,
        showticklabels  = False
    ),
    yaxis = dict(
        showgrid  = False,
        showticklabels  = False
    )
)
fig.show()
a = 4ma = 4.5ma = 5ma = 6m
1Pa2Pa3Pa
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 6/7

--- Página 7 ---
Add Points and Contours
Reference
What About Dash?To add points and lines see  or to add contours see 
Carpet Scatter Plots (https://plotly.com/python/carpet-scatter)
Carpet Contour Plots
(https://plotly.com/python/carpet-contour)
See  for more information and chart attribute options!
https://plotly.com/python/reference/carpet/ (https://plotly.com/python/reference/carpet/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:44 Carpet plots in Python
https://plotly.com/python/carpet-plot/ 7/7</content>
      </file>
      <file name="Carpet scatter plot in Python.pdf" path="pyvy_2x5/Carpet scatter plot in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Carpet Plot &gt;  &gt; Carpet
Scatter Plot
Carpet Scatter Plot in Python
How to make carpet scatter plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/carpet-
scatter.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import plotly.graph_objects  as go
fig = go.Figure(go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
      tickprefix  = 'a = ',
      ticksuffix  = 'm',
      smoothing  = 1,
      minorgridcount  = 9
      ),
    baxis = dict(
      tickprefix  = 'b = ',
      ticksuffix  = 'Pa',
      smoothing  = 1,
      minorgridcount  = 9
      )
))
fig.show()
a = 4ma = 4.5ma = 5ma = 6m
b = 1Pab = 2Pab = 3Pa
246810
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 1/5

--- Página 2 ---
Add Carpet Scatter Trace
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
      tickprefix  = 'a = ',
      ticksuffix  = 'm',
      smoothing  = 1,
      minorgridcount  = 9
      ),
    baxis = dict(
      tickprefix  = 'b = ',
      ticksuffix  = 'Pa',
      smoothing  = 1,
      minorgridcount  = 9
      )
))
fig.add_trace (go.Scattercarpet (
    a = [4, 4.5, 5, 6],
    b = [2.5, 2.5, 2.5, 2.5],
    line = dict(
      shape = 'spline' ,
      smoothing  = 1,
      color = 'blue'
    )
))
fig.show()
a = 4ma = 4.5ma = 5ma = 6m
b = 1Pab = 2Pab = 3Pa
246810
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 2/5

--- Página 3 ---
Add Multiple Scatter Traces
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Carpet(
    a = [0.1,0.2,0.3],
    b = [1,2,3],
    y = [[1,2.2,3],[1.5,2.7,3.5],[1.7,2.9,3.7]],
    cheaterslope  = 1,
    aaxis = dict(
        title = "a",
        tickmode  = "linear" ,
        dtick = 0.05
    ),
    baxis = dict(
        title = "b",
        tickmode  = "linear" ,
        dtick = 0.05
    )
))
fig.add_trace (go.Scattercarpet (
    name = "b = 1.5" ,
    a = [0.05, 0.15, 0.25, 0.35],
    b = [1.5, 1.5, 1.5, 1.5]
))
fig.add_trace (go.Scattercarpet (
    name = "b = 2",
    a = [0.05, 0.15, 0.25, 0.35],
    b = [2, 2, 2, 2]
))
fig.add_trace (go.Scattercarpet (
    name = "b = 2.5" ,
    a = [0.05, 0.15, 0.25, 0.35],
    b = [2.5, 2.5, 2.5, 2.5]
))
fig.add_trace (go.Scattercarpet (
    name = "a = 0.15" ,
    a = [0.15, 0.15, 0.15, 0.15],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing  = 1,
        shape = "spline"
    )
))
fig.add_trace (go.Scattercarpet (
    name = "a = 0.2" ,
    a = [0.2, 0.2, 0.2, 0.2],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing  = 1,
        shape = "spline"
    ),
      marker = dict(
        size = [10, 20, 30, 40],
        color = ["#000", "#f00", "#ff0", "#fff"]
      )
))
fig.add_trace (go.Scattercarpet (
    name = "a = 0.25" ,
    a = [0.25, 0.25, 0.25, 0.25],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing  = 1,
        shape = "spline"
    )
))
fig.update_layout (
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 3/5

--- Página 4 ---
Reference
What About Dash?    title = "scattercarpet extrapolation, clipping, and smoothing" ,
    hovermode  = "closest"
)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/scattercarpet/ (https://plotly.com/python/reference/scattercarpet/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter0.10.150.20.250.3
1
1.051.1
1.151.2
1.251.3
1.351.4
1.451.5
1.551.6
1.651.7
1.751.8
1.851.9
1.952
2.052.1
2.152.2
2.252.3
2.352.4
2.452.5
2.552.6
2.652.7
2.752.8
2.852.9
2.953a
b
0.511.522.533.54b = 1.5
b = 2
b = 2.5
a = 0.15
a = 0.2
a = 0.25scattercarpet extrapolation, clipping, and smoothing
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 4/5

--- Página 5 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:44 Carpet scatter plot in Python
https://plotly.com/python/carpet-scatter/ 5/5</content>
      </file>
      <file name="Contour plots in Python.pdf" path="pyvy_2x5/Contour plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Contour Plot &gt;  &gt;
Contour Plots
Contour Plots in Python
How to make Contour plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/contour-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A 2D contour plot shows the  of a 2D numerical array z, i.e. interpolated lines of isovalues of z.
contour lines (https://en.wikipedia.org/wiki/Contour_line)
import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]]
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 1/15

--- Página 2 ---
Setting X and Y Coordinates in a Contour Plot
import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        x=[-9, -6, -5 , -3, -1], # horizontal axis
        y=[0, 1, 4, 5, 7] # vertical axis
    ))
fig.show()
−9 −8 −7 −6 −5 −4 −3 −2 −101234567
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 2/15

--- Página 3 ---
Colorscale for Contour Plot
import plotly.graph_objects  as go
fig = go.Figure(data =
     go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale ='Electric' ,
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 3/15

--- Página 4 ---
Customizing Size and Range of a Contour Plot's Contours
import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale ='Hot',
        contours =dict(
            start=0,
            end=8,
            size=2,
        ),
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
02468
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 4/15

--- Página 5 ---
Customizing Spacing Between X and Y Axis Ticks
import plotly.graph_objects  as go
fig = go.Figure(data =
    go.Contour(
        z= [[10, 10.625, 12.5, 15.625, 20],
              [5.625, 6.25, 8.125, 11.25, 15.625],
              [2.5, 3.125, 5., 8.125, 12.5],
              [0.625, 1.25, 3.125, 6.25, 10.625],
              [0, 0.625, 2.5, 5.625, 10]],
        dx=10,
        x0=5,
        dy=10,
        y0=10,
    )
)
fig.show()
5 10 15 20 25 30 35 40 45101520253035404550
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 5/15

--- Página 6 ---
Connect the Gaps Between None Values in the Z Matrix
import plotly.graph_objs  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, subplot_titles =('connectgaps = False' ,
                                                        'connectgaps = True' ))
z = [[None, None, None, 12, 13, 14, 15, 16],
     [None, 1, None, 11, None, None, None, 17],
     [None, 2, 6, 7, None, None, None, 18],
     [None, 3, None, 8, None, None, None, 19],
     [5, 4, 10, 9, None, None, None, 20],
     [None, None, None, 27, None, None, None, 21],
     [None, None, None, 26, 25, 24, 23, 22]]
fig.add_trace (go.Contour(z=z, showscale =False), 1, 1)
fig.add_trace (go.Contour(z=z, showscale =False, connectgaps =True), 1, 2)
fig.add_trace (go.Heatmap(z=z, showscale =False, zsmooth='best'), 2, 1)
fig.add_trace (go.Heatmap(z=z, showscale =False, connectgaps =True, zsmooth='best'), 2, 2)
fig['layout' ]['yaxis1' ].update(title=dict(text='Contour map' ))
fig['layout' ]['yaxis3' ].update(title=dict(text='Heatmap' ))
fig.show()
0 2 4 60246
0 2 4 60246
0 2 4 60246
0 2 4 60246Contour map Heatmapconnectgaps = False connectgaps = True
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 6/15

--- Página 7 ---
Smoothing the Contour lines
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
z =   [[2, 4, 7, 12, 13, 14, 15, 16],
       [3, 1, 6, 11, 12, 13, 16, 17],
       [4, 2, 7, 7, 11, 14, 17, 18],
       [5, 3, 8, 8, 13, 15, 18, 19],
       [7, 4, 10, 9, 16, 18, 20, 19],
       [9, 10, 5, 27, 23, 21, 21, 21],
       [11, 14, 17, 26, 25, 24, 23, 22]]
fig = make_subplots (rows=1, cols=2,
                    subplot_titles =('Without Smoothing' , 'With Smoothing' ))
fig.add_trace (go.Contour(z=z, line_smoothing =0), 1, 1)
fig.add_trace (go.Contour(z=z, line_smoothing =0.85), 1, 2)
fig.show()
0 2 4 60123456
0 2 4 60123456
4812162024
4812162024Without Smoothing With Smoothing
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 7/15

--- Página 8 ---
Smooth Contour Coloring
import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        # heatmap gradient coloring is applied between each contour level
        contours_coloring ='heatmap'  # can also be 'lines', or 'none'
    )
)
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 8/15

--- Página 9 ---
Contour Line Labels
import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        contours =dict(
            coloring  ='heatmap' ,
            showlabels  = True, # show labels on contours
            labelfont  = dict( # label font properties
                size = 12,
                color = 'white',
            )
        )))
fig.show()
2
4
68
1012
1416
18
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 9/15

--- Página 10 ---
Contour Lines
import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        contours_coloring ='lines',
        line_width =2,
    )
)
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 10/15

--- Página 11 ---
Custom Contour Plot Colorscale
import plotly.graph_objects  as go
# Valid color strings are CSS colors, rgb or hex strings
colorscale  = [[0, 'gold'], [0.5, 'mediumturquoise' ], [1, 'lightsalmon' ]]
fig = go.Figure(data =
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale =colorscale )
)
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 11/15

--- Página 12 ---
Color Bar Title
Color Bar Size for Contour Plotsimport plotly.graph_objects  as go
fig = go.Figure(data=
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorbar =dict(
            title=dict(
                text='Color bar title' , # title here
                side='right',
                font=dict(
                    size=14,
                    family='Arial, sans-serif' )
                )
            ),
        ))
fig.show()
In the example below, both the thickness (given here in pixels) and the length (given here as a fraction of the plot height) are set.0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
Color bar title
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 12/15

--- Página 13 ---
import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorbar =dict(
            thickness =25,
            thicknessmode ='pixels' ,
            len=0.6,
            lenmode='fraction' ,
            outlinewidth =0
        )
    ))
fig.show()
0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
048121620
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 13/15

--- Página 14 ---
Styling Color Bar Ticks for Contour Plots
Referenceimport plotly.graph_objects  as go
fig = go.Figure(data =
         go.Contour(
           z=[[10, 10.625, 12.5, 15.625, 20],
              [5.625, 6.25, 8.125, 11.25, 15.625],
              [2.5, 3.125, 5., 8.125, 12.5],
              [0.625, 1.25, 3.125, 6.25, 10.625],
              [0, 0.625, 2.5, 5.625, 10]],
           colorbar =dict(nticks=10, ticks='outside' ,
                         ticklen=5, tickwidth =1,
                         showticklabels =True,
                         tickangle =0, tickfont_size =12)
            ))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/contour/ (https://plotly.com/python/reference/contour/)0 0.5 1 1.5 2 2.5 3 3.5 400.511.522.533.54
02468101214161820
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 14/15

--- Página 15 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ntour
ntour
d Y Axis
alues in
Plots16/07/2025, 06:42 Contour plots in Python
https://plotly.com/python/contour-plots/ 15/15</content>
      </file>
      <file name="Dendrograms in Python.pdf" path="pyvy_2x5/Dendrograms in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Dendrogram
Set Color Threshold &gt;  &gt;
Dendrograms
Dendrograms in Python
How to make a dendrogram in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/dendrogram.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  is a diagram representing a tree. The  called create_dendrogram
performs  on data and represents the resulting tree. Values on the tree depth axis
correspond to distances between clusters.
dendrogram (https://en.wikipedia.org/wiki/Dendrogram)
figure factory (/python/figure-factories/)
hierarchical clustering (https://en.wikipedia.org/wiki/Hierarchical_clustering)
Dendrogram plots are commonly used in computational biology to show the clustering of genes or samples, sometimes in the margin of heatmaps.
import plotly.figure_factory  as ff
import numpy as np
np.random.seed(1)
X = np.random.rand(15, 12) # 15 samples, with 12 dimensions each
fig = ff.create_dendrogram (X)
fig.update_layout (width=800, height=500)
fig.show()
1156101213714480132900.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:43 Dendrograms in Python
https://plotly.com/python/dendrogram/ 1/6

--- Página 2 ---
Set Orientation and Add Labelsimport plotly.figure_factory  as ff
import numpy as np
X = np.random.rand(15, 10) # 15 samples, with 10 dimensions each
fig = ff.create_dendrogram (X, color_threshold =1.5)
fig.update_layout (width=800, height=500)
fig.show()
1947381112056141321000.511.52
16/07/2025, 06:43 Dendrograms in Python
https://plotly.com/python/dendrogram/ 2/6

--- Página 3 ---
Plot a Dendrogram with a Heatmapimport plotly.figure_factory  as ff
import numpy as np
X = np.random.rand(10, 12)
names = ['Jack', 'Oxana', 'John', 'Chelsea' , 'Mark', 'Alice', 'Charlie' , 'Rob', 'Lisa', 'Lily']
fig = ff.create_dendrogram (X, orientation ='left', labels=names)
fig.update_layout (width=800, height=800)
fig.show()
See also the .
Dash Bio demo (https://dash-bio.plotly.host/dash-clustergram/)0 0.5 1 1.5 2Jack
Alice
Charlie
Lisa
Oxana
Mark
John
Rob
Chelsea
Lily
16/07/2025, 06:43 Dendrograms in Python
https://plotly.com/python/dendrogram/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
import plotly.figure_factory  as ff
import numpy as np
from scipy.spatial.distance  import pdist, squareform
# get data
data = np.genfromtxt ("http://files.figshare.com/2133304/ExpRawData_E_TABM_84_A_AFFY_44.tab" ,
                     names=True,usecols=tuple(range(1,30)),dtype=float, delimiter ="\t")
data_array  = data.view((float, len(data.dtype.names)))
data_array  = data_array .transpose ()
labels = data.dtype.names
# Initialize figure by creating upper dendrogram
fig = ff.create_dendrogram (data_array , orientation ='bottom' , labels=labels)
for i in range(len(fig['data'])):
    fig['data'][i]['yaxis'] = 'y2'
# Create Side Dendrogram
dendro_side  = ff.create_dendrogram (data_array , orientation ='right')
for i in range(len(dendro_side ['data'])):
    dendro_side ['data'][i]['xaxis'] = 'x2'
# Add Side Dendrogram Data to Figure
for data in dendro_side ['data']:
    fig.add_trace (data)
# Create Heatmap
dendro_leaves  = dendro_side ['layout' ]['yaxis']['ticktext' ]
dendro_leaves  = list(map(int, dendro_leaves ))
data_dist  = pdist(data_array )
heat_data  = squareform (data_dist )
heat_data  = heat_data [dendro_leaves ,:]
heat_data  = heat_data [:,dendro_leaves ]
heatmap = [
    go.Heatmap(
        x = dendro_leaves ,
        y = dendro_leaves ,
        z = heat_data ,
        colorscale  = 'Blues'
    )
]
heatmap[0]['x'] = fig['layout' ]['xaxis']['tickvals' ]
heatmap[0]['y'] = dendro_side ['layout' ]['yaxis']['tickvals' ]
# Add Heatmap Data to Figure
for data in heatmap:
    fig.add_trace (data)
# Edit Layout
fig.update_layout ({'width':800, 'height' :800,
                         'showlegend' :False, 'hovermode' : 'closest' ,
                         })
# Edit xaxis
fig.update_layout (xaxis={'domain' : [.15, 1],
                                  'mirror' : False,
                                  'showgrid' : False,
                                  'showline' : False,
                                  'zeroline' : False,
                                  'ticks':""})
# Edit xaxis2
fig.update_layout (xaxis2={'domain' : [0, .15],
                                   'mirror' : False,
                                   'showgrid' : False,
                                   'showline' : False,
                                   'zeroline' : False,
                                   'showticklabels' : False,
                                   'ticks':""})
# Edit yaxis
fig.update_layout (yaxis={'domain' : [0, .85],
                                  'mirror' : False,
                                  'showgrid' : False,
                                  'showline' : False,
                                  'zeroline' : False,
16/07/2025, 06:43 Dendrograms in Python
https://plotly.com/python/dendrogram/ 4/6

--- Página 5 ---
Reference                                  'showticklabels' : False,
                                  'ticks': ""
                        })
# Edit yaxis2
fig.update_layout (yaxis2={'domain' :[.825, .975],
                                   'mirror' : False,
                                   'showgrid' : False,
                                   'showline' : False,
                                   'zeroline' : False,
                                   'showticklabels' : False,
                                   'ticks':""})
# Plot!
fig.show()
For more info on ff.create_dendrogram(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_dendrogram.html)
r07r06r11r08r14r15h43h62h18h17h32h42h29h45h39h36c11c07c01c15c14ol5ol3ol4ol1ol2ob1oh1oh2050100150200250300
16/07/2025, 06:43 Dendrograms in Python
https://plotly.com/python/dendrogram/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:43 Dendrograms in Python
https://plotly.com/python/dendrogram/ 6/6</content>
      </file>
      <file name="Heatmaps in Python.pdf" path="pyvy_2x5/Heatmaps in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)1. Matrix Heatmaps accept a 2-dimensional matrix or array of data and visualizes it directly. This type of heatmap is the subject of this page.
2. Density Heatmaps accept data as a list and visualizes aggregated quantities like counts or sums of this data. Please refer to the 
 for this kind of figure.
Heatmaps with Plotly Express &gt;  &gt;
Heatmaps
Heatmaps in Python
How to make Heatmaps in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/heatmaps.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The term "heatmap" usually refers to a Cartesian plot with data visualized as colored rectangular tiles, which is the subject of this page. It is also sometimes used to
refer to .
actual maps with density data displayed as color intensity (/python/tile-density-heatmaps/)
Plotly supports two different types of colored-tile heatmaps:
2D Histogram documentation
(/python/2D-Histogram/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . With px.imshow, each value of the input array or data frame is represented as a heatmap pixel.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The px.imshow() function can be used to display heatmaps (as well as full-color images, as its name suggests). It accepts both array-like objects like lists of lists and
numpy or xarray arrays, as well as supported .
DataFrame objects (/python/px-arguments#supported-dataframes)
For more examples using px.imshow, including examples of faceting and animations, as well as full-color image display, see the 
.
the imshow documentation
page (/python/imshow)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 1/13

--- Página 2 ---
Displaying Text on Heatmapsimport plotly.express  as px
fig = px.imshow([[1, 20, 30],
                 [20, 1, 60],
                 [30, 60, 1]])
fig.show()
import plotly.express  as px
df = px.data.medals_wide (indexed=True)
fig = px.imshow(df)
fig.show()
New in v5.5
You can add the values to the figure as text using the text_auto argument. Setting it to True will display the values on the bars, and setting it to a d3-format formatting
string will control the output format.
0 1 22.521.510.50−0.5
102030405060
gold silver bronzeCanadaChinaSouth Korea
81012141618202224
medalnation
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 2/13

--- Página 3 ---
Heatmaps in Dashimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 3/13

--- Página 4 ---
Controlling Aspect RatioSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
By default, px.imshow() produces heatmaps with square tiles, but setting the aspect argument to "auto" will instead fill the plotting area with the heatmap, using non-
square tiles.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Olympic medals won by countries'),
    dcc.Graph(id="graph"),
    html.P("Medals included:"),
    dcc.Checklist(
        id='medals',
        options=["gold", "silver", "bronze"],
        value=["gold", "silver"],
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("medals", "value"))
def filter_heatmap(cols):
    df = px.data.medals_wide(indexed=True) # replace with your own data source
    fig = px.imshow(df[cols])
    return figDOWNLOAD
Olympic medals won by countries
Medals included:
gold
silver
bronze
gold silverCanadaChinaSouth Korea
1012141618202224
medalnation
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 4/13

--- Página 5 ---
Customizing the axes and labels on a heatmapimport plotly.express  as px
z = [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]
fig = px.imshow(z, text_auto =True, aspect="auto")
fig.show()
You can use the x, y and labels arguments to customize the display of a heatmap, and use .update_xaxes() to move the x axis tick labels to the top:
0.1 0.3 0.5 0.7 0.9
1 0.8 0.6 0.4 0.2
0.2 0 0.5 0.7 0.9
0.9 0.8 0.4 0.2 0
0.3 0.4 0.5 0.7 1
0 1 2 3 443210
00.20.40.60.81
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 5/13

--- Página 6 ---
Display an xarray image with px.imshowimport plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="Day of Week" , y="Time of Day" , color="Productivity" ),
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes (side="top")
fig.show()
 are labeled arrays (with labeled axes and coordinates). If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays (http://xarray.pydata.org/en/stable/)
Monday Tuesday Wednesday Thursday Friday
EveningAfternoonMorning
1020304050607080ProductivityDay of WeekTime of Day
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 6/13

--- Página 7 ---
Basic Heatmap with plotly.graph_objectsimport plotly.express  as px
import xarray as xr
# Load xarray from dataset included in the xarray tutorial
airtemps  = xr.tutorial .open_dataset ('air_temperature' ).air.sel(lon=250.0)
fig = px.imshow(airtemps .T, color_continuous_scale ='RdBu_r' , origin='lower')
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Heatmap class from plotly.graph_objects (/python/graph-
objects/)
import plotly.graph_objects  as go
fig = go.Figure(data=go.Heatmap(
                    z=[[1, 20, 30],
                      [20, 1, 60],
                      [30, 60, 1]]))
fig.show()
Jan 2013Apr 2013Jul 2013Oct 2013Jan 2014Apr 2014Jul 2014Oct 2014203040506070
2402602803004xDaily Air temperature at
sigma level 995 [degK]
timelat
−0.5 0 0.5 1 1.5 2 2.5−0.500.511.522.5
102030405060
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 7/13

--- Página 8 ---
Heatmap with Categorical Axis Labels
In this example we also show how to ignore  when we have missing values in the data by setting the
 to False.
hovertext (https://plotly.com/python/hover-text-and-formatting/)
hoverongaps (https://plotly.com/python/reference/heatmap/#heatmap-hoverongaps)
import plotly.graph_objects  as go
fig = go.Figure(data=go.Heatmap(
                   z=[[1, None, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
                   x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                   y=['Morning' , 'Afternoon' , 'Evening' ],
                   hoverongaps  = False))
fig.show()
Monday Tuesday Wednesday Thursday FridayMorningAfternoonEvening
−1001020304050607080
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 8/13

--- Página 9 ---
Heatmap with Unequal Block Sizes
import plotly.graph_objects  as go
import numpy as np
# Build the rectangles as a heatmap
# specify the edges of the heatmap squares
phi = (1 + np.sqrt(5) )/2. # golden ratio
xe = [0, 1, 1+(1/(phi**4)), 1+(1/(phi**3)), phi]
ye = [0, 1/(phi**3), 1/phi**3+1/phi**4, 1/(phi**2), 1]
z = [ [13,3,3,5],
      [13,2,1,5],
      [13,10,11,12],
      [13,8,8,8]
    ]
fig = go.Figure(data=go.Heatmap(
          x = np.sort(xe),
          y = np.sort(ye),
          z = z,
          type = 'heatmap' ,
          colorscale  = 'Viridis' ))
# Add spiral line plot
def spiral(th):
    a = 1.120529
    b = 0.306349
    r = a*np.exp(-b*th)
    return (r*np.cos(th), r*np.sin(th))
theta = np.linspace (-np.pi/13,4*np.pi,1000); # angle
(x,y) = spiral(theta)
fig.add_trace (go.Scatter(x= -x+x[0], y= y-y[0],
     line =dict(color='white',width=3)))
axis_template  = dict(range = [0,1.6], autorange  = False,
             showgrid  = False, zeroline  = False,
             linecolor  = 'black', showticklabels  = False,
             ticks = '' )
fig.update_layout (margin = dict(t=200,r=200,b=200,l=200),
    xaxis = axis_template ,
    yaxis = axis_template ,
    showlegend  = False,
    width = 700, height = 700,
    autosize  = False )
fig.show()
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 9/13

--- Página 10 ---
24681012
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 10/13

--- Página 11 ---
Heatmap with Datetime Axis
Text on Heatmap Pointsimport plotly.graph_objects  as go
import datetime
import numpy as np
np.random.seed(1)
programmers  = ['Alex','Nicole' ,'Sara','Etienne' ,'Chelsea' ,'Jody','Marianne' ]
base = datetime .datetime .today()
dates = base - np.arange(180) * datetime .timedelta (days=1)
z = np.random.poisson(size=(len(programmers ), len(dates)))
fig = go.Figure(data=go.Heatmap(
        z=z,
        x=dates,
        y=programmers ,
        colorscale ='Viridis' ))
fig.update_layout (
    title=dict(text='GitHub commits per day' ),
    xaxis_nticks =36)
fig.show()
In this example we add text to heatmap points using texttemplate. We use the values from the text attribute for the text. We also adjust the font size using textfont.
Jan 12
2025Jan 19Jan 26Feb 2Feb 9Feb 16Feb 23Mar 2Mar 9Mar 16Mar 23Mar 30Apr 6Apr 13Apr 20Apr 27May 4May 11May 18May 25Jun 1Jun 8Jun 15Jun 22Jun 29Jul 6AlexNicoleSaraEtienneChelseaJodyMarianne
012345GitHub commits per day
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 11/13

--- Página 12 ---
Heatmap and datashader
Referenceimport plotly.graph_objects  as go
fig = go.Figure(data=go.Heatmap(
                    z=[[1, 20, 30],
                      [20, 1, 60],
                      [30, 60, 1]],
                    text=[['one', 'twenty' , 'thirty' ],
                          ['twenty' , 'one', 'sixty'],
                          ['thirty' , 'sixty', 'one']],
                    texttemplate ="%{text}",
                    textfont ={"size":20}))
fig.show()
Arrays of rasterized values build by datashader can be visualized using plotly's heatmaps, as shown in the .
plotly and datashader tutorial (/python/datashader/)
See  or 
 for more information and chart attribute options!
function reference for px.(imshow) (https://plotly.com/python-api-reference/generated/plotly.express.imshow)
https://plotly.com/python/reference/heatmap/
(https://plotly.com/python/reference/heatmap/)
one twenty thirtytwenty one sixtythirty sixty one
−0.5 0 0.5 1 1.5 2 2.5−0.500.511.522.5
102030405060
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 12/13

--- Página 13 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
a
show
ects
els16/07/2025, 06:42 Heatmaps in Python
https://plotly.com/python/heatmaps/ 13/13</content>
      </file>
      <file name="Imshow in Python.pdf" path="pyvy_2x5/Imshow in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Displaying RGB image data with px.imshow
Read image arrays from image files &gt;  &gt;
Imshow
Imshow in Python
How to display image data in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/imshow.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This tutorial shows how to display and explore image data. If you would like instead a logo or static image, use go.layout.Image as explained .
here (/python/images)
px.imshow displays multichannel (RGB) or single-channel ("grayscale") image data.
import plotly.express  as px
import numpy as np
img_rgb = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                    [[0, 255, 0], [0, 0, 255], [255, 0, 0]]
                   ], dtype=np.uint8)
fig = px.imshow(img_rgb)
fig.show()
In order to create a numerical array to be passed to px.imshow, you can use a third-party library like 
,  or
. We show below how to open an image
from a file with skimage.io.imread, and alternatively how to load a demo image from skimage.data.
PIL
(https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open)
scikit-image (https://scikit-image.org/docs/dev/user_guide/getting_started.html)
opencv (https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_image_display/py_image_display.html)
−0.5 0 0.5 1 1.5 2 2.51.510.50−0.5
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 1/20

--- Página 2 ---
Display single-channel 2D data as a heatmapimport plotly.express  as px
from skimage import io
img = io.imread('https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Crab_Nebula.jpg/240px-Crab_Nebula.jpg' )
fig = px.imshow(img)
fig.show()
import plotly.express  as px
from skimage import data
img = data.astronaut ()
fig = px.imshow(img, binary_format ="jpeg", binary_compression_level =0)
fig.show()
For a 2D image, px.imshow uses a colorscale to map scalar data to colors. The default colorscale is the one of the active template (see 
).
the tutorial on templates
(/python/templates/)
0 50 100 150 200200150100500
0 100 200 300 400 5005004003002001000
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 2/20

--- Página 3 ---
Choose the colorscale to display a single-channel imageimport plotly.express  as px
import numpy as np
img = np.arange(15**2).reshape((15, 15))
fig = px.imshow(img)
fig.show()
You can customize the  just like with any other Plotly Express function. However, color_continuous_scale is ignored when
using binary_string=True, since the image is always represented as grayscale (and no colorbar is displayed).
continuous color scale (/python/colorscales/)
import plotly.express  as px
import numpy as np
img = np.arange(100).reshape((10, 10))
fig = px.imshow(img, binary_string =True)
fig.show()
You can use this to make the image grayscale as well:
0 5 1014121086420
050100150200
0 2 4 6 886420
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 3/20

--- Página 4 ---
Hiding the colorbar and axis labelsimport plotly.express  as px
import numpy as np
img = np.arange(100).reshape((10, 10))
fig = px.imshow(img, color_continuous_scale ='gray')
fig.show()
See the  and  pages for more details.
continuous color (/python/colorscales/)
cartesian axes (/python/axes/)
import plotly.express  as px
from skimage import data
img = data.camera()
fig = px.imshow(img, color_continuous_scale ='gray')
fig.update_layout (coloraxis_showscale =False)
fig.update_xaxes (showticklabels =False)
fig.update_yaxes (showticklabels =False)
fig.show()
0 2 4 6 886420
0102030405060708090
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 4/20

--- Página 5 ---
Customizing the axes and labels on a single-channel image
Display an xarray image with px.imshowYou can use the x, y and labels arguments to customize the display of a heatmap, and use .update_xaxes() to move the x axis tick labels to the top:
import plotly.express  as px
data=[[1, 25, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, 5, 20]]
fig = px.imshow(data,
                labels=dict(x="Day of Week" , y="Time of Day" , color="Productivity" ),
                x=['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' ],
                y=['Morning' , 'Afternoon' , 'Evening' ]
               )
fig.update_xaxes (side="top")
fig.show()
 are labeled arrays (with labeled axes and coordinates). If you pass an xarray image to px.imshow, its axes labels and
coordinates will be used for axis titles. If you don't want this behavior, you can pass img.values which is a NumPy array if img is an xarray. Alternatively, you can
override axis titles hover labels and colorbar title using the labels attribute, as above.
xarrays (http://xarray.pydata.org/en/stable/)
Monday Tuesday Wednesday Thursday Friday
EveningAfternoonMorning
1020304050607080ProductivityDay of WeekTime of Day
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 5/20

--- Página 6 ---
Display an xarray image with square pixelsimport plotly.express  as px
import xarray as xr
# Load xarray from dataset included in the xarray tutorial
airtemps  = xr.tutorial .open_dataset ('air_temperature' ).air.sel(lon=250.0)
fig = px.imshow(airtemps .T, color_continuous_scale ='RdBu_r' , origin='lower')
fig.show()
For xarrays, by default px.imshow does not constrain pixels to be square, since axes often correspond to different physical quantities (e.g. time and space), contrary to
a plain camera image where pixels are square (most of the time). If you want to impose square pixels, set the parameter aspect to "equal" as below.
import plotly.express  as px
import xarray as xr
airtemps  = xr.tutorial .open_dataset ('air_temperature' ).air.isel(time=500)
colorbar_title  = airtemps .attrs['var_desc' ] + '&lt;br&gt;(%s)'%airtemps .attrs['units']
fig = px.imshow(airtemps , color_continuous_scale ='RdBu_r' , aspect='equal')
fig.show()
Jan 2013Apr 2013Jul 2013Oct 2013Jan 2014Apr 2014Jul 2014Oct 2014203040506070
2402602803004xDaily Air temperature at
sigma level 995 [degK]
timelat
200 220 240 260 280 300 320706050403020
2502602702802903004xDaily Air temperature at
sigma level 995 [degK]
lonlat
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 6/20

--- Página 7 ---
Display multichannel image data with go.Image
Passing image data as a binary string to go.ImageIt is also possible to use the go.Image trace from the low-level graph_objects API in order to display image data. Note that go.Image only accepts multichannel images.
For single-channel images, use .
go.Heatmap (/python/heatmaps)
Note that the go.Image trace is different from the go.layout.Image class, which can be used for .
adding background images or logos to figures (/python/images)
import plotly.graph_objects  as go
img_rgb = [[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
           [[0, 255, 0], [0, 0, 255], [255, 0, 0]]]
fig = go.Figure(go.Image(z=img_rgb))
fig.show()
The z parameter of go.Image passes image data in the form of an array or a list of numerical values, but it is also possible to use the source parameter, which takes a
b64 binary string. Thanks to png or jpg compression, using source is a way to reduce the quantity of data passed to the browser, and also to reduce the serialization
time of the figure, resulting in increased performance.
Note than an easier way of creating binary strings with px.imshow is explained below.
−0.5 0 0.5 1 1.5 2 2.51.510.50−0.5
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 7/20

--- Página 8 ---
Defining the data range covered by the color range with zmin and zmaximport plotly.graph_objects  as go
from skimage import data
from PIL import Image
import base64
from io import BytesIO
img = data.astronaut ()  # numpy array
pil_img = Image.fromarray (img) # PIL image object
prefix = "data:image/png;base64,"
with BytesIO() as stream:
    pil_img.save(stream, format="png")
    base64_string  = prefix + base64.b64encode (stream.getvalue ()).decode("utf-8")
fig = go.Figure(go.Image(source=base64_string ))
fig.show()
The data range and color range are mapped together using the parameters zmin and zmax of px.imshow or go.Image, which correspond respectively to the data
values mapped to black [0, 0, 0] and white [255, 255, 255], or to the extreme colors of the colorscale in the case of single-channel data.
For go.Image, zmin and zmax need to be given for all channels, whereas it is also possible to pass a scalar value (used for all channels) to px.imshow.
0 100 200 300 400 5005004003002001000
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 8/20

--- Página 9 ---
import plotly.express  as px
from skimage import data
img = data.astronaut ()
# Increase contrast by clipping the data range between 50 and 200
fig = px.imshow(img, zmin=50, zmax=200)
# We customize the hovertemplate to show both the data and the color values
# See https://plotly.com/python/hover-text-and-formatting/#customize-tooltip-text-with-a-hovertemplate
#fig.update_traces(hovertemplate="x: %{x} &lt;br&gt; y: %{y} &lt;br&gt; z: %{z} &lt;br&gt; color: %{color}")
fig.show()
import plotly.express  as px
from skimage import data
img = data.astronaut ()
# Stretch the contrast of the red channel only, resulting in a more red image
fig = px.imshow(img, zmin=[50, 0, 0], zmax=[200, 255, 255])
fig.show()
0 100 200 300 400 5005004003002001000
0 100 200 300 400 5005004003002001000
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 9/20

--- Página 10 ---
Automatic contrast rescaling in px.imshow
for integer data types, zmin and zmax correspond to the extreme values of the data type, for example 0 and 255 for uint8, 0 and 65535 for uint16, etc.
for float numbers, the maximum value of the data is computed, and zmax is 1 if the max is smaller than 1, 255 if the max is smaller than 255, etc. (with higher
thresholds 216 - 1 and 232 -1).When zmin and zmax are not specified, the contrast_rescaling arguments determines how zmin and zmax are computed. For contrast_rescaling='minmax', the
extrema of the data range are used. For contrast_rescaling='infer', a heuristic based on the data type is used:
These two modes can be used for single- and multichannel data. The default value is to use 'minmax' for single-channel data (as in a Heatmap trace) and infer for
multi-channel data (which often consist of uint8 data). In the example below we override the default value by setting contrast_rescaling='infer' for a single-channel
image.
import plotly.express  as px
img = np.arange(100, dtype=np.uint8).reshape((10, 10))
fig = px.imshow(img, contrast_rescaling ='infer')
fig.show()
0 2 4 6 886420
0102030405060708090
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 10/20

--- Página 11 ---
Ticks and margins around image data
Combining image charts and other tracesimport plotly.express  as px
from skimage import data
img = data.astronaut ()
fig = px.imshow(img)
fig.update_layout (width=400, height=400, margin=dict(l=10, r=10, b=10, t=10))
fig.update_xaxes (showticklabels =False).update_yaxes (showticklabels =False)
fig.show()
import plotly.express  as px
import plotly.graph_objects  as go
from skimage import data
img = data.camera()
fig = px.imshow(img, color_continuous_scale ='gray')
fig.add_trace (go.Contour(z=img, showscale =False,
                         contours =dict(start=0, end=70, size=70, coloring ='lines'),
                         line_width =2))
fig.add_trace (go.Scatter(x=[230], y=[100], marker=dict(color='red', size=16)))
fig.show()
0 100 200 300 400 5005004003002001000
050100150200250
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 11/20

--- Página 12 ---
Displaying an image and the histogram of color values
imshow and datashader
Annotating image traces with shapes
define a dragmode corresponding to a drawing tool ('drawline','drawopenpath', 'drawclosedpath', 'drawcircle', or 'drawrect')
add modebar buttons corresponding to the drawing tools you wish to use.from plotly.subplots  import make_subplots
from skimage import data
img = data.chelsea()
fig = make_subplots (1, 2)
# We use go.Image because subplots require traces, whereas px functions return a figure
fig.add_trace (go.Image(z=img), 1, 1)
for channel, color in enumerate (['red', 'green', 'blue']):
    fig.add_trace (go.Histogram (x=img[..., channel].ravel(), opacity=0.5,
                               marker_color =color, name='%s channel'  %color), 1, 2)
fig.update_layout (height=400)
fig.show()
Arrays of rasterized values build by datashader can be visualized using imshow. See the  for examples on how to
use plotly and datashader.
plotly and datashader tutorial (/python/datashader/)
introduced in plotly 4.7
It can be useful to add shapes to an image trace, for highlighting an object, drawing bounding boxes as part of a machine learning training set, or identifying seeds for
a segmentation algorithm.
In order to enable shape drawing, you need to
The style of new shapes is specified by the newshape layout attribute. Shapes can be selected and modified after they have been drawn. More details and examples
are given in the .
tutorial on shapes (/python/shapes#drawing-shapes-on-cartesian-plots)
Drawing or modifying a shape triggers a relayout event, which .
can be captured by a callback inside a Dash application (https://dash.plotly.com/interactive-graphing)
0 100 200 300 400250200150100500
0 50 100 150 2000500100015002000 red channel
green channel
blue channel
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 12/20

--- Página 13 ---
Passing image data as a binary stringimport plotly.express  as px
from skimage import data
img = data.chelsea()
fig = px.imshow(img)
fig.add_annotation (
    x=0.5,
    y=0.9,
    text="Drag and draw annotations" ,
    xref="paper",
    yref="paper",
    showarrow =False,
    font_size =20, font_color ='cyan')
# Shape defined programatically
fig.add_shape (
    type='rect',
    x0=230, x1=290, y0=230, y1=280,
    xref='x', yref='y',
    line_color ='cyan'
)
# Define dragmode, newshape parameters, amd add modebar buttons
fig.update_layout (
    dragmode ='drawrect' ,
    newshape =dict(line_color ='cyan'))
fig.show(config={'modeBarButtonsToAdd' :['drawline' ,
                                        'drawopenpath' ,
                                        'drawclosedpath' ,
                                        'drawcircle' ,
                                        'drawrect' ,
                                        'eraseshape'
                                       ]})
introduced in plotly.py 4.10
px.imshow can pass the data to the figure object either as a list of numerical values, or as a png binary string which is passed directly to the browser. While the former
solution offers more flexibility (values can be of float or int type, while values are rescaled to the range [0-255] for an image string), using a binary string is usually
faster for large arrays. The parameter binary_string controls whether the image is passed as a png string (when True) or a list of values (False). Its default value is True
for multi-channel images and False for single-channel images. When binary_string=True, image data are always represented using a go.Image trace.
0 100 200 300 400250200150100500
Drag and draw annotations
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 13/20

--- Página 14 ---
Contrast rescaling im imshow with binary stringimport plotly.express  as px
import numpy as np
img = np.arange(15**2).reshape((15, 15))
fig = px.imshow(img, binary_string =True)
fig.show()
When the image is passed to the plotly figure as a binary string (which is the default mode for RGB images), and when the image is rescaled to adjust the contrast (for
example when setting zmin and zmax), the original intensity values are not passed to the plotly figure and therefore no intensity value is displayed in the hover.
import plotly.express  as px
from skimage import data
import numpy as np
img = np.arange(100).reshape((10, 10))
fig = px.imshow(img, binary_string =True)
# You can check that only x and y are displayed in the hover
# You can use a hovertemplate to override the hover information
# See https://plotly.com/python/hover-text-and-formatting/#customize-tooltip-text-with-a-hovertemplate
fig.show()
0 5 1014121086420
0 2 4 6 886420
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 14/20

--- Página 15 ---
Changing the level of compression of the binary string in px.imshowYou can set binary_string=False if you want the intensity value to appear in the hover even for a rescaled image. In the example below we also modify the
hovertemplate to display both z (the data of the original image array) and color (the pixel value displayed in the figure).
import plotly.express  as px
from skimage import data
img = data.chelsea()
# Increase contrast by clipping the data range between 50 and 200
fig = px.imshow(img, binary_string =False, zmin=50, zmax=200)
# We customize the hovertemplate to show both the data and the color values
# See https://plotly.com/python/hover-text-and-formatting/#customize-tooltip-text-with-a-hovertemplate
fig.update_traces (hovertemplate ="x: %{x} &lt;br&gt; y: % {y} &lt;br&gt; z: % {z} &lt;br&gt; color: % {color}")
fig.show()
The binary_compression_level parameter controls the level of compression to be used by the backend creating the png string. Two different backends can be used,
pypng (which is a dependency of plotly and is therefore always available), and pil for Pillow, which is often more performant. The compression level has to be between
0 (no compression) and 9 (highest compression), although increasing the compression above 4 and 5 usually only offers diminishing returns (no significant
compression gain, at the cost of a longer execution time).
0 100 200 300 400250200150100500
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 15/20

--- Página 16 ---
Exploring 3-D images, timeseries and sequences of images with facet_colimport plotly.express  as px
from skimage import data
img = data.camera()
for compression_level  in range(0, 9):
    fig = px.imshow(img, binary_string =True, binary_compression_level =compression_level )
    print(f"compression level {compression_level }: length of {len(fig.data[0].source)}")
fig.show()
Introduced in plotly 4.14
For three-dimensional image datasets, obtained for example by MRI or CT in medical imaging, one can explore the dataset by representing its different planes as
facets. The facet_col argument specifies along which axis the image is sliced through to make the facets. With facet_col_wrap, one can set the maximum number of
columns. For image datasets passed as xarrays, it is also possible to specify the axis by its name (label), thus passing a string to facet_col.
It is recommended to use binary_string=True for facetted plots of images in order to keep a small figure size and a short rendering time.
See the  for more information on creating and styling facet plots.
tutorial on facet plots (/python/facet-plots/)compression level 0: length of 350438
compression level 1: length of 211734
compression level 2: length of 209810
compression level 3: length of 206994
compression level 4: length of 190598
compression level 5: length of 190314
compression level 6: length of 189774
compression level 7: length of 189258
compression level 8: length of 188426
0 100 200 300 400 5005004003002001000
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 16/20

--- Página 17 ---
import plotly.express  as px
from skimage import io
data = io.imread("https://github.com/scikit-image/skimage-tutorials/raw/main/images/cells.tif" )
img = data[20:45:2]
fig = px.imshow(img, facet_col =0, binary_string =True, facet_col_wrap =5)
fig.show()
Facets can also be used to represent several images of equal shape, like in the example below where different values of the blurring parameter of a Gaussian filter are
compared.
import plotly.express  as px
import numpy as np
from skimage import data, filters, img_as_float
img = data.camera()
sigmas = [1, 2, 4]
img_sequence  = [filters.gaussian (img, sigma=sigma) for sigma in sigmas]
fig = px.imshow(np.array(img_sequence ), facet_col =0, binary_string =True,
                labels={'facet_col' :'sigma'})
# Set facet titles
for i, sigma in enumerate (sigmas):
    fig.layout.annotations [i]['text'] = 'sigma = %d' %sigma
fig.show()
01002002001000
0100200
 0100200
2001000
2001000
facet_col=10 facet_col=11 facet_col=12facet_col=5 facet_col=6 facet_col=7 facet_col=8 facet_col=9facet_col=0 facet_col=1 facet_col=2 facet_col=3 facet_col=4
0 200 4005004003002001000
0 200 400
 0 200 400sigma = 1 sigma = 2 sigma = 4
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 17/20

--- Página 18 ---
Exploring 3-D images and timeseries with animation_frame
Animations of xarray datasetsIntroduced in plotly 4.14
For three-dimensional image datasets, obtained for example by MRI or CT in medical imaging, one can explore the dataset by sliding through its different planes in an
animation. The animation_frame argument of px.imshow sets the axis along which the 3-D image is sliced in the animation.
import plotly.express  as px
from skimage import io
data = io.imread("https://github.com/scikit-image/skimage-tutorials/raw/main/images/cells.tif" )
img = data[25:40]
fig = px.imshow(img, animation_frame =0, binary_string =True, labels=dict(animation_frame ="slice"))
fig.show()
Introduced in plotly 4.14
For xarray datasets, one can pass either an axis number or an axis name to animation_frame. Axis names and coordinates are automatically used for the labels, ticks
and animation controls of the figure.
0 100 200250200150100500
slice=0
01234567891011121314▶ ◼
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 18/20

--- Página 19 ---
Combining animations and facetsimport plotly.express  as px
import xarray as xr
# Load xarray from dataset included in the xarray tutorial
ds = xr.tutorial .open_dataset ('air_temperature' ).air[:20]
fig = px.imshow(ds, animation_frame ='time', zmin=220, zmax=300, color_continuous_scale ='RdBu_r' )
fig.show()
It is possible to view 4-dimensional datasets (for example, 3-D images evolving with time) using a combination of animation_frame and facet_col.
import plotly.express  as px
from skimage import io
data = io.imread("https://github.com/scikit-image/skimage-tutorials/raw/main/images/cells.tif" )
data = data.reshape((15, 4, 256, 256))[5:]
fig = px.imshow(data, animation_frame =0, facet_col =1, binary_string =True)
fig.show()
200 220 240 260 280 300 320706050403020
time=2013-01-01T00:00:00.000000000
2013-01-01T00:00:00.0000000002013-01-02T18:00:00.0000000002013-01-04T12:00:00.0000000002202402602803004xDaily Air temperature at
sigma level 995 [degK]
lonlat
▶ ◼
0 100 200250200150100500
0 100 200
0 100 200
0 100 200
animation_frame=0
0 1 2 3 4 5 6 7 8 9facet_col=0 facet_col=1 facet_col=2 facet_col=3
▶ ◼
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 19/20

--- Página 20 ---
Reference
What About Dash?See  or 
 for more information and chart attribute options!
function reference for px.(imshow) (https://plotly.com/python-api-reference/generated/plotly.express.imshow)
https://plotly.com/python/reference/image/
(https://plotly.com/python/reference/image/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
imshow
ingle-
a single-
show
e pixels
th
ng to
the
mshow
ta
traces
ram of
es
ng
binary
of the
d
s with16/07/2025, 06:42 Imshow in Python
https://plotly.com/python/imshow/ 20/20</content>
      </file>
      <file name="Log plots in Python.pdf" path="pyvy_2x5/Log plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Logarithmic Axes with Plotly Express &gt;  &gt; Log
Plots
Log Plots in Python
How to make Log plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/log-
plot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
This page shows examples of how to configure  to follow a logarithmic
rather than linear progression.  on logarithmic axes is done the same was as with 
.
2-dimensional Cartesian axes (/python/figure-structure/#2d-cartesian-trace-types-and-subplots)
Configuring gridlines, ticks, tick labels and axis titles (/python/axes/)
linear axes
(/python/axes/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
All of Plotly Express' 2-D Cartesian functions include the log_x and log_y keyword arguments, which can be set to True to set the corresponding axis to a logarithmic
scale:
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , hover_name ="country" , log_x=True)
fig.show()
Setting the range of a logarithmic axis with Plotly Express works the same was as with linear axes: using the range_x and range_y keywords. Note that you cannot set
the range to include 0 or less.345678910002 345678910k2 345640455055606570758085
gdpPercaplifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
ts16/07/2025, 06:42 Log plots in Python
https://plotly.com/python/log-plot/ 1/6

--- Página 2 ---
Adding minor ticksimport plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , hover_name ="country" ,
                 log_x=True, range_x=[1,100000], range_y=[0,100])
fig.show()
new in 5.8
You can position and style minor ticks using minor. This takes a dict of properties to apply to minor ticks. See the 
 for full details on the accepted keys in this dict.
figure reference
(https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-minor)
In this example we set the tick length with ticklen, add the ticks on the inside with ticks="inside", and turn grid lines on with howgrid=True.12 5102 51002 510002 510k2 5100k020406080100
gdpPercaplifeExp
s
ts16/07/2025, 06:42 Log plots in Python
https://plotly.com/python/log-plot/ 2/6

--- Página 3 ---
Logarithmic Axes with Graph Objectsimport plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.scatter(df, x="gdpPercap" , y="lifeExp" , hover_name ="country" ,
                 log_x=True, range_x=[1,100000], range_y=[0,100])
fig.update_xaxes (minor=dict(ticks="inside" , ticklen=6, showgrid =True))
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Figure class from plotly.graph_objects (/python/graph-objects/)12 5102 51002 510002 510k2 5100k020406080100
gdpPercaplifeExp
s
ts16/07/2025, 06:42 Log plots in Python
https://plotly.com/python/log-plot/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = go.Figure()
fig.add_trace (go.Scatter(mode="markers" , x=df["gdpPercap" ], y=df["lifeExp" ] ))
fig.update_xaxes (type="log")
fig.show()
Setting the range of a logarithmic axis with plotly.graph_objects is very different than setting the range of linear axes: the range is set using the exponent rather than
the actual value:345678910002 345678910k2 34564050607080
s
ts16/07/2025, 06:42 Log plots in Python
https://plotly.com/python/log-plot/ 4/6

--- Página 5 ---
Reference
What About Dash?import plotly.graph_objects  as go
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = go.Figure()
fig.add_trace (go.Scatter(mode="markers" , x=df["gdpPercap" ], y=df["lifeExp" ] ))
fig.update_xaxes (type="log", range=[0,5]) # log range: 10^0=1, 10^5=100000
fig.update_yaxes (range=[0,100]) # linear range
fig.show()
See  or
 for more information and
chart attribute options!
function reference for px.(scatter) (https://plotly.com/python-api-reference/generated/plotly.express.scatter)
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-type (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-type)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter12 5102 51002 510002 510k2 5100k020406080100
s
ts16/07/2025, 06:42 Log plots in Python
https://plotly.com/python/log-plot/ 5/6

--- Página 6 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
ts16/07/2025, 06:42 Log plots in Python
https://plotly.com/python/log-plot/ 6/6</content>
      </file>
      <file name="Network graphs in Python.pdf" path="pyvy_2x5/Network graphs in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Create random graph
Create Edges &gt;  &gt;
Network Graphs
Network Graphs in Python
How to make Network Graphs in Python with Plotly. One examples of a network graph with NetworkX
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/network-
graphs.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In this example we show how to visualize a network graph created using networkx.
Install the Python library networkx with pip install networkx.
import plotly.graph_objects  as go
import networkx  as nx
G = nx.random_geometric_graph (200, 0.125)
Add edges as disconnected lines in a single trace and nodes as a scatter trace
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Network graphs in Python
https://plotly.com/python/network-graphs/ 1/5

--- Página 2 ---
Color Node Points
Create Network Graphedge_x = []
edge_y = []
for edge in G.edges():
    x0, y0 = G.nodes[edge[0]]['pos']
    x1, y1 = G.nodes[edge[1]]['pos']
    edge_x.append(x0)
    edge_x.append(x1)
    edge_x.append(None)
    edge_y.append(y0)
    edge_y.append(y1)
    edge_y.append(None)
edge_trace  = go.Scatter(
    x=edge_x, y=edge_y,
    line=dict(width=0.5, color='#888'),
    hoverinfo ='none',
    mode='lines')
node_x = []
node_y = []
for node in G.nodes():
    x, y = G.nodes[node]['pos']
    node_x.append(x)
    node_y.append(y)
node_trace  = go.Scatter(
    x=node_x, y=node_y,
    mode='markers' ,
    hoverinfo ='text',
    marker=dict(
        showscale =True,
        # colorscale options
        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
        colorscale ='YlGnBu' ,
        reversescale =True,
        color=[],
        size=10,
        colorbar =dict(
            thickness =15,
            title=dict(
              text='Node Connections' ,
              side='right'
            ),
            xanchor='left',
        ),
        line_width =2))
Color node points by the number of connections.
Another option would be to size points by the number of connections i.e. node_trace.marker.size = node_adjacencies
node_adjacencies  = []
node_text  = []
for node, adjacencies  in enumerate (G.adjacency ()):
    node_adjacencies .append(len(adjacencies [1]))
    node_text .append('# of connections: ' +str(len(adjacencies [1])))
node_trace .marker.color = node_adjacencies
node_trace .text = node_text
16/07/2025, 06:44 Network graphs in Python
https://plotly.com/python/network-graphs/ 2/5

--- Página 3 ---
Network graphs in Dashfig = go.Figure(data=[edge_trace , node_trace ],
             layout=go.Layout(
                title=dict(
                    text="&lt;br&gt;Network graph made with Python" ,
                    font=dict(
                        size=16
                    )
                ),
                showlegend =False,
                hovermode ='closest' ,
                margin=dict(b=20,l=5,r=5,t=40),
                annotations =[ dict(
                    text="Python code: &lt;a href='https://plotly.com/python/network-graphs/'&gt; https://plotly.com/python/network-graphs/&lt;/a&gt;" ,
                    showarrow =False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=dict(showgrid =False, zeroline =False, showticklabels =False),
                yaxis=dict(showgrid =False, zeroline =False, showticklabels =False))
                )
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash dash-cytoscape, click
"Download" to get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)24681012141618
Node ConnectionsNetwork graph made with Python
Python code: 
 https://plotly.com/python/network-graphs/
16/07/2025, 06:44 Network graphs in Python
https://plotly.com/python/network-graphs/ 3/5

--- Página 4 ---
ReferenceSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
See  for more information and chart attribute options!
https://plotly.com/python/reference/scatter/ (https://plotly.com/python/reference/scatter/)
from dash import Dash, html
import dash_cytoscape as cyto
app = Dash(__name__)
app.layout = html.Div([
    html.P("Dash Cytoscape:"),
    cyto.Cytoscape(
        id='cytoscape',
        elements=[
            {'data': {'id': 'ca', 'label': 'Canada'}},
            {'data': {'id': 'on', 'label': 'Ontario'}},
            {'data': {'id': 'qc', 'label': 'Quebec'}},
            {'data': {'source': 'ca', 'target': 'on'}},
            {'data': {'source': 'ca', 'target': 'qc'}}
        ],
        layout={'name': 'breadthfirst'},
        style={'width': '400px', 'height': '500px'}
    )
])
app.run(debug=True)DOWNLOAD
Dash Cytoscape:
16/07/2025, 06:44 Network graphs in Python
https://plotly.com/python/network-graphs/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:44 Network graphs in Python
https://plotly.com/python/network-graphs/ 5/5</content>
      </file>
      <file name="Parallel coordinates plot in Python.pdf" path="pyvy_2x5/Parallel coordinates plot in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Parallel Coordinates plot with Plotly Express &gt;  &gt; Parallel
Coordinates Plot
Parallel Coordinates Plot in Python
How to make parallel coordinates plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/parallel-
coordinates-plot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces . In a parallel coordinates plot with px.parallel_coordinates, each row of the DataFrame is represented
by a polyline mark which traverses a set of parallel axes, one for each of the dimensions. For other representations of multivariate data, also see 
,  and .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
parallel categories
(/python/parallel-categories-diagram/)
radar charts (/python/radar-chart/)
scatterplot matrix (SPLOM) (/python/splom/)
import plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, color="species_id" , labels={"species_id" : "Species" ,
                "sepal_width" : "Sepal Width" , "sepal_length" : "Sepal Length" ,
                "petal_width" : "Petal Width" , "petal_length" : "Petal Length" , },
                             color_continuous_scale =px.colors.diverging .Tealrose ,
                             color_continuous_midpoint =2)
fig.show()
Parallel coordinates are richly interactive by default. Drag the lines along the axes to filter regions.
Select the columns to be represented with the dimensions parameter.
11.522.53Species
4.555.566.577.5Sepal Length
7.9
4.322.533.54Sepal Width
4.4
2123456Petal Length
6.9
10.511.522.5Petal Width
2.5
0.111.21.41.61.822.22.42.62.83Species
3
1
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 1/8

--- Página 2 ---
import plotly.express  as px
df = px.data.iris()
fig = px.parallel_coordinates (df, color="species_id" ,
                              dimensions =['sepal_width' , 'sepal_length' , 'petal_width' ,
                                          'petal_length' ],
                              color_continuous_scale =px.colors.diverging .Tealrose ,
                              color_continuous_midpoint =2)
fig.show()
11.522.53species_id
22.533.54sepal_width
4.4
24.555.566.577.5sepal_length
7.9
4.30.511.522.5petal_width
2.5
0.1123456petal_length
6.9
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 2/8

--- Página 3 ---
Parallel Coordinates Chart with go.Parcoords
import plotly.graph_objects  as go
fig = go.Figure(data=
    go.Parcoords (
        line_color ='blue',
        dimensions  = list([
            dict(range = [1,5],
                 constraintrange  = [1,2], # change this range by dragging the pink line
                 label = 'A', values = [1,4]),
            dict(range = [1.5,5],
                 tickvals  = [1.5,3,4.5],
                 label = 'B', values = [3,1.5]),
            dict(range = [1,5],
                 tickvals  = [1,2,4,5],
                 label = 'C', values = [2,4],
                 ticktext  = ['text 1' , 'text 2' , 'text 3' , 'text 4' ]),
            dict(range = [1,5],
                 label = 'D', values = [4,2])
        ])
    )
)
fig.show()
11.522.533.544.55A
5
11.534.5B
text 1text 2text 3text 4C
11.522.533.544.55D
5
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 3/8

--- Página 4 ---
Basic Parallel Coordinates PlotParallel coordinates are richly interactive by default. Drag the lines along the axes to filter regions and drag the axis names across the plot to rearrange variables.
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv" )
fig = go.Figure(data=
    go.Parcoords (
        line = dict(color = df['species_id' ],
                   colorscale  = [[0,'purple' ],[0.5,'lightseagreen' ],[1,'gold']]),
        dimensions  = list([
            dict(range = [0,8],
                constraintrange  = [4,8],
                label = 'Sepal Length' , values = df['sepal_length' ]),
            dict(range = [0,8],
                label = 'Sepal Width' , values = df['sepal_width' ]),
            dict(range = [0,8],
                label = 'Petal Length' , values = df['petal_length' ]),
            dict(range = [0,8],
                label = 'Petal Width' , values = df['petal_width' ])
        ])
    )
)
fig.update_layout (
    plot_bgcolor  = 'white',
    paper_bgcolor  = 'white'
)
fig.show()
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 4/8

--- Página 5 ---
012345678Sepal Length
8
0012345678Sepal Width
8
0012345678Petal Length
8
0012345678Petal Width
8
0
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 5/8

--- Página 6 ---
Advanced Parallel Coordinates Plot
Unselected Line Color and Opacityimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv" )
fig = go.Figure(data=
    go.Parcoords (
        line = dict(color = df['colorVal' ],
                   colorscale  = 'Electric' ,
                   showscale  = True,
                   cmin = -4000,
                   cmax = -100),
        dimensions  = list([
            dict(range = [32000,227900],
                 constraintrange  = [100000,150000],
                 label = "Block Height" , values = df['blockHeight' ]),
            dict(range = [0,700000],
                 label = 'Block Width' , values = df['blockWidth' ]),
            dict(tickvals  = [0,0.5,1,2,3],
                 ticktext  = ['A','AB','B','Y','Z'],
                 label = 'Cyclinder Material' , values = df['cycMaterial' ]),
            dict(range = [-1,4],
                 tickvals  = [0,1,2,3],
                 label = 'Block Material' , values = df['blockMaterial' ]),
            dict(range = [134,3154],
                 visible = True,
                 label = 'Total Weight' , values = df['totalWeight' ]),
            dict(range = [9,19984],
                 label = 'Assembly Penalty Wt' , values = df['assemblyPW' ]),
            dict(range = [49000,568000],
                 label = 'Height st Width' , values = df['HstW'])])
    )
)
fig.show()
New in 5.10
The color and opacity of unselected lines can be set with unselected. By setting opacity=0, you can hide the unselected lines. Here, we set the color to lightgray and
the opacity to 0.5.
−4000−3500−3000−2500−2000−1500−1000−500
40k60k80k100k120k140k160k180k200k220kBlock Height
227.9k
32k0100k200k300k400k500k600k700kBlock Width
700k
0AABBYZCyclinder Material
0123Block Material
50010001500200025003000Total Weight
3154
1345k10k15kAssembly Penalty Wt
19.984k
0.009k100k200k300k400k500kHeight st Width
568k
49k
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 6/8

--- Página 7 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure(data=
    go.Parcoords (
        line_color ='blue',
        dimensions  = list([
            dict(range = [1,5],
                 constraintrange  = [1,2], # change this range by dragging the pink line
                 label = 'A', values = [1,4]),
            dict(range = [1.5,5],
                 tickvals  = [1.5,3,4.5],
                 label = 'B', values = [3,1.5]),
            dict(range = [1,5],
                 tickvals  = [1,2,4,5],
                 label = 'C', values = [2,4],
                 ticktext  = ['text 1' , 'text 2' , 'text 3' , 'text 4' ]),
            dict(range = [1,5],
                 label = 'D', values = [4,2])
        ]),
        unselected  = dict(line = dict(color = 'green', opacity = 0.5))
    )
)
fig.show()
See  or
 for more information and chart attribute options!
function reference for px.(parallel_coordinates) (https://plotly.com/python-api-reference/generated/plotly.express.parallel_coordinates)
https://plotly.com/python/reference/parcoords/ (https://plotly.com/python/reference/parcoords/)
11.522.533.544.55A
5
11.534.5B
text 1text 2text 3text 4C
11.522.533.544.55D
5
1
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 7/8

--- Página 8 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
y Express16/07/2025, 06:44 Parallel coordinates plot in Python
https://plotly.com/python/parallel-coordinates-plot/ 8/8</content>
      </file>
      <file name="Polar charts in Python.pdf" path="pyvy_2x5/Polar charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Polar chart with Plotly Express &gt;  &gt; Polar
Charts
Polar Charts in Python
How to make polar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/polar-
chart.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A polar chart represents data along radial and angular axes. With Plotly Express, it is possible to represent polar data as scatter markers with px.scatter_polar, and as
lines with px.line_polar.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
For other types of arguments, see the section below using go.Scatterpolar.
The radial and angular coordinates are given with the r and theta arguments of px.scatter_polar. In the example below the theta data are categorical, but numerical
data are possible too and the most common case.
import plotly.express  as px
df = px.data.wind()
fig = px.scatter_polar (df, r="frequency" , theta="direction" )
fig.show()
The "strength" column corresponds to strength categories of the wind, and there is a frequency value for each direction and strength. Below we use the strength
column to encode the color, symbol and size of the markers.N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
00.511.522.5
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 1/14

--- Página 2 ---
import plotly.express  as px
df = px.data.wind()
fig = px.scatter_polar (df, r="frequency" , theta="direction" ,
                       color="strength" , symbol="strength" , size="frequency" ,
                       color_discrete_sequence =px.colors.sequential .Plasma_r )
fig.show()
For a line polar plot, use px.line_polar:
import plotly.express  as px
df = px.data.wind()
fig = px.line_polar (df, r="frequency" , theta="direction" , color="strength" , line_close =True,
                    color_discrete_sequence =px.colors.sequential .Plasma_r ,
                    template ="plotly_dark" ,)
fig.show()
See also the  for more wind rose visualizations in polar coordinates.
wind rose page (https://plotly.com/python/wind-rose-charts/)
You can plot less than a whole circle with the range_theta argument, and also control the start_angle and direction:
N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
00.511.522.5strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+
N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
00.511.522.5strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 2/14

--- Página 3 ---
Polar Scatter Plot with go.Scatterpolar
Basic Polar Chartimport plotly.express  as px
fig = px.scatter_polar (r=range(0,90,10), theta=range(0,90,10),
                       range_theta =[0,90], start_angle =0, direction ="counterclockwise" )
fig.show()
If Plotly Express does not provide a good starting point, you can use . All the
options are documented in the .
the more generic go.Scatterpolar class from plotly.graph_objects (/python/graph-objects/)
reference page (https://plotly.com/python/reference/scatterpolar/)0°15°30°45°60°75°90°
01020304050607080
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 3/14

--- Página 4 ---
Line Polar Chartimport plotly.graph_objects  as go
fig = go.Figure(data=
    go.Scatterpolar (
        r = [0.5,1,2,2.5,3,4],
        theta = [35,70,120,155,205,240],
        mode = 'markers' ,
    ))
fig.update_layout (showlegend =False)
fig.show()
0°45°90°
135°
180°
225°
270°315°00.511.522.533.54
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 4/14

--- Página 5 ---
Polar Bar Chartimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/polar_dataset.csv" )
fig = go.Figure()
fig.add_trace (go.Scatterpolar (
        r = df['x1'],
        theta = df['y'],
        mode = 'lines',
        name = 'Figure 8' ,
        line_color  = 'peru'
    ))
fig.add_trace (go.Scatterpolar (
        r = df['x2'],
        theta = df['y'],
        mode = 'lines',
        name = 'Cardioid' ,
        line_color  = 'darkviolet'
    ))
fig.add_trace (go.Scatterpolar (
        r = df['x3'],
        theta = df['y'],
        mode = 'lines',
        name = 'Hypercardioid' ,
        line_color  = 'deepskyblue'
    ))
fig.update_layout (
    title = 'Mic Patterns' ,
    showlegend  = False
)
fig.show()
a.k.a matplotlib logo in a few lines of code0°45°90°
135°
180°
225°
270°315°00.20.40.60.81Mic Patterns
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 5/14

--- Página 6 ---
Categorical Polar Chartimport plotly.graph_objects  as go
fig = go.Figure(go.Barpolar (
    r=[3.5, 1.5, 2.5, 4.5, 4.5, 4, 3],
    theta=[65, 15, 210, 110, 312.5, 180, 270],
    width=[20,15,10,20,15,30,15,],
    marker_color =["#E4FF87" , '#709BFF' , '#709BFF' , '#FFAA70' , '#FFAA70' , '#FFDF70' , '#B6FFB4' ],
    marker_line_color ="black",
    marker_line_width =2,
    opacity=0.8
))
fig.update_layout (
    template =None,
    polar = dict(
        radialaxis  = dict(range=[0, 5], showticklabels =False, ticks=''),
        angularaxis  = dict(showticklabels =False, ticks='')
    )
)
fig.show()
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 6/14

--- Página 7 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, specs=[[{'type': 'polar'}]*2]*2)
fig.add_trace (go.Scatterpolar (
      name = "angular categories" ,
      r = [5, 4, 2, 4, 5],
      theta = ["a", "b", "c", "d", "a"],
    ), 1, 1)
fig.add_trace (go.Scatterpolar (
      name = "radial categories" ,
      r = ["a", "b", "c", "d", "b", "f", "a"],
      theta = [1, 4, 2, 1.5, 1.5, 6, 5],
      thetaunit  = "radians" ,
    ), 1, 2)
fig.add_trace (go.Scatterpolar (
      name = "angular categories (w/ categoryarray)" ,
      r = [5, 4, 2, 4, 5],
      theta = ["a", "b", "c", "d", "a"],
    ), 2, 1)
fig.add_trace (go.Scatterpolar (
      name = "radial categories (w/ category descending)" ,
      r = ["a", "b", "c", "d", "b", "f", "a", "a"],
      theta = [45, 90, 180, 200, 300, 15, 20, 45],
    ), 2, 2)
fig.update_traces (fill='toself' )
fig.update_layout (
    polar = dict(
      radialaxis_angle  = -45,
      angularaxis  = dict(
        direction  = "clockwise" ,
        period = 6)
    ),
    polar2 = dict(
      radialaxis  = dict(
        angle = 180,
        tickangle  = -180 # so that tick labels are not upside down
      )
    ),
    polar3 = dict(
      sector = [80, 400],
      radialaxis_angle  = -45,
      angularaxis_categoryarray  = ["d", "a", "c", "b"]
    ),
    polar4 = dict(
      radialaxis_categoryorder  = "category descending" ,
      angularaxis  = dict(
        thetaunit  = "radians" ,
        dtick = 0.3141592653589793
      ))
)
fig.show()
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 7/14

--- Página 8 ---
Polar Chart Sectora
b
c
d0
1
2
3
4
50°45°90°
135°
180°
225°
270°315°abcdf
da
c
b0
1
2
3
4
501⁄10π1⁄5π3⁄10π2⁄5π1⁄2π 3⁄5π
7⁄10π
4⁄5π
9⁄10π
π
11⁄10π
6⁄5π
13⁄10π7⁄5π3⁄2π8⁄5π17⁄10π9⁄5π19⁄10πfdcbaangular categories
radial categories
angular categories (w/ categoryarray)
radial categories (w/ category descending)
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 8/14

--- Página 9 ---
Polar Chart Directionsimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2, specs=[[{'type': 'polar'}]*2])
fig.add_trace (go.Scatterpolar (), 1, 1)
fig.add_trace (go.Scatterpolar (), 1, 2)
# Same data for the two Scatterpolar plots, we will only change the sector in the layout
fig.update_traces (mode = "lines+markers" ,
      r = [1,2,3,4,5],
      theta = [0,90,180,360,0],
      line_color  = "magenta" ,
      marker = dict(
        color = "royalblue" ,
        symbol = "square" ,
        size = 8
      ))
# The sector is [0, 360] by default, we update it for the first plot only
fig.update_layout (
    showlegend  = False,
    polar = dict(# setting parameters for the second plot would be polar2=dict(...)
      sector = [150,210],
    ))
fig.show()
150°
165°
180°
195°
210°00.511.522.533.544.55
0°45°90°
135°
180°
225°
270°315°012345
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 9/14

--- Página 10 ---
Webgl Polar Chartimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2, specs=[[{'type': 'polar'},    {'type': 'polar'}]])
r = [1,2,3,4,5]
theta = [0,90,180,360,0]
fig.add_trace (go.Scatterpolar (), 1, 1)
fig.add_trace (go.Scatterpolar (), 1, 2)
# Same data for the two Scatterpolar plots, we will only change the direction in the layout
fig.update_traces (r= r, theta=theta,
                  mode="lines+markers" , line_color ='indianred' ,
                  marker=dict(color='lightslategray' , size=8, symbol='square' ))
fig.update_layout (
    showlegend  = False,
    polar = dict(
      radialaxis_tickfont_size  = 8,
      angularaxis  = dict(
        tickfont_size =8,
        rotation =90, # start position of angular axis
        direction ="counterclockwise"
      )
    ),
    polar2 = dict(
      radialaxis_tickfont_size  = 8,
      angularaxis  = dict(
        tickfont_size  = 8,
        rotation  = 90,
        direction  = "clockwise"
      ),
    ))
fig.show()
The go.Scatterpolargl trace uses the  plotting engine for GPU-accelerated rendering.
WebGL (https://en.wikipedia.org/wiki/WebGL)0°
45°
90°
135°
180°225°270°315°
0123450°
45°
90°
135°
180°225°270°315°
012345
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 10/14

--- Página 11 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv" )
fig = go.Figure()
fig.add_trace (go.Scatterpolargl (
      r = df.trial_1_r ,
      theta = df.trial_1_theta ,
      name = "Trial 1" ,
      marker=dict(size=15, color="mediumseagreen" )
    ))
fig.add_trace (go.Scatterpolargl (
      r = df.trial_2_r ,
      theta = df.trial_2_theta ,
      name = "Trial 2" ,
      marker=dict(size=20, color="darkorange" )
    ))
fig.add_trace (go.Scatterpolargl (
      r = df.trial_3_r ,
      theta = df.trial_3_theta ,
      name = "Trial 3" ,
      marker=dict(size=12, color="mediumpurple" )
    ))
fig.add_trace (go.Scatterpolargl (
      r = df.trial_4_r ,
      theta = df.trial_4_theta ,
      name = "Trial 4" ,
      marker=dict(size=22, color = "magenta" )
    ))
fig.add_trace (go.Scatterpolargl (
      r = df.trial_5_r ,
      theta = df.trial_5_theta ,
      name = "Trial 5" ,
      marker=dict(size=19, color = "limegreen" )
      ))
fig.add_trace (go.Scatterpolargl (
      r = df.trial_6_r ,
      theta = df.trial_6_theta ,
      name = "Trial 6" ,
      marker=dict(size=10, color = "gold")
      ))
# Common parameters for all traces
fig.update_traces (mode="markers" , marker=dict(line_color ='white', opacity=0.7))
fig.update_layout (
    title = "Hobbs-Pearson Trials" ,
    font_size  = 15,
    showlegend  = False,
    polar = dict(
      bgcolor = "rgb(223, 223, 223)" ,
      angularaxis  = dict(
        linewidth  = 3,
        showline =True,
        linecolor ='black'
      ),
      radialaxis  = dict(
        side = "counterclockwise" ,
        showline  = True,
        linewidth  = 2,
        gridcolor  = "white",
        gridwidth  = 2,
      )
    ),
    paper_bgcolor  = "rgb(223, 223, 223)"
)
fig.show()
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 11/14

--- Página 12 ---
Polar Chart Subplots0°45°90°
135°
180°
225°
270°315°0246810
Hobbs-Pearson Trials
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 12/14

--- Página 13 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, specs=[[{'type': 'polar'}]*2]*2)
fig.add_trace (go.Scatterpolar (
        r = [1, 2, 3],
        theta = [50, 100, 200],
        marker_symbol  = "square"
    ), 1, 1)
fig.add_trace (go.Scatterpolar (
        r = [1, 2, 3],
        theta = [1, 2, 3],
        thetaunit  = "radians"
    ), 1, 1)
fig.add_trace (go.Scatterpolar (
        r = ["a", "b", "c", "b"],
        theta = ["D", "C", "B", "A"],
        subplot = "polar2"
    ), 1, 2)
fig.add_trace (go.Scatterpolar (
        r = [50, 300, 900],
        theta = [0, 90, 180],
        subplot = "polar3"
    ), 2, 1)
fig.add_trace (go.Scatterpolar (
        mode = "lines",
        r = [3, 3, 4, 3],
        theta = [0, 45, 90, 270],
        fill = "toself" ,
        subplot = "polar4"
    ), 2, 2)
fig.update_layout (
    polar = dict(
      radialaxis_range  = [1, 4],
      angularaxis_thetaunit  = "radians"
    ),
    polar3 = dict(
      radialaxis  = dict(type = "log", tickangle  = 45),
      sector = [0, 180]
    ),
    polar4 = dict(
      radialaxis  = dict(visible = False, range = [0, 6])),
    showlegend  = False
)
fig.show()
01⁄4π1⁄2π
3⁄4π
π
5⁄4π
3⁄2π7⁄4π
11.522.533.54DC
B
Aabc
0°30°60°90°
120°
150°
180°56789100234567890°45°90°
135°
180°
225°
270°315°
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 13/14

--- Página 14 ---
Reference
What About Dash?See  or 
 or 
 for more information and chart attribute options!
function reference for px.(scatter_polar) (https://plotly.com/python-api-reference/generated/plotly.express.scatter_polar)
function reference for px.(line_polar)
(https://plotly.com/python-api-reference/generated/plotly.express.line_polar)
https://plotly.com/python/reference/scatterpolar/
(https://plotly.com/python/reference/scatterpolar/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
lar16/07/2025, 06:45 Polar charts in Python
https://plotly.com/python/polar-chart/ 14/14</content>
      </file>
      <file name="Quiver plots in Python.pdf" path="pyvy_2x5/Quiver plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Quiver Plot
Quiver Plot with Points &gt;  &gt;
Quiver Plots
Quiver Plots in Python
How to make a quiver plot in Python. A quiver plot displays velocity vectors a arrows.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/quiver-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Quiver plots can be made using a  as detailed in this page.
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
import numpy as np
x,y = np.meshgrid (np.arange(0, 2, .2), np.arange(0, 2, .2))
u = np.cos(x)*y
v = np.sin(x)*y
fig = ff.create_quiver (x, y, u, v)
fig.show()
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 1/3

--- Página 2 ---
See also
Referenceimport plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
x,y = np.meshgrid (np.arange(-2, 2, .2),
                  np.arange(-2, 2, .25))
z = x*np.exp(-x**2 - y**2)
v, u = np.gradient (z, .2, .2)
# Create quiver figure
fig = ff.create_quiver (x, y, u, v,
                       scale=.25,
                       arrow_scale =.4,
                       name='quiver' ,
                       line_width =1)
# Add points to figure
fig.add_trace (go.Scatter(x=[-.7, .75], y=[0,0],
                    mode='markers' ,
                    marker_size =12,
                    name='points' ))
fig.show()
 for the 3D equivalent of quiver plots.
Cone plot (/python/cone-plot)
For more info on ff.create_quiver(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_quiver.html)−2 −1.5 −1 −0.5 0 0.5 1 1.5−2−1.5−1−0.500.511.5quiver
points
16/07/2025, 06:44 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:44 Quiver plots in Python
https://plotly.com/python/quiver-plots/ 3/3</content>
      </file>
      <file name="Radar charts in Python.pdf" path="pyvy_2x5/Radar charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Radar Chart with Plotly Express &gt;  &gt; Radar
Charts
Radar Charts in Python
How to make radar charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/radar-
chart.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  (also known as a spider plot or star plot) displays multivariate data in the form of a two-dimensional chart of
quantitative variables represented on axes originating from the center. The relative position and angle of the axes is typically uninformative. It is equivalent to a
 with the axes arranged radially.
Radar Chart (https://en.wikipedia.org/wiki/Radar_chart)
parallel coordinates plot (/python/parallel-coordinates-plot/)
For a Radar Chart, use a  with categorical angular variables, with px.line_polar, or with go.Scatterpolar. See 
.
polar chart (/python/polar-chart/)
more examples of polar
charts (/python/polar-chart/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Use line_close=True for closed lines.
import plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    r=[1, 5, 2, 2, 3],
    theta=['processing cost' ,'mechanical properties' ,'chemical stability' ,
           'thermal stability' , 'device integration' ]))
fig = px.line_polar (df, r='r', theta='theta', line_close =True)
fig.show()
For a filled line in a Radar Chart, update the figure created with px.line_polar with fig.update_traces.processing cost
mechanical properties
chemical stability thermal stabilitydevice integration
012345
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 1/5

--- Página 2 ---
import plotly.express  as px
import pandas as pd
df = pd.DataFrame (dict(
    r=[1, 5, 2, 2, 3],
    theta=['processing cost' ,'mechanical properties' ,'chemical stability' ,
           'thermal stability' , 'device integration' ]))
fig = px.line_polar (df, r='r', theta='theta', line_close =True)
fig.update_traces (fill='toself' )
fig.show()
processing cost
mechanical properties
chemical stability thermal stabilitydevice integration
012345
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 2/5

--- Página 3 ---
Basic Radar Chart with go.Scatterpolar
Multiple Trace Radar Chartimport plotly.graph_objects  as go
fig = go.Figure(data=go.Scatterpolar (
  r=[1, 5, 2, 2, 3],
  theta=['processing cost' ,'mechanical properties' ,'chemical stability' , 'thermal stability' ,
           'device integration' ],
  fill='toself'
))
fig.update_layout (
  polar=dict(
    radialaxis =dict(
      visible=True
    ),
  ),
  showlegend =False
)
fig.show()
processing costmechanical properties
chemical stability
thermal stability
device integration012345
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 3/5

--- Página 4 ---
Referenceimport plotly.graph_objects  as go
categories  = ['processing cost' ,'mechanical properties' ,'chemical stability' ,
              'thermal stability' , 'device integration' ]
fig = go.Figure()
fig.add_trace (go.Scatterpolar (
      r=[1, 5, 2, 2, 3],
      theta=categories ,
      fill='toself' ,
      name='Product A'
))
fig.add_trace (go.Scatterpolar (
      r=[4, 3, 2.5, 1, 2],
      theta=categories ,
      fill='toself' ,
      name='Product B'
))
fig.update_layout (
  polar=dict(
    radialaxis =dict(
      visible=True,
      range=[0, 5]
    )),
  showlegend =False
)
fig.show()
See  or
 for more information and chart attribute options!
function reference for px.(line_polar) (https://plotly.com/python-api-reference/generated/plotly.express.line_polar)
https://plotly.com/python/reference/scatterpolar/ (https://plotly.com/python/reference/scatterpolar/)processing costmechanical properties
chemical stability
thermal stability
device integration012345
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
olar16/07/2025, 06:45 Radar charts in Python
https://plotly.com/python/radar-chart/ 5/5</content>
      </file>
      <file name="Scientific charts in Python.pdf" path="pyvy_2x5/Scientific charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
Scientific Charts (/python/scientific-charts)
Plotly Python Open Source Graphing Library Scientific Charts
Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make scientific charts such as contour plots, heatmaps,
dendrograms, polar charts, and ternary plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/contour-plots/)
Contour Plots
(/python/heatmaps/)
Heatmaps
(/python/imshow/)
Imshow
(/python/ternary-plots/)
Ternary Plots
(/python/log-plot/)
Log Plots
(/python/dendrogram/)
Dendrograms
(/python/annotated-
heatmap/)
Annotated Heatmaps
(/python/ternary-scatter-
contour/)
Ternary Overlay
(/python/parallel-
coordinates-plot/)
Parallel Coordinates Plot
(/python/quiver-plots/)
Quiver Plots
(/python/streamline-
plots/)
Streamline Plots
(/python/network-
graphs/)
Network Graphs
(/python/carpet-plot/)
Carpet Plots
(/python/carpet-
contour/)
Carpet Contour Plot
(/python/carpet-scatter/)
Carpet Scatter Plot
(/python/polar-chart/)
Polar Charts
(/python/radar-chart/)
Radar Charts
(/python/ternary-
contour/)
Ternary contours
(/python/wind-rose-
charts/)
Wind Rose and Polar Bar
Charts
(/python/smith-charts/)
Smith Charts
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:42 Scientific charts in Python
https://plotly.com/python/scientific-charts/ 1/2

--- Página 2 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:42 Scientific charts in Python
https://plotly.com/python/scientific-charts/ 2/2</content>
      </file>
      <file name="Smith charts in Python.pdf" path="pyvy_2x5/Smith charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Smith Charts with Plotly Graph Objects &gt;  &gt; Smith
Charts
Smith Charts in Python
How to make Smith Charts with plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/smith-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
New in v5.4
A  is a specialized chart for visualizing :
numbers with both a real and imaginary part.
Smith Chart (https://en.wikipedia.org/wiki/Smith_chart)
complex numbers (https://en.wikipedia.org/wiki/Complex_number)
import plotly.graph_objects  as go
fig = go.Figure(go.Scattersmith (imag=[0.5, 1, 2, 3], real=[0.5, 1, 2, 3]))
fig.show()
∞
−5
−2
−1−0.5−0.200.20.51
2
5
0.20.5125
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ects16/07/2025, 06:45 Smith charts in Python
https://plotly.com/python/smith-charts/ 1/3

--- Página 2 ---
Smith Chart Subplots and Styling
Referenceimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Scattersmith (
    imag=[1],
    real=[1],
    marker_symbol ='x',
    marker_size =30,
    marker_color ="green",
    subplot="smith1"
))
fig.add_trace (go.Scattersmith (
    imag=[1],
    real=[1],
    marker_symbol ='x',
    marker_size =30,
    marker_color ="pink",
    subplot="smith2"
))
fig.update_layout (
    smith=dict(
        realaxis_gridcolor ='red',
        imaginaryaxis_gridcolor ='blue',
        domain=dict(x=[0,0.45])
    ),
    smith2=dict(
        realaxis_gridcolor ='blue',
        imaginaryaxis_gridcolor ='red',
        domain=dict(x=[0.55,1])
    )
)
fig.update_smiths (bgcolor="lightgrey" )
fig.show()
See  and 
 for more information and chart attribute options!
https://plotly.com/python/reference/scattersmith/ (https://plotly.com/python/reference/scattersmith/)
https://plotly.com/python/reference/layout/smith/
(https://plotly.com/python/reference/layout/smith/)∞
−5
−2
−1−0.5−0.200.20.51
2
5
0.20.5125
∞
−5
−2
−1−0.5−0.200.20.51
2
5
0.20.5125trace 0
trace 1
ects16/07/2025, 06:45 Smith charts in Python
https://plotly.com/python/smith-charts/ 2/3

--- Página 3 ---
What About Dash? 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ects16/07/2025, 06:45 Smith charts in Python
https://plotly.com/python/smith-charts/ 3/3</content>
      </file>
      <file name="Streamline plots in Python.pdf" path="pyvy_2x5/Streamline plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)uniformly spaced ranges of x and y values (1D)
2-D velocity values u and v defined on the cross-product (np.meshgrid(x, y)) of x and y.
Basic Streamline Plot &gt;  &gt;
Streamline Plots
Streamline Plots in Python
How to make a streamline plot in Python. A streamline plot displays vector field data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/streamline-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A Streamline plot is a representation based on a 2-D vector field interpreted as a velocity field, consisting of closed curves tangent to the velocity field. In the case of a
stationary velocity field, streamlines coincide with trajectories (see also the 
).
Wikipedia page on streamlines, streaklines and pathlines
(https://en.wikipedia.org/wiki/Streamlines,_streaklines,_and_pathlines)
For the streamline , one needs to provide
figure factory (/python/figure-factories/)
Velocity values are interpolated when determining the streamlines. Streamlines are initialized on the boundary of the x-y domain.
Streamline plots can be made with a  as detailed in this page.
figure factory (/python/figure-factories/)
import plotly.figure_factory  as ff
import numpy as np
x = np.linspace (-3, 3, 100)
y = np.linspace (-3, 3, 100)
Y, X = np.meshgrid (x, y)
u = -1 - X**2 + Y
v = 1 + X - Y**2
# Create streamline figure
fig = ff.create_streamline (x, y, u, v, arrow_scale =.1)
fig.show()
−3 −2 −1 0 1 2−3−2−10123
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:44 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 1/3

--- Página 2 ---
Streamline and Source Point Plot
See also
Referenceimport plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
N = 50
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace (x_start, x_end, N)
y = np.linspace (y_start, y_end, N)
X, Y = np.meshgrid (x, y)
source_strength  = 5.0
x_source , y_source  = -1.0, 0.0
# Compute the velocity field on the mesh grid
u = (source_strength /(2*np.pi) *
     (X - x_source )/((X - x_source )**2 + (Y - y_source )**2))
v = (source_strength /(2*np.pi) *
     (Y - y_source )/((X - x_source )**2 + (Y - y_source )**2))
# Create streamline figure
fig = ff.create_streamline (x, y, u, v,
                           name='streamline' )
# Add source point
fig.add_trace (go.Scatter(x=[x_source ], y=[y_source ],
                          mode='markers' ,
                          marker_size =14,
                          name='source point' ))
fig.show()
For a 3D version of streamlines, use the trace go.Streamtube documented .
here (/python/streamtube-plot/)
For representing the 2-D vector field as arrows, see the .
quiver plot tutorial (/python/quiver-plots/)
For more info on ff.create_streamline(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_streamline.html)−2 −1.5 −1 −0.5 0 0.5 1 1.5−1−0.500.51 streamline
source point
16/07/2025, 06:44 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:44 Streamline plots in Python
https://plotly.com/python/streamline-plots/ 3/3</content>
      </file>
      <file name="Ternary contours in Python.pdf" path="pyvy_2x5/Ternary contours in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Ternary contour plots
Simple ternary contour plot with plotly &gt;  &gt;
Ternary contours
Ternary contours in Python
How to make Ternary Contour Plots in Python with plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/ternary-
contour.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A ternary contour plots represents isovalue lines of a quantity defined inside a , i.e. as a function of three
variables which sum is constant. Coordinates of the ternary plot often correspond to concentrations of three species, and the quantity represented as contours is
some property (e.g., physical, chemical, thermodynamical) varying with the composition.
ternary diagram (https://en.wikipedia.org/wiki/Ternary_plot)
For ternary contour plots, use the  called create_ternary_contour. The figure factory interpolates between given data points in
order to compute the contours.
figure factory (/python/figure-factories/)
Below we represent an example from metallurgy, where the mixing enthalpy is represented as a contour plot for aluminum-copper-yttrium (Al-Cu-Y) alloys.
import plotly.figure_factory  as ff
import numpy as np
Al = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])
Cu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])
Y = 1 - Al - Cu
# synthetic data for mixing enthalpy
# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html
enthalpy  = (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                interp_mode ='cartesian' )
fig.show()
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Al
Y Cu
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
otly
y
ts16/07/2025, 06:45 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 1/6

--- Página 2 ---
Customized ternary contour plot
Ternary contour plot with lines onlyimport plotly.figure_factory  as ff
import numpy as np
Al = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])
Cu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])
Y = 1 - Al - Cu
# synthetic data for mixing enthalpy
# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html
enthalpy  = 2.e6 * (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2 - 5000
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                interp_mode ='cartesian' ,
                                ncontours =20,
                                colorscale ='Viridis' ,
                                showscale =True,
                                title=dict(
                                  text='Mixing enthalpy of ternary alloy'
                                ))
fig.show()
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2
−20k−15k−10k−5k0Mixing enthalpy of ternary alloy
Al
Y Cu
otly
y
ts16/07/2025, 06:45 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 2/6

--- Página 3 ---
Ternary contour plot with data pointsimport plotly.figure_factory  as ff
import numpy as np
Al = np.array([0. , 0. , 0., 0., 1./3, 1./3, 1./3, 2./3, 2./3, 1.])
Cu = np.array([0., 1./3, 2./3, 1., 0., 1./3, 2./3, 0., 1./3, 0.])
Y = 1 - Al - Cu
# synthetic data for mixing enthalpy
# See https://pycalphad.org/docs/latest/examples/TernaryExamples.html
enthalpy  = 2.e6 * (Al - 0.01) * Cu * (Al - 0.52) * (Cu - 0.48) * (Y - 1)**2 - 5000
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                interp_mode ='cartesian' ,
                                ncontours =20,
                                coloring ='lines')
fig.show()
With showmarkers=True, data points used to compute the contours are also displayed. They are best visualized for contour lines (no solid coloring). At the moment
data points lying on the edges of the diagram are not displayed, this will be improved in future versions.0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Al
Y Cu
otly
y
ts16/07/2025, 06:45 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 3/6

--- Página 4 ---
Interpolation modeimport plotly.figure_factory  as ff
import numpy as np
Al, Cu = np.mgrid[0:1:7j, 0:1:7j]
Al, Cu = Al.ravel(), Cu.ravel()
mask = Al + Cu &lt;= 1
Al, Cu = Al[mask], Cu[mask]
Y = 1 - Al - Cu
enthalpy  = (Al - 0.5) * (Cu - 0.5) * (Y - 1)**2
fig = ff.create_ternary_contour (np.array([Al, Y, Cu]), enthalpy ,
                                pole_labels =['Al', 'Y', 'Cu'],
                                ncontours =20,
                                coloring ='lines',
                                showmarkers =True)
fig.show()
Two modes are available in order to interpolate between data points: interpolation in Cartesian space (interp_mode='cartesian') or interpolation using the 
 (see also 
interp_mode='ilr'. The ilr transformation preserves metrics in the  but is not defined on its edges.
isometric
log-ratio transformation (https://link.springer.com/article/10.1023/A:1023818214614)
preprint
(https://www.researchgate.net/profile/Leon_Parent2/post/What_is_the_best_approach_for_diagnosing_nutrient_disorders_and_formulating_fertilizer_recommendations/at
simplex (https://en.wikipedia.org/wiki/Simplex)0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Al
Y Cu
otly
y
ts16/07/2025, 06:45 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 4/6

--- Página 5 ---
Referencea, b = np.mgrid[0:1:20j, 0:1:20j]
mask = a + b &lt;= 1
a, b = a[mask], b[mask]
coords = np.stack((a, b, 1 - a - b))
value = np.sin(3.2 * np.pi * (a + b)) + np.sin(3 * np.pi * (a - b))
fig = ff.create_ternary_contour (coords, value, ncontours =9)
fig.show()
a, b = np.mgrid[0:1:20j, 0:1:20j]
mask = a + b &lt;= 1
a, b = a[mask], b[mask]
coords = np.stack((a, b, 1 - a - b))
value = np.sin(3.2 * np.pi * (a + b)) + np.sin(3 * np.pi * (a - b))
fig = ff.create_ternary_contour (coords, value, interp_mode ='cartesian' ,
                                ncontours =9)
fig.show()
For more info on ff.create_ternary_contour(), see the 
full function reference (https://plotly.com/python-api-
reference/generated/plotly.figure_factory.create_ternary_contour.html)0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2a
b c
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2a
b c
otly
y
ts16/07/2025, 06:45 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
otly
y
ts16/07/2025, 06:45 Ternary contours in Python
https://plotly.com/python/ternary-contour/ 6/6</content>
      </file>
      <file name="Ternary overlay in Python.pdf" path="pyvy_2x5/Ternary overlay in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Load and Process Data Files
Create Ternary Scatter Plot: &gt;  &gt;
Ternary Overlay
Ternary Overlay in Python
How to make a scatter plot overlaid on ternary contour in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/ternary-
scatter-contour.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import json
import pandas as pd
contour_raw_data  = pd.read_json ('https://raw.githubusercontent.com/plotly/datasets/master/contour_data.json' )
scatter_raw_data  = pd.read_json ('https://raw.githubusercontent.com/plotly/datasets/master/scatter_data.json' )
scatter_data  =  scatter_raw_data ['Data']
def clean_data (data_in):
    """
    Cleans data in a format which can be conveniently
    used for drawing traces. Takes a dictionary as the
    input, and returns a list in the following format:
    input = {'key': ['a b c']}
    output = [key, [a, b, c]]
    """
    key = list(data_in.keys())[0]
    data_out  = [key]
    for i in data_in[key]:
        data_out .append(list(map(float, i.split(' '))))
    return data_out
#Example:
print(clean_data ({'L1': ['.03 0.5 0.47' ,'0.4 0.5 0.1' ]}))
['L1', [0.03, 0.5, 0.47], [0.4, 0.5, 0.1]]
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:43 Ternary overlay in Python
https://plotly.com/python/ternary-scatter-contour/ 1/4

--- Página 2 ---
Create Ternary Contour Plot:import plotly.graph_objects  as go
a_list = []
b_list = []
c_list = []
text = []
for raw_data  in scatter_data :
    data = clean_data (raw_data )
    text.append(data[0])
    c_list.append(data[1][0])
    a_list.append(data[1][1])
    b_list.append(data[1][2])
fig = go.Figure(go.Scatterternary (
  text=text,
  a=a_list,
  b=b_list,
  c=c_list,
  mode='markers' ,
  marker={'symbol' : 100,
          'color': 'green',
          'size': 10},
))
fig.update_layout ({
    'title': 'Ternary Scatter Plot' ,
    'ternary' :
        {
        'sum':1,
        'aaxis':{'title': 'X', 'min': 0.01, 'linewidth' :2, 'ticks':'outside'  },
        'baxis':{'title': 'W', 'min': 0.01, 'linewidth' :2, 'ticks':'outside'  },
        'caxis':{'title': 'S', 'min': 0.01, 'linewidth' :2, 'ticks':'outside'  }
    },
    'showlegend' : False
})
fig.show()
0.20.40.60.8
0.8 0.6 0.4 0.20.80.60.40.2Ternary Scatter Plot
X
W S
16/07/2025, 06:43 Ternary overlay in Python
https://plotly.com/python/ternary-scatter-contour/ 2/4

--- Página 3 ---
import plotly.graph_objects  as go
contour_dict  = contour_raw_data ['Data']
# Defining a colormap:
colors = ['#8dd3c7' ,'#ffffb3' ,'#bebada' ,
          '#fb8072' ,'#80b1d3' ,'#fdb462' ,
          '#b3de69' ,'#fccde5' ,'#d9d9d9' ,
          '#bc80bd' ]
colors_iterator  = iter(colors)
fig = go.Figure()
for raw_data  in contour_dict :
    data = clean_data (raw_data )
    a = [inner_data [0] for inner_data  in data[1:]]
    a.append(data[1][0]) # Closing the loop
    b = [inner_data [1] for inner_data  in data[1:]]
    b.append(data[1][1]) # Closing the loop
    c = [inner_data [2] for inner_data  in data[1:]]
    c.append(data[1][2]) # Closing the loop
    fig.add_trace (go.Scatterternary (
        text = data[0],
        a=a, b=b, c=c, mode='lines',
        line=dict(color='#444', shape='spline' ),
        fill='toself' ,
        fillcolor  = colors_iterator .__next__ ()
    ))
fig.update_layout (title = 'Ternary Contour Plot' )
fig.show()
 00.20.40.60.81
1 0.8 0.6 0.4 0.2 010.80.60.40.20
trace 0
trace 1
trace 2
trace 3
trace 4
trace 5
trace 6
trace 7
trace 8
trace 9Ternary Contour Plot
Component A
Component B Component C
16/07/2025, 06:43 Ternary overlay in Python
https://plotly.com/python/ternary-scatter-contour/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:43 Ternary overlay in Python
https://plotly.com/python/ternary-scatter-contour/ 4/4</content>
      </file>
      <file name="Ternary plots in Python.pdf" path="pyvy_2x5/Ternary plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Ternary Plots
Ternary scatter plot with Plotly Express &gt;  &gt;
Ternary Plots
Ternary Plots in Python
How to make Ternary plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/ternary-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A ternary plot depicts the ratios of three variables as positions in an equilateral triangle.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Here we use px.scatter_ternary to visualize the three-way split between the three major candidates in a municipal election.
import plotly.express  as px
df = px.data.election ()
fig = px.scatter_ternary (df, a="Joly", b="Coderre" , c="Bergeron" )
fig.show()
We can scale and color the markers to produce a ternary bubble chart.00.20.40.60.81
1 0.8 0.6 0.4 0.2 010.80.60.40.20Joly
Coderre Bergeron
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ress
ph16/07/2025, 06:42 Ternary plots in Python
https://plotly.com/python/ternary-plots/ 1/5

--- Página 2 ---
import plotly.express  as px
df = px.data.election ()
fig = px.scatter_ternary (df, a="Joly", b="Coderre" , c="Bergeron" , hover_name ="district" ,
    color="winner" , size="total", size_max =15,
    color_discrete_map  = {"Joly": "blue", "Bergeron" : "green", "Coderre" :"red"} )
fig.show()
00.20.40.60.81
1 0.8 0.6 0.4 0.2 010.80.60.40.20
winner
Joly
Coderre
Bergeron
Joly
Coderre Bergeron
ress
ph16/07/2025, 06:42 Ternary plots in Python
https://plotly.com/python/ternary-plots/ 2/5

--- Página 3 ---
Ternary scatter plot with Plotly Graph Objects
import plotly.graph_objects  as go
rawData = [
    {'journalist' :75,'developer' :25,'designer' :0,'label':'point 1' },
    {'journalist' :70,'developer' :10,'designer' :20,'label':'point 2' },
    {'journalist' :75,'developer' :20,'designer' :5,'label':'point 3' },
    {'journalist' :5,'developer' :60,'designer' :35,'label':'point 4' },
    {'journalist' :10,'developer' :80,'designer' :10,'label':'point 5' },
    {'journalist' :10,'developer' :90,'designer' :0,'label':'point 6' },
    {'journalist' :20,'developer' :70,'designer' :10,'label':'point 7' },
    {'journalist' :10,'developer' :20,'designer' :70,'label':'point 8' },
    {'journalist' :15,'developer' :5,'designer' :80,'label':'point 9' },
    {'journalist' :10,'developer' :10,'designer' :80,'label':'point 10' },
    {'journalist' :20,'developer' :10,'designer' :70,'label':'point 11' },
];
def makeAxis (title, tickangle ):
    return {
      'title': {'text': title, 'font': { 'size': 20}},
      'tickangle' : tickangle ,
      'tickfont' : { 'size': 15 },
      'tickcolor' : 'rgba(0,0,0,0)' ,
      'ticklen' : 5,
      'showline' : True,
      'showgrid' : True
    }
fig = go.Figure(go.Scatterternary ({
    'mode': 'markers' ,
    'a': [i for i in map(lambda x: x['journalist' ], rawData)],
    'b': [i for i in map(lambda x: x['developer' ], rawData)],
    'c': [i for i in map(lambda x: x['designer' ], rawData)],
    'text': [i for i in map(lambda x: x['label'], rawData)],
    'marker' : {
        'symbol' : 100,
        'color': '#DB7365' ,
        'size': 14,
        'line': { 'width': 2 }
    }
}))
fig.update_layout ({
    'ternary' : {
        'sum': 100,
        'aaxis': makeAxis ('Journalist' , 0),
        'baxis': makeAxis ('&lt;br&gt;Developer' , 45),
        'caxis': makeAxis ('&lt;br&gt;Designer' , -45)
    },
    'annotations' : [{
      'showarrow' : False,
      'text': 'Simple Ternary Plot with Markers' ,
        'x': 0.5,
        'y': 1.3,
        'font': { 'size': 15 }
    }]
})
fig.show()
ress
ph16/07/2025, 06:42 Ternary plots in Python
https://plotly.com/python/ternary-plots/ 3/5

--- Página 4 ---
Reference
What About Dash?See  or
 for more information and chart attribute options!
function reference for px.(scatter_ternary) (https://plotly.com/python-api-reference/generated/plotly.express.scatter_ternary)
https://plotly.com/python/reference/scatterternary/ (https://plotly.com/python/reference/scatterternary/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)020406080100
100806040200100806040200Journalist
Developer DesignerSimple Ternary Plot with Markers
ress
ph16/07/2025, 06:42 Ternary plots in Python
https://plotly.com/python/ternary-plots/ 4/5

--- Página 5 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ress
ph16/07/2025, 06:42 Ternary plots in Python
https://plotly.com/python/ternary-plots/ 5/5</content>
      </file>
      <file name="Wind rose and polar bar charts in Python.pdf" path="pyvy_2x5/Wind rose and polar bar charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Wind Rose Chart with Plotly Express
Basic Wind Rose Chart &gt;  &gt; Wind Rose
and Polar Bar Charts
Wind Rose and Polar Bar Charts in Python
How to graph wind rose charts in python. Wind Rose charts display wind speed and direction of a given location.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Scientific Charts (/python/scientific-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/wind-rose-charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A  (also known as a polar bar chart) is a graphical tool used to visualize how wind speed and direction are
typically distributed at a given location. You can use the px.bar_polar function from Plotly Express as below, otherwise use go.Barpolar as explained in the next
section.
wind rose chart (https://en.wikipedia.org/wiki/Wind_rose)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.wind()
fig = px.bar_polar (df, r="frequency" , theta="direction" ,
                   color="strength" , template ="plotly_dark" ,
                   color_discrete_sequence = px.colors.sequential .Plasma_r )
fig.show()
N
NNE
NE
ENE
E
ESE
SE
SSE
SSSWSWWSWWWNWNWNNW
0246810strength
0-1
1-2
2-3
3-4
4-4
4-5
5-6
6+
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s16/07/2025, 06:45 Wind rose and polar bar charts in Python
https://plotly.com/python/wind-rose-charts/ 1/3

--- Página 2 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Barpolar (
    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],
    name='11-14 m/s' ,
    marker_color ='rgb(106,81,163)'
))
fig.add_trace (go.Barpolar (
    r=[57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0],
    name='8-11 m/s' ,
    marker_color ='rgb(158,154,200)'
))
fig.add_trace (go.Barpolar (
    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],
    name='5-8 m/s' ,
    marker_color ='rgb(203,201,226)'
))
fig.add_trace (go.Barpolar (
    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],
    name='&lt; 5 m/s' ,
    marker_color ='rgb(242,240,247)'
))
fig.update_traces (text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'])
fig.update_layout (
    title=dict(text='Wind Speed Distribution in Laurel, NE' ),
    font_size =16,
    legend_font_size =16,
    polar_radialaxis_ticksuffix ='%',
    polar_angularaxis_rotation =90,
)
fig.show()
See  or
 for more information and chart attribute options!
function reference for px.(bar_polar) (https://plotly.com/python-api-reference/generated/plotly.express.bar_polar)
https://plotly.com/python/reference/barpolar/ (https://plotly.com/python/reference/barpolar/)0°
45°
90°
135°
180°225°270°315°
0%50%100%150%200%11-14 m/s
8-11 m/s
5-8 m/s
&lt; 5 m/sWind Speed Distribution in Laurel, NE
s16/07/2025, 06:45 Wind rose and polar bar charts in Python
https://plotly.com/python/wind-rose-charts/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s16/07/2025, 06:45 Wind rose and polar bar charts in Python
https://plotly.com/python/wind-rose-charts/ 3/3</content>
      </file>
    </category>
    <category name="pyvy_2x6" path="pyvy_2x6">
      <file name="Bullet charts in Python.pdf" path="pyvy_2x6/Bullet charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Bullet Charts
Add Steps, and Threshold &gt;  &gt; Bullet
Charts
Bullet Charts in Python
How to make bullet charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bullet-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Stephen Few's Bullet Chart was invented to replace dashboard  and meters, combining both types of charts into
simple bar charts with qualitative bars (steps), quantitative bar (bar) and performance line (threshold); all into one simple layout. Steps typically are broken into
several values, which are defined with an array. The bar represent the actual value that a particular variable reached, and the threshold usually indicate a goal point
relative to the value achieved by the bar. See  for more detail.
gauges (https://plotly.com/python/gauge-charts/)
indicator page (https://plotly.com/python/gauge-charts/)
import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" ,
    gauge = {'shape': "bullet" },
    value = 220,
    delta = {'reference' : 300},
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Profit" }))
fig.update_layout (height = 250)
fig.show()
Below is the same example using "steps" attribute, which is shown as shading, and "threshold" to determine boundaries that visually alert you if the value cross a
defined threshold.220
▼−80
0 50 100 150 200 250 300Profit
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:47 Bullet charts in Python
https://plotly.com/python/bullet-charts/ 1/5

--- Página 2 ---
Custom Bulletimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" , value = 220,
    domain = {'x': [0.1, 1], 'y': [0, 1]},
    title = {'text' :"&lt;b&gt;Profit&lt;/b&gt;" },
    delta = {'reference' : 200},
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "red", 'width': 2},
            'thickness' : 0.75,
            'value': 280},
        'steps': [
            {'range': [0, 150], 'color': "lightgray" },
            {'range': [150, 250], 'color': "gray"}]}))
fig.update_layout (height = 250)
fig.show()
The following example shows how to customize your charts. For more information about all possible options check our 
.
reference page
(https://plotly.com/python/reference/indicator/)
import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" , value = 220,
    domain = {'x': [0, 1], 'y': [0, 1]},
    delta = {'reference' : 280, 'position' : "top"},
    title = {'text':"&lt;b&gt;Profit&lt;/b&gt;&lt;br&gt;&lt;span style='color: gray; font-size:0.8em'&gt;U.S. $&lt;/span&gt;" , 'font': {"size": 14}},
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "red", 'width': 2},
            'thickness' : 0.75, 'value': 270},
        'bgcolor' : "white",
        'steps': [
            {'range': [0, 150], 'color': "cyan"},
            {'range': [150, 250], 'color': "royalblue" }],
        'bar': {'color': "darkblue" }}))
fig.update_layout (height = 250)
fig.show()220
▲20
0 50 100 150 200 250 300Profit
220▼−60
0 50 100 150 200 250 300Profit
U.S. $
16/07/2025, 06:47 Bullet charts in Python
https://plotly.com/python/bullet-charts/ 2/5

--- Página 3 ---
Multi Bullet
Bullet charts can be stacked for comparing several values at once as illustrated below:
16/07/2025, 06:47 Bullet charts in Python
https://plotly.com/python/bullet-charts/ 3/5

--- Página 4 ---
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Indicator (
    mode = "number+gauge+delta" , value = 180,
    delta = {'reference' : 200},
    domain = {'x': [0.25, 1], 'y': [0.08, 0.25]},
    title = {'text': "Revenue" },
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "black", 'width': 2},
            'thickness' : 0.75,
            'value': 170},
        'steps': [
            {'range': [0, 150], 'color': "gray"},
            {'range': [150, 250], 'color': "lightgray" }],
        'bar': {'color': "black"}}))
fig.add_trace (go.Indicator (
    mode = "number+gauge+delta" , value = 35,
    delta = {'reference' : 200},
    domain = {'x': [0.25, 1], 'y': [0.4, 0.6]},
    title = {'text': "Profit" },
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 100]},
        'threshold' : {
            'line': {'color': "black", 'width': 2},
            'thickness' : 0.75,
            'value': 50},
        'steps': [
            {'range': [0, 25], 'color': "gray"},
            {'range': [25, 75], 'color': "lightgray" }],
        'bar': {'color': "black"}}))
fig.add_trace (go.Indicator (
    mode = "number+gauge+delta" , value = 220,
    delta = {'reference' : 200},
    domain = {'x': [0.25, 1], 'y': [0.7, 0.9]},
    title = {'text' :"Satisfaction" },
    gauge = {
        'shape': "bullet" ,
        'axis': {'range': [None, 300]},
        'threshold' : {
            'line': {'color': "black", 'width': 2},
            'thickness' : 0.75,
            'value': 210},
        'steps': [
            {'range': [0, 150], 'color': "gray"},
            {'range': [150, 250], 'color': "lightgray" }],
        'bar': {'color': "black"}}))
fig.update_layout (height = 400 , margin = {'t':0, 'b':0, 'l':0})
fig.show()
180
▼−20
0 50 100 150 200 250 300Revenue35
▼−165
0 20 40 60 80 100Profit220
▲20
0 50 100 150 200 250 300Satisfaction
16/07/2025, 06:47 Bullet charts in Python
https://plotly.com/python/bullet-charts/ 4/5

--- Página 5 ---
Reference
What About Dash?See  for more information and chart attribute options!
https://plotly.com/python/reference/indicator/ (https://plotly.com/python/reference/indicator/)
 
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:47 Bullet charts in Python
https://plotly.com/python/bullet-charts/ 5/5</content>
      </file>
      <file name="Candlestick charts in Python.pdf" path="pyvy_2x6/Candlestick charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Candlestick with Pandas
Candlestick without Rangeslider &gt;  &gt;
Candlestick Charts
Candlestick Charts in Python
How to make interactive candlestick charts in Python with Plotly. Six examples of candlestick charts with Pandas, time series, and yahoo finance data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/candlestick-charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The  is a style of financial chart describing open, high, low and close for a given x coordinate (most
likely time). The boxes represent the spread between the open and close values and the lines represent the spread between the low and high values. Sample points
where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing
are drawn in red.
candlestick chart (https://en.wikipedia.org/wiki/Candlestick_chart)
import plotly.graph_objects  as go
import pandas as pd
from datetime  import datetime
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ])])
fig.show()
Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 1/7

--- Página 2 ---
Candlestick in Dashimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (x=df['Date'],
                open=df['AAPL.Open' ], high=df['AAPL.High' ],
                low=df['AAPL.Low' ], close=df['AAPL.Close' ])
                     ])
fig.update_layout (xaxis_rangeslider_visible =False)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 2/7

--- Página 3 ---
Adding Customized Text and AnnotationsSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Apple stock candlestick chart'),
    dcc.Checklist(
        id='toggle-rangeslider',
        options=[{'label': 'Include Rangeslider',
                  'value': 'slider'}],
        value=['slider']
    ),
    dcc.Graph(id="graph"),
])
@app.callback(
    Output("graph", "figure"),
    Input("toggle-rangeslider", "value"))
def display_candlestick(value):
    df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv') # replace with your own data source
    fig = go.Figure(go.Candlestick(
 df['Dt']DOWNLOAD
Apple stock candlestick chart
Include Rangeslider
Apr 2015Jul 2015 Oct 2015Jan 2016Apr 2016Jul 2016 Oct 2016Jan 201790100110120130
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 3/7

--- Página 4 ---
Custom Candlestick Colorsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (x=df['Date'],
                open=df['AAPL.Open' ], high=df['AAPL.High' ],
                low=df['AAPL.Low' ], close=df['AAPL.Close' ])
                      ])
fig.update_layout (
    title=dict(text='The Great Recession' ),
    yaxis=dict(
      title=dict(
        text='AAPL Stock'
        )
    ),
    shapes = [dict(
        x0='2016-12-09' , x1='2016-12-09' , y0=0, y1=1, xref='x', yref='paper',
        line_width =2)],
    annotations =[dict(
        x='2016-12-09' , y=0.05, xref='x', yref='paper',
        showarrow =False, xanchor='left', text='Increase Period Begins' )]
)
fig.show()
Apr 2015Jul 2015Oct 2015Jan 2016Apr 2016Jul 2016Oct 2016Jan 2017Apr 201790100110120130The Great RecessionAAPL Stock
Increase Period Begins
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 4/7

--- Página 5 ---
Simple Example with datetime Objectsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Candlestick (
    x=df['Date'],
    open=df['AAPL.Open' ], high=df['AAPL.High' ],
    low=df['AAPL.Low' ], close=df['AAPL.Close' ],
    increasing_line_color = 'cyan', decreasing_line_color = 'gray'
)])
fig.show()
Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 5/7

--- Página 6 ---
Referenceimport plotly.graph_objects  as go
from datetime  import datetime
open_data  = [33.0, 33.3, 33.5, 33.0, 34.1]
high_data  = [33.1, 33.3, 33.6, 33.2, 34.8]
low_data  = [32.7, 32.7, 32.8, 32.6, 32.8]
close_data  = [33.0, 32.9, 33.3, 33.1, 33.1]
dates = [datetime (year=2013, month=10, day=10),
         datetime (year=2013, month=11, day=10),
         datetime (year=2013, month=12, day=10),
         datetime (year=2014, month=1, day=10),
         datetime (year=2014, month=2, day=10)]
fig = go.Figure(data=[go.Candlestick (x=dates,
                       open=open_data , high=high_data ,
                       low=low_data , close=close_data )])
fig.show()
For more information on candlestick attributes, see: 
https://plotly.com/python/reference/candlestick/ (https://plotly.com/python/reference/candlestick/)Oct 2013 Nov 2013 Dec 2013 Jan 2014 Feb 201432.53333.53434.5
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ations
ects16/07/2025, 06:47 Candlestick charts in Python
https://plotly.com/python/candlestick-charts/ 7/7</content>
      </file>
      <file name="Financial charts in Python.pdf" path="pyvy_2x6/Financial charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
Financial Charts (/python/financial-charts)
Plotly Python Open Source Graphing Library Financial Charts
Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make financial charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/time-series/)
Time Series and Date
Axes
(/python/candlestick-
charts/)
Candlestick Charts
(/python/waterfall-
charts/)
Waterfall Charts
(/python/funnel-charts/)
Funnel Chart
(/python/ohlc-charts/)
OHLC Charts
(/python/indicator/)
Indicators
(/python/gauge-charts/)
Gauge Charts
(/python/bullet-charts/)
Bullet Charts
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:46 Financial charts in Python
https://plotly.com/python/financial-charts/ 1/1</content>
      </file>
      <file name="Funnel chart in Python.pdf" path="pyvy_2x6/Funnel chart in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Introduction
Basic Funnel Plot with plotly.express &gt;  &gt;
Funnel Chart
Funnel Chart in Python
How to make funnel-chart plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/funnel-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Funnel charts are often used to represent data in different stages of a business process. It’s an important mechanism in Business Intelligence to identify potential
problem areas of a process. For example, it’s used to observe the revenue or loss in a sales process for each stage, and displays values that are decreasing
progressively. Each stage is illustrated as a percentage of the total of all values.
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
With px.funnel, each row of the DataFrame is represented as a stage of the funnel.
import plotly.express  as px
data = dict(
    number=[39, 27.4, 20.6, 11, 2],
    stage=["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ])
fig = px.funnel(data, x='number' , y='stage')
fig.show()
39
27.4
20.6
11
2 invoice sentRequested pricePotential customersDownloadsWebsite visitstage
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 1/10

--- Página 2 ---
Stacked Funnel Plot with plotly.express
Basic Funnel Chart with graph_objects trace go.Funnelimport plotly.express  as px
import pandas as pd
stages = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ]
df_mtl = pd.DataFrame (dict(number=[39, 27.4, 20.6, 11, 3], stage=stages))
df_mtl['office' ] = 'Montreal'
df_toronto  = pd.DataFrame (dict(number=[52, 36, 18, 14, 5], stage=stages))
df_toronto ['office' ] = 'Toronto'
df = pd.concat([df_mtl, df_toronto ], axis=0)
fig = px.funnel(df, x='number' , y='stage', color='office' )
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use .
the more generic go.Funnel class from plotly.graph_objects (/python/graph-objects/)39
27.4
20.6
11
352
36
18
14
5 invoice sentRequested pricePotential customersDownloadsWebsite visitoffice
Montreal
Torontostage
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 2/10

--- Página 3 ---
Setting Marker Size and Colorfrom plotly import graph_objects  as go
fig = go.Figure(go.Funnel(
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ],
    x = [39, 27.4, 20.6, 11, 2]))
fig.show()
This example uses  and 
 to determine information appears on the graph, and shows how to customize the bars.
textposition (https://plotly.com/python/reference/scatter/#scatter-textposition)
textinfo (https://plotly.com/python/reference/funnel/#funnel-
textinfo)39
27.4
20.6
11
2 invoice sentRequested pricePotential customersDownloadsWebsite visit
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 3/10

--- Página 4 ---
from plotly import graph_objects  as go
fig = go.Figure(go.Funnel(
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "Finalized" ],
    x = [39, 27.4, 20.6, 11, 2],
    textposition  = "inside" ,
    textinfo  = "value+percent initial" ,
    opacity = 0.65, marker = {"color": ["deepskyblue" , "lightsalmon" , "tan", "teal", "silver" ],
    "line": {"width": [4, 2, 2, 3, 1, 1], "color": ["wheat", "wheat", "blue", "wheat", "wheat"]}},
    connector  = {"line": {"color": "royalblue" , "dash": "dot", "width": 3}})
    )
fig.show()
39
100%
27.4
70%
20.6
53%
11
28%
2
5%
FinalizedRequested pricePotential customersDownloadsWebsite visit
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 4/10

--- Página 5 ---
Stacked Funnel Plot with go.Funnel
Basic Area Funnel Plot with plotly.expressfrom plotly import graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Funnel(
    name = 'Montreal' ,
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" ],
    x = [120, 60, 30, 20],
    textinfo  = "value+percent initial" ))
fig.add_trace (go.Funnel(
    name = 'Toronto' ,
    orientation  = "h",
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" ],
    x = [100, 60, 40, 30, 20],
    textposition  = "inside" ,
    textinfo  = "value+percent previous" ))
fig.add_trace (go.Funnel(
    name = 'Vancouver' ,
    orientation  = "h",
    y = ["Website visit" , "Downloads" , "Potential customers" , "Requested price" , "invoice sent" , "Finalized" ],
    x = [90, 70, 50, 30, 10, 5],
    textposition  = "outside" ,
    textinfo  = "value+percent total" ))
fig.show()
With px.funnel_area, each row of the DataFrame is represented as a stage of the funnel.120
100%
60
50%
30
25%
20
17%100
100%
60
60%
40
67%
30
75%
20
67%90
35%
70
27%
50
20%
30
12%
10
4%
5
2%Finalizedinvoice sentRequested pricePotential customersDownloadsWebsite visitMontreal
Toronto
Vancouver
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 5/10

--- Página 6 ---
Basic Area Funnel Plot with go.Funnelarea
Set Marker Size and Color in Area Funnel Plotsimport plotly.express  as px
fig = px.funnel_area (names=["The 1st" ,"The 2nd" , "The 3rd" , "The 4th" , "The 5th" ],
                    values=[5, 4, 3, 2, 1])
fig.show()
If Plotly Express does not provide a good starting point, it is also possible to use 
.
the more generic go.Funnelarea class from plotly.graph_objects (/python/graph-
objects/)
from plotly import graph_objects  as go
fig = go.Figure(go.Funnelarea (
    text = ["The 1st" ,"The 2nd" , "The 3rd" , "The 4th" , "The 5th" ],
    values = [5, 4, 3, 2, 1]
    ))
fig.show()33.3%
26.7%
20%
13.3%
6.67%The 1st
The 2nd
The 3rd
The 4th
The 5th
The 1st
33.3%
The 2nd
26.7%
The 3rd
20%
The 4th
13.3%
The 5th
6.67%0
1
2
3
4
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 6/10

--- Página 7 ---
Multiple Area Funnelsfrom plotly import graph_objects  as go
fig = go.Figure(go.Funnelarea (
      values = [5, 4, 3, 2, 1], text = ["The 1st" ,"The 2nd" , "The 3rd" , "The 4th" , "The 5th" ],
      marker = {"colors" : ["deepskyblue" , "lightsalmon" , "tan", "teal", "silver" ],
                "line": {"color": ["wheat", "wheat", "blue", "wheat", "wheat"], "width": [0, 1, 5, 0, 4]}},
      textfont  = {"family" : "Old Standard TT, serif" , "size": 13, "color": "black"}, opacity = 0.65))
fig.show()
The 1st
33.3%
The 2nd
26.7%
The 3rd
20%
The 4th
13.3%
The 5th
6.67%
0
1
2
3
4
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 7/10

--- Página 8 ---
Pattern Fillsfrom plotly import graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Funnelarea (
    scalegroup  = "first", values = [500, 450, 340, 230, 220, 110], textinfo  = "value",
    title = {"position" : "top center" , "text": "Sales for Sale Person A in U.S." },
    domain = {"x": [0, 0.5], "y": [0, 0.5]}))
fig.add_trace (go.Funnelarea (
    scalegroup  = "first", values = [600, 500, 400, 300, 200, 100], textinfo  = "value",
    title = {"position" : "top center" , "text": "Sales of Sale Person B in Canada" },
    domain = {"x": [0, 0.5], "y": [0.55, 1]}))
fig.add_trace (go.Funnelarea (
    scalegroup  = "second" , values = [510, 480, 440, 330, 220, 100], textinfo  = "value",
    title = {"position" : "top left" , "text": "Sales of Sale Person A in Canada" },
    domain = {"x": [0.55, 1], "y": [0, 0.5]}))
fig.add_trace (go.Funnelarea (
            scalegroup  = "second" , values = [360, 250, 240, 130, 120, 60],
            textinfo  = "value", title = {"position" : "top left" , "text": "Sales of Sale Person B in U.S." },
            domain = {"x": [0.55, 1], "y": [0.55, 1]}))
fig.update_layout (
            margin = {"l": 200, "r": 200}, shapes = [
            {"x0": 0, "x1": 0.5, "y0": 0, "y1": 0.5},
            {"x0": 0, "x1": 0.5, "y0": 0.55, "y1": 1},
            {"x0": 0.55, "x1": 1, "y0": 0, "y1": 0.5},
            {"x0": 0.55, "x1": 1, "y0": 0.55, "y1": 1}])
fig.show()
New in 5.15
Funnel area charts support  (also known as hatching or texture) in addition to color. In this example, we add a pattern to
the second stage of the funnel.
patterns (/python/pattern-hatching-texture/)500
450
340
230
220
110Sales for Sale Person A in U.S.600
500
400
300
200
100Sales of Sale Person B in Canada
510
480
440
330
220
100Sales of Sale Person A in Canada360
250
240
130
120
60Sales of Sale Person B in U.S.0
1
2
3
4
5
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 8/10

--- Página 9 ---
Reference
What About Dash?from plotly import graph_objects  as go
colors = ["gold", "gold", "lightgreen" , "lavender" ]
fig = go.Figure(
    go.Funnelarea (
        labels=["Interview 1" , "Interview 2" , "Test", "Final Stage" ],
        values=[100, 70, 40, 20],
        textfont_size =20,
        marker=dict(colors=colors, pattern=dict(shape=["", "/", "", ""])),
    )
)
fig.show()
See  or 
 and  for more
information and chart attribute options!
function reference for px.(funnel) (https://plotly.com/python-api-reference/generated/plotly.express.funnel)
https://plotly.com/python/reference/funnel/
(https://plotly.com/python/reference/funnel/)
https://plotly.com/python/reference/funnelarea/ (https://plotly.com/python/reference/funnelarea/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter43.5%
30.4%
17.4%
8.7%Interview 1
Interview 2
Test
Final Stage
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 9/10

--- Página 10 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
s
ress
ts trace
xpress
nelarea
unnel16/07/2025, 06:47 Funnel chart in Python
https://plotly.com/python/funnel-charts/ 10/10</content>
      </file>
      <file name="Gauge charts in Python.pdf" path="pyvy_2x6/Gauge charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Gauge
Add Steps, Threshold, and Delta &gt;  &gt;
Gauge Charts
Gauge Charts in Python
How to make gauge meter charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/gauge-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A radial gauge chart has a circular arc, which displays a single value to estimate progress toward a goal. The bar shows the target value, and the shading represents
the progress toward that goal. Gauge charts, known as speedometer charts as well. This chart type is usually used to illustrate key business indicators.
The example below displays a basic gauge chart with default attributes. For more information about different added attributes check 
 tutorial.
indicator
(https://plotly.com/python/indicator/)
import plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "gauge+number" ,
    value = 270,
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Speed"}))
fig.show()
The following examples include "steps" attribute shown as shading inside the radial arc, "delta" which is the difference of the value and goal (reference - value), and
"threshold" to determine boundaries that visually alert you if the value cross a defined threshold.270
050100150200
250
300
350
400Speed
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:47 Gauge charts in Python
https://plotly.com/python/gauge-charts/ 1/4

--- Página 2 ---
Custom Gauge Chartimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    domain = {'x': [0, 1], 'y': [0, 1]},
    value = 450,
    mode = "gauge+number+delta" ,
    title = {'text': "Speed"},
    delta = {'reference' : 380},
    gauge = {'axis': {'range': [None, 500]},
             'steps' : [
                 {'range': [0, 250], 'color': "lightgray" },
                 {'range': [250, 400], 'color': "gray"}],
             'threshold'  : {'line': {'color': "red", 'width': 4}, 'thickness' : 0.75, 'value': 490}}))
fig.show()
The following example shows how to style your gauge charts. For more information about all possible options check our 
.
reference page
(https://plotly.com/python/reference/indicator/)450
▲70
0100200 300
400
500Speed
16/07/2025, 06:47 Gauge charts in Python
https://plotly.com/python/gauge-charts/ 2/4

--- Página 3 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "gauge+number+delta" ,
    value = 420,
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Speed", 'font': {'size': 24}},
    delta = {'reference' : 400, 'increasing' : {'color': "RebeccaPurple" }},
    gauge = {
        'axis': {'range': [None, 500], 'tickwidth' : 1, 'tickcolor' : "darkblue" },
        'bar': {'color': "darkblue" },
        'bgcolor' : "white",
        'borderwidth' : 2,
        'bordercolor' : "gray",
        'steps': [
            {'range': [0, 250], 'color': 'cyan'},
            {'range': [250, 400], 'color': 'royalblue' }],
        'threshold' : {
            'line': {'color': "red", 'width': 4},
            'thickness' : 0.75,
            'value': 490}}))
fig.update_layout (paper_bgcolor  = "lavender" , font = {'color': "darkblue" , 'family' : "Arial"})
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/indicator/ (https://plotly.com/python/reference/indicator/)420
▲20
0100200 300
400
500Speed
16/07/2025, 06:47 Gauge charts in Python
https://plotly.com/python/gauge-charts/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:47 Gauge charts in Python
https://plotly.com/python/gauge-charts/ 4/4</content>
      </file>
      <file name="Indicators in Python.pdf" path="pyvy_2x6/Indicators in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview
1. value: the value to visualize
2. mode: which visual elements to draw
3. align: how to align number and delta (left, center, right)
4. domain: the extent of the figure
1. number is simply a representation of the number in text. It has attributes:
2. valueformat: to format the number
3. prefix: a string before the number
4. suffix: a string after the number
5. font.(family|size): to control the font
"delta" simply displays the difference between the value with respect to a reference. It has attributes:
1. reference: the number to compare the value with
2. relative: whether that difference is absolute or relative
3. valueformat: to format the delta
4. (increasing|decreasing).color: color to be used for positive or decreasing delta
5. (increasing|decreasing).symbol: symbol displayed on the left of the delta
6. font.(family|size): to control the font
7. position: position relative to  (either top, left, bottom, right)
8. prefix: a string to appear before the delta
9. suffix: a string to appear after the delta
Finally, we can have a simple title for the indicator via title with 'text' attribute which is a string, and 'align' which can be set to left, center, and right. There are two gauge
types:  and . Here is a combination of both shapes (angular, bullet),
and different modes (gauge, delta, and value): &gt;  &gt;
Indicators
Indicators in Python
How to make gauge charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/indicator.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In this tutorial we introduce a new trace named "Indicator". The purpose of "indicator" is to visualize a single value specified by the "value" attribute. Three distinct
visual elements are available to represent that value: number, delta and gauge. Any combination of them can be specified via the "mode" attribute. Top-level
attributes are:
Then we can configure the 3 different visual elements via their respective container:
νmber
angular (https://plotly.com/python/gauge-charts/)
bullet (https://plotly.com/python/bullet-charts/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 1/9

--- Página 2 ---
A Single Angular Gauge Chartimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Indicator (
    value = 200,
    delta = {'reference' : 160},
    gauge = {
        'axis': {'visible' : False}},
    domain = {'row': 0, 'column' : 0}))
fig.add_trace (go.Indicator (
    value = 120,
    gauge = {
        'shape': "bullet" ,
        'axis' : {'visible' : False}},
    domain = {'x': [0.05, 0.5], 'y': [0.15, 0.35]}))
fig.add_trace (go.Indicator (
    mode = "number+delta" ,
    value = 300,
    domain = {'row': 0, 'column' : 1}))
fig.add_trace (go.Indicator (
    mode = "delta",
    value = 40,
    domain = {'row': 1, 'column' : 1}))
fig.update_layout (
    grid = {'rows': 2, 'columns' : 2, 'pattern' : "independent" },
    template  = {'data' : {'indicator' : [{
        'title': {'text': "Speed"},
        'mode' : "number+delta+gauge" ,
        'delta' : {'reference' : 90}}]
                         }})
200
▲40Speed
120
▲30Speed300
▲210Speed
▼−50Speed
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 2/9

--- Página 3 ---
Bullet Gaugeimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "gauge+number" ,
    value = 450,
    title = {'text': "Speed"},
    domain = {'x': [0, 1], 'y': [0, 1]}
))
fig.show()
The equivalent of above "angular gauge":450
0100200300
400
500
600Speed
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 3/9

--- Página 4 ---
Showing Information above Your Chartimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+gauge+delta" ,
    gauge = {'shape': "bullet" },
    delta = {'reference' : 300},
    value = 220,
    domain = {'x': [0.1, 1], 'y': [0.2, 0.9]},
    title = {'text': "Avg order size" }))
fig.show()
Another interesting feature is that indicator trace sits above the other traces (even the 3d ones). This way, it can be easily used as an overlay as demonstrated below220
▼−80
0 50 100 150 200 250 300Avg order size
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 4/9

--- Página 5 ---
Data Cards / Big Numbersimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+delta" ,
    value = 492,
    delta = {"reference" : 512, "valueformat" : ".0f"},
    title = {"text": "Users online" },
    domain = {'y': [0, 1], 'x': [0.25, 0.75]}))
fig.add_trace (go.Scatter(
    y = [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 45
0, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 
480, 499, 497, 480, 502, 512, 492]))
fig.update_layout (xaxis = {'range': [0, 62]})
fig.show()
Data card helps to display more contextual information about the data. Sometimes one number is all you want to see in a report, such as total sales, annual revenue,
etc. This example shows how to visualize these big numbers:0 10 20 30 40 50 60350400450500
492
▼−20Users online
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 5/9

--- Página 6 ---
It's possible to display several numbersimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+delta" ,
    value = 400,
    number = {'prefix' : "$"},
    delta = {'position' : "top", 'reference' : 320},
    domain = {'x': [0, 1], 'y': [0, 1]}))
fig.update_layout (paper_bgcolor  = "lightgray" )
fig.show()
$400▲80
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 6/9

--- Página 7 ---
Adding a Prefix and Suffiximport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Indicator (
    mode = "number+delta" ,
    value = 200,
    domain = {'x': [0, 0.5], 'y': [0, 0.5]},
    delta = {'reference' : 400, 'relative' : True, 'position'  : "top"}))
fig.add_trace (go.Indicator (
    mode = "number+delta" ,
    value = 350,
    delta = {'reference' : 400, 'relative' : True},
    domain = {'x': [0, 0.5], 'y': [0.5, 1]}))
fig.add_trace (go.Indicator (
    mode = "number+delta" ,
    value = 450,
    title = {"text": "Accounts&lt;br&gt;&lt;span style='font-size:0.8em;color:gray'&gt;Subtitle&lt;/span&gt;&lt;br&gt;&lt;span style='font-size:0.8em;color:gray'&gt;Subsubtitle&lt;/
span&gt;"},
    delta = {'reference' : 400, 'relative' : True},
    domain = {'x': [0.6, 1], 'y': [0, 1]}))
fig.show()
On both a number and a delta, you can add a string to appear before the value using prefix. You can add a string to appear after the value using suffix. In the
following example, we add '$' as a prefix and 'm' as suffix for both the number and delta.
Note: suffix and prefix on delta are new in 5.10200▼−50%350
▼−12.5%450
▲12.5%Accounts
Subtitle
Subsubtitle
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 7/9

--- Página 8 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure(go.Indicator (
    mode = "number+delta" ,
    value = 492,
    number = {"prefix" : "$", "suffix" : "m"},
    delta = {"reference" : 512, "valueformat" : ".0f", "prefix" : "$", "suffix" : "m"},
    title = {"text": "Profit" },
    domain = {'y': [0, 1], 'x': [0.25, 0.75]}))
fig.add_trace (go.Scatter(
    y = [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 45
0, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 
480, 499, 497, 480, 502, 512, 492]))
fig.update_layout (xaxis = {'range': [0, 62]})
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/indicator/ (https://plotly.com/python/reference/indicator/)
 0 10 20 30 40 50 60350400450500
$492m
▼$−20mProfit
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 8/9

--- Página 9 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
hart
ers16/07/2025, 06:47 Indicators in Python
https://plotly.com/python/indicator/ 9/9</content>
      </file>
      <file name="Ohlc charts in Python.pdf" path="pyvy_2x6/Ohlc charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple OHLC Chart with Pandas
OHLC Chart without Rangeslider &gt;  &gt; OHLC
Charts
OHLC Charts in Python
How to make interactive OHLC charts in Python with Plotly. Six examples of OHLC charts with Pandas, time series, and yahoo finance data.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/ohlc-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The  chart (for open, high, low and close) is a style of financial chart describing open, high, low and
close values for a given x coordinate (most likely time). The tip of the lines represent the low and high values and the horizontal segments represent the open and
close values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in
green whereas decreasing are drawn in red.
OHLC (https://en.wikipedia.org/wiki/Open-high-low-close_chart)
See also  and .
Candlestick Charts (https://plotly.com/python/candlestick-charts/)
other financial charts (https://plotly.com/python/#financial-charts)
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                    open=df['AAPL.Open' ],
                    high=df['AAPL.High' ],
                    low=df['AAPL.Low' ],
                    close=df['AAPL.Close' ]))
fig.show()
Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 1/7

--- Página 2 ---
Adding Customized Text and Annotationsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ]))
fig.update(layout_xaxis_rangeslider_visible =False)
fig.show()
Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 2/7

--- Página 3 ---
Custom OHLC Colorsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ]))
fig.update_layout (
    title=dict(text='The Great Recession' ),
    yaxis=dict(title=dict(text='AAPL Stock' )),
    shapes = [dict(
        x0='2016-12-09' , x1='2016-12-09' , y0=0, y1=1, xref='x', yref='paper',
        line_width =2)],
    annotations =[dict(
        x='2016-12-09' , y=0.05, xref='x', yref='paper',
        showarrow =False, xanchor='left', text='Increase Period Begins' )]
)
fig.show()
Apr 2015Jul 2015Oct 2015Jan 2016Apr 2016Jul 2016Oct 2016Jan 2017Apr 201790100110120130The Great RecessionAAPL Stock
Increase Period Begins
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 3/7

--- Página 4 ---
Simple OHLC with datetime Objectsimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=[go.Ohlc(
    x=df['Date'],
    open=df['AAPL.Open' ], high=df['AAPL.High' ],
    low=df['AAPL.Low' ], close=df['AAPL.Close' ],
    increasing_line_color = 'cyan', decreasing_line_color = 'gray'
)])
fig.show()
Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 4/7

--- Página 5 ---
import plotly.graph_objects  as go
from datetime  import datetime
open_data  = [33.0, 33.3, 33.5, 33.0, 34.1]
high_data  = [33.1, 33.3, 33.6, 33.2, 34.8]
low_data  = [32.7, 32.7, 32.8, 32.6, 32.8]
close_data  = [33.0, 32.9, 33.3, 33.1, 33.1]
dates = [datetime (year=2013, month=10, day=10),
         datetime (year=2013, month=11, day=10),
         datetime (year=2013, month=12, day=10),
         datetime (year=2014, month=1, day=10),
         datetime (year=2014, month=2, day=10)]
fig = go.Figure(data=[go.Ohlc(x=dates,
                          open=open_data , high=high_data ,
                          low=low_data , close=close_data )])
fig.show()
Oct 2013 Nov 2013 Dec 2013 Jan 2014 Feb 201432.53333.53434.5
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 5/7

--- Página 6 ---
Custom Hovertext
Referenceimport plotly.graph_objects  as go
import pandas as pd
from datetime  import datetime
hovertext =[]
for i in range(len(df['AAPL.Open' ])):
    hovertext .append('Open: ' +str(df['AAPL.Open' ][i])+'&lt;br&gt;Close: ' +str(df['AAPL.Close' ][i]))
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(data=go.Ohlc(x=df['Date'],
                open=df['AAPL.Open' ],
                high=df['AAPL.High' ],
                low=df['AAPL.Low' ],
                close=df['AAPL.Close' ],
                text=hovertext ,
                hoverinfo ='text'))
fig.show()
For more information on candlestick attributes, see: 
https://plotly.com/python/reference/ohlc/ (https://plotly.com/python/reference/ohlc/)Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ations
s16/07/2025, 06:47 Ohlc charts in Python
https://plotly.com/python/ohlc-charts/ 7/7</content>
      </file>
      <file name="Time series and date axes in Python.pdf" path="pyvy_2x6/Time series and date axes in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Time Series using Axes of type date &gt;  &gt; Time Series
and Date Axes
Time Series and Date Axes in Python
How to plot date and time in python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/time-series.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Time series can be represented using either plotly.express functions (px.line, px.scatter, px.bar etc) or plotly.graph_objects charts objects (go.Scatter, go.Bar etc). For
more examples of such charts, see the documentation of  or .
line and scatter plots (https://plotly.com/python/line-and-scatter/)
bar charts (/python/bar-charts/)
For financial applications, Plotly can also be used to create  and , which default to
date axes.
Candlestick charts (/python/candlestick-charts/)
OHLC charts (/python/ohlc-charts/)
Plotly auto-sets the axis type to a date format when the corresponding data are either ISO-formatted date strings or if they're a 
 or 
.
date pandas column
(https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)
datetime NumPy array
(https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)
# Using plotly.express
import plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x='date', y="GOOG")
fig.show()
Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.90.9511.051.11.151.2
dateGOOG
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 1/20

--- Página 2 ---
Time Series in Dash# Using graph_objects
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure([go.Scatter(x=df['Date'], y=df['AAPL.High' ])])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 2/20

--- Página 3 ---
Different Chart Types on Date AxesSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
Any kind of cartesian chart can be placed on date axes, for example this bar chart of relative stock ticker values.

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Stock price analysis'),
    dcc.Graph(id="time-series-chart"),
    html.P("Select stock:"),
    dcc.Dropdown(
        id="ticker",
        options=["AMZN", "FB", "NFLX"],
        value="AMZN",
        clearable=False,
    ),
])
@app.callback(
    Output("time-series-chart", "figure"),
    Input("ticker", "value"))
def display_time_series(ticker):
    df = px.data.stocks() # replace with your own data source
    fig = px.line(df, x='date', y=ticker)
t fiDOWNLOAD
Stock price analysis
Select stock:Jan 2018Apr 2018Jul 2018 Oct 2018Jan 2019Apr 2019Jul 2019 Oct 201911.11.21.31.41.51.6
dateAMZN
AMZN
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 3/20

--- Página 4 ---
import plotly.express  as px
df = px.data.stocks(indexed=True)-1
fig = px.bar(df, x=df.index, y="GOOG")
fig.show()
Or this  area plot:
facetted (/python/facet-plots/)
import plotly.express  as px
df = px.data.stocks(indexed=True)-1
fig = px.area(df, facet_col ="company" , facet_col_wrap =2)
fig.show()Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 2019 Jan 2020−0.1−0.0500.050.10.150.2
dateGOOG
Jan 2018 Jul 2018 Jan 2019 Jul 201900.51
Jan 2018 Jul 2018 Jan 2019 Jul 201900.5100.51
company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
date datevalue value value
company=NFLX company=MSFTcompany=AMZN company=FBcompany=GOOG company=AAPL
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 4/20

--- Página 5 ---
Configuring Tick Labels
Moving Tick Labels to the Middle of the PeriodBy default, the tick labels (and optional ticks) are associated with a specific grid-line, and represent an instant in time, for example, "00:00 on February 1, 2018". Tick
labels can be formatted using the tickformat attribute (which accepts the ) to display only the
month and year, but they still represent an instant by default, so in the figure below, the text of the label "Feb 2018" spans part of the month of January and part of
the month of February. The dtick attribute controls the spacing between gridlines, and the "M1" setting means "1 month". This attribute also accepts a number of
milliseconds, which can be scaled up to days by multiplying by 24*60*60*1000.
d3 time-format formatting strings (https://github.com/d3/d3-time-format)
Date axis tick labels have the special property that any portion after the first instance of '\n' in tickformat will appear on a second line only once per unique value, as
with the year numbers in the example below. To have the year number appear on every tick label, '&lt;br&gt;' should be used instead of '\n'.
Note that by default, the formatting of values of X and Y values in the hover label matches that of the tick labels of the corresponding axes, so when customizing the
tick labels to something broad like "month", it's usually necessary to  to something narrower like the
actual date, as below.
customize the hover label (/python/hover-text-and-formatting/)
import plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x="date", y=df.columns,
              hover_data ={"date": "|%B %d, %Y"},
              title='custom tick labels' )
fig.update_xaxes (
    dtick="M1",
    tickformat ="%b\n%Y")
fig.show()
new in 4.10
By setting the ticklabelmode attribute to "period" (the default is "instant") we can move the tick labels to the middle of the period they represent. The gridlines remain
at the beginning of each month (thanks to dtick="M1") but the labels now span the month they refer to.Jan
2018FebMarAprMayJunJulAugSepOctNovDecJan
2019FebMarAprMayJunJulAugSepOctNovDec0.60.811.21.41.61.82variable
GOOG
AAPL
AMZN
FB
NFLX
MSFTcustom tick labels
datevalue
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 5/20

--- Página 6 ---
Adding Minor Ticksimport plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x="date", y=df.columns,
              hover_data ={"date": "|%B %d, %Y"},
              title='custom tick labels with ticklabelmode="period"' )
fig.update_xaxes (
    dtick="M1",
    tickformat ="%b\n%Y",
    ticklabelmode ="period" )
fig.show()
new in 5.8
You can add minor ticks to an axis with minor. This takes a dict of properties to apply to minor ticks. See the 
 for full details on the accepted keys in this dict.
figure reference
(https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-minor)
In this example, we've added minor ticks to the inside of the x-axis and turned on minor grid lines.Jan
2018FebMarAprMayJunJulAugSepOctNovDecJan
2019FebMarAprMayJunJulAugSepOctNovDec0.60.811.21.41.61.82variable
GOOG
AAPL
AMZN
FB
NFLX
MSFTcustom tick labels with ticklabelmode="period"
datevalue
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 6/20

--- Página 7 ---
Monthly Period Labels With Weekly Minor Ticksimport pandas as pd
import plotly.express  as px
df = px.data.stocks()
fig = px.line(df, x='date', y="GOOG")
fig.update_xaxes (minor=dict(ticks="inside" , showgrid =True))
fig.show()
new in 5.8
You can set dtick on minor to control the spacing for minor ticks and grid lines. In the following example, by setting dtick=7*24*60*60*1000 (the number of
milliseconds in a week) and setting tick0="2016-07-03" (the first Sunday in our data), a minor tick and grid line is displayed for the start of each week. When zoomed
out, we can see where each month and week begins and ends.Jan 2018 Apr 2018 Jul 2018 Oct 2018 Jan 2019 Apr 2019 Jul 2019 Oct 20190.90.9511.051.11.151.2
dateGOOG
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 7/20

--- Página 8 ---
Summarizing Time-series Data with Histogramsimport pandas as pd
import plotly.express  as px
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
df = df.loc[(df["Date"] &gt;= "2016-07-01" ) &amp; (df["Date"] &lt;= "2016-12-01" )]
fig = px.line(df, x='Date', y='AAPL.High' )
fig.update_xaxes (ticks= "outside" ,
                 ticklabelmode = "period" , 
                 tickcolor = "black", 
                 ticklen=10, 
                 minor=dict(
                     ticklen=4,  
                     dtick=7*24*60*60*1000,  
                     tick0="2016-07-03" , 
                     griddash ='dot', 
                     gridcolor ='white')
                )
fig.show()
Plotly  are powerful data-aggregation tools which even work on date axes. In the figure below, we pass in daily data and display it as
monthly averages by setting histfunc="avg and xbins_size="M1".
histograms (/python/histograms/)Jul 2016 Aug 2016 Sep 2016 Oct 2016 Nov 201695100105110115
DateAAPL.High
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 8/20

--- Página 9 ---
Displaying Period Dataimport plotly.express  as px
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.histogram (df, x="Date", y="AAPL.Close" , histfunc ="avg", title="Histogram on Date Axes" )
fig.update_traces (xbins_size ="M1")
fig.update_xaxes (showgrid =True, ticklabelmode ="period" , dtick="M1", tickformat ="%b\n%Y")
fig.update_layout (bargap=0.1)
fig.add_trace (go.Scatter(mode="markers" , x=df["Date"], y=df["AAPL.Close" ], name="daily"))
fig.show()
new in 4.11
If your data coded "January 1" or "January 31" in fact refers to data collected throughout the month of January, for example, you can configure your traces to display
their marks at the start end, or middle of the month with the xperiod and xperiodalignment attributes. In the example below, the raw data is all coded with an X value
of the 10th of the month, but is binned into monthly periods with xperiod="M1" and then displayed at the start, middle and end of the period.Jan
2015FebMarAprMayJunJulAugSepOctNovDecJan
2016FebMarAprMayJunJulAugSepOctNovDecJan
2017FebMar020406080100120140dailyHistogram on Date Axes
Dateavg of AAPL.Close
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 9/20

--- Página 10 ---
import plotly.graph_objects  as go
import pandas as pd
df = pd.DataFrame (dict(
    date=["2020-01-10" , "2020-02-10" , "2020-03-10" , "2020-04-10" , "2020-05-10" , "2020-06-10" ],
    value=[1,2,3,1,2,3]
))
fig = go.Figure()
fig.add_trace (go.Scatter(
    name="Raw Data" ,
    mode="markers+lines" , x=df["date"], y=df["value"],
    marker_symbol ="star"
))
fig.add_trace (go.Scatter(
    name="Start-aligned" ,
    mode="markers+lines" , x=df["date"], y=df["value"],
    xperiod="M1",
    xperiodalignment ="start"
))
fig.add_trace (go.Scatter(
    name="Middle-aligned" ,
    mode="markers+lines" , x=df["date"], y=df["value"],
    xperiod="M1",
    xperiodalignment ="middle"
))
fig.add_trace (go.Scatter(
    name="End-aligned" ,
    mode="markers+lines" , x=df["date"], y=df["value"],
    xperiod="M1",
    xperiodalignment ="end"
))
fig.add_trace (go.Bar(
    name="Middle-aligned" ,
    x=df["date"], y=df["value"],
    xperiod="M1",
    xperiodalignment ="middle"
))
fig.update_xaxes (showgrid =True, ticklabelmode ="period" )
fig.show()
Jan 2020 Feb 2020 Mar 2020 Apr 2020 May 2020 Jun 202000.511.522.53Raw Data
Start-aligned
Middle-aligned
End-aligned
Middle-aligned
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 10/20

--- Página 11 ---
Hover Templates with Mixtures of Period data
Time Series Plot with Custom Date RangeNew in v5.0
When displaying periodic data with mixed-sized periods (i.e. quarterly and monthly) in conjunction with 
, the xhoverformat attribute can be used to control how each period's X value is displayed, and the special %
{xother} hover-template directive can be used to control how the X value is displayed for points that do not share the exact X coordinate with the point that is being
hovered on. %{xother} will return an empty string when the X value is the one being hovered on, otherwise it will return (%{x}). The special %{_xother}, %{xother_} and
%{_xother_} variations will display with spaces before, after or around the parentheses, respectively.
x or x unified hovermodes and using hovertemplate
(https://plotly.com/python/hover-text-and-formatting/)
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Bar(
    x=["2020-01-01" , "2020-04-01" , "2020-07-01" ],
    y=[1000, 1500, 1700],
    xperiod="M3",
    xperiodalignment ="middle" ,
    xhoverformat ="Q%q",
    hovertemplate ="%{y}%{_xother} "
))
fig.add_trace (go.Scatter(
    x=["2020-01-01" , "2020-02-01" , "2020-03-01" ,
      "2020-04-01" , "2020-05-01" , "2020-06-01" ,
      "2020-07-01" , "2020-08-01" , "2020-09-01" ],
    y=[1100,1050,1200,1300,1400,1700,1500,1400,1600],
    xperiod="M1",
    xperiodalignment ="middle" ,
    hovertemplate ="%{y}%{_xother} "
))
fig.update_layout (hovermode ="x unified" )
fig.show()
The data range can be set manually using either datetime.datetime objects, or date strings.Jan 2020Feb 2020Mar 2020Apr 2020May 2020Jun 2020Jul 2020Aug 2020Sep 2020Oct 2020020040060080010001200140016001800
trace 0
trace 1
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 11/20

--- Página 12 ---
# Using plotly.express
import plotly.express  as px
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.line(df, x='Date', y='AAPL.High' , range_x=['2016-07-01' ,'2016-12-31' ])
fig.show()
# Using graph_objects
import plotly.graph_objects  as go
import datetime
x = [datetime .datetime (year=2013, month=10, day=4),
     datetime .datetime (year=2013, month=11, day=5),
     datetime .datetime (year=2013, month=12, day=6)]
fig = go.Figure(data=[go.Scatter(x=x, y=[1, 3, 6])])
# Use datetime objects to set xaxis range
fig.update_layout (xaxis_range =[datetime .datetime (2013, 10, 17),
                               datetime .datetime (2013, 11, 20)])
fig.show()Jul 2016 Aug 2016 Sep 2016 Oct 2016 Nov 2016 Dec 20169095100105110115120125130135
DateAAPL.High
Oct 20
2013Oct 27 Nov 3 Nov 10 Nov 17123456
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 12/20

--- Página 13 ---
Time Series With Range Sliderimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.line(df, x='Date', y='AAPL.High' )
# Use date string to set xaxis range
fig.update_layout (xaxis_range =['2016-07-01' ,'2016-12-31' ],
                  title_text ="Manually Set Date Range" )
fig.show()
A range slider is a small subplot-like area below a plot which allows users to pan and zoom the X-axis while maintaining an overview of the chart. Check out the
reference for more options: 
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeslider (https://plotly.com/python/reference/layout/xaxis/#layout-
xaxis-rangeslider)Jul 2016 Aug 2016 Sep 2016 Oct 2016 Nov 2016 Dec 20169095100105110115120125130135Manually Set Date Range
DateAAPL.High
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 13/20

--- Página 14 ---
Time Series with Range Selector Buttonsimport plotly.express  as px
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.line(df, x='Date', y='AAPL.High' , title='Time Series with Rangeslider' )
fig.update_xaxes (rangeslider_visible =True)
fig.show()
Range selector buttons are special controls that work well with time series and range sliders, and allow users to easily set the range of the x-axis. Check out the
reference for more options: 
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector (https://plotly.com/python/reference/layout/xaxis/#layout-
xaxis-rangeselector)Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 201790100110120130Time Series with RangesliderAAPL.High
Date
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 14/20

--- Página 15 ---
Customizing Tick Label Formatting by Zoom Levelimport plotly.express  as px
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.line(df, x='Date', y='AAPL.High' , title='Time Series with Range Slider and Selectors' )
fig.update_xaxes (
    rangeslider_visible =True,
    rangeselector =dict(
        buttons=list([
            dict(count=1, label="1m", step="month", stepmode ="backward" ),
            dict(count=6, label="6m", step="month", stepmode ="backward" ),
            dict(count=1, label="YTD", step="year", stepmode ="todate" ),
            dict(count=1, label="1y", step="year", stepmode ="backward" ),
            dict(step="all")
        ])
    )
)
fig.show()
The tickformatstops attribute can be used to customize the formatting of tick labels depending on the zoom level. Try zooming in to the chart below and see how the
tick label formatting changes. Check out the reference for more options: 
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-tickformatstops
(https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-tickformatstops)Apr 2015 Jul 2015 Oct 2015 Jan 2016 Apr 2016 Jul 2016 Oct 2016 Jan 2017901001101201301m6mYTD1yallTime Series with Range Slider and SelectorsAAPL.High
Date
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 15/20

--- Página 16 ---
Hiding Weekends and Holidaysimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = go.Figure(go.Scatter(
    x = df['Date'],
    y = df['mavg']
))
fig.update_xaxes (
    rangeslider_visible =True,
    tickformatstops  = [
        dict(dtickrange =[None, 1000], value="%H:%M:%S.%L ms" ),
        dict(dtickrange =[1000, 60000], value="%H:%M:%S s" ),
        dict(dtickrange =[60000, 3600000], value="%H:%M m" ),
        dict(dtickrange =[3600000, 86400000 ], value="%H:%M h" ),
        dict(dtickrange =[86400000 , 604800000 ], value="%e. %b d"),
        dict(dtickrange =[604800000 , "M1"], value="%e. %b w"),
        dict(dtickrange =["M1", "M12"], value="%b '%y M" ),
        dict(dtickrange =["M12", None], value="%Y Y")
    ]
)
fig.show()
The rangebreaks attribute available on x- and y-axes of type date can be used to hide certain time-periods. In the example below, we show two plots: one in default
mode to show gaps in the data, and one where we hide weekends and holidays to show an uninterrupted trading history. Note the smaller gaps between the grid
lines for December 21 and January 4, where holidays were removed. Check out the reference for more options:
https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangebreaks (https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangebreaks)
Note: a known limitation of this feature is that it does not support scattergl traces. When using this feature on plots with more than a few hundred data
points with px.scatter or px.line or px.area, you may need to pass in render_mode="svg" to ensure that the underlying trace type is scatter and not
scattergl.Apr '15 M Jul '15 M Oct '15 M Jan '16 M Apr '16 M Jul '16 M Oct '16 M Jan '17 M100110120130
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 16/20

--- Página 17 ---
import plotly.express  as px
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.scatter(df, x='Date', y='AAPL.High' , range_x=['2015-12-01' , '2016-01-15' ],
                 title="Default Display with Gaps" )
fig.show()
import plotly.express  as px
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv' )
fig = px.scatter(df, x='Date', y='AAPL.High' , range_x=['2015-12-01' , '2016-01-15' ],
                 title="Hide Weekend and Holiday Gaps with rangebreaks" )
fig.update_xaxes (
    rangebreaks =[
        dict(bounds=["sat", "mon"]), #hide weekends
        dict(values=["2015-12-25" , "2016-01-01" ])  # hide Christmas and New Year's
    ]
)
fig.show()Dec 6
2015Dec 13 Dec 20 Dec 27 Jan 3
2016Jan 1090100110120130Default Display with Gaps
DateAAPL.High
Dec 7
2015Dec 14 Dec 21 Dec 28 Jan 4
2016Jan 1190100110120130Hide Weekend and Holiday Gaps with rangebreaks
DateAAPL.High
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 17/20

--- Página 18 ---
Hiding Non-Business Hours
The rangebreaks feature described above works for hiding hourly periods as well.
import plotly.express  as px
import pandas as pd
import numpy as np
np.random.seed(1)
work_week_40h  = pd.date_range (start='2020-03-01' , end='2020-03-07' , freq="BH")
df = pd.DataFrame (dict(
    date = work_week_40h ,
    value = np.cumsum(np.random.rand(40)-0.5)
))
fig = px.scatter(df, x="date", y="value",
                 title="Default Display with Gaps" )
fig.show()
12:00
Mar 2, 202000:00
Mar 3, 202012:00 00:00
Mar 4, 202012:00 00:00
Mar 5, 202012:00 00:00
Mar 6, 202012:00−2.5−2−1.5−1−0.50Default Display with Gaps
datevalue
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 18/20

--- Página 19 ---
What About Dash?import plotly.express  as px
import pandas as pd
import numpy as np
np.random.seed(1)
work_week_40h  = pd.date_range (start='2020-03-01' , end='2020-03-07' , freq="BH")
df = pd.DataFrame (dict(
    date = work_week_40h ,
    value = np.cumsum(np.random.rand(40)-0.5)
))
fig = px.scatter(df, x="date", y="value",
                 title="Hide Non-Business Hour Gaps with rangebreaks" )
fig.update_xaxes (
    rangebreaks =[
        dict(bounds=[17, 9], pattern="hour"), #hide hours outside of 9am-5pm
    ]
)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter12:00
Mar 2, 202009:00
Mar 3, 202012:00 09:00
Mar 4, 202012:00 09:00
Mar 5, 202012:00 09:00
Mar 6, 202012:00−2.5−2−1.5−1−0.50Hide Non-Business Hour Gaps with rangebreaks
datevalue
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 19/20

--- Página 20 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
the
Minor
Period
Range
ttons
by Zoom16/07/2025, 06:47 Time series and date axes in Python
https://plotly.com/python/time-series/ 20/20</content>
      </file>
      <file name="Waterfall charts in Python.pdf" path="pyvy_2x6/Waterfall charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple Waterfall Chart
Multi Category Waterfall Chart &gt;  &gt;
Waterfall Charts
Waterfall Charts in Python
How to make waterfall plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Financial Charts (/python/financial-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/waterfall-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import plotly.graph_objects  as go
fig = go.Figure(go.Waterfall (
    name = "20", orientation  = "v",
    measure = ["relative" , "relative" , "total", "relative" , "relative" , "total"],
    x = ["Sales", "Consulting" , "Net revenue" , "Purchases" , "Other expenses" , "Profit before tax" ],
    textposition  = "outside" ,
    text = ["+60", "+80", "", "-40", "-20", "Total"],
    y = [60, 80, 0, -40, -20, 0],
    connector  = {"line":{"color":"rgb(63, 63, 63)" }},
))
fig.update_layout (
        title = "Profit and loss statement 2018" ,
        showlegend  = True
)
fig.show()
This example uses the , which sets a gap between bars.
waterfallgroupgap attribute (https://plotly.com/python/reference/layout/#layout-waterfallgroupgap)+60+80
-40
-20Total
Sales Consulting Net revenue Purchases Other expensesProfit before tax020406080100120140 20Profit and loss statement 2018
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:47 Waterfall charts in Python
https://plotly.com/python/waterfall-charts/ 1/5

--- Página 2 ---
Setting Marker Size and Colorimport plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Waterfall (
    x = [["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial" , "q1", "q2", "q3", "total", "q1", "q2", "q3", "total"]],
    measure = ["absolute" , "relative" , "relative" , "relative" , "total", "relative" , "relative" , "relative" , "total"],
    y = [1, 2, 3, -1, None, 1, 2, -4, None],
    base = 1000
))
fig.add_trace (go.Waterfall (
    x = [["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial" , "q1", "q2", "q3", "total", "q1", "q2", "q3", "total"]],
    measure = ["absolute" , "relative" , "relative" , "relative" , "total", "relative" , "relative" , "relative" , "total"],
    y = [1.1, 2.2, 3.3, -1.1, None, 1.1, 2.2, -4.4, None],
    base = 1000
))
fig.update_layout (
    waterfallgroupgap  = 0.5,
)
fig.show()
This example uses , 
, and  attributes to
customize the bars.
decreasing (https://plotly.com/python/reference/waterfall/#waterfall-decreasing)
increasing
(https://plotly.com/python/reference/waterfall/#waterfall-increasing)
totals (https://plotly.com/python/reference/waterfall/#waterfall-totals)initial q1 q2 q3 total q1 q2 q3 total
2016 2017 201810001002100410061008trace 0
trace 1
16/07/2025, 06:47 Waterfall charts in Python
https://plotly.com/python/waterfall-charts/ 2/5

--- Página 3 ---
import plotly.graph_objects  as go
fig = go.Figure(go.Waterfall (
    x = [["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
       ["initial" , "q1", "q2", "q3", "total", "q1", "q2", "q3", "total"]],
    measure = ["absolute" , "relative" , "relative" , "relative" , "total", "relative" , "relative" , "relative" , "total"],
    y = [10, 20, 30, -10, None, 10, 20, -40, None], base = 300,
    decreasing  = {"marker" :{"color":"Maroon" , "line":{"color":"red", "width":2}}},
    increasing  = {"marker" :{"color":"Teal"}},
    totals = {"marker" :{"color":"deep sky blue" , "line":{"color":"blue", "width":3}}}
))
fig.update_layout (title = "Profit and loss statement" , waterfallgap  = 0.3)
fig.show()
initial q1 q2 q3 total q1 q2 q3 total
2016 2017 2018300310320330340350360370380Profit and loss statement
16/07/2025, 06:47 Waterfall charts in Python
https://plotly.com/python/waterfall-charts/ 3/5

--- Página 4 ---
Horizontal Waterfall Chart
Referenceimport plotly.graph_objects  as go
fig = go.Figure(go.Waterfall (
    name = "2018", orientation  = "h", measure = ["relative" , "relative" , "relative" , "relative" , "total", "relative" ,
                                              "relative" , "relative" , "relative" , "total", "relative" , "relative" , "total", "relative" , "total"],
    y = ["Sales", "Consulting" , "Maintenance" , "Other revenue" , "Net revenue" , "Purchases" , "Material expenses" ,
       "Personnel expenses" , "Other expenses" , "Operating profit" , "Investment income" , "Financial income" ,
       "Profit before tax" , "Income tax (15%)" , "Profit after tax" ],
    x = [375, 128, 78, 27, None, -327, -12, -78, -12, None, 32, 89, None, -45, None],
    connector  = {"mode":"between" , "line":{"width":4, "color":"rgb(0, 0, 0)" , "dash":"solid"}}
))
fig.update_layout (title = "Profit and loss statement 2018" )
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/waterfall/ (https://plotly.com/python/reference/waterfall/)0 100 200 300 400 500 600SalesConsultingMaintenanceOther revenueNet revenuePurchasesMaterial expensesPersonnel expensesOther expensesOperating profitInvestment incomeFinancial incomeProfit before taxIncome tax (15%)Profit after taxProfit and loss statement 2018
16/07/2025, 06:47 Waterfall charts in Python
https://plotly.com/python/waterfall-charts/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:47 Waterfall charts in Python
https://plotly.com/python/waterfall-charts/ 5/5</content>
      </file>
    </category>
    <category name="pyvy_2x7" path="pyvy_2x7">
      <file name="3d axes in Python.pdf" path="pyvy_2x7/3d axes in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Range of axes &gt;  &gt; 3D Axes
3D Axes in Python
How to format axes of 3d plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-axes.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
3D figures have an attribute in layout called scene, which contains attributes such as xaxis, yaxis and zaxis parameters, in order to set the range, title, ticks, color etc.
of the axes.
For creating 3D charts, see .
this page (https://plotly.com/python/3d-charts/)
Set range on an axis to manually configure a range for that axis. If you don't set range, it's automatically calculated. In this example, we set a range on xaxis, yaxis, and
zaxis.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:49 3d axes in Python
https://plotly.com/python/3d-axes/ 1/5

--- Página 2 ---
Setting only a Lower or Upper Bound for Rangeimport plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
N = 70
fig = go.Figure(data=[go.Mesh3d(x=(70*np.random.randn(N)),
                   y=(55*np.random.randn(N)),
                   z=(40*np.random.randn(N)),
                   opacity=0.5,
                   color='rgba(244,22,100,0.6)'
                  )])
fig.update_layout (
    scene = dict(
        xaxis = dict(nticks=4, range=[-100,100],),
                     yaxis = dict(nticks=4, range=[-50,100],),
                     zaxis = dict(nticks=4, range=[-100,100],),),
    width=700,
    margin=dict(r=20, l=10, b=10, t=10))
fig.show()
New in 5.17
You can also set just a lower or upper bound for range. In this case, autorange is used for the other bound. In this example, we apply autorange to the lower bound of
the yaxis and the upper bound of zaxis by setting them to None.
16/07/2025, 06:49 3d axes in Python
https://plotly.com/python/3d-axes/ 2/5

--- Página 3 ---
import plotly.graph_objects  as go
import numpy as np
np.random.seed(1)
N = 70
fig = go.Figure(data=[go.Mesh3d(x=(70*np.random.randn(N)),
                   y=(55*np.random.randn(N)),
                   z=(40*np.random.randn(N)),
                   opacity=0.5,
                   color='rgba(244,22,100,0.6)'
                  )])
fig.update_layout (
    scene = dict(
        xaxis = dict(nticks=4, range=[-100,100],),
                     yaxis = dict(nticks=4, range=[None, 100],),
                     zaxis = dict(nticks=4, range=[-100, None],),),
    width=700,
    margin=dict(r=20, l=10, b=10, t=10))
fig.show()
16/07/2025, 06:49 3d axes in Python
https://plotly.com/python/3d-axes/ 3/5

--- Página 4 ---
Fixed Ratio Axes
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
N = 50
fig = make_subplots (rows=2, cols=2,
                    specs=[[{'is_3d': True}, {'is_3d': True}],
                           [{'is_3d': True}, {'is_3d': True}]],
                    print_grid =False)
for i in [1,2]:
    for j in [1,2]:
        fig.add_trace (
            go.Mesh3d(
                x=(60*np.random.randn(N)),
                y=(25*np.random.randn(N)),
                z=(40*np.random.randn(N)),
                opacity=0.5,
              ),
            row=i, col=j)
fig.update_layout (width=700, margin=dict(r=10, l=10, b=10, t=10))
# fix the ratio in the top left subplot to be a cube
fig.update_layout (scene_aspectmode ='cube')
# manually force the z-axis to appear twice as big as the other two
fig.update_layout (scene2_aspectmode ='manual' ,
                  scene2_aspectratio =dict(x=1, y=1, z=2))
# draw axes in proportion to the proportion of their ranges
fig.update_layout (scene3_aspectmode ='data')
# automatically produce something that is well proportioned using 'data' as the default
fig.update_layout (scene4_aspectmode ='auto')
fig.show()
16/07/2025, 06:49 3d axes in Python
https://plotly.com/python/3d-axes/ 4/5

--- Página 5 ---
Set Axes Title
import plotly.graph_objects  as go
import numpy as np
# Define random surface
N = 50
fig = go.Figure()
fig.add_trace (go.Mesh3d(x=(60*np.random.randn(N)),
                   y=(25*np.random.randn(N)),
                   z=(40*np.random.randn(N)),
                   opacity=0.5,
                   color='yellow'
                  ))
fig.add_trace (go.Mesh3d(x=(70*np.random.randn(N)),
                   y=(55*np.random.randn(N)),
                   z=(30*np.random.randn(N)),
                   opacity=0.5,
                   color='pink'
                  ))
fig.update_layout (scene = dict(
                      xaxis=dict(
                          title=dict(
                              text='X AXIS TITLE'
                          )
                      ),
                      yaxis=dict(
                          title=dict(
                              text='Y AXIS TITLE'
                          )
                      ),
                      zaxis=dict(
                          title=dict(
                              text='Z AXIS TITLE'
                          )
                      ),
                    ),
                    width=700,
                    margin=dict(r=20, b=10, l=10, t=10))
fig.show()
16/07/2025, 06:49 3d axes in Python
https://plotly.com/python/3d-axes/ 5/5</content>
      </file>
      <file name="3d bubble charts in Python.pdf" path="pyvy_2x7/3d bubble charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)3d Bubble chart with Plotly Express
Simple Bubble Chart &gt;  &gt; 3D Bubble
Charts
3D Bubble Charts in Python
How to make 3D Bubble Charts in Python with Plotly. Three examples of 3D Bubble Charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-bubble-
charts.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import plotly.express  as px
import numpy as np
df = px.data.gapminder ()
fig = px.scatter_3d (df, x='year', y='continent' , z='pop', size='gdpPercap' , color='lifeExp' ,
                    hover_data =['country' ])
fig.update_layout (scene_zaxis_type ="log")
fig.show()
304050607080lifeExp
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 1/7

--- Página 2 ---
Bubble Chart Sized by a Variableimport plotly.graph_objects  as go
import pandas as pd
# Get Data: this ex will only use part of it (i.e. rows 750-1500)
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv' )
start, end = 750, 1500
fig = go.Figure(data=go.Scatter3d (
    x=df['year'][start:end],
    y=df['continent' ][start:end],
    z=df['pop'][start:end],
    text=df['country' ][start:end],
    mode='markers' ,
    marker=dict(
        sizemode ='diameter' ,
        sizeref=750,
        size=df['gdpPercap' ][start:end],
        color = df['lifeExp' ][start:end],
        colorscale  = 'Viridis' ,
        colorbar_title  = 'Life&lt;br&gt;Expectancy' ,
        line_color ='rgb(140, 140, 170)'
    )
))
fig.update_layout (height=800, width=800,
                  title=dict(text='Examining Population and Life Expectancy Over Time' ))
fig.show()
Plot planets' distance from sun, density, and gravity with bubble size based on planet size
304050607080Life
ExpectancyExamining Population and Life Expectancy Over Time
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 2/7

--- Página 3 ---
import plotly.graph_objects  as go
planets = ['Mercury' , 'Venus', 'Earth', 'Mars', 'Jupiter' , 'Saturn' , 'Uranus' , 'Neptune' , 'Pluto']
planet_colors  = ['rgb(135, 135, 125)' , 'rgb(210, 50, 0)' , 'rgb(50, 90, 255)' ,
                 'rgb(178, 0, 0)' , 'rgb(235, 235, 210)' , 'rgb(235, 205, 130)' ,
                 'rgb(55, 255, 217)' , 'rgb(38, 0, 171)' , 'rgb(255, 255, 255)' ]
distance_from_sun  = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]
density = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]
gravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]
planet_diameter  = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]
# Create trace, sizing bubbles by planet diameter
fig = go.Figure(data=go.Scatter3d (
    x = distance_from_sun ,
    y = density,
    z = gravity,
    text = planets,
    mode = 'markers' ,
    marker = dict(
        sizemode  = 'diameter' ,
        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/scatter/#scatter-marker-sizeref
        size = planet_diameter ,
        color = planet_colors ,
        )
))
fig.update_layout (
    width=800,
    height=800,
    title=dict(text="Planets!" ),
    scene=dict(
        xaxis=dict(
            title=dict(
                text="Distance from Sun" ,
                font=dict(
                    color="white"
                )
            )
        ),
        yaxis=dict(
            title=dict(
                text="Density" ,
                font=dict(
                    color="white"
                )
            )
        ),
        zaxis=dict(
            title=dict(
                text="Gravity" ,
                font=dict(
                    color="white"
                )
            )
        ),
        bgcolor="rgb(20, 24, 54)"
    )
)
fig.show()
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 3/7

--- Página 4 ---
Edit the Colorbar
Plot planets' distance from sun, density, and gravity with bubble size based on planet size
Planets!
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 4/7

--- Página 5 ---
import plotly.graph_objects  as go
planets = ['Mercury' , 'Venus', 'Earth', 'Mars', 'Jupiter' , 'Saturn' , 'Uranus' , 'Neptune' , 'Pluto']
temperatures  = [167, 464, 15, -20, -65, -110, -140, -195, -200, -225]
distance_from_sun  = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]
density = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]
gravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]
planet_diameter  = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]
# Create trace, sizing bubbles by planet diameter
fig = go.Figure(go.Scatter3d (
    x = distance_from_sun ,
    y = density,
    z = gravity,
    text = planets,
    mode = 'markers' ,
    marker = dict(
        sizemode  = 'diameter' ,
        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/scatter/#scatter-marker-sizeref
        size = planet_diameter ,
        color = temperatures ,
        colorbar_title  = 'Mean&lt;br&gt;Temperature' ,
        colorscale =[[0, 'rgb(5, 10, 172)' ], [.3, 'rgb(255, 255, 255)' ], [1, 'rgb(178, 10, 28)' ]]
        )
))
fig.update_layout (
    width=800,
    height=800,
    title=dict(text="Planets!" ),
    scene=dict(
        xaxis=dict(
            title=dict(
                text="Distance from Sun" ,
                font=dict(
                    color="white"
                )
            )
        ),
        yaxis=dict(
            title=dict(
                text="Density" ,
                font=dict(
                    color="white"
                )
            )
        ),
        zaxis=dict(
            title=dict(
                text="Gravity" ,
                font=dict(
                    color="white"
                )
            )
        ),
        bgcolor="rgb(20, 24, 54)"
    )
)
fig.show()
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 5/7

--- Página 6 ---
Reference
What About Dash?See  and 
for more information and chart attribute options!
https://plotly.com/python/reference/scatter3d/ (https://plotly.com/python/reference/scatter3d/)
https://plotly.com/python/reference/scatter/#scatter-
marker-sizeref (https://plotly.com/python/reference/scatter/#scatter-marker-sizeref)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
−200−1000100200300400Mean
TemperaturePlanets!
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 6/7

--- Página 7 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:50 3d bubble charts in Python
https://plotly.com/python/3d-bubble-charts/ 7/7</content>
      </file>
      <file name="3d camera controls in Python.pdf" path="pyvy_2x7/3d camera controls in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)How camera controls work &gt;  &gt; 3D Camera
Controls
3D Camera Controls in Python
How to Control the Camera in your 3D Charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-camera-
controls.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The camera position and direction is determined by three vectors: up, center, eye. Their coordinates refer to the 3-d domain, i.e., (0, 0, 0) is always the center of the
domain, no matter data values. The eye vector determines the position of the camera. The default is $(x=1.25, y=1.25, z=1.25)$.
The up vector determines the up direction on the page. The default is $(x=0, y=0, z=1)$, that is, the z-axis points up.
The projection of the center point lies at the center of the view. By default it is $(x=0, y=0, z=0)$.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 1/11

--- Página 2 ---
Default parameters
Changing the camera position by setting the eye parameter
Lower the View Pointimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=40, r=0, l=20, b=20)
)
name = 'default'
# Default parameters which are used when `layout.scene.camera` is not provided
camera = dict(
    up=dict(x=0, y=0, z=1),
    center=dict(x=0, y=0, z=0),
    eye=dict(x=1.25, y=1.25, z=1.25)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
by setting eye.z to a smaller value.
default
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 2/11

--- Página 3 ---
X-Z planeimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
name = 'eye = (x:2, y:2, z:0.1)'
camera = dict(
    eye=dict(x=2, y=2, z=0.1)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
set eye.x and eye.z to zero
eye = (x:2, y:2, z:0.1)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 3/11

--- Página 4 ---
Y-Z planeimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
name = 'eye = (x:0., y:2.5, z:0.)'
camera = dict(
    eye=dict(x=0., y=2.5, z=0.)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
eye = (x:0., y:2.5, z:0.)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 4/11

--- Página 5 ---
View from Above (X-Y plane)import plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
name = 'eye = (x:2.5, y:0., z:0.)'
camera = dict(
    eye=dict(x=2.5, y=0., z=0.)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
eye = (x:2.5, y:0., z:0.)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 5/11

--- Página 6 ---
Zooming Inimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
name = 'eye = (x:0., y:0., z:2.5)'
camera = dict(
    eye=dict(x=0., y=0., z=2.5)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
... by placing the camera closer to the origin (eye with a smaller norm)
eye = (x:0., y:0., z:2.5)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 6/11

--- Página 7 ---
Tilting the camera vertical by setting the up parameterimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
name = 'eye = (x:0.1, y:0.1, z:1.5)'
camera = dict(
    eye=dict(x=0.1, y=0.1, z=1.5)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
Tilt camera by changing the up vector: here the vertical of the view points in the x direction.
eye = (x:0.1, y:0.1, z:1.5)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 7/11

--- Página 8 ---
import plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
name = 'eye = (x:0., y:2.5, z:0.), point along x'
camera = dict(
    up=dict(x=1, y=0., z=0),
    eye=dict(x=0., y=2.5, z=0.)
)
fig.update_layout (scene_camera =camera, title=name)
fig.show()
Note when up does not correspond to the direction of an axis, you also need to set layout.scene.dragmode='orbit'.
eye = (x:0., y:2.5, z:0.), point along x
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 8/11

--- Página 9 ---
Changing the focal point by setting centerimport math
import plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)
angle = math.pi / 4 # 45 degrees
name = 'vertical is along y+z'
camera = dict(
    up=dict(x=0, y=math.cos(angle), z=math.sin(angle)),
    eye=dict(x=2, y=0, z=0)
)
fig.update_layout (scene_camera =camera, scene_dragmode ='orbit', title=name)
fig.show()
You can change the focal point (a point which projection lies at the center of the view) by setting the center parameter of camera. Note how a part of the data is
cropped below because the camera is looking up.
vertical is along y+z
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 9/11

--- Página 10 ---
Reference
What About Dash?import plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=go.Surface(z=z_data, showscale =False))
fig.update_layout (
    title=dict(text='Mt Bruno Elevation' ),
    width=400, height=400,
    margin=dict(t=25, r=0, l=20, b=30)
)
name = 'looking up'
camera = dict(
    center=dict(x=0, y=0, z=0.7))
fig.update_layout (scene_camera =camera, title=name)
fig.show()
See  for more
information and chart attribute options!
https://plotly.com/python/reference/layout/scene/#layout-scene-camera (https://plotly.com/python/reference/layout/scene/#layout-scene-camera)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
looking up
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 10/11

--- Página 11 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
etting the
g the up
center16/07/2025, 06:50 3d camera controls in Python
https://plotly.com/python/3d-camera-controls/ 11/11</content>
      </file>
      <file name="3d charts in Python.pdf" path="pyvy_2x7/3d charts in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
3D Charts in Dash
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to get
the code and run python app.py.
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
Python (/python)
3D Charts (/python/3d-charts)Plotly Python Open Source Graphing Library 3D Charts
Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make 3D charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/3d-axes/)
3D Axes
(/python/3d-scatter-
plots/)
3D Scatter Plots
(/python/3d-surface-
plots/)
3D Surface Plots
(/python/3d-subplots/)
3D Subplots
(/python/3d-camera-
controls/)
3D Camera Controls
(/python/3d-bubble-
charts/)
3D Bubble Charts
(/python/3d-line-plots/)
3D Line Plots
(/python/trisurf/)
Trisurf Plots
(/python/3d-mesh/)
3D Mesh Plots
(/python/3d-isosurface-
plots/)
3D Isosurface Plots
(/python/3d-volume-
plots/)
3D Volume Plots
(/python/cone-plot/)
3D Cone Plots
(/python/streamtube-
plot/)
3D Streamtube Plots
Dash (https://plotly.com/dash/)
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:49 3d charts in Python
https://plotly.com/python/3d-charts/ 1/3

--- Página 2 ---

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Iris samples filtered by petal width'),
    dcc.Graph(id="graph"),
    html.P("Petal Width:"),
    dcc.RangeSlider(
        id='range-slider',
        min=0, max=2.5, step=0.1,
        marks={0: '0', 2.5: '2.5'},
        value=[0.5, 2]
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("range-slider", "value"))
def update_bar_chart(slider_range):
    df = px.data.iris() # replace with your own data source
    low, high = slider_range
    mask = (df.petal_width &gt; low) &amp; (df.petal_width &lt; high)
 fi tt 3d(df[ k]DOWNLOAD
Iris samples filtered by petal width
Petal Width:
species
setosa
versicolor
virginica
0 2.5
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:49 3d charts in Python
https://plotly.com/python/3d-charts/ 2/3

--- Página 3 ---
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:49 3d charts in Python
https://plotly.com/python/3d-charts/ 3/3</content>
      </file>
      <file name="3d cone plots in Python.pdf" path="pyvy_2x7/3d cone plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic 3D Cone &gt;  &gt; 3D Cone
Plots
3D Cone Plots in Python
How to make 3D Cone plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/cone-
plot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A cone plot is the 3D equivalent of a 2D , i.e., it represents a 3D vector field using cones to represent the direction and norm of the
vectors. 3-D coordinates are given by x, y and z, and the coordinates of the vector field by u, v and w.
quiver plot (/python/quiver-plots/)
import plotly.graph_objects  as go
fig = go.Figure(data=go.Cone(x=[1], y=[1], z=[1], u=[1], v=[1], w=[0]))
fig.update_layout (scene_camera_eye =dict(x=-0.76, y=1.8, z=0.92))
fig.show()
11.21.41.61.8
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 1/6

--- Página 2 ---
Multiple 3D Cones
import plotly.graph_objects  as go
fig = go.Figure(data=go.Cone(
    x=[1, 2, 3],
    y=[1, 2, 3],
    z=[1, 2, 3],
    u=[1, 0, 0],
    v=[0, 3, 0],
    w=[0, 0, 2],
    sizemode ="absolute" ,
    sizeref=2,
    anchor="tip"))
fig.update_layout (
      scene=dict(domain_x =[0, 1],
                 camera_eye =dict(x=-1.57, y=1.36, z=0.58)))
fig.show()
11.522.53
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 2/6

--- Página 3 ---
3D Cone Lighting
import plotly.graph_objects  as go
fig = go.Figure()
fig.add_trace (go.Cone(x=[1,] * 3, name="base"))
fig.add_trace (go.Cone(x=[2,] * 3, opacity=0.3, name="opacity:0.3" ))
fig.add_trace (go.Cone(x=[3,] * 3, lighting_ambient =0.3, name="lighting.ambient:0.3" ))
fig.add_trace (go.Cone(x=[4,] * 3, lighting_diffuse =0.3, name="lighting.diffuse:0.3" ))
fig.add_trace (go.Cone(x=[5,] * 3, lighting_specular =2, name="lighting.specular:2" ))
fig.add_trace (go.Cone(x=[6,] * 3, lighting_roughness =1, name="lighting.roughness:1" ))
fig.add_trace (go.Cone(x=[7,] * 3, lighting_fresnel =2, name="lighting.fresnel:2" ))
fig.add_trace (go.Cone(x=[8,] * 3, lightposition =dict(x=0, y=0, z=1e5),
                                  name="lighting.position x:0,y:0,z:1e5" ))
fig.update_traces (y=[1, 2, 3], z=[1, 1, 1],
                  u=[1, 2, 3], v=[1, 1, 2], w=[4, 4, 1],
                  hoverinfo ="u+v+w+name" ,
                  showscale =False)
fig.update_layout (scene=dict(aspectmode ="data",
                             camera_eye =dict(x=0.05, y=-2.6, z=2)),
                  margin=dict(t=0, b=0, l=0, r=0))
fig.show()
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 3/6

--- Página 4 ---
3D Cone Vortex
Sizemodeimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/vortex.csv" )
fig = go.Figure(data = go.Cone(
    x=df['x'],
    y=df['y'],
    z=df['z'],
    u=df['u'],
    v=df['v'],
    w=df['w'],
    colorscale ='Blues',
    sizemode ="absolute" ,
    sizeref=40))
fig.update_layout (scene=dict(aspectratio =dict(x=1, y=1, z=0.8),
                             camera_eye =dict(x=1.2, y=1.2, z=0.6)))
fig.show()
Earlier examples use sizemode="absolute" when adjusting the cone size scaling with sizeref. sizemode also supports raw(new in 5.21) and scaled.
0.60.811.21.41.61.82
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 4/6

--- Página 5 ---
Referenceimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/cone_plot_data.csv"
)
fig = go.Figure(
    data=go.Cone(
        x=df["x"],
        y=df["y"],
        z=df["z"],
        u=df["u"],
        v=df["v"],
        w=df["w"],
        sizemode ="raw",
        sizeref=0.1,
        colorscale ="Portland" ,
        cmin=0,
        cmax=80,
        hoverinfo ="u+v+w+text" ,
        text="-&gt; wind &lt;-" ,
    ),
    layout=dict(
        width=900, height=600, scene=dict(camera=dict(eye=dict(x=1.2, y=0, z=0.6)))
    ),
)
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)
01020304050607080
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:51 3d cone plots in Python
https://plotly.com/python/cone-plot/ 6/6</content>
      </file>
      <file name="3d isosurface plots in Python.pdf" path="pyvy_2x7/3d isosurface plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Basic Isosurface
Removing caps when visualizing isosurfaces &gt;  &gt; 3D
Isosurface Plots
3D Isosurface Plots in Python
How to make 3D Isosurface Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-isosurface-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
With go.Isosurface, you can plot  of a scalar field value, which is defined on x, y and z coordinates.
isosurface contours (https://en.wikipedia.org/wiki/Isosurface)
In this first example, we plot the isocontours of values isomin=2 and isomax=6. In addition, portions of the sides of the coordinate domains for which the value is
between isomin and isomax (named the caps) are colored. Please rotate the figure to visualize both the internal surfaces and the caps surfaces on the sides.
import plotly.graph_objects  as go
fig= go.Figure(data=go.Isosurface (
    x=[0,0,0,0,1,1,1,1],
    y=[1,0,1,0,1,0,1,0],
    z=[1,1,0,0,1,1,0,0],
    value=[1,2,3,4,5,6,7,8],
    isomin=2,
    isomax=6,
))
fig.show()
For a clearer visualization of internal surfaces, it is possible to remove the caps (color-coded surfaces on the sides of the visualization domain). Caps are visible by
default.
22.533.544.555.56
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 1/9

--- Página 2 ---
import plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]
# ellipsoid
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=10,
    isomax=40,
    caps=dict(x_show=False, y_show=False)
    ))
fig.show()
10152025303540
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 2/9

--- Página 3 ---
Modifying the number of isosurfaces
import plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]
# ellipsoid
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=10,
    isomax=50,
    surface_count =5, # number of isosurfaces, 2 by default: only min and max
    colorbar_nticks =5, # colorbar ticks correspond to isosurface values
    caps=dict(x_show=False, y_show=False)
    ))
fig.show()
1020304050
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 3/9

--- Página 4 ---
Changing the opacity of isosurfaces
Isosurface with Additional Slicesimport plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]
# ellipsoid
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    opacity=0.6,
    isomin=10,
    isomax=50,
    surface_count =3,
    caps=dict(x_show=False, y_show=False)
    ))
fig.show()
Here we visualize slices parallel to the axes on top of isosurfaces. For a clearer visualization, the fill ratio of isosurfaces is decreased below 1 (completely filled).
101520253035404550
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 4/9

--- Página 5 ---
Multiple Isosurfaces with Capsimport plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]
# ellipsoid
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=5,
    isomax=50,
    surface_fill =0.4,
    caps=dict(x_show=False, y_show=False),
    slices_z =dict(show=True, locations =[-1, -3,]),
    slices_y =dict(show=True, locations =[0]),
    ))
fig.show()
5101520253035404550
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 5/9

--- Página 6 ---
import plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, 0:5:20j]
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=30,
    isomax=50,
    surface=dict(count=3, fill=0.7, pattern='odd'),
    caps=dict(x_show=True, y_show=True),
    ))
fig.show()
3035404550
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 6/9

--- Página 7 ---
Changing the default colorscale of isosurfaces
import plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, -5:5:40j]
# ellipsoid
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    colorscale ='BlueRed' ,
    isomin=10,
    isomax=50,
    surface_count =3,
    caps=dict(x_show=False, y_show=False)
    ))
fig.show()
101520253035404550
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 7/9

--- Página 8 ---
Customizing the layout and appearance of isosurface plots
Referenceimport plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-5:5:40j, -5:5:40j, 0:5:20j]
values = X * X * 0.5 + Y * Y + Z * Z * 2
fig = go.Figure(data=go.Isosurface (
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=30,
    isomax=50,
    surface=dict(count=3, fill=0.7, pattern='odd'),
    showscale =False, # remove colorbar
    caps=dict(x_show=True, y_show=True),
    ))
fig.update_layout (
    margin=dict(t=0, l=0, b=0), # tight layout
    scene_camera_eye =dict(x=1.86, y=0.61, z=0.98))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/isosurface/ (https://plotly.com/python/reference/isosurface/)
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 8/9

--- Página 9 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
surfaces
es
ance of16/07/2025, 06:51 3d isosurface plots in Python
https://plotly.com/python/3d-isosurface-plots/ 9/9</content>
      </file>
      <file name="3d line plots in Python.pdf" path="pyvy_2x7/3d line plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)3D Line plot with Plotly Express &gt;  &gt; 3D Line
Plots
3D Line Plots in Python
How to make 3D Line Plots
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-line-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
import plotly.express  as px
df = px.data.gapminder ().query("country=='Brazil'" )
fig = px.line_3d(df, x="gdpPercap" , y="pop", z="year")
fig.show()
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 1/5

--- Página 2 ---
3D Line Plot of Brownian Motionimport plotly.express  as px
df = px.data.gapminder ().query("continent=='Europe'" )
fig = px.line_3d(df, x="gdpPercap" , y="pop", z="year", color='country' )
fig.show()
Here we represent a trajectory in 3D.
country
Albania
Austria
Belgium
Bosnia and Herzegovina
Bulgaria
Croatia
Czech Republic
Denmark
Finland
France
Germany
Greece
Hungary
Iceland
Ireland
Italy
Montenegro
Netherlands
Norway
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 2/5

--- Página 3 ---
import plotly.graph_objects  as go
import pandas as pd
import numpy as np
rs = np.random.RandomState ()
rs.seed(0)
def brownian_motion (T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):
    dt = float(T)/N
    t = np.linspace (0, T, N)
    W = rs.standard_normal (size = N)
    W = np.cumsum(W)*np.sqrt(dt) # standard brownian motion
    X = (mu-0.5*sigma**2)*t + sigma*W
    S = S0*np.exp(X) # geometric brownian motion
    return S
dates = pd.date_range ('2012-01-01' , '2013-02-22' )
T = (dates.max()-dates.min()).days / 365
N = dates.size
start_price  = 100
y = brownian_motion (T, N, sigma=0.1, S0=start_price )
z = brownian_motion (T, N, sigma=0.1, S0=start_price )
fig = go.Figure(data=go.Scatter3d (
    x=dates, y=y, z=z,
    marker=dict(
        size=4,
        color=z,
        colorscale ='Viridis' ,
    ),
    line=dict(
        color='darkblue' ,
        width=2
    )
))
fig.update_layout (
    width=800,
    height=700,
    autosize =False,
    scene=dict(
        camera=dict(
            up=dict(
                x=0,
                y=0,
                z=1
            ),
            eye=dict(
                x=0,
                y=1.0707,
                z=1,
            )
        ),
        aspectratio  = dict( x=1, y=1, z=0.7 ),
        aspectmode  = 'manual'
    ),
)
fig.show()
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 3/5

--- Página 4 ---
Reference
What About Dash?See  or
 for more information
and chart attribute options!
function reference for px.(line_3d) (https://plotly.com/python-api-reference/generated/plotly.express.line_3d)
https://plotly.com/python/reference/scatter3d/#scatter3d-marker-line (https://plotly.com/python/reference/scatter3d/#scatter3d-marker-line)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 4/5

--- Página 5 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:50 3d line plots in Python
https://plotly.com/python/3d-line-plots/ 5/5</content>
      </file>
      <file name="3d mesh plots in Python.pdf" path="pyvy_2x7/3d mesh plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple 3D Mesh example
3D Mesh example with Alphahull &gt;  &gt; 3D Mesh
Plots
3D Mesh Plots in Python
How to make 3D Mesh Plots
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-
mesh.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
go.Mesh3d draws a 3D set of triangles with vertices given by x, y and z. If only coordinates are given, an algorithm such as 
 is used to draw the triangles. Otherwise the triangles can be given using the i, j and k parameters (see examples
below).
Delaunay triangulation
(https://en.wikipedia.org/wiki/Delaunay_triangulation)
import plotly.graph_objects  as go
import numpy as np
# Download data set from plotly repo
pts = np.loadtxt(np.DataSource ().open('https://raw.githubusercontent.com/plotly/datasets/master/mesh_dataset.txt' ))
x, y, z = pts.T
fig = go.Figure(data=[go.Mesh3d(x=x, y=y, z=z, color='lightpink' , opacity=0.50)])
fig.show()
The alphahull parameter sets the shape of the mesh. If the value is -1 (default value) then 
 is used. If &gt;0 then the  is used. If 0, the
 is represented (resulting in a convex body).
Delaunay triangulation
(https://en.wikipedia.org/wiki/Delaunay_triangulation)
alpha-shape algorithm (https://en.wikipedia.org/wiki/Alpha_shape)
convex hull (https://en.wikipedia.org/wiki/Convex_hull)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 1/7

--- Página 2 ---
3D Mesh in Dashimport plotly.graph_objects  as go
import numpy as np
pts = np.loadtxt(np.DataSource ().open('https://raw.githubusercontent.com/plotly/datasets/master/mesh_dataset.txt' ))
x, y, z = pts.T
fig = go.Figure(data=[go.Mesh3d(x=x, y=y, z=z,
                   alphahull =5,
                   opacity=0.4,
                   color='cyan')])
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 2/7

--- Página 3 ---
Mesh TetrahedronSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
In this example we use the i, j and k parameters to specify manually the geometry of the triangles of the mesh.

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
base_url = "https://raw.githubusercontent.com/plotly/datasets/master/ply/"
mesh_names = ['sandal', 'scissors', 'shark', 'walkman']
dataframes = {
    name: pd.read_csv(base_url + name + '-ply.csv')
    for name in mesh_names
}
app = Dash(__name__)
app.layout = html.Div([
    html.H4('PLY Object Explorer'),
    html.P("Choose an object:"),
    dcc.Dropdown(
        id='dropdown',
        options=mesh_names,
        value="sandal",
        clearable=False
    ),
    dcc.Graph(id="graph"),
])DOWNLOAD
PLY Object Explorer
Choose an object:
sandal
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 3/7

--- Página 4 ---
import plotly.graph_objects  as go
fig = go.Figure(data=[
    go.Mesh3d(
        x=[0, 1, 2, 0],
        y=[0, 0, 1, 2],
        z=[0, 2, 0, 1],
        colorbar =dict(title=dict(text='z')),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity =[0, 0.33, 0.66, 1],
        # i, j and k give the vertices of triangles
        # here we represent the 4 triangles of the tetrahedron surface
        i=[0, 0, 0, 1],
        j=[1, 2, 3, 2],
        k=[2, 3, 1, 3],
        name='y',
        showscale =True
    )
])
fig.show()
00.20.40.60.81z
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 4/7

--- Página 5 ---
Mesh Cube
Intensity values defined on vertices or cellsimport plotly.graph_objects  as go
import numpy as np
fig = go.Figure(data=[
    go.Mesh3d(
        # 8 vertices of a cube
        x=[0, 0, 1, 1, 0, 0, 1, 1],
        y=[0, 1, 1, 0, 0, 1, 1, 0],
        z=[0, 0, 0, 0, 1, 1, 1, 1],
        colorbar =dict(title=dict(text='z')),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity  = np.linspace (0, 1, 8, endpoint =True),
        # i, j and k give the vertices of triangles
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale =True
    )
])
fig.show()
The intensitymode attribute of go.Mesh3d can be set to vertex (default mode, in which case intensity values are interpolated between values defined on vertices), or
to cell (value of the whole cell, no interpolation). Note that the intensity parameter should have the same length as the number of vertices or cells, depending on the
intensitymode.
Whereas the previous example used the default intensitymode='vertex', we plot here the same mesh with intensitymode='cell'.
00.20.40.60.81z
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 5/7

--- Página 6 ---
Referenceimport plotly.graph_objects  as go
fig = go.Figure(data=[
    go.Mesh3d(
        # 8 vertices of a cube
        x=[0, 0, 1, 1, 0, 0, 1, 1],
        y=[0, 1, 1, 0, 0, 1, 1, 0],
        z=[0, 0, 0, 0, 1, 1, 1, 1],
        colorbar =dict(title=dict(text='z')),
        colorscale =[[0, 'gold'],
                    [0.5, 'mediumturquoise' ],
                    [1, 'magenta' ]],
        # Intensity of each vertex, which will be interpolated and color-coded
        intensity  = np.linspace (0, 1, 12, endpoint =True),
        intensitymode ='cell',
        # i, j and k give the vertices of triangles
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale =True
    )
])
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/mesh3d/ (https://plotly.com/python/reference/mesh3d/)
00.20.40.60.81z
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
or cells16/07/2025, 06:51 3d mesh plots in Python
https://plotly.com/python/3d-mesh/ 7/7</content>
      </file>
      <file name="3d scatter plots in Python.pdf" path="pyvy_2x7/3d scatter plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)3D scatter plot with Plotly Express &gt;  &gt; 3D Scatter
Plots
3D Scatter Plots in Python
How to make 3D scatter plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-scatter-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Like the px.scatter, the 3D function px.scatter_3d plots individual data in three-dimensional space.
2D scatter plot (https://plotly.com/python/line-and-scatter/)
d
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 1/7

--- Página 2 ---
Style 3d scatter plotimport plotly.express  as px
df = px.data.iris()
fig = px.scatter_3d (df, x='sepal_length' , y='sepal_width' , z='petal_width' ,
              color='species' )
fig.show()
A 4th dimension of the data can be represented thanks to the color of the markers. Also, values from the species column are used below to assign symbols to
markers.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter_3d (df, x='sepal_length' , y='sepal_width' , z='petal_width' ,
                    color='petal_length' , symbol='species' )
fig.show()
It is possible to customize the style of the figure through the parameters of px.scatter_3d for some options, or by updating the traces or the layout of the figure
through fig.update.
species
setosa
versicolor
virginica
species
setosa
versicolor
virginica
123456petal_length
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 2/7

--- Página 3 ---
3d scatter plots in Dashimport plotly.express  as px
df = px.data.iris()
fig = px.scatter_3d (df, x='sepal_length' , y='sepal_width' , z='petal_width' ,
              color='petal_length' , size='petal_length' , size_max =18,
              symbol='species' , opacity=0.7)
# tight layout
fig.update_layout (margin=dict(l=0, r=0, b=0, t=0))
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)
species
setosa
versicolor
virginica
123456petal_length
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 3/7

--- Página 4 ---
3D Scatter Plot with go.Scatter3d
Basic 3D Scatter PlotSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
If Plotly Express does not provide a good starting point, it is also possible to use 
. Like the go.Scatter, go.Scatter3d plots individual data in three-dimensional space.
the more generic go.Scatter3D class from plotly.graph_objects (/python/graph-
objects/)
2D scatter plot (https://plotly.com/python/line-and-scatter/)

from dash import Dash, dcc, html, Input, Output
import plotly.express as px
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Iris samples filtered by petal width'),
    dcc.Graph(id="graph"),
    html.P("Petal Width:"),
    dcc.RangeSlider(
        id='range-slider',
        min=0, max=2.5, step=0.1,
        marks={0: '0', 2.5: '2.5'},
        value=[0.5, 2]
    ),
])
@app.callback(
    Output("graph", "figure"),
    Input("range-slider", "value"))
def update_bar_chart(slider_range):
    df = px.data.iris() # replace with your own data source
    low, high = slider_range
    mask = (df.petal_width &gt; low) &amp; (df.petal_width &lt; high)
 fi tt 3d(df[ k]DOWNLOAD
Iris samples filtered by petal width
Petal Width:
species
setosa
versicolor
virginica
0 2.5
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 4/7

--- Página 5 ---
3D Scatter Plot with Colorscaling and Marker Stylingimport plotly.graph_objects  as go
import numpy as np
# Helix equation
t = np.linspace (0, 10, 50)
x, y, z = np.cos(t), np.sin(t), t
fig = go.Figure(data=[go.Scatter3d (x=x, y=y, z=z,
                                   mode='markers' )])
fig.show()
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 5/7

--- Página 6 ---
Referenceimport plotly.graph_objects  as go
import numpy as np
# Helix equation
t = np.linspace (0, 20, 100)
x, y, z = np.cos(t), np.sin(t), t
fig = go.Figure(data=[go.Scatter3d (
    x=x,
    y=y,
    z=z,
    mode='markers' ,
    marker=dict(
        size=12,
        color=z,                # set color to an array/list of desired values
        colorscale ='Viridis' ,   # choose a colorscale
        opacity=0.8
    )
)])
# tight layout
fig.update_layout (margin=dict(l=0, r=0, b=0, t=0))
fig.show()
See  or
 for more information and chart attribute options!
function reference for px.scatter_3d() (https://plotly.com/python-api-reference/generated/plotly.express.scatter_3d)
https://plotly.com/python/reference/scatter3d/ (https://plotly.com/python/reference/scatter3d/)
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 6/7

--- Página 7 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:49 3d scatter plots in Python
https://plotly.com/python/3d-scatter-plots/ 7/7</content>
      </file>
      <file name="3d streamtube plots in Python.pdf" path="pyvy_2x7/3d streamtube plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Introduction
Basic Streamtube Plot
Starting Position and Segments &gt;  &gt; 3D
Streamtube Plots
3D Streamtube Plots in Python
How to make 3D streamtube plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/streamtube-
plot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
In streamtube plots, attributes include x, y, and z, which set the coordinates of the vector field, and u, v, and w, which set the x, y, and z components of the vector
field. Additionally, you can use starts to determine the streamtube's starting position.
import plotly.graph_objects  as go
fig = go.Figure(data=go.Streamtube (x=[0, 0, 0], y=[0, 1, 2], z=[0, 0, 0],
                                   u=[0, 0, 0], v=[1, 1, 1], w=[0, 0, 0]))
fig.show()
By default, streamlines are initialized in the x-z plane of minimal y value. You can change this behaviour by providing directly the starting points of streamtubes.
0.60.811.21.4
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:52 3d streamtube plots in Python
https://plotly.com/python/streamtube-plot/ 1/4

--- Página 2 ---
Tube color and diameterimport plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv' ).drop(['Unnamed: 0' ],axis=1)
fig = go.Figure(data=go.Streamtube (
    x = df['x'],
    y = df['y'],
    z = df['z'],
    u = df['u'],
    v = df['v'],
    w = df['w'],
    starts = dict(
        x = [80] * 16,
        y = [20,30,40,50] * 4,
        z = [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]
    ),
    sizeref = 0.3,
    colorscale  = 'Portland' ,
    showscale  = False,
    maxdisplayed  = 3000
))
fig.update_layout (
    scene = dict(
        aspectratio  = dict(
            x = 2,
            y = 1,
            z = 0.3
        )
    ),
    margin = dict(
        t = 20,
        b = 20,
        l = 20,
        r = 20
    )
)
fig.show()
The color of tubes is determined by their local norm, and the diameter of the field by the local  of the vector field.
divergence (https://en.wikipedia.org/wiki/Divergence)
In all cases below the norm is proportional to z**2 but the direction of the vector is different, resulting in a different divergence field.
16/07/2025, 06:52 3d streamtube plots in Python
https://plotly.com/python/streamtube-plot/ 2/4

--- Página 3 ---
Referenceimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
x, y, z = np.mgrid[0:10, 0:10, 0:10]
x = x.flatten()
y = y.flatten()
z = z.flatten()
u = np.zeros_like (x)
v = np.zeros_like (y)
w = z**2
fig = make_subplots (rows=1, cols=3, specs=[[{'is_3d': True}, {'is_3d': True}, {'is_3d':True}]])
fig.add_trace (go.Streamtube (x=x, y=y, z=z, u=u, v=v, w=w), 1, 1)
fig.add_trace (go.Streamtube (x=x, y=y, z=z, u=w, v=v, w=u), 1, 2)
fig.add_trace (go.Streamtube (x=x, y=y, z=z, u=u, v=w, w=v), 1, 3)
fig.update_layout (scene_camera_eye =dict(x=2, y=2, z=2),
                  scene2_camera_eye =dict(x=2, y=2, z=2),
                  scene3_camera_eye =dict(x=2, y=2, z=2))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/streamtube/ (https://plotly.com/python/reference/streamtube/)
01020304050607080
01020304050607080
01020304050607080
16/07/2025, 06:52 3d streamtube plots in Python
https://plotly.com/python/streamtube-plot/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:52 3d streamtube plots in Python
https://plotly.com/python/streamtube-plot/ 4/4</content>
      </file>
      <file name="3d subplots in Python.pdf" path="pyvy_2x7/3d subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)3D Surface Subplots &gt;  &gt; 3D
Subplots
3D Subplots in Python
3D Subplots in Plotly
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-
subplots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d subplots in Python
https://plotly.com/python/3d-subplots/ 1/4

--- Página 2 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
# Initialize figure with 4 3D subplots
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{'type': 'surface' }, {'type': 'surface' }],
           [{'type': 'surface' }, {'type': 'surface' }]])
# Generate data
x = np.linspace (-5, 80, 10)
y = np.linspace (-5, 60, 10)
xGrid, yGrid = np.meshgrid (y, x)
z = xGrid ** 3 + yGrid ** 3
# adding surfaces to subplots.
fig.add_trace (
    go.Surface(x=x, y=y, z=z, colorscale ='Viridis' , showscale =False),
    row=1, col=1)
fig.add_trace (
    go.Surface(x=x, y=y, z=z, colorscale ='RdBu', showscale =False),
    row=1, col=2)
fig.add_trace (
    go.Surface(x=x, y=y, z=z, colorscale ='YlOrRd' , showscale =False),
    row=2, col=1)
fig.add_trace (
    go.Surface(x=x, y=y, z=z, colorscale ='YlGnBu' , showscale =False),
    row=2, col=2)
fig.update_layout (
    title_text ='3D subplots with different colorscales' ,
    height=800,
    width=800
)
fig.show()
16/07/2025, 06:50 3d subplots in Python
https://plotly.com/python/3d-subplots/ 2/4

--- Página 3 ---
Reference
What About Dash?See  for more information regarding subplots!
https://plotly.com/python/subplots/ (https://plotly.com/python/subplots/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
3D subplots with different colorscales
16/07/2025, 06:50 3d subplots in Python
https://plotly.com/python/3d-subplots/ 3/4

--- Página 4 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:50 3d subplots in Python
https://plotly.com/python/3d-subplots/ 4/4</content>
      </file>
      <file name="3d surface plots in Python.pdf" path="pyvy_2x7/3d surface plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Topographical 3D Surface Plot &gt;  &gt; 3D Surface
Plots
3D Surface Plots in Python
How to make 3D-surface plots in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-surface-
plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plot
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 1/8

--- Página 2 ---
Passing x and y data to 3D Surface Plotimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=[go.Surface(z=z_data.values)])
fig.update_layout (title=dict(text='Mt Bruno Elevation' ), autosize =False,
                  width=500, height=500,
                  margin=dict(l=65, r=50, b=65, t=90))
fig.show()
If you do not specify x and y coordinates, integer indices are used for the x and y axis. You can also pass x and y values to go.Surface.
050100150200250300350Mt Bruno Elevation
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 2/8

--- Página 3 ---
Surface Plot With Contoursimport plotly.graph_objects  as go
import pandas as pd
import numpy as np
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
z = z_data.values
sh_0, sh_1 = z.shape
x, y = np.linspace (0, 1, sh_0), np.linspace (0, 1, sh_1)
fig = go.Figure(data=[go.Surface(z=z, x=x, y=y)])
fig.update_layout (title=dict(text='Mt Bruno Elevation' ), autosize =False,
                  width=500, height=500,
                  margin=dict(l=65, r=50, b=65, t=90))
fig.show()
Display and customize contour data for each axis using the contours attribute ( ).
reference (https://plotly.com/python/reference/surface/#surface-contours)
050100150200250300350Mt Bruno Elevation
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 3/8

--- Página 4 ---
Configure Surface Contour Levelsimport plotly.graph_objects  as go
import pandas as pd
# Read data from a csv
z_data = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv' )
fig = go.Figure(data=[go.Surface(z=z_data.values)])
fig.update_traces (contours_z =dict(show=True, usecolormap =True,
                                  highlightcolor ="limegreen" , project_z =True))
fig.update_layout (title=dict(text='Mt Bruno Elevation' ), autosize =False,
                  scene_camera_eye =dict(x=1.87, y=0.88, z=-0.64),
                  width=500, height=500,
                  margin=dict(l=65, r=50, b=65, t=90)
)
fig.show()
This example shows how to slice the surface graph on the desired position for each of x, y and z axis. 
 sets the starting contour level value, end sets the end of it, and size sets the step between
each contour level.
contours.x.start
(https://plotly.com/python/reference/surface/#surface-contours-x-start)
050100150200250300350Mt Bruno Elevation
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 4/8

--- Página 5 ---
Multiple 3D Surface Plotsimport plotly.graph_objects  as go
fig = go.Figure(go.Surface(
    contours  = {
        "x": {"show": True, "start": 1.5, "end": 2, "size": 0.04, "color":"white"},
        "z": {"show": True, "start": 0.5, "end": 0.8, "size": 0.05}
    },
    x = [1,2,3,4,5],
    y = [1,2,3,4,5],
    z = [
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0]
    ]))
fig.update_layout (
        scene = {
            "xaxis": {"nticks" : 20},
            "zaxis": {"nticks" : 4},
            'camera_eye' : {"x": 0, "y": -1, "z": 0.5},
            "aspectratio" : {"x": 1, "y": 1, "z": 0.2}
        })
fig.show()
00.20.40.60.81
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 5/8

--- Página 6 ---
Setting the Surface Colorimport plotly.graph_objects  as go
import numpy as np
z1 = np.array([
    [8.83,8.89,8.81,8.87,8.9,8.87],
    [8.89,8.94,8.85,8.94,8.96,8.92],
    [8.84,8.9,8.82,8.92,8.93,8.91],
    [8.79,8.85,8.79,8.9,8.94,8.92],
    [8.79,8.88,8.81,8.9,8.95,8.92],
    [8.8,8.82,8.78,8.91,8.94,8.92],
    [8.75,8.78,8.77,8.91,8.95,8.92],
    [8.8,8.8,8.77,8.91,8.95,8.94],
    [8.74,8.81,8.76,8.93,8.98,8.99],
    [8.89,8.99,8.92,9.1,9.13,9.11],
    [8.97,8.97,8.91,9.09,9.11,9.11],
    [9.04,9.08,9.05,9.25,9.28,9.27],
    [9,9.01,9,9.2,9.23,9.2],
    [8.99,8.99,8.98,9.18,9.2,9.19],
    [8.93,8.97,8.97,9.18,9.2,9.18]
])
z2 = z1 + 1
z3 = z1 - 1
fig = go.Figure(data=[
    go.Surface(z=z1),
    go.Surface(z=z2, showscale =False, opacity=0.9),
    go.Surface(z=z3, showscale =False, opacity=0.9)
])
fig.show()
You can use the surfacecolor attribute to define the color of the surface of your figure. In this example, the surface color represents the distance from the origin,
rather than the default, which is the z value.
8.88.999.19.2
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 6/8

--- Página 7 ---
Referenceimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
# Equation of ring cyclide
# see https://en.wikipedia.org/wiki/Dupin_cyclide
import numpy as np
a, b, d = 1.32, 1., 0.8
c = a**2 - b**2
u, v = np.mgrid[0:2*np.pi:100j, 0:2*np.pi:100j]
x = (d * (c - a * np.cos(u) * np.cos(v)) + b**2 * np.cos(u)) / (a - c * np.cos(u) * np.cos(v))
y = b * np.sin(u) * (a - d*np.cos(v)) / (a - c * np.cos(u) * np.cos(v))
z = b * np.sin(v) * (c*np.cos(u) - d) / (a - c * np.cos(u) * np.cos(v))
fig = make_subplots (rows=1, cols=2,
                    specs=[[{'is_3d': True}, {'is_3d': True}]],
                    subplot_titles =['Color corresponds to z' , 'Color corresponds to distance to origin' ],
                    )
fig.add_trace (go.Surface(x=x, y=y, z=z, colorbar_x =-0.07), 1, 1)
fig.add_trace (go.Surface(x=x, y=y, z=z, surfacecolor =x**2 + y**2 + z**2), 1, 2)
fig.update_layout (title_text ="Ring cyclide" )
fig.show()
See  for more information!
https://plotly.com/python/reference/surface/ (https://plotly.com/python/reference/surface/)
−1−0.500.51
123456Ring cyclide
Color corresponds to z Color corresponds to distance to origin
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 7/8

--- Página 8 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:50 3d surface plots in Python
https://plotly.com/python/3d-surface-plots/ 8/8</content>
      </file>
      <file name="3d volume plots in Python.pdf" path="pyvy_2x7/3d volume plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Simple volume plot with go.Volume &gt;  &gt; 3D Volume
Plots
3D Volume Plots in Python
How to make 3D Volume Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/3d-
volume.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A volume plot with go.Volume shows several partially transparent isosurfaces for volume rendering. The API of go.Volume is close to the one of go.Isosurface.
However, whereas  show all surfaces with the same opacity, tweaking the opacityscale parameter of go.Volume results
in a depth effect and better volume rendering.
isosurface plots (/python/3d-isosurface-plots/)
In the three examples below, note that the default colormap is different whether isomin and isomax have the same sign or not.
import plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-8:8:40j, -8:8:40j, -8:8:40j]
values = np.sin(X*Y*Z) / (X*Y*Z)
fig = go.Figure(data=go.Volume(
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=0.1,
    isomax=0.8,
    opacity=0.1, # needs to be small to see through all surfaces
    surface_count =17, # needs to be a large number for good volume rendering
    ))
fig.show()
0.10.20.30.40.50.60.70.8
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 1/9

--- Página 2 ---
import plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-1:1:30j, -1:1:30j, -1:1:30j]
values =    np.sin(np.pi*X) * np.cos(np.pi*Z) * np.sin(np.pi*Y)
fig = go.Figure(data=go.Volume(
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=-0.1,
    isomax=0.8,
    opacity=0.1, # needs to be small to see through all surfaces
    surface_count =21, # needs to be a large number for good volume rendering
    ))
fig.show()
−0.100.10.20.30.40.50.60.70.8
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 2/9

--- Página 3 ---
Defining the opacity scale of volume plotsimport numpy as np
import plotly.graph_objects  as go
# Generate nicely looking random 3D-field
np.random.seed(0)
l = 30
X, Y, Z = np.mgrid[:l, :l, :l]
vol = np.zeros((l, l, l))
pts = (l * np.random.rand(3, 15)).astype(int)
vol[tuple(indices for indices in pts)] = 1
from scipy import ndimage
vol = ndimage.gaussian_filter (vol, 4)
vol /= vol.max()
fig = go.Figure(data=go.Volume(
    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),
    value=vol.flatten(),
    isomin=0.2,
    isomax=0.7,
    opacity=0.1,
    surface_count =25,
    ))
fig.update_layout (scene_xaxis_showticklabels =False,
                  scene_yaxis_showticklabels =False,
                  scene_zaxis_showticklabels =False)
fig.show()
In order to see through the volume, the different isosurfaces need to be partially transparent. This transparency is controlled by a global parameter, opacity, as well as
an opacity scale mapping scalar values to opacity levels. The figure below shows that changing the opacity scale changes a lot the visualization, so that opacityscale
should be chosen carefully (uniform corresponds to a uniform opacity, min/max maps the minimum/maximum value to a maximal opacity, and extremes maps both
the minimum and maximum values to maximal opacity, with a dip in between).
0.20.30.40.50.60.7
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 3/9

--- Página 4 ---
Defining a custom opacity scaleimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{'type': 'volume' }, {'type': 'volume' }],
           [{'type': 'volume' }, {'type': 'volume' }]])
import numpy as np
X, Y, Z = np.mgrid[-8:8:30j, -8:8:30j, -8:8:30j]
values =    np.sin(X*Y*Z) / (X*Y*Z)
fig.add_trace (go.Volume(
    opacityscale ="uniform" ,
    ), row=1, col=1)
fig.add_trace (go.Volume(
    opacityscale ="extremes" ,
    ), row=1, col=2)
fig.add_trace (go.Volume(
    opacityscale ="min",
    ), row=2, col=1)
fig.add_trace (go.Volume(
    opacityscale ="max",
    ), row=2, col=2)
fig.update_traces (x=X.flatten(), y=Y.flatten(), z=Z.flatten(), value=values.flatten(),
    isomin=0.15, isomax=0.9, opacity=0.1, surface_count =15)
fig.show()
It is also possible to define a custom opacity scale, mapping scalar values to relative opacity values (between 0 and 1, the maximum opacity is given by the opacity
keyword). This is useful to make a range of values completely transparent, as in the example below between -0.2 and 0.2.
0.20.30.40.50.60.70.80.9
0.20.30.40.50.60.70.80.9
0.20.30.40.50.60.70.80.9
0.20.30.40.50.60.70.80.9
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 4/9

--- Página 5 ---
Adding caps to a volume plotimport plotly.graph_objects  as go
import numpy as np
X, Y, Z = np.mgrid[-1:1:30j, -1:1:30j, -1:1:30j]
values =    np.sin(np.pi*X) * np.cos(np.pi*Z) * np.sin(np.pi*Y)
fig = go.Figure(data=go.Volume(
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=values.flatten(),
    isomin=-0.5,
    isomax=0.5,
    opacity=0.1, # max opacity
    opacityscale =[[-0.5, 1], [-0.2, 0], [0.2, 0], [0.5, 1]],
    surface_count =21,
    colorscale ='RdBu'
    ))
fig.show()
For a clearer visualization of internal surfaces, it is possible to remove the caps (color-coded surfaces on the sides of the visualization domain). Caps are visible by
default. Compare below with and without caps.
−0.4−0.200.20.4
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 5/9

--- Página 6 ---
import numpy as np
import plotly.graph_objects  as go
X, Y, Z = np.mgrid[:1:20j, :1:20j, :1:20j]
vol = (X - 1)**2 + (Y - 1)**2 + Z**2
fig = go.Figure(data=go.Volume(
    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),
    value=vol.flatten(),
    isomin=0.2,
    isomax=0.7,
    opacity=0.2,
    surface_count =21,
    caps= dict(x_show=True, y_show=True, z_show=True, x_fill=1), # with caps (default mode)
    ))
# Change camera view for a better view of the sides, XZ plane
# (see https://plotly.com/python/v3/3d-camera-controls/)
fig.update_layout (scene_camera  = dict(
    up=dict(x=0, y=0, z=1),
    center=dict(x=0, y=0, z=0),
    eye=dict(x=0.1, y=2.5, z=0.1)
))
fig.show()
0.20.30.40.50.60.7
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 6/9

--- Página 7 ---
Adding slices to a volume plotimport numpy as np
import plotly.graph_objects  as go
X, Y, Z = np.mgrid[:1:20j, :1:20j, :1:20j]
vol = (X - 1)**2 + (Y - 1)**2 + Z**2
fig = go.Figure(data=go.Volume(
    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),
    value=vol.flatten(),
    isomin=0.2,
    isomax=0.7,
    opacity=0.2,
    surface_count =21,
    caps= dict(x_show=False, y_show=False, z_show=False), # no caps
    ))
fig.update_layout (scene_camera  = dict(
    up=dict(x=0, y=0, z=1),
    center=dict(x=0, y=0, z=0),
    eye=dict(x=0.1, y=2.5, z=0.1)
))
fig.show()
Slices through the volume can be added to the volume plot. In this example the isosurfaces are only partially filled so that the slice is more visible, and the caps were
removed for the same purpose.
0.20.30.40.50.60.7
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 7/9

--- Página 8 ---
Reference
See alsoimport numpy as np
import plotly.graph_objects  as go
X, Y, Z = np.mgrid[:1:20j, :1:20j, :1:20j]
vol = (X - 1)**2 + (Y - 1)**2 + Z**2
fig = go.Figure(data=go.Volume(
    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),
    value=vol.flatten(),
    isomin=0.2,
    isomax=0.7,
    opacity=0.2,
    surface_count =21,
    slices_z =dict(show=True, locations =[0.4]),
    surface=dict(fill=0.5, pattern='odd'),
    caps= dict(x_show=False, y_show=False, z_show=False), # no caps
    ))
fig.show()
See  for more information and chart attribute options!
https://plotly.com/python/reference/volume/ (https://plotly.com/python/reference/volume/)
3D isosurface documentation (/python/3d-isosurface-plots/)
0.20.30.40.50.60.7
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 8/9

--- Página 9 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
e plots16/07/2025, 06:51 3d volume plots in Python
https://plotly.com/python/3d-volume-plots/ 9/9</content>
      </file>
      <file name="Trisurf plots in Python.pdf" path="pyvy_2x7/Trisurf plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Torus &gt;  &gt; Trisurf Plots
Trisurf Plots in Python
How to make tri-surf plots in Python with Plotly. Trisurfs are formed by replacing the boundaries of a compact surface by touching triangles.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
3D Charts (/python/3d-charts)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/trisurf.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Trisurf plots can be made using a  as detailed in this page.
figure factory (/python/figure-factories/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 1/5

--- Página 2 ---
Mobius Bandimport plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 20)
v = np.linspace (0, 2*np.pi, 20)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
x = (3 + (np.cos(v)))*np.cos(u)
y = (3 + (np.cos(v)))*np.sin(u)
z = np.sin(v)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         simplices =simplices ,
                         title=dict(text="Torus"), aspectratio =dict(x=1, y=1, z=0.3))
fig.show()
−0.8−0.6−0.4−0.200.20.40.60.8Torus
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 2/5

--- Página 3 ---
Boy's Surfaceimport plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u = np.linspace (0, 2*np.pi, 24)
v = np.linspace (-1, 1, 8)
u,v = np.meshgrid (u,v)
u = u.flatten()
v = v.flatten()
tp = 1 + 0.5*v*np.cos(u/2.)
x = tp*np.cos(u)
y = tp*np.sin(u)
z = 0.5*v*np.sin(u/2.)
points2D  = np.vstack([u,v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap ="Portland" ,
                         simplices =simplices ,
                         title=dict(text="Mobius Band" ))
fig.show()
−0.4−0.3−0.2−0.100.10.20.30.4Mobius Band
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 3/5

--- Página 4 ---
Referenceimport plotly.figure_factory  as ff
import numpy as np
from scipy.spatial  import Delaunay
u=np.linspace (-np.pi/2, np.pi/2, 60)
v=np.linspace (0, np.pi, 60)
u,v=np.meshgrid (u,v)
u=u.flatten()
v=v.flatten()
x = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.cos(2*u) + np.cos(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
y = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.sin(2*u) - np.sin(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
z = (3*(np.cos(v)*np.cos(v)))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))
points2D  = np.vstack([u, v]).T
tri = Delaunay (points2D )
simplices  = tri.simplices
fig = ff.create_trisurf (x=x, y=y, z=z,
                         colormap =['rgb(50, 0, 75)' , 'rgb(200, 0, 200)' , '#c8dcc8' ],
                         show_colorbar =True,
                         simplices =simplices ,
                         title=dict(text="Boy's Surface" ))
fig.show()
For more info on ff.create_trisurf(), see the 
full function reference (https://plotly.com/python-api-reference/generated/plotly.figure_factory.create_trisurf.html)
0.511.522.5Boy's Surface
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 4/5

--- Página 5 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:51 Trisurf plots in Python
https://plotly.com/python/trisurf/ 5/5</content>
      </file>
    </category>
    <category name="pyvy_2x8" path="pyvy_2x8">
      <file name="Alignment chart in Python.pdf" path="pyvy_2x8/Alignment chart in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Alignment Viewer
Bar Chart for conservation visualization &gt;  &gt; Alignment Chart
Alignment Chart in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bio-alignment-chart.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
The Alignment Viewer (MSA) component is used to align multiple genomic or proteomic sequences from a FASTA or Clustal file. Among its extensive set of features,
the multiple sequence alignment viewer can display multiple subplots showing gap and conservation info, alongside industry standard colorscale support and
consensus sequence. No matter what size your alignment is, Alignment Viewer is able to display your genes or proteins snappily thanks to the underlying WebGL
architecture powering the component. You can quickly scroll through your long sequence with a slider or a heatmap overview.
Note that the AlignmentChart only returns a chart of the sequence, while AlignmentViewer has integrated controls for colorscale, heatmaps, and subplots allowing
you to interactively control your sequences.
import plotly.express  as px
import pandas as pd
df = (pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Genetic/gene_conservation.csv' )
        .set_index ('0')
        .loc[['consensus' ,'conservation' ]]
        .T
        .astype({"conservation" : float}))
fig = px.bar(df, labels={ 'index': 'base' }, hover_name ='consensus' , y='conservation' )
fig.show() 19172533414957657381899710511312112913714515316116917718519320120921722523324124925726527328128929730531332132933734535336136937738539300.10.20.30.40.50.60.70.80.9
baseconservation
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
tion16/07/2025, 06:53 Alignment chart in Python
https://plotly.com/python/alignment-chart/ 1/3

--- Página 2 ---
Alignment Chart in dash_bio
import urllib.request as urlreq
from dash import Dash, html
import dash_bio as dashbio
app = Dash(__name__)
data = urlreq.urlopen('https://git.io/alignment_viewer_p53.fasta').read().decode('utf-8')
app.layout = html.Div([
    dashbio.AlignmentChart(
        id='alignment-viewer',
        data=data
    ),
])
if __name__ == '__main__':
    app.run(debug=True)DOWNLOAD
P53_BARBU     00
P53_CANFA     01
P53_BOSIN     02
P53_BOVIN     03
P53_CHICK     04
P53_CAVPO     05
P53_CHLAE     06
P53_CRIGR     07
P53_DANRE     08
P53_DELLE     09
P53_EQUAS     10
P53_FELCA     11
P53_HORSE     12
P53_HUMAN     13
P53_ICTPU     14
P53_MACFA     15
P53_MACFU     16
P53_MACMU     17
P53_MARMO     18
P53_MESAU     19
P53_MOUSE     20
P53_ONCMY     21
P53_ORYLA     22
P53_PLAFE     23
P53_PIG     24
P53_RABIT     25
P53_RAT     26
P53_SHEEP     27
P53_TETMU     28
P53_SPEBE     29
P53_TUPBE     30
P53_XENLA     31
P53_XIPMA     32
P53_XIPHE     3300.20.40.60.800.20.40.60.8
Conservation Gap
tion16/07/2025, 06:53 Alignment chart in Python
https://plotly.com/python/alignment-chart/ 2/3

--- Página 3 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
tion16/07/2025, 06:53 Alignment chart in Python
https://plotly.com/python/alignment-chart/ 3/3</content>
      </file>
      <file name="Clustergram in Python.pdf" path="pyvy_2x8/Clustergram in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Default Clustergram &gt;  &gt; Clustergram
Clustergram in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bio-clustergram.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
A clustergram is a combination heatmap-dendrogram that is commonly used in gene expression data. The hierarchical clustering that is represented by the
dendrograms can be used to identify groups of genes with related expression levels. The Dash Bio Clustergram component is a Python-based component that uses
plotly.py to generate a figure. It takes as input a two-dimensional numpy array of floating-point values. Imputation of missing data and computation of hierarchical
clustering both occur within the component itself. Clusters that meet or exceed a user-defined threshold of similarity comprise single traces in the corresponding
dendrogram, and can be highlighted with annotations. The user can specify additional parameters to customize the metrics and methods used to compute parts of
the clustering, such as the pairwise distance between observations and the linkage matrix.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
dths16/07/2025, 06:53 Clustergram in Python
https://plotly.com/python/clustergram/ 1/6

--- Página 2 ---
Dendrogram Cluster Colors/Line Widthsimport pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv' )
dash_bio .Clustergram (
    data=df,
    column_labels =list(df.columns.values),
    row_labels =list(df.index),
    height=800,
    width=700
)
Change the colors of the dendrogram traces that are used to represent clusters, and configure their line widths.
Brain_CG_1Brain_CG_12Brain_CG_14Brain_CG_13Brain_CG_2Brain_NG_12Brain_CG_10Brain_CG_8Brain_CG_7Brain_CG_4Brain_NG_10Brain_NG_11ID_REFBrain_NG_5Brain_NG_13Brain_CG_9Brain_NG_14Brain_CG_3Brain_NG_2Brain_NG_8Brain_CG_5Brain_NG_1Brain_NG_4Brain_NG_7Brain_NG_3Brain_NG_6Brain_CG_11Brain_CG_675291204817212111926161822251527281323624141012039
020040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
https://plotly.com/python/clustergram/ 2/6

--- Página 3 ---
Relative Dendrogram Sizeimport pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv' )
dash_bio .Clustergram (
    data=df,
    column_labels =list(df.columns.values),
    row_labels =list(df.index),
    height=800,
    width=700,
    color_list ={
        'row': ['#636EFA' , '#00CC96' , '#19D3F3' ],
        'col': ['#AB63FA' , '#EF553B' ],
        'bg': '#506784'
    },
    line_width =2
)
Change the relative width and height of, respectively, the row and column dendrograms compared to the width and height of the heatmap.
Brain_CG_1Brain_CG_12Brain_CG_14Brain_CG_13Brain_CG_2Brain_NG_12Brain_CG_10Brain_CG_8Brain_CG_7Brain_CG_4Brain_NG_10Brain_NG_11ID_REFBrain_NG_5Brain_NG_13Brain_CG_9Brain_NG_14Brain_CG_3Brain_NG_2Brain_NG_8Brain_CG_5Brain_NG_1Brain_NG_4Brain_NG_7Brain_NG_3Brain_NG_6Brain_CG_11Brain_CG_675291204817212111926161822251527281323624141012039
020040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
https://plotly.com/python/clustergram/ 3/6

--- Página 4 ---
import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/Dash_Bio/Chromosomal/clustergram_brain_cancer.csv' )
dash_bio .Clustergram (
    data=df,
    column_labels =list(df.columns.values),
    row_labels =list(df.index),
    height=800,
    width=700,
    display_ratio =[0.1, 0.7]
)
Brain_CG_1Brain_CG_12Brain_CG_14Brain_CG_13Brain_CG_2Brain_NG_12Brain_CG_10Brain_CG_8Brain_CG_7Brain_CG_4Brain_NG_10Brain_NG_11ID_REFBrain_NG_5Brain_NG_13Brain_CG_9Brain_NG_14Brain_CG_3Brain_NG_2Brain_NG_8Brain_CG_5Brain_NG_1Brain_NG_4Brain_NG_7Brain_NG_3Brain_NG_6Brain_CG_11Brain_CG_675291204817212111926161822251527281323624141012039
020040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
https://plotly.com/python/clustergram/ 4/6

--- Página 5 ---
Clustergram with Dash

from dash import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
app = Dash(__name__)
df = pd.read_csv('https://git.io/clustergram_brain_cancer.csv').set_index('ID_REF')
columns = list(df.columns.values)
rows = list(df.index)
app.layout = html.Div([
    "Rows to display",
    dcc.Dropdown(
        id='dropdown',
        options=[
            {'label': row, 'value': row} for row in list(df.index)
        ],
        value=rows[:10],
        multi=True
    ),
    html.Div(id='graph')
])
@ llbk(DOWNLOAD
Rows to display
×1005_at
×1039_s_at
×103_at
×1052_s_at
×1058_at
×1063_s_at
×1072_g_at
×1091_at
×1101_at
×1104_s_at×
20040060080010001200
dths16/07/2025, 06:53 Clustergram in Python
https://plotly.com/python/clustergram/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
dths16/07/2025, 06:53 Clustergram in Python
https://plotly.com/python/clustergram/ 6/6</content>
      </file>
      <file name="Manhattan plot in Python.pdf" path="pyvy_2x8/Manhattan plot in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Manhattan Plot
Highlighted points color, and colors of the suggestive line and the genome-wide line &gt;  &gt; Manhattan Plot
Manhattan Plot in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bio-manhattanplot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ManhattanPlot allows you to visualize genome-wide association studies (GWAS) efficiently. Using WebGL under the hood, you can interactively explore overviews of
massive datasets comprising hundreds of thousands of points at once, or take a closer look at a small subset of your data. Hover data and click data are accessible
from within the Dash app.
import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/manhattan_data.csv' )
dash_bio .ManhattanPlot (
    dataframe =df,
)
Change the color of the points that are considered significant.1 3 5 7 9 11 13151719212302468
Point(s) of interest
Chr1
Chr2
Chr3
Chr4
Chr5
Chr6
Chr7
Chr8
Chr9
Chr10
Chr11
Chr12
Chr13
Chr14
Chr15
Chr16
Chr17Manhattan Plot
Chromosome-log10(p)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
https://plotly.com/python/manhattan-plot/ 1/4

--- Página 2 ---
import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/manhattan_data.csv' )
dash_bio .ManhattanPlot (
    dataframe =df,
    highlight_color ='#00FFAA' ,
    suggestiveline_color ='#AA00AA' ,
    genomewideline_color ='#AA5500'
)
1 3 5 7 9 11 13151719212302468
Point(s) of interest
Chr1
Chr2
Chr3
Chr4
Chr5
Chr6
Chr7
Chr8
Chr9
Chr10
Chr11
Chr12
Chr13
Chr14
Chr15
Chr16
Chr17Manhattan Plot
Chromosome-log10(p)
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
https://plotly.com/python/manhattan-plot/ 2/4

--- Página 3 ---
ManhattanPlot with Dash

from dash import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
app = Dash(__name__)
df = pd.read_csv('https://git.io/manhattan_data.csv')
app.layout = html.Div([
    'Threshold value',
    dcc.Slider(
        id='slider',
        min=1,
        max=10,
        marks={
            i: {'label': str(i)} for i in range(10)
        },
        value=6
    ),
    html.Br(),
    html.Div(
        dcc.Graph(
            id='graph',
            figure=dashbio.ManhattanPlot(
 dtf dfDOWNLOAD
Threshold value
1 2 3 4 5 6 7 8 9
1 3 5 7 9 1113151719212302468
Point(s) of interest
Chr1
Chr2
Chr3
Chr4
Chr5
Chr6
Chr7
Chr8
Chr9
Chr10
Chr11
Chr12
Chr13Manhattan Plot
Chromosome-log10(p)
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
https://plotly.com/python/manhattan-plot/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
of the
 de line16/07/2025, 06:53 Manhattan plot in Python
https://plotly.com/python/manhattan-plot/ 4/4</content>
      </file>
      <file name="Visualizing biological data in Python.pdf" path="pyvy_2x8/Visualizing biological data in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
(/python/)
Plotly Python Open Source Graphing Library Visualizing Biological Data
Dash Bio is a suite of bioinformatics components that make it simple to analyze, visualize, and interact with bioinformatics data in a Dash application.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/volcano-plot/)
Volcano Plot
(/python/manhattan-
plot/)
Manhattan Plot
(/python/clustergram/)
Clustergram
(/python/alignment-
chart/)
Alignment Chart
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 06:53 Visualizing biological data in Python
https://plotly.com/python/bio/ 1/1</content>
      </file>
      <file name="Volcano plot in Python.pdf" path="pyvy_2x8/Volcano plot in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)VolcanoPlot
Point Sizes And Line Widths &gt;  &gt; Volcano Plot
Volcano Plot in Python
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
(/python/)
Suggest an edit to this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/bio-volcano-plot.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Volcano Plot interactively identifies clinically meaningful markers in genomic experiments, i.e., markers that are statistically significant and have an effect size greater
than some threshold. Specifically, volcano plots depict the negative log-base-10 p-values plotted against their effect size.
import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv' )
dash_bio .VolcanoPlot (
    dataframe =df,
)
Change the size of the points on the scatter plot, and the widths of the effect lines and genome-wide line.−2 −1 0 1 202468
Point(s) of interest
DatasetVolcano Plot
Effect Size-log10(p)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:53 Volcano plot in Python
https://plotly.com/python/volcano-plot/ 1/4

--- Página 2 ---
import pandas as pd
import dash_bio
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv' )
dash_bio .VolcanoPlot (
    dataframe =df,
    point_size =10,
    effect_size_line_width =4,
    genomewideline_width =2
)
−2 −1 0 1 202468
Point(s) of interest
DatasetVolcano Plot
Effect Size-log10(p)
16/07/2025, 06:53 Volcano plot in Python
https://plotly.com/python/volcano-plot/ 2/4

--- Página 3 ---
VolcanoPlot with Dash

from dash import Dash, dcc, html, Input, Output
import dash_bio as dashbio
import pandas as pd
df = pd.read_csv('https://git.io/volcano_data1.csv')
app = Dash(__name__)
app.layout = html.Div([
    'Effect sizes',
    dcc.RangeSlider(
        id='range-slider',
        min=-3,
        max=3,
        step=0.05,
        marks={i: {'label': str(i)} for i in range(-3, 3)},
        value=[-0.5, 1]
    ),
    html.Br(),
    html.Div(
        dcc.Graph(
            id='graph',
            figure=dashbio.VolcanoPlot(
 dtf dfDOWNLOAD
Effect sizes
-3 -2 -1 0 1 2
−2 −1 0 1 202468
Point(s) of interest
DatasetVolcano Plot
Effect Size-log10(p)
16/07/2025, 06:53 Volcano plot in Python
https://plotly.com/python/volcano-plot/ 3/4

--- Página 4 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:53 Volcano plot in Python
https://plotly.com/python/volcano-plot/ 4/4</content>
      </file>
    </category>
    <category name="pyvy_2x9" path="pyvy_2x9">
      <file name="Dash Documentation &amp; User Guide _ Plotly.pdf" path="pyvy_2x9/Dash Documentation &amp; User Guide _ Plotly.pdf" type="pdf">
        <content>--- Página 1 ---
S tar 23,449
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. Sign up for early access
now.
Dash Python User Guide
Dash is the original low-code framework for rapidly building data apps in Python.
Quickstart
Installation
A Minimal Dash App
Dash in 20 Minutes Tutorial
Dash Fundamentals
Layout
Basic Callbacks
Interactive Graphing and Crossfiltering
Sharing Data Between Callbacks
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
https://dash.plotly.com 1/6

--- Página 2 ---
Dash Callbacks
Advanced Callbacks
Clientside Callbacks
Pattern-Matching Callbacks
Partial Property Updates
Background Callbacks
Flexible Callback Signatures
SHOW MORE
Open Source Component Libraries
Dash Core Components
Dash HTML Components
Dash DataTable
Dash AG Grid
Dash Bio
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
https://dash.plotly.com 2/6

--- Página 3 ---
Dash DAQ
SHOW MORE
Enterprise Libraries
Dash Design Kit
Snapshot Engine
Dash Embedded
Dash Notes
Dash Enterprise Auth
Databricks Integration
Overview and Table of Contents
Connecting to a Databricks SQL Warehouse from Dash
Executing Databricks Jobs using Plotly Dash
Third-Party Libraries
Parallel Computing with Dash and Dask
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
https://dash.plotly.com 3/6

--- Página 4 ---
HoloViews
Dash Bootstrap (Community Component)
Dash Leaflet (Community Component)
Dash Mantine (Community Component)
Dash Vega-Altair (Community Component)
SHOW MORE
Creating Your Own Components
React for Python Developers
Build Your Own Components
All-in-One Components
Writing Dash Plugins using Dash Hooks
Integrating D3.js into Dash Components
Dash 3 for Component Developers
Beyond the Basics
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
https://dash.plotly.com 4/6

--- Página 5 ---
Dash in Jupyter Environments
Performance
Live Updates
Adding CSS &amp; JS and Overriding the Page-Load Template
Multi-Page Apps and URL Support
Persisting User Preferences &amp; Control Values
SHOW MORE
Production Capabilities
Deploy Your Dash App
Add Authentication to Your Dash App
Embed Your Dash App in Other Websites
Job Queue
App Studio
Dash Enterprise App Workspaces
SHOW MORE
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
https://dash.plotly.com 5/6

--- Página 6 ---
Products
Dash
Consulting and TrainingPricing
Enterprise PricingAbout Us
Careers
Resources
BlogSupport
Community Support
Graphing DocumentationJoin our mailing
list
Sign up to stay in the loop with
all things Plotly — from Dash
Club to product updates,
webinars, and more!
SUBSCRIBE
Copyright © 2025 Plotly. All rights reserved. Terms of Service Privacy PolicyGetting Help
FAQs
The Dash Community Forum
Project Maintenance
Dash R, Julia, Matlab, and F# docs have been retired
Support and Contact
16/07/2025, 06:58 Dash Documentation &amp; User Guide | Plotly
https://dash.plotly.com 6/6</content>
      </file>
      <file name="Facet and trellis plots in Python.pdf" path="pyvy_2x9/Facet and trellis plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Facet and Trellis Plots
Scatter Plot Column Facets
Bar Chart Row Facets &gt;  &gt; Facet and
Trellis Plots
Facet and Trellis Plots in Python
How to make Facet and Trellis Plots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/facet-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Facet plots, also known as trellis plots or small multiples, are figures made up of multiple subplots which have the same set of axes, where each subplot shows a
subset of the data. While it is straightforward to use plotly's  to make such figures, it's far easier to use the built-in facet_row
and facet_col arguments in the various Plotly Express functions.
subplot capabilities (/python/subplots/)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="smoker" , facet_col ="sex")
fig.show()
There is a more presentation-ready horizontal, faceted bar chart in the 
horizontal bar documentation (/python/horizontal-bar-charts/#Small-multiple-horizontal-bar-
charts-show-each-component's-size-more-clearly-than-a-stacked-bar)0 10 20 30 40 50246810
0 10 20 30 40 50smoker
No
Yes
total_bill total_billtipsex=Female sex=Male
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 1/11

--- Página 2 ---
Wrapping Column Facetsimport plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="size", y="total_bill" , color="sex", facet_row ="smoker" )
fig.show()
When the facet dimension has a large number of unique values, it is possible to wrap columns using the facet_col_wrap argument.
import plotly.express  as px
df = px.data.gapminder ()
fig = px.scatter(df, x='gdpPercap' , y='lifeExp' , color='continent' , size='pop',
                facet_col ='year', facet_col_wrap =4)
fig.show()1 2 3 4 5 60500100005001000sex
Female
Male
sizetotal_bill total_billsmoker=Yes smoker=No
0 50k100k20406080
0 50k100k 0 50k100k 0 50k100k2040608020406080
 continent
Asia
Europe
Africa
Americas
Oceania
gdpPercap gdpPercap gdpPercap gdpPercaplifeExp lifeExp lifeExp
year=1992 year=1997 year=2002 year=2007year=1972 year=1977 year=1982 year=1987year=1952 year=1957 year=1962 year=1967
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 2/11

--- Página 3 ---
Histogram Facet Grids
Choropleth Column Facetsimport plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", facet_row ="time", facet_col ="day",
       category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "time": ["Lunch", "Dinner" ]})
fig.show()
new in version 4.1320 400102030
20 40 20 40 20 400102030sex
Female
Male
total_bill total_bill total_bill total_billsum of tip sum of tipday=Thur day=Fri day=Sat day=Suntime=Dinner time=Lunch
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 3/11

--- Página 4 ---
Adding Lines and Rectangles to Facet Plotsimport plotly.express  as px
df = px.data.election ()
df = df.melt(id_vars="district" , value_vars =["Coderre" , "Bergeron" , "Joly"],
            var_name ="candidate" , value_name ="votes")
geojson = px.data.election_geojson ()
fig = px.choropleth (df, geojson=geojson, color="votes", facet_col ="candidate" ,
                    locations ="district" , featureidkey ="properties.district" ,
                    projection ="mercator"
                   )
fig.update_geos (fitbounds ="locations" , visible=False)
fig.show()
introduced in plotly 4.12
It is possible to add  to facet plots using .add_hline(), .add_vline(), .add_hrect()
or .add_vrect(). The default row and col values are "all" but this can be overridden, as with the rectangle below, which only appears in the first column.
labelled horizontal and vertical lines and rectangles (/python/horizontal-vertical-shapes/)100020003000400050006000votescandidate=Coderre candidate=Bergeron candidate=Joly
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 4/11

--- Página 5 ---
Adding the Same Trace to All Facetsimport plotly.express  as px
df = px.data.stocks(indexed=True)
fig = px.line(df, facet_col ="company" , facet_col_wrap =2)
fig.add_hline (y=1, line_dash ="dot",
              annotation_text ="Jan 1, 2018 baseline" ,
              annotation_position ="bottom right" )
fig.add_vrect (x0="2018-09-24" , x1="2018-12-18" , col=1,
              annotation_text ="decline" , annotation_position ="top left" ,
              fillcolor ="green", opacity=0.25, line_width =0)
fig.show()
introduced in plotly 4.12
The .add_trace() method can be used to add a copy of the same trace to each facet, for example an overall linear regression line as below. The
legendgroup/showlegend pattern below is recommended to avoid having a separate legend item for each copy of the trace. Note that as of v5.2.1, there is 
 that uses this technique under the hood.
a built-in
option to add an overall trendline to all facets (https://plotly.com/python/linear-fits/)Jan 2018 Jul 2018 Jan 2019 Jul 201911.52
Jan 2018 Jul 2018 Jan 2019 Jul 201911.5211.52
company
GOOG
AAPL
AMZN
FB
NFLX
MSFT
date datevalue value value
company=NFLX company=MSFTcompany=AMZN company=FBcompany=GOOG company=AAPL
Jan 1, 2018 baseline Jan 1, 2018 baselineJan 1, 2018 baseline Jan 1, 2018 baselineJan 1, 2018 baseline Jan 1, 2018 baseline
declinedeclinedecline
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 5/11

--- Página 6 ---
Facets With Independent Axesimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color='sex',
                 facet_col ="day", facet_row ="time")
import statsmodels.api  as sm
import plotly.graph_objects  as go
df = df.sort_values (by="total_bill" )
model = sm.OLS(df["tip"], sm.add_constant (df["total_bill" ])).fit()
#create the trace to be added to all facets
trace = go.Scatter(x=df["total_bill" ], y=model.predict(),
                   line_color ="black", name="overall OLS" )
# give it a legend group and hide it from the legend
trace.update(legendgroup ="trendline" , showlegend =False)
# add it to all rows/cols, but not to empty subplots
fig.add_trace (trace, row="all", col="all", exclude_empty_subplots =True)
# set only the last trace added to appear in the legend
# `selector=-1` introduced in plotly v4.13
fig.update_traces (selector =-1, showlegend =True)
fig.show()
By default, facet axes are linked together: zooming inside one of the facets will also zoom in the other facets. You can disable this behaviour when you use facet_row
only, by disabling matches on the Y axes, or when using facet_col only, by disabling matches on the X axes. It is not recommended to use this approach when using
facet_row and facet_col together, as in this case it becomes very hard to understand the labelling of axes and grid lines.0 20 40 0 20 40246810 sex
Female
Male
overall OLS
total_bill total_billtipday=Sun day=Sat day=Thur day=Fritime=Lunch time=Dinner
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 6/11

--- Página 7 ---
Customizing Subplot Figure Titlesimport plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color='sex', facet_row ="day")
fig.update_yaxes (matches=None)
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color='sex', facet_col ="day")
fig.update_xaxes (matches=None)
fig.show()
Since subplot figure titles are , you can use the for_each_annotation function to
customize them, for example to remove the equal-sign (=).
annotations (https://plotly.com/python/text-and-annotations/#simple-annotation)
In the following example, we pass a lambda function to for_each_annotation in order to change the figure subplot titles from smoker=No and smoker=Yes to just No
and Yes.10 20 30 40 50123452460510246 sex
Female
Male
total_billtip tiptiptipday=Fri day=Thur day=Sat day=Sun
1020304050246810
0 20 40 10203040 10203040sex
Female
Male
total_bill total_bill total_bill total_billtipday=Sun day=Sat day=Thur day=Fri
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 7/11

--- Página 8 ---
Controlling Facet Orderingimport plotly.express  as px
fig = px.scatter(px.data.tips(), x="total_bill" , y="tip", facet_col ="smoker" )
fig.for_each_annotation (lambda a: a.update(text=a.text.split("=")[-1]))
fig.show()
By default, Plotly Express lays out categorical data in the order in which it appears in the underlying data. Every 2-d cartesian Plotly Express function also includes a
category_orders keyword argument which can be used to control , but beyond that can also
control , and the order in which facets are laid out.
the order in which categorical axes are drawn (/python/categorical-axes/)
the order in which discrete colors appear in the legend (/python/discrete-color/)
import plotly.express  as px
df = px.data.tips()
fig = px.bar(df, x="day", y="total_bill" , color="smoker" , barmode="group", facet_col ="sex",
             category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"],
                              "smoker" : ["Yes", "No"],
                              "sex": ["Male", "Female" ]})
fig.show()0 10 20 30 40 50246810
0 10 20 30 40 50
total_bill total_billtipNo Yes
Thur Fri Sat Sun0100200300400500600700800900
Thur Fri Sat Sunsmoker
Yes
No
day daytotal_billsex=Male sex=Female
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 8/11

--- Página 9 ---
Controlling Facet Spacing
Synchronizing axes in subplots with matchesThe facet_row_spacing and facet_col_spacing arguments can be used to control the spacing between rows and columns. These values are specified in fractions of the
plotting area in paper coordinates and not in pixels, so they will grow or shrink with the width and height of the figure.
The defaults work well with 1-4 rows or columns at the default figure size with the default font size, but need to be reduced to around 0.01 for very large figures or
figures with many rows or columns. Conversely, if activating tick labels on all facets, the spacing will need to be increased.
import plotly.express  as px
df = px.data.gapminder ().query("continent == 'Africa'" )
fig = px.line(df, x="year", y="lifeExp" , facet_col ="country" , facet_col_wrap =7,
              facet_row_spacing =0.04, # default is 0.07 when facet_col_wrap is used
              facet_col_spacing =0.04, # default is 0.03
              height=600, width=800,
              title="Life Expectancy in Africa" )
fig.for_each_annotation (lambda a: a.update(text=a.text.split("=")[-1]))
fig.update_yaxes (showticklabels =True)
fig.show()
Using facet_col from plotly.express let  and 
 each facet to the same range implicitly. However, if the subplots are created with
make_subplots, the axis needs to be updated with matches parameter to update all the subplots accordingly.
zoom (https://help.plotly.com/zoom-pan-hover-controls/#step-3-zoom-in-and-zoom-out-autoscale-the-plot)
pan
(https://help.plotly.com/zoom-pan-hover-controls/#step-6-pan-along-axes)
Zoom in one trace below, to see the other subplots zoomed to the same x-axis range. To pan all the subplots, click and drag from the center of x-axis to the side:
1960198020004060196019802000406019601980200040604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
40604060
4060
4060
4060
4060
4060
4060Life Expectancy in Africa
year year yearlifeExplifeExplifeExplifeExplifeExplifeExplifeExplifeExp
Uganda Zambia ZimbabweSomaliaSouth Africa Sudan Swaziland Tanzania Togo TunisiaNiger Nigeria Reunion RwandaSao Tome and PrincipeSenegalSierra LeoneMalawi Mali MauritaniaMauritius MoroccoMozambiqueNamibiaGuineaGuinea-BissauKenya Lesotho Liberia Libya MadagascarEgyptEquatorial GuineaEritrea Ethiopia Gabon Gambia GhanaCentral African RepublicChad ComorosCongo, Dem. Rep.Congo, Rep.Cote d'IvoireDjiboutiAlgeria Angola Benin BotswanaBurkina FasoBurundiCameroon
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 9/11

--- Página 10 ---
What About Dash?import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import numpy as np
N = 20
x = np.linspace (0, 1, N)
fig = make_subplots (1, 3)
for i in range(1, 4):
    fig.add_trace (go.Scatter(x=x, y=np.random.random(N)), 1, i)
fig.update_xaxes (matches='x')
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter0 0.5 10.20.30.40.50.60.70.80.9
0 0.5 100.20.40.60.8
0 0.5 100.20.40.60.81
trace 0
trace 1
trace 2
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 10/11

--- Página 11 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
et Plots
16/07/2025, 06:57 Facet and trellis plots in Python
https://plotly.com/python/facet-plots/ 11/11</content>
      </file>
      <file name="Figure factory subplots in Python.pdf" path="pyvy_2x9/Figure factory subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Plotly's Figure Factory Module
Vertical Figure Factory Charts &gt;  &gt; Figure
Factory Subplots
Figure Factory Subplots in Python
Subplots with Plotly Figure Factory Charts
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Subplots (/python/subplot-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/figure-
factory-subplots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly's Python API contains a  which includes many wrapper functions that create unique chart types that are not yet
included in , Plotly's open-source graphing library. The figure factory functions create a full figure, so some Plotly features,
such as subplotting, should be implemented slightly differently with these charts.
figure factory module (/python/figure-factories/)
plotly.js (https://github.com/plotly/plotly.js)
First create the figures that you'd like to appear in the subplot:
import plotly.figure_factory  as ff
import plotly.graph_objects  as go
import numpy as np
## Create first figure
x1,y1 = np.meshgrid (np.arange(0, 2, .2), np.arange(0, 2, .2))
u1 = np.cos(x1)*y1
v1 = np.sin(x1)*y1
fig1 = ff.create_quiver (x1, y1, u1, v1, name='Quiver' )
## Create second figure
x = np.linspace (-3, 3, 100)
y = np.linspace (-3, 3, 100)
Y, X = np.meshgrid (x, y)
u = -1 - X**2 + Y
v = 1 + X - Y**2
fig2 = ff.create_streamline (x, y, u, v, arrow_scale =.1, name='Streamline' )
Edit the figures' x and y axes attributes to create subplots:
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:58 Figure factory subplots in Python
https://plotly.com/python/figure-factory-subplots/ 1/6

--- Página 2 ---
Horizontal Table and Chartfor i in range(len(fig1.data)):
    fig1.data[i].xaxis='x1'
    fig1.data[i].yaxis='y1'
fig1.layout.xaxis1.update({'anchor' : 'y1'})
fig1.layout.yaxis1.update({'anchor' : 'x1', 'domain' : [.55, 1]})
for i in range(len(fig2.data)):
    fig2.data[i].xaxis='x2'
    fig2.data[i].yaxis='y2'
# initialize xaxis2 and yaxis2
fig2['layout' ]['xaxis2' ] = {}
fig2['layout' ]['yaxis2' ] = {}
fig2.layout.xaxis2.update({'anchor' : 'y2'})
fig2.layout.yaxis2.update({'anchor' : 'x2', 'domain' : [0, .45]})
Combine the data and layout objects to create a figure
fig = go.Figure()
fig.add_traces ([fig1.data[0], fig2.data[0]])
fig.layout.update(fig1.layout)
fig.layout.update(fig2.layout)
fig.show()layout.YAxis({
'anchor': 'x2', 'domain': [0, 0.45]
})
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.800.511.52
−3 −2 −1 0 1 2−202Quiver
Streamline
16/07/2025, 06:58 Figure factory subplots in Python
https://plotly.com/python/figure-factory-subplots/ 2/6

--- Página 3 ---
Vertical Table and Chartimport plotly.graph_objects  as go
import plotly.figure_factory  as ff
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['LA Kings' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
fig = ff.create_table (table_data , height_constant =60)
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'LA Kings' , 'Ottawa Senators' ]
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]
trace1 = go.Scatter(x=teams, y=GFPG,
                    marker=dict(color='#0099ff' ),
                    name='Goals For&lt;br&gt;Per Game' ,
                    xaxis='x2', yaxis='y2')
trace2 = go.Scatter(x=teams, y=GAPG,
                    marker=dict(color='#404040' ),
                    name='Goals Against&lt;br&gt;Per Game' ,
                    xaxis='x2', yaxis='y2')
fig.add_traces ([trace1, trace2])
# initialize xaxis2 and yaxis2
fig['layout' ]['xaxis2' ] = {}
fig['layout' ]['yaxis2' ] = {}
# Edit layout for subplots
fig.layout.xaxis.update({'domain' : [0, .5]})
fig.layout.xaxis2.update({'domain' : [0.6, 1.]})
# The graph's yaxis MUST BE anchored to the graph's xaxis
fig.layout.yaxis2.update({'anchor' : 'x2'})
fig.layout.yaxis2.update({'title': 'Goals'})
# Update the margins to add a title and see graph x-labels.
fig.layout.margin.update({'t':50, 'b':100})
fig.layout.update({'title': '2016 Hockey Stats' })
fig.show()
Montréal CanadiensDallas StarsNY RangersBoston BruinsChicago BlackhawksLA KingsOttawa Senators22.22.42.62.833.23.43.6Goals For
Per Game
Goals Against
Per Game2016 Hockey Stats
GoalsTeam Wins Losses Ties
Montréal
Canadiens18 4 0
Dallas Stars18 5 0
NY Rangers16 5 0
Boston
Bruins13 8 0
Chicago
Blackhawks13 8 0
LA Kings 13 8 0
Ottawa
Senators12 5 0
16/07/2025, 06:58 Figure factory subplots in Python
https://plotly.com/python/figure-factory-subplots/ 3/6

--- Página 4 ---
import plotly.graph_objects  as go
import plotly.figure_factory  as ff
# Add table data
table_data  = [['Team', 'Wins', 'Losses' , 'Ties'],
              ['Montréal&lt;br&gt;Canadiens' , 18, 4, 0],
              ['Dallas Stars' , 18, 5, 0],
              ['NY Rangers' , 16, 5, 0],
              ['Boston&lt;br&gt;Bruins' , 13, 8, 0],
              ['Chicago&lt;br&gt;Blackhawks' , 13, 8, 0],
              ['Ottawa&lt;br&gt;Senators' , 12, 5, 0]]
# Initialize a figure with ff.create_table(table_data)
fig = ff.create_table (table_data , height_constant =60)
# Add graph data
teams = ['Montréal Canadiens' , 'Dallas Stars' , 'NY Rangers' ,
         'Boston Bruins' , 'Chicago Blackhawks' , 'Ottawa Senators' ]
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]
# Make traces for graph
trace1 = go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#0099ff' ),
                name='Goals For&lt;br&gt;Per Game' )
trace2 = go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#404040' ),
                name='Goals Against&lt;br&gt;Per Game' )
# Add trace data to figure
fig.add_traces ([trace1, trace2])
# initialize xaxis2 and yaxis2
fig['layout' ]['xaxis2' ] = {}
fig['layout' ]['yaxis2' ] = {}
# Edit layout for subplots
fig.layout.yaxis.update({'domain' : [0, .45]})
fig.layout.yaxis2.update({'domain' : [.6, 1]})
# The graph's yaxis2 MUST BE anchored to the graph's xaxis2 and vice versa
fig.layout.yaxis2.update({'anchor' : 'x2'})
fig.layout.xaxis2.update({'anchor' : 'y2'})
fig.layout.yaxis2.update({'title': 'Goals'})
# Update the margins to add a title and see graph x-labels.
fig.layout.margin.update({'t':75, 'l':50})
fig.layout.update({'title': '2016 Hockey Stats' })
# Update the height because adding a graph vertically will interact with
# the plot height calculated for the table
fig.layout.update({'height' :800})
# Plot!
fig.show()
16/07/2025, 06:58 Figure factory subplots in Python
https://plotly.com/python/figure-factory-subplots/ 4/6

--- Página 5 ---
Reference
What About Dash?See  for more information on working with subplots. See
 for more information regarding chart attributes!
https://plotly.com/python/subplots/ (https://plotly.com/python/subplots/)
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
Montréal CanadiensDallas Stars NY Rangers Boston BruinsChicago BlackhawksOttawa Senators00.511.522.533.5 Goals For
Per Game
Goals Against
Per Game2016 Hockey StatsGoals
Team Wins Losses Ties
Montréal
Canadiens18 4 0
Dallas Stars 18 5 0
NY Rangers 16 5 0
Boston
Bruins13 8 0
Chicago
Blackhawks13 8 0
Ottawa
Senators12 5 0
16/07/2025, 06:58 Figure factory subplots in Python
https://plotly.com/python/figure-factory-subplots/ 5/6

--- Página 6 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:58 Figure factory subplots in Python
https://plotly.com/python/figure-factory-subplots/ 6/6</content>
      </file>
      <file name="Graph objects in Python.pdf" path="pyvy_2x9/Graph objects in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt;
Graph Objects
Graph Objects in Python
Python classes that represent parts of a figure.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/graph-
objects.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 1/6

--- Página 2 ---
What Are Graph Objects?
Graph Objects Compared to Dictionaries
1. Graph objects provide precise data validation. If you provide an invalid property name or an invalid property value as the key to a graph object, an exception
will be raised with a helpful error message describing the problem. This is not the case if you use plain Python dictionaries and lists to build your figures.
2. Graph objects contain descriptions of each valid property as Python docstrings, with a .
You can use these docstrings in the development environment of your choice to learn about the available properties as an alternative to consulting the online
.
3. Properties of graph objects can be accessed using both dictionary-style key lookup (e.g. fig["layout"]) or class-style property access (e.g. fig.layout).
4. Graph objects support higher-level convenience functions for making updates to already constructed figures (.update_layout(), .add_trace() etc).
5. Graph object constructors and update methods accept "magic underscores" (e.g. go.Figure(layout_title_text="The Title") rather than
dict(layout=dict(title=dict(text="The Title")))) for more compact code.
6. Graph objects support attached rendering (.show()) and exporting functions (.write_image()) that automatically invoke the appropriate functions from 
.
When to use Graph Objects vs Plotly ExpressThe figures created, manipulated and rendered by the plotly Python library are  which are
automatically serialized to JSON for rendering by the Plotly.js JavaScript library. These trees are composed of named nodes called "attributes", with their structure
defined by the Plotly.js figure schema, which is available in .
The plotly.graph_objects module (typically imported as go) contains an 
 which represent non-leaf nodes in this figure schema. The term "graph objects" refers to instances of
these classes.
represented by tree-like data structures (/python/figure-structure/)
machine-readable form (https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json)
automatically-generated hierarchy of Python classes (https://plotly.com/python-api-
reference/plotly.graph_objects.html#graph-objects)
The primary classes defined in the plotly.graph_objects module are  and
an , which both represent entire figures. Instances of these classes have many convenience
methods for Pythonically  (e.g. .update_layout() or .add_trace(), which all accept 
) as well as  (e.g. .show()) and
 (e.g. .to_json() or .write_image() or .write_html()).
Figure (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html)
ipywidgets-compatible variant called FigureWidget (/python/figurewidget/)
manipulating their attributes (/python/creating-and-updating-figures/)
"magic
underscore" notation (/python/creating-and-updating-figures/#magic-underscore-notation)
rendering them (/python/renderers/)
exporting them to various formats (/python/static-image-export/)
Note: the functions in , which is the recommended entry-point into the plotly library, are all built on top of graph
objects, and all return instances of plotly.graph_objects.Figure.
Plotly Express (/python/plotly-express/)
Every non-leaf attribute of a figure is represented by an instance of a class in the plotly.graph_objects hierarchy. For example, a figure fig can have an attribute
layout.margin, which contains attributes t, l, b and r which are leaves of the tree: they have no children. The field at fig.layout is an object of class
 and fig.layout.margin is an object of class
plotly.graph_objects.layout.Margin which represents the margin node, and it has fields t, l, b and r, containing the values of the respective leaf-nodes. Note that
specifying all of these values can be done without creating intermediate objects using 
: go.Figure(layout_margin=dict(t=10, b=10, r=10, l=10)).
plotly.graph_objects.Layout (https://plotly.com/python-api-reference/generated/plotly.graph_objects.Layout.html)
"magic underscore" notation (/python/creating-and-updating-figures/#magic-
underscore-notation)
The objects contained in the list which is the , and can be of one of more than 40 possible
types, each of which has a corresponding class in plotly.graph_objects. For example, traces of type scatter are represented by instances of the class
plotly.graph_objects.Scatter. This means that a figure constructed as go.Figure(data=[go.Scatter(x=[1,2], y=[3,4)]) will have the JSON representation {"data": [{"type":
"scatter", "x": [1,2], "y": [3,4]}]}.
value of the attribute data are called "traces" (/python/figure-structure/)
Graph objects have several benefits compared to plain Python dictionaries:
full API reference available (https://plotly.com/python-api-reference/)
Full Reference (/python/reference/index/)
the
plotly.io module (https://plotly.com/python-api-reference/plotly.io.html)
The recommended way to create figures is using the , 
, which all return instances of plotly.graph_objects.Figure, so every figure produced with the plotly library actually uses graph objects
under the hood, unless manually constructed out of dictionaries.
functions in the plotly.express module (https://plotly.com/python-api-reference/)
collectively known as Plotly
Express (/python/plotly-express/)
That said, certain kinds of figures are not yet possible to create with Plotly Express, such as figures that use certain 3D trace-types like  or
. In addition, certain figures are cumbersome to create by starting from a figure created with Plotly Express, for example
figures with , , or  with multiple
different types of traces. To construct such figures, it can be easier to start from an empty plotly.graph_objects.Figure object (or one configured with subplots via the
) and progressively add traces and update attributes as above. Every plotly documentation page lists the Plotly Express
option at the top if a Plotly Express function exists to make the kind of chart in question, and then the graph objects version below.
mesh (/python/3d-mesh/)
isosurface (/python/3d-isosurface-plots/)
subplots of different types (/python/mixed-subplots/)
dual-axis plots (/python/multiple-axes/)
faceted plots (/python/facet-plots/)
make_subplots() function (/python/subplots/)
Note that the figures produced by Plotly Express in a single function-call are , and to 
 using the update_* and add_* methods.
easy to customize at creation-time (/python/styling-plotly-express/)
manipulate
after creation (/python/creating-and-updating-figures/)
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 2/6

--- Página 3 ---
Comparing Graph Objects and Plotly Express
The figures produced by Plotly Express can always be built from the ground up using graph objects, but this approach typically takes 5-100 lines of code rather than
1.
Here is a simple example of how to produce the same figure object from the same data, once with Plotly Express and once without. Note that 
 like  can accept a DataFrame as their first argument with column names passed to the x and
y arguments, while  like 
 require the data values to be passed directly to the x and y arguments as a tuple, list, NumPy array, or Pandas Series.
Plotly Express functions
(/python-api-reference/plotly.express.html)
px.bar() (/python/bar-charts/)
Graph Objects functions (/python-api-reference/plotly.graph_objects.html)
go.Bar() (/python/bar-charts/#basic-bar-charts-with-
plotlygraphobjects)
The data in this example is in "long form" but  and the line-count savings from Plotly Express over
graph objects are comparable. More complex figures such as , , 
 or  require many more lines of figure-specific graph objects code, whereas switching from one
representation to another with Plotly Express usually involves changing just a few characters.
Plotly Express also accepts data in "wide form" (/python/wide-form/)
sunbursts (/python/sunburst-charts/)
parallel coordinates (/python/parallel-coordinates-plot/)
facet
plots (/python/facet-plots/)
animations (/python/animations/)
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 3/6

--- Página 4 ---
import pandas as pd
df = pd.DataFrame ({
  "Fruit": ["Apples" , "Oranges" , "Bananas" , "Apples" , "Oranges" , "Bananas" ],
  "Contestant" : ["Alex", "Alex", "Alex", "Jordan" , "Jordan" , "Jordan" ],
  "Number Eaten" : [2, 1, 3, 1, 3, 2],
})
# Plotly Express
import plotly.express  as px
fig = px.bar(df, x="Fruit", y="Number Eaten" , color="Contestant" , barmode="group")
fig.show()
# Graph Objects
import plotly.graph_objects  as go
fig = go.Figure()
for contestant , group in df.groupby("Contestant" ):
    fig.add_trace (go.Bar(x=group["Fruit"], y=group["Number Eaten" ], name=contestant ,
      hovertemplate ="Contestant= %s&lt;br&gt;Fruit= %%{x}&lt;br&gt;Number Eaten= %%{y}&lt;extra&gt;&lt;/extra&gt;" % contestant ))
fig.update_layout (legend_title_text  = "Contestant" )
fig.update_xaxes (title_text ="Fruit")
fig.update_yaxes (title_text ="Number Eaten" )
fig.show()
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 4/6

--- Página 5 ---
 Apples Oranges Bananas00.511.522.53Contestant
Alex
Jordan
FruitNumber Eaten
Apples Oranges Bananas00.511.522.53 Contestant
Alex
Jordan
FruitNumber Eaten
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 5/6

--- Página 6 ---
What About Dash?
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
naries
y
y16/07/2025, 06:57 Graph objects in Python
https://plotly.com/python/graph-objects/ 6/6</content>
      </file>
      <file name="Map subplots in Python.pdf" path="pyvy_2x9/Map subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt;  &gt;
Map Subplots
Map Subplots in Python
How to make map subplots and map small multiples in Python.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Subplots (/python/subplot-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/map-subplots-and-
small-multiples.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:58 Map subplots in Python
https://plotly.com/python/map-subplots-and-small-multiples/ 1/5

--- Página 2 ---
US map small multiples
import plotly.graph_objects  as go
import pandas as pd
df = pd.read_csv ('https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv' )
df.head()
data = []
layout = dict(
    title = 'New Walmart Stores per year 1962-2006&lt;br&gt; \
Source: &lt;a href="http://www.econ.umn.edu/~holmes/data/WalMart/index.html"&gt; \
University of Minnesota&lt;/a&gt;' ,
    # showlegend = False,
    autosize  = False,
    width = 1000,
    height = 900,
    hovermode  = False,
    legend = dict(
        x=0.7,
        y=-0.1,
        bgcolor="rgba(255, 255, 255, 0)" ,
        font = dict( size=11 ),
    )
)
years = df['YEAR'].unique()
for i in range(len(years)):
    geo_key = 'geo'+str(i+1) if i != 0 else 'geo'
    lons = list(df[ df['YEAR'] == years[i] ]['LON'])
    lats = list(df[ df['YEAR'] == years[i] ]['LAT'])
    # Walmart store data
    data.append(
        dict(
            type = 'scattergeo' ,
            showlegend =False,
            lon = lons,
            lat = lats,
            geo = geo_key,
            name = int(years[i]),
            marker = dict(
                color = "rgb(0, 0, 255)" ,
                opacity = 0.5
            )
        )
    )
    # Year markers
    data.append(
        dict(
            type = 'scattergeo' ,
            showlegend  = False,
            lon = [-78],
            lat = [47],
            geo = geo_key,
            text = [years[i]],
            mode = 'text',
        )
    )
    layout[geo_key] = dict(
        scope = 'usa',
        showland  = True,
        landcolor  = 'rgb(229, 229, 229)' ,
        showcountries  = False,
        domain = dict( x = [], y = [] ),
        subunitcolor  = "rgb(255, 255, 255)" ,
    )
def draw_sparkline ( domain, lataxis, lonaxis ):
    ''' Returns a sparkline layout object for geo coordinates  '''
    return dict(
        showland  = False,
        showframe  = False,
        showcountries  = False,
        showcoastlines  = False,
        domain = domain,
        lataxis = lataxis,
16/07/2025, 06:58 Map subplots in Python
https://plotly.com/python/map-subplots-and-small-multiples/ 2/5

--- Página 3 ---
        lonaxis = lonaxis,
        bgcolor = 'rgba(255,200,200,0.0)'
    )
# Stores per year sparkline
layout['geo44'] = draw_sparkline ({'x':[0.6,0.8], 'y':[0,0.15]}, \
                                 {'range':[-5.0, 30.0]}, {'range':[0.0, 40.0]} )
data.append(
    dict(
        type = 'scattergeo' ,
        mode = 'lines',
        lat = list(df.groupby(by=['YEAR']).count()['storenum' ]/1e1),
        lon = list(range(len(df.groupby(by=['YEAR']).count()['storenum' ]/1e1))),
        line = dict( color = "rgb(0, 0, 255)"  ),
        name = "New stores per year&lt;br&gt;Peak of 178 stores per year in 1990" ,
        geo = 'geo44',
    )
)
# Cumulative sum sparkline
layout['geo45'] = draw_sparkline ({'x':[0.8,1], 'y':[0,0.15]}, \
                                 {'range':[-5.0, 50.0]}, {'range':[0.0, 50.0]} )
data.append(
    dict(
        type = 'scattergeo' ,
        mode = 'lines',
        lat = list(df.groupby(by=['YEAR']).count().cumsum()['storenum' ]/1e2),
        lon = list(range(len(df.groupby(by=['YEAR']).count()['storenum' ]/1e1))),
        line = dict( color = "rgb(214, 39, 40)"  ),
        name ="Cumulative sum&lt;br&gt;3176 stores total in 2006" ,
        geo = 'geo45',
    )
)
z = 0
COLS = 5
ROWS = 9
for y in reversed (range(ROWS)):
    for x in range(COLS):
        geo_key = 'geo'+str(z+1) if z != 0 else 'geo'
        layout[geo_key]['domain' ]['x'] = [float(x)/float(COLS), float(x+1)/float(COLS)]
        layout[geo_key]['domain' ]['y'] = [float(y)/float(ROWS), float(y+1)/float(ROWS)]
        z=z+1
        if z &gt; 42:
            break
fig = go.Figure(data=data, layout=layout)
fig.update_layout (width=800)
fig.show()
16/07/2025, 06:58 Map subplots in Python
https://plotly.com/python/map-subplots-and-small-multiples/ 3/5

--- Página 4 ---
Reference
What About Dash?See  for more information and chart attribute options!
https://plotly.com/python/reference/scattergeo/ (https://plotly.com/python/reference/scattergeo/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
1962
 1964
 1965
 1967
 1968
1969
 1970
 1971
 1972
 1973
1974
 1975
 1976
 1977
 1978
1979
 1980
 1981
 1982
 1983
1984
 1985
 1986
 1987
 1988
1989
 1990
 1991
 1992
 1993
1994
 1995
 1996
 1997
 1998
1999
 2000
 2001
 2002
 2003
2004
 2005
 2006
New stores per year
Peak of 178 stores per year in 1990
Cumulative sum
3176 stores total in 2006New Walmart Stores per year 1962-2006
Source: 
University of Minnesota
16/07/2025, 06:58 Map subplots in Python
https://plotly.com/python/map-subplots-and-small-multiples/ 4/5

--- Página 5 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:58 Map subplots in Python
https://plotly.com/python/map-subplots-and-small-multiples/ 5/5</content>
      </file>
      <file name="Marginal distribution plots in Python.pdf" path="pyvy_2x9/Marginal distribution plots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Overview
Scatter Plot Marginals &gt;  &gt; Marginal
Distribution Plots
Marginal Distribution Plots in Python
How to add marginal distribution plots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Statistical Charts (/python/statistical-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/marginal-plots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Marginal distribution plots are small subplots above or to the right of a main plot, which show the distribution of data along only one dimension. Marginal distribution
plot capabilities are built into various Plotly Express functions such as scatter and histogram.  is the easy-to-use, high-level
interface to Plotly, which  and produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
The marginal_x and marginal_y arguments accept one of "histogram", "rug", "box", or "violin" (see also how to create , 
 and  as the main figure).
histograms (/python/histograms/)
box plots
(/python/box-plots/)
violin plots (/python/violin-plots/)
Marginal plots are linked to the main plot: try zooming or panning on the main plot.
Marginal plots also support hover, including per-point hover as with the rug-plot on the right: try hovering over the points on the right marginal plot.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , marginal_x ="histogram" , marginal_y ="rug")
fig.show()
44.555.566.577.5822.533.544.5
sepal_lengthsepal_width
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 1/6

--- Página 2 ---
Marginal Plots and Colorimport plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_length" , y="sepal_width" , marginal_x ="box", marginal_y ="violin" )
fig.show()
Marginal plots respect the color argument as well, and are linked to the respective legend elements. Try clicking on the legend items.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_length" , y="sepal_width" , color="species" , 
                 marginal_x ="box", marginal_y ="violin" ,
                  title="Click on the legend items!" )
fig.show()
44.555.566.577.5822.533.544.5
024681012141618count
sepal_lengthsepal_width
5 6 7 822.533.544.5species
setosa
versicolor
virginicaClick on the legend items!
sepal_lengthsepal_width
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 2/6

--- Página 3 ---
Marginal Plots on Histograms
 are often used to show the distribution of a variable, and they also support marginal plots in Plotly Express, with the marginal
argument:
Histograms (/python/histograms/)
import plotly.express  as px
df = px.data.iris()
fig = px.histogram (df, x="sepal_length" , color="species" , marginal ="box")
fig.show()
Try hovering over the rug plot points to identify individual country values in the histogram below:
import plotly.express  as px
df = px.data.gapminder ().query("year == 2007" )
fig = px.histogram (df, x="lifeExp" , color="continent" , marginal ="rug", hover_name ="country" ,
                  title="Hover over the rug plot!" )
fig.show()4.254.755.255.756.256.757.257.75051015202530species
setosa
versicolor
virginica
sepal_lengthcount
40 50 60 70 80010203040continent
Asia
Europe
Africa
Americas
OceaniaHover over the rug plot!
lifeExpcount
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 3/6

--- Página 4 ---
Marginal Plots and Facets
Marginal plots can be used in conjunction with  so long as they go along different directions:
Plotly Express facets (/python/facet-plots/)
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex", facet_col ="day",
                  marginal_x ="box")
fig.show()
import plotly.express  as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill" , y="tip", color="sex", facet_row ="time",
                  marginal_y ="box")
fig.show()02040246810
020400204002040sex
Female
Male
total_bill total_bill total_bill total_billtipday=Sun day=Sat day=Thur day=Fri
01020304050246810246810 sex
Female
Male
total_billtip tiptime=Lunch time=Dinner
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 4/6

--- Página 5 ---
What About Dash?import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="total_bill" , y="tip", color="sex", facet_col ="day",
                  marginal ="box")
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)2040051015202530
2040 2040 2040sex
Female
Male
total_bill total_bill total_bill total_billsum of tipday=Sun day=Sat day=Thur day=Fri
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 5/6

--- Página 6 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:57 Marginal distribution plots in Python
https://plotly.com/python/marginal-plots/ 6/6</content>
      </file>
      <file name="Mixed subplots in Python.pdf" path="pyvy_2x9/Mixed subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Mixed Subplots and Plotly Express
Mixed Subplot &gt;  &gt; Mixed
Subplots
Mixed Subplots in Python
How to make mixed subplots in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Subplots (/python/subplot-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/mixed-
subplots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Note: At this time, Plotly Express does not support creating figures with arbitrary mixed subplots i.e. figures with subplots of different types. Plotly Express
only supports  and . To make a figure with mixed subplots, use the
 function in conjunction with  as documented below.
facet plots (/python/facet-plots/)
marginal distribution subplots (/python/marginal-plots/)
make_subplots() (/python/subplots/)
graph objects (/python/graph-objects/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:58 Mixed subplots in Python
https://plotly.com/python/mixed-subplots/ 1/4

--- Página 2 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
# read in volcano database data
df = pd.read_csv (
    "https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv" ,
    encoding ="iso-8859-1" ,
)
# frequency of Country
freq = df['Country' ].value_counts ().reset_index ()
freq.columns = ['x', 'Country' ]
# read in 3d volcano surface data
df_v = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv" )
# Initialize figure with subplots
fig = make_subplots (
    rows=2, cols=2,
    column_widths =[0.6, 0.4],
    row_heights =[0.4, 0.6],
    specs=[[{"type": "scattergeo" , "rowspan" : 2}, {"type": "bar"}],
           [            None                    , {"type": "surface" }]])
# Add scattergeo globe map of volcano locations
fig.add_trace (
    go.Scattergeo (lat=df["Latitude" ],
                  lon=df["Longitude" ],
                  mode="markers" ,
                  hoverinfo ="text",
                  showlegend =False,
                  marker=dict(color="crimson" , size=4, opacity=0.8)),
    row=1, col=1
)
# Add locations bar chart
fig.add_trace (
    go.Bar(x=freq["x"][0:10],y=freq["Country" ][0:10], marker=dict(color="crimson" ), showlegend =False),
    row=1, col=2
)
# Add 3d surface of volcano
fig.add_trace (
    go.Surface(z=df_v.values.tolist(), showscale =False),
    row=2, col=2
)
# Update geo subplot properties
fig.update_geos (
    projection_type ="orthographic" ,
    landcolor ="white",
    oceancolor ="MidnightBlue" ,
    showocean =True,
    lakecolor ="LightBlue"
)
# Rotate x-axis labels
fig.update_xaxes (tickangle =45)
# Set theme, margin, and annotation in layout
fig.update_layout (
    template ="plotly_dark" ,
    margin=dict(r=10, t=25, b=40, l=60),
    annotations =[
        dict(
            text="Source: NOAA" ,
            showarrow =False,
            xref="paper",
            yref="paper",
            x=0,
            y=0)
    ]
)
fig.show()
16/07/2025, 06:58 Mixed subplots in Python
https://plotly.com/python/mixed-subplots/ 2/4

--- Página 3 ---
Reference
What About Dash?See  for more information and chart attribute options!
https://plotly.com/python/reference/ (https://plotly.com/python/reference/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)United StatesRussiaIndonesiaJapanChileEthiopiaPapua New GuineaPhilippinesMexicoIceland050100150
Source: NOAA
16/07/2025, 06:58 Mixed subplots in Python
https://plotly.com/python/mixed-subplots/ 3/4

--- Página 4 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:58 Mixed subplots in Python
https://plotly.com/python/mixed-subplots/ 4/4</content>
      </file>
      <file name="Plotly express arguments in Python.pdf" path="pyvy_2x9/Plotly express arguments in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Data for the Examples
carshare - Each row represents the availability of car-sharing services near the centroid of a zone in Montreal over a month-long period.
election - Each row represents voting results for an electoral district in the 2013 Montreal mayoral election.
iris - Each row represents a flower. &gt;  &gt; Plotly
Express Arguments
Plotly Express Arguments in Python
Input data arguments accepted by Plotly Express functions
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/px-
arguments.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
Plotly Express (px) is the high-level interface to Plotly and provides functions for generating charts. px functions support data provided in a number of different
formats (long, wide, and mixed) and as different types of objects, including pandas and Polars dataframes.
The examples on this page use datasets available in the data package in px. px.data contains functions that when called return a dataset as a dataframe. Some of the
datasets included in px.data are:
To access the iris dataset, we call its function and assign it to a variable:
import plotly.express  as px
df = px.data.iris()
df.head()
By default px.data functions return a pandas DataFrame object, but you can specify an alternative dataframe type using return_type. pandas, polars, pyarrow, modin,
and cuDF are supported return types.
df = px.data.iris(return_type ='polars' )
df.head()sepal_lengthsepal_widthpetal_lengthpetal_widthspeciesspecies_id
05.1 3.5 1.4 0.2 setosa1
14.9 3.0 1.4 0.2 setosa1
24.7 3.2 1.3 0.2 setosa1
34.6 3.1 1.5 0.2 setosa1
45.0 3.6 1.4 0.2 setosa1
shape: (5, 6)
sepal_lengthsepal_widthpetal_lengthpetal_widthspeciesspecies_id
f64 f64 f64 f64 str i64
5.1 3.5 1.4 0.2 "setosa"1
4.9 3.0 1.4 0.2 "setosa"1
4.7 3.2 1.3 0.2 "setosa"1
4.6 3.1 1.5 0.2 "setosa"1
5.0 3.6 1.4 0.2 "setosa"1
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 1/12

--- Página 2 ---
Long, Wide, and Mixed-Form Data
long-form data has one row per observation, and one column per variable. This is suitable for storing and displaying multivariate data i.e. with dimension
greater than 2. This format is sometimes called "tidy".
wide-form data has one row per value of one of the first variable, and one column per value of the second variable. This is suitable for storing and displaying
2-dimensional data.
mixed-form data is a hybrid of long-form and wide-form data, with one row per value of one variable, and some columns representing values of another,
and some columns representing more variables. See the  for examples of how to use Plotly Express to
visualize this kind of data.There are three common conventions for storing column-oriented data, usually in a data frame with column names:
wide-form documentation (/python/wide-form/)
Every Plotly Express function can operate on long-form data (other than px.imshow which operates only on wide-form input), and in addition, the following 2D-
Cartesian functions can operate on wide-form and mixed-form data: px.scatter, px.line, px.area, px.bar, px.histogram, px.violin, px.box, px.strip, px.funnel,
px.density_heatmap and px.density_contour.
By way of example here is the same data, represented in long-form first, and then in wide-form:
import plotly.express  as px
long_df = px.data.medals_long ()
long_df
import plotly.express  as px
wide_df = px.data.medals_wide ()
wide_df
Plotly Express can produce the same plot from either form:nationmedalcount
0South Koreagold24
1China gold10
2Canadagold9
3South Koreasilver13
4China silver15
5Canadasilver12
6South Koreabronze11
7China bronze8
8Canadabronze12
nationgoldsilverbronze
0South Korea241311
1China 10158
2Canada91212
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 2/12

--- Página 3 ---
import plotly.express  as px
long_df = px.data.medals_long ()
fig = px.bar(long_df, x="nation" , y="count", color="medal", title="Long-Form Input" )
fig.show()
import plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input" )
fig.show()
You might notice that y-axis and legend labels are slightly different for the second plot: they are "value" and "variable", respectively, and this is also reflected in the
hoverlabel text. Note that the labels "medal" and "count" do not appear in the wide-form data frame, so in this case, you must supply these yourself, or 
. You can :
you can use a
data frame with named row- and column-indexes (/python/wide-form/)
rename these labels with the labels argument (/python/styling-plotly-express/)South Korea China Canada01020304050medal
gold
silver
bronzeLong-Form Input
nationcount
South Korea China Canada01020304050variable
gold
silver
bronzeWide-Form Input
nationvalue
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 3/12

--- Página 4 ---
Dataframe Input
Supported DataFrame Types
Additional Dependencies Required
Plotly Express requires NumPy. You can install it with pip install numpy if it's not installed by the dataframe library you are using.
To use , you'll also need to have pandas installed.
To use PySpark dataframes, you'll need to have pandas installed. To use dataframes that support the dataframe interchange protocol, you'll need to have
PyArrow installed.
Example: Using a Pandas DataFrame with px.barimport plotly.express  as px
wide_df = px.data.medals_wide ()
fig = px.bar(wide_df, x="nation" , y=["gold", "silver" , "bronze" ], title="Wide-Form Input, relabelled" ,
            labels={"value": "count", "variable" : "medal"})
fig.show()
Many more examples of wide-form and messy data input can be found in our .
detailed wide-form support documentation (/python/wide-form/)
The first argument of every px function is data_frame. If you provide a dataframe as a px function's first argument, you can then specify column names as strings from
the dataframe as other arguments.
px functions natively support pandas, Polars, and PyArrow dataframes. px uses  to provide this native dataframe
support. Other types of dataframes that are currently supported by Narwhals, for example cuDF and Modin, may also work with px.
Narwhals (https://narwhals-dev.github.io/narwhals/)
You can also pass dataframes that are not natively supported, but which support the 
.
dataframe interchange protocol (https://data-apis.org/dataframe-
protocol/latest/)
PySpark dataframes are also supported and are converted to pandas dataframes internally by Plotly Express.
trendlines (/python/linear-fits/)
Here, we create a pandas DataFrame, pass it to px.bar as its first argument, and then use the "sepal_length" column for the x-axis and the "sepal_width" for the y-axis.South Korea China Canada01020304050medal
gold
silver
bronzeWide-Form Input, relabelled
nationcount
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 4/12

--- Página 5 ---
Example: Polars DataFrame with px.barimport plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
px provides native support for dataframe types other than pandas, including Polars:
import plotly.express  as px
df = px.data.iris(return_type ='polars' )
fig = px.scatter(df, x='sepal_length' , y='sepal_width' , color='species' , size='petal_length' )
fig.show()
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5 species
setosa
versicolor
virginica
sepal_lengthsepal_width
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 5/12

--- Página 6 ---
Using the Index of a Dataframe
Using Columns from Multiple DataframesIf the dataframe you are using has an index, it is also possible to use that index as an argument. In the following example, the index is used for the hover data.
import plotly.express  as px
df = px.data.iris()
fig = px.scatter(df, x=df.sepal_length , y=df.sepal_width , size=df.petal_length ,
                 hover_data =[df.index])
fig.show()
You can also use columns from multiple dataframes in one px function, as long as all the dataframe columns you use have the same length. In this example, we pass
df1 as the data_frame argument to px.bar and then us a column from df2 for the y argument.
4.5 5 5.5 6 6.5 7 7.5 822.533.544.5
sepal_lengthsepal_width
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 6/12

--- Página 7 ---
Using labels to pass namesimport plotly.express  as px
import pandas as pd
df1 = pd.DataFrame (dict(time=[10, 20, 30], sales=[10, 8, 30]))
df2 = pd.DataFrame (dict(market=[4, 2, 5]))
fig = px.bar(df1, x="time", y=df2.market, color="sales")
fig.show()
The labels argument can be used to override the names used for axis titles, legend entries and hovers.
import plotly.express  as px
import pandas as pd
df = px.data.gapminder ()
gdp = df['pop'] * df['gdpPercap' ]
fig = px.bar(df, x='year', y=gdp, color='continent' , labels={'y':'gdp'},
             hover_data =['country' ],
             title='Evolution of world GDP' )
fig.show()5 10 15 20 25 30 35012345
1015202530sales
timey
1950 1960 1970 1980 1990 2000010T20T30T40T50T60Tcontinent
Asia
Europe
Africa
Americas
OceaniaEvolution of world GDP
yeargdp
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 7/12

--- Página 8 ---
Input Data as array-like columns: NumPy arrays, lists...## Other Input Data
px arguments can also be array-like objects such as lists, NumPy arrays, in both long-form or wide-form (for certain functions).
import plotly.express  as px
# List arguments
fig = px.line(x=[1, 2, 3, 4], y=[3, 5, 4, 8])
fig.show()
List arguments can also be passed in as a list of lists, which triggers , with the downside that the resulting traces will
need to be manually renamed via fig.data[&lt;n&gt;].name = "name".
wide-form data processing (/python/wide-form/)1 1.5 2 2.5 3 3.5 4345678
xy
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 8/12

--- Página 9 ---
Passing dictionaries or array-likes as the data_frame argumentimport plotly.express  as px
# List arguments in wide form
series1 = [3, 5, 4, 8]
series2 = [5, 4, 8, 3]
fig = px.line(x=[1, 2, 3, 4], y=[series1, series2])
fig.show()
The data_frame argument can also accept a dict or array in addition to DataFrame objects. Using a dictionary can be a convenient way to pass column names used in
axis titles, legend entries and hovers without creating a dataframe.
import plotly.express  as px
import numpy as np
N = 10000
np.random.seed(0)
fig = px.density_contour (dict(effect_size =5 + np.random.randn(N),
                              waiting_time =np.random.poisson(size=N)),
                         x="effect_size" , y="waiting_time" )
fig.show()1 1.5 2 2.5 3 3.5 4345678variable
wide_variable_0
wide_variable_1
xvalue
1 2 3 4 5 6 7 8 9−1012345678
effect_sizewaiting_time
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 9/12

--- Página 10 ---
Integer column names
Mixing dataframes and other typesTo pass a dict or an array (such as a NumPy ndarray) to the data_frame parameter, you'll need to have pandas installed, because plotly.express internally converts the
dict or array to a pandas DataFrame.
When the data_frame argument is a NumPy array, column names are integer corresponding to the columns of the array. In this case, keyword names are used in axis,
legend and hovers. This is also the case for a pandas DataFrame with integer column names. Use the labels argument to override these names.
import numpy as np
import plotly.express  as px
ar = np.arange(100).reshape((10, 10))
fig = px.scatter(ar, x=2, y=6, size=1, color=5)
fig.show()
It is possible to mix dataframe columns, NumPy arrays and lists as arguments. Remember that the only column names to be used correspond to columns in the
data_frame argument, use labels to override names displayed in axis titles, legend entries or hovers.
0 20 40 60 80020406080100
1020304050607080905
26
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 10/12

--- Página 11 ---
What About Dash?import plotly.express  as px
import numpy as np
import pandas as pd
df = px.data.gapminder ()
gdp = np.log(df['pop'] * df['gdpPercap' ])  # NumPy array
fig = px.bar(df, x='year', y=gdp, color='continent' , labels={'y':'log gdp' },
             hover_data =['country' ],
             title='Evolution of world GDP' )
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter1950 1960 1970 1980 1990 20000500100015002000250030003500continent
Asia
Europe
Africa
Americas
OceaniaEvolution of world GDP
yearlog gdp
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 11/12

--- Página 12 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
e with
.bar
rames
umPy
s the16/07/2025, 06:57 Plotly express arguments in Python
https://plotly.com/python/px-arguments/ 12/12</content>
      </file>
      <file name="Styling plotly express figures in Python.pdf" path="pyvy_2x9/Styling plotly express figures in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Styling Figures made with Plotly Express
1. Control common parameters like width &amp; height, titles, labeling and colors using built-in Plotly Express function arguments
2. Updating the figure attributes using 
3. Using Plotly's  via the template argument to every Plotly Express function
4. Setting default values for common parameters using px.defaults
Built-in Plotly Express Styling Arguments
title to set the figure title
width and height to set the figure dimensions
template to  (see below for more details)
labels to override the default axis and legend labels behaviour, which is to use the data frame column name if available, and otherwise to use the label name
itself like "x", "y", "color" etc. labels accepts a dict whose keys are the label to rename and whose values are the desired labels. These labels appear in axis
labels, legend and color bar titles, and in hover labels.
category_orders to override the default category ordering behaviour, which is to use the order in which the data appears in the input. category_orders accepts
a dict whose keys are the column name to reorder and whose values are a list of values in the desired order. These orderings apply everywhere categories
appear: in legends, on axes, in bar stacks, in the order of facets, in the order of animation frames etc.
hover_data and hover_name to control which attributes appear in the hover label and how they are formatted.
 such as color_continuous_scale, color_range, color_discrete_sequence and/or color_discrete_map set the
colors used in the figure. color_discrete_map accepts a dict whose keys are values mapped to color and whose values are the desired CSS colors. &gt;  &gt; Styling
Plotly Express Figures
Styling Plotly Express Figures in Python
Figures made with Plotly Express can be customized in all the same ways as figures made with graph objects, as well as with PX-specific function arguments.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to
this page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/styling-
plotly-express.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which . Every
Plotly Express function returns  whose data and layout has been pre-populated according to the provided
arguments.
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
a plotly.graph_objects.Figure object (/python/graph-objects/)
You can style and customize figures made with Plotly Express in all the same ways as you can style figures made more manually by explicitly assembling
graph_objects into a figure.
More specifically, here are the 4 ways you can style and customize figures made with Plotly Express:
update methods or by directly setting attributes (/python/creating-and-updating-figures/)
theming/templating mechanism (/python/templates/)
Many common styling options can be set directly in the px function call. Every Plotly Express function accepts the following arguments:
set many styling parameters at once (/python/templates/)
Various color-related attributes (/python/colorscales/)
To illustrate each of these, here is a simple, default figure made with Plotly Express. Note the default orderings for the x-axis categories and the usage of lowercase &amp;
snake_case data frame columns for axis labelling.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
press
ments
e with
plates
ts16/07/2025, 06:57 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 1/6

--- Página 2 ---
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex")
fig.show()
Here is the same figure, restyled by adding some extra parameters to the initial Plotly Express call:
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week" ,
            width=600, height=400,
            labels={ # replaces default labels by column name
                "sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts"
            },
            category_orders ={ # replaces default order by column name
                "day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]
            },
            color_discrete_map ={ # replaces default color mapping by value
                "Male": "RebeccaPurple" , "Female" : "MediumPurple"
            },
            template ="simple_white"
            )
fig.show()Sun Sat Thur Fri020040060080010001200140016001800 sex
Female
Male
daysum of total_bill
Thur Fri Sat Sun050010001500Payer Gender
Male
FemaleReceipts by Payer Gender and Day of Week
Day of Weeksum of Receipts
press
ments
e with
plates
ts16/07/2025, 06:57 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 2/6

--- Página 3 ---
Updating or Modifying Figures made with Plotly Express
If none of the built-in Plotly Express arguments allow you to customize the figure the way you need to, you can use 
 on  returned by the PX function to make any further
modifications to the figure. This approach is the one used throughout the Plotly.py documentation to , control 
 and , add  and  etc.
the update_* and add_* methods
(/python/creating-and-updating-figures/)
the plotly.graph_objects.Figure object (/python/graph-objects/)
customize axes (/python/axes/)
legends
(/python/legend/)
colorbars (/python/colorscales/)
shapes (/python/shapes/)
annotations (/python/text-and-annotations/)
Here is the same figure as above, with some additional customizations to the axes and legend via .update_yaxes(), and .update_layout(), as well as some annotations
added via .add_shape() and .add_annotation().
import plotly.express  as px
df = px.data.tips()
fig = px.histogram (df, x="day", y="total_bill" , color="sex",
            title="Receipts by Payer Gender and Day of Week vs Target" ,
            width=600, height=400,
            labels={"sex": "Payer Gender" ,  "day": "Day of Week" , "total_bill" : "Receipts" },
            category_orders ={"day": ["Thur", "Fri", "Sat", "Sun"], "sex": ["Male", "Female" ]},
            color_discrete_map ={"Male": "RebeccaPurple" , "Female" : "MediumPurple" },
            template ="simple_white"
            )
fig.update_yaxes ( # the y-axis is in dollars
    tickprefix ="$", showgrid =True
)
fig.update_layout ( # customize font and legend orientation &amp; position
    font_family ="Rockwell" ,
    legend=dict(
        title=None, orientation ="h", y=1, yanchor="bottom" , x=0.5, xanchor="center"
    )
)
fig.add_shape ( # add a horizontal "target" line
    type="line", line_color ="salmon" , line_width =3, opacity=1, line_dash ="dot",
    x0=0, x1=1, xref="paper", y0=950, y1=950, yref="y"
)
fig.add_annotation ( # add a text callout with arrow
    text="below target!" , x="Fri", y=400, arrowhead =1, showarrow =True
)
fig.show()
Thur Fri Sat Sun$0$500$1000$1500Male FemaleReceipts by Payer Gender and Day of Week vs Target
Day of Weeksum of Receipts
below target!
press
ments
e with
plates
ts16/07/2025, 06:57 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 3/6

--- Página 4 ---
How Plotly Express Works with Templates
Plotly Express methods will use the default template if one is set in plotly.io (by default, this is set to plotly) or in plotly.express.defaults (see below)
The template in use can always be overridden via the template argument to every PX function
The default color_continuous_scale will be the value of layout.colorscales.sequential in the template in use, unless it is overridden via the corresponding
function argument or via plotly.express.defaults (see below)
The default color_discrete_sequence will be the value of layout.colorway in the template in use, unless it is overridden via the corresponding function argument
or via plotly.express.defaults (see below)
Setting Plotly Express Styling Defaults
width and height can be set once globally for all Plotly Express functions
template can override the setting of plotly.io.templates.default for all Plotly Express functions
color_continuous_scale and color_discrete_scale can override the contents of the template in use for all Plotly Express functions that accept these arguments
line_dash_sequence, symbol_sequence and size_max can be set once globally for all Plotly Express functions that accept these arguments
we set the Plotly-wide default template to simple_white, but
we override the default template for Plotly Express to be ggplot2, but
we also set the default color_continuous_scale, and
we set the default height and width to 400 by 600, but
we override the default width to 400 via the function argument.Plotly has a  and figures created with Plotly Express interact smoothly with this system:
theming system based on templates (/python/templates/)
By way of example, in the following figure, simply setting the template argument will automatically change the default continuous color scale, even though we have
not specified color_continuous_scale directly.
import plotly.express  as px
df = px.data.iris()
fig = px.density_heatmap (df, x="sepal_width" , y="sepal_length" , template ="seaborn" )
fig.show()
Plotly Express supports a simple default-configuration system via the plotly.express.defaults singleton object. The values of the properties set on this object are used
for the rest of the active session in place of None as the default values for any argument to a PX function with a matching name:
To illustrate this "defaults hierarchy", in the following example:
As a result, any figure produced with Plotly Express thereafter uses the ggplot2 settings for all attributes except for the continuous color scale (visible because
simple_white doesn't set a plot background, and neither the simple_white nor ggplot2 template uses Blackbody as a color scale), and uses the Plotly Express defaults
for height but not width (visible because the figure height is the same as the figure width, despite the default).
2 2.5 3 3.5 4 4.544.555.566.577.58
024681012141618count
sepal_widthsepal_length
press
ments
e with
plates
ts16/07/2025, 06:57 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 4/6

--- Página 5 ---
What About Dash?import plotly.express  as px
import plotly.io  as pio
pio.templates .default = "simple_white"
px.defaults .template  = "ggplot2"
px.defaults .color_continuous_scale  = px.colors.sequential .Blackbody
px.defaults .width = 600
px.defaults .height = 400
df = px.data.iris()
fig = px.scatter(df, x="sepal_width" , y="sepal_length" , color="sepal_length" , width=400)
fig.show()
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)2 3 45678
567sepal_length
sepal_widthsepal_length
press
ments
e with
plates
ts16/07/2025, 06:57 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 5/6

--- Página 6 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
press
ments
e with
plates
ts16/07/2025, 06:57 Styling plotly express figures in Python
https://plotly.com/python/styling-plotly-express/ 6/6</content>
      </file>
      <file name="Subplots and multiple axes in Python.pdf" path="pyvy_2x9/Subplots and multiple axes in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/) &gt; 
Python (/python)
Subplots (/python/subplot-charts)
Plotly Python Open Source Graphing Library Subplots and Multiple Axes
Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make subplots, insets, and multiple axes charts.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
(/python/mixed-
subplots/)
Mixed Subplots
(/python/map-subplots-
and-small-multiples/)
Map Subplots
(/python/table-
subplots/)
Table and Chart
Subplots
(/python/figure-factory-
subplots/)
Figure Factory Subplots
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
arted)
e)
e/index/)
ce)
ial)
lotly.py)
l-charts/)
charts/)
charts/)
/bio/)
ons)16/07/2025, 07:01 Subplots and multiple axes in Python
https://plotly.com/python/subplot-charts/ 1/1</content>
      </file>
      <file name="Subplots in Python.pdf" path="pyvy_2x9/Subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Subplots and Plotly Express
Simple Subplot &gt;  &gt;
Subplots
Subplots in Python
How to make subplots in with Plotly's Python graphing library. Examples of stacked, custom-sized, gridded, and annotated subplots.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Fundamentals (/python/plotly-fundamentals)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-
prod/doc/python/subplots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
 is the easy-to-use, high-level interface to Plotly, which  and
produces .
Plotly Express (/python/plotly-express/)
operates on a variety of types of data (/python/px-arguments/)
easy-to-style figures (/python/styling-plotly-express/)
Plotly Express does not support arbitrary subplot capabilities, instead it supports , and it also supports
.
faceting by a given data dimension (/python/facet-plots/)
marginal charts to display distribution information (/python/marginal-plots/)
This page documents the usage of the lower-level plotly.subplots module and the make_subplots function it exposes to construct figures with arbitrary subplots.
Plotly Express faceting uses make_subplots internally so adding traces to Plotly Express facets works just as documented here, with fig.add_trace(..., row=&lt;R&gt;, col=
&lt;C&gt;).
Figures with subplots are created using the make_subplots function from the plotly.subplots module.
Here is an example of creating a figure that includes two scatter traces which are side-by-side since there are 2 columns and 1 row in the subplot layout.
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 1/22

--- Página 2 ---
Stacked Subplotsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Side By Side Subplots" )
fig.show()
Here is an example of creating a figure with subplots that are stacked on top of each other since there are 3 rows and 1 column in the subplot layout.1 1.5 2 2.5 344.555.56
20 25 30 35 405055606570trace 0
trace 1Side By Side Subplots
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 2/22

--- Página 3 ---
Multiple Subplotsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=3, cols=1)
fig.add_trace (go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
), row=1, col=1)
fig.add_trace (go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
), row=2, col=1)
fig.add_trace (go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
), row=3, col=1)
fig.update_layout (height=600, width=600, title_text ="Stacked Subplots" )
fig.show()
Here is an example of creating a 2 x 2 subplot grid and populating each subplot with a single scatter trace.3 3.5 4 4.5 510001050110011501200
2 2.5 3 3.5 4100105110115120
0 0.5 1 1.5 21010.51111.512trace 0
trace 1
trace 2Stacked Subplots
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 3/22

--- Página 4 ---
Multiple Subplots with Titlesimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=2, cols=2, start_cell ="bottom-left" )
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.show()
The subplot_titles argument to make_subplots can be used to position text annotations as titles for each subplot.
Here is an example of adding subplot titles to a 2 x 2 subplot grid of scatter traces.1 1.5 2 2.5 344.555.56
20 25 30 35 405055606570300 350 400 450 500600650700750800
4000 4500 5000 5500 600070007500800085009000trace 0
trace 1
trace 2
trace 3
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 4/22

--- Página 5 ---
Subplots with Annotationsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    subplot_titles =("Plot 1" , "Plot 2" , "Plot 3" , "Plot 4" ))
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.update_layout (height=500, width=700,
                  title_text ="Multiple Subplots with Titles" )
fig.show()
11.522.5344.555.56
20253035405055606570
300350400450500600650700750800
4000450050005500600070007500800085009000trace 0
trace 1
trace 2
trace 3Multiple Subplots with Titles
Plot 1 Plot 2
Plot 3 Plot 4
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 5/22

--- Página 6 ---
Customize Subplot Column Widths and Row Heightsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2)
fig.add_trace (
    go.Scatter(
        x=[1, 2, 3],
        y=[4, 5, 6],
        mode="markers+text" ,
        text=["Text A" , "Text B" , "Text C" ],
        textposition ="bottom center"
    ),
    row=1, col=1
)
fig.add_trace (
    go.Scatter(
        x=[20, 30, 40],
        y=[50, 60, 70],
        mode="markers+text" ,
        text=["Text D" , "Text E" , "Text F" ],
        textposition ="bottom center"
    ),
    row=1, col=2
)
fig.update_layout (height=600, width=800, title_text ="Subplots with Annotations" )
fig.show()
The column_widths argument to make_subplots can be used to customize the relative widths of the columns in a subplot grid. It should be set to a list of numbers
with a length that matches the cols argument. These number will be normalized, so that they sum to 1, and used to compute the relative widths of the subplot grid
columns. The row_heights argument serves the same purpose for controlling the relative heights of rows in the subplot grid.
Here is an example of creating a figure with two scatter traces in side-by-side subplots. The left subplot is set to be wider than the right one.Text AText BText C
1 1.5 2 2.5 344.555.56
Text DText EText F
20 25 30 35 405055606570trace 0
trace 1Subplots with Annotations
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 6/22

--- Página 7 ---
Subplots in Dashimport plotly.graph_objects  as go
from plotly.subplots  import make_subplots
fig = make_subplots (rows=1, cols=2, column_widths =[0.7, 0.3])
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
              row=1, col=2)
fig.show()
 is the best way to build analytical apps in Python using Plotly figures. To run the app below, run pip install dash, click "Download" to
get the code and run python app.py.
Dash (https://plotly.com/dash/)
Get started with  and learn how to effortlessly  &amp; 
 apps like this with .
the official Dash docs (https://dash.plotly.com/installation)
style (https://plotly.com/dash/design-kit/)
deploy
(https://plotly.com/dash/app-manager/)
Dash Enterprise (https://plotly.com/dash/)1 1.5 2 2.5 344.555.56
20253035405055606570trace 0
trace 1
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 7/22

--- Página 8 ---
Customizing Subplot AxesSign up for Dash Club → Free cheat sheets plus updates from Chris Parmer and Adam Schroeder delivered to your inbox every two months. Includes tips and tricks, community
apps, and deep dives into the Dash architecture. .
Join now (https://go.plotly.com/dash-club?utm_source=Dash+Club+2022&amp;utm_medium=graphing_libraries&amp;utm_content=inline)
After a figure with subplots is created using the make_subplots function, its axis properties (title, font, range, grid style, etc.) can be customized using the
update_xaxes and update_yaxes graph object figure methods. By default, these methods apply to all of the x axes or y axes in the figure. The row and col arguments
can be used to control which axes are targeted by the update.
Here is an example that creates a figure with a 2 x 2 subplot grid, populates each subplot with a scatter trace, and then updates the x and y axis titles for each subplot
individually.

from dash import Dash, dcc, html, Input, Output
from plotly.subplots import make_subplots
import plotly.graph_objects as go
app = Dash(__name__)
app.layout = html.Div([
    html.H4('Live adjustable subplot-width'),
    dcc.Graph(id="graph"),
    html.P("Subplots Width:"),
    dcc.Slider(
        id='slider-width', min=.1, max=.9,
        value=0.5, step=0.1)
])
@app.callback(
    Output("graph", "figure"),
    Input("slider-width", "value"))
def customize_width(left_width):
    fig = make_subplots(rows=1, cols=2,
        column_widths=[left_width, 1 - left_width])
    fig.add_trace(row=1, col=1,
 t Stt([123] [456]))# l ith dtDOWNLOAD
Live adjustable subplot-width
Subplots Width:1 1.5 2 2.5 344.555.56
20 25 30 35 405055606570 trace 0
trace 1
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 8/22

--- Página 9 ---
Subplots with Shared X-Axesfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
# Initialize figure with subplots
fig = make_subplots (
    rows=2, cols=2, subplot_titles =("Plot 1" , "Plot 2" , "Plot 3" , "Plot 4" )
)
# Add traces
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[4, 5, 6]), row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[50, 60, 70]), row=1, col=2)
fig.add_trace (go.Scatter(x=[300, 400, 500], y=[600, 700, 800]), row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]), row=2, col=2)
# Update xaxis properties
fig.update_xaxes (title_text ="xaxis 1 title" , row=1, col=1)
fig.update_xaxes (title_text ="xaxis 2 title" , range=[10, 50], row=1, col=2)
fig.update_xaxes (title_text ="xaxis 3 title" , showgrid =False, row=2, col=1)
fig.update_xaxes (title_text ="xaxis 4 title" , type="log", row=2, col=2)
# Update yaxis properties
fig.update_yaxes (title_text ="yaxis 1 title" , row=1, col=1)
fig.update_yaxes (title_text ="yaxis 2 title" , range=[40, 80], row=1, col=2)
fig.update_yaxes (title_text ="yaxis 3 title" , showgrid =False, row=2, col=1)
fig.update_yaxes (title_text ="yaxis 4 title" , row=2, col=2)
# Update title and height
fig.update_layout (title_text ="Customizing Subplot Axes" , height=700)
fig.show()
The shared_xaxes argument to make_subplots can be used to link the x axes of subplots in the resulting figure. The vertical_spacing argument is used to control the
vertical spacing between rows in the subplot grid.
Here is an example that creates a figure with 3 vertically stacked subplots with linked x axes. A small vertical spacing value is used to reduce the spacing between
subplot rows.1 1.5 2 2.5 344.555.56
10 20 30 40 504050607080
300 350 400 450 500600650700750800
4000 4500 50005500600070007500800085009000trace 0
trace 1
trace 2
trace 3Customizing Subplot Axes
xaxis 1 title xaxis 2 title
xaxis 3 title xaxis 4 titleyaxis 1 title
yaxis 2 titleyaxis 3 title
yaxis 4 titlePlot 1 Plot 2
Plot 3 Plot 4
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 9/22

--- Página 10 ---
Subplots with Shared Y-Axesfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=3, cols=1,
                    shared_xaxes =True,
                    vertical_spacing =0.02)
fig.add_trace (go.Scatter(x=[0, 1, 2], y=[10, 11, 12]),
              row=3, col=1)
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[100, 110, 120]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[3, 4, 5], y=[1000, 1100, 1200]),
              row=1, col=1)
fig.update_layout (height=600, width=600,
                  title_text ="Stacked Subplots with Shared X-Axes" )
fig.show()
The shared_yaxes argument to make_subplots can be used to link the y axes of subplots in the resulting figure.
Here is an example that creates a figure with a 2 x 2 subplot grid, where the y axes of each row are linked.10001050110011501200
100105110115120
0 1 2 3 4 51010.51111.512trace 0
trace 1
trace 2Stacked Subplots with Shared X-Axes
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 10/22

--- Página 11 ---
Subplots with Shared Colorscalefrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=2, cols=2, shared_yaxes =True)
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[2, 3, 4]),
              row=1, col=1)
fig.add_trace (go.Scatter(x=[20, 30, 40], y=[5, 5, 5]),
              row=1, col=2)
fig.add_trace (go.Scatter(x=[2, 3, 4], y=[600, 700, 800]),
              row=2, col=1)
fig.add_trace (go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),
              row=2, col=2)
fig.update_layout (height=600, width=600,
                  title_text ="Multiple Subplots with Shared Y-Axes" )
fig.show()
To share colorscale information in multiple subplots, you can use .
coloraxis (https://plotly.com/javascript/reference/scatter/#scatter-marker-line-coloraxis)11.522.532345
2025303540
22.533.5402000400060008000
40004500500055006000trace 0
trace 1
trace 2
trace 3Multiple Subplots with Shared Y-Axes
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 11/22

--- Página 12 ---
Custom Sized Subplot with Subplot Titlesfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (rows=1, cols=2, shared_yaxes =True)
fig.add_trace (go.Bar(x=[1, 2, 3], y=[4, 5, 6],
                    marker=dict(color=[4, 5, 6], coloraxis ="coloraxis" )),
              1, 1)
fig.add_trace (go.Bar(x=[1, 2, 3], y=[2, 3, 5],
                    marker=dict(color=[2, 3, 5], coloraxis ="coloraxis" )),
              1, 2)
fig.update_layout (coloraxis =dict(colorscale ='Bluered_r' ), showlegend =False)
fig.show()
The specs argument to make_subplots is used to configure per-subplot options. specs must be a 2-dimension list with dimensions that match those provided as the
rows and cols arguments. The elements of specs may either be None, indicating no subplot should be initialized starting with this grid cell, or a dictionary containing
subplot options. The colspan subplot option specifies the number of grid columns that the subplot starting in the given cell should occupy. If unspecified, colspan
defaults to 1.
Here is an example that creates a 2 by 2 subplot grid containing 3 subplots. The subplot specs element for position (2, 1) has a colspan value of 2, causing it to span
the full figure width. The subplot specs element for position (2, 2) is None because no subplot begins at this location in the grid.1 2 30123456
1 2 322.533.544.555.56
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 12/22

--- Página 13 ---
Multiple Custom Sized Subplotsfrom plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{}, {}],
           [{"colspan" : 2}, None]],
    subplot_titles =("First Subplot" ,"Second Subplot" , "Third Subplot" ))
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2]),
                 row=1, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2]),
                 row=1, col=2)
fig.add_trace (go.Scatter(x=[1, 2, 3], y=[2, 1, 2]),
                 row=2, col=1)
fig.update_layout (showlegend =False, title_text ="Specs with Subplot Title" )
fig.show()
If the print_grid argument to make_subplots is set to True, then a text representation of the subplot grid will be printed.
Here is an example that uses the rowspan and colspan subplot options to create a custom subplot layout with subplots of mixed sizes. The print_grid argument is set
to True so that the subplot grid is printed to the screen.1 1.5 211.52
1 1.5 211.52
1 1.5 2 2.5 311.52Specs with Subplot Title
First Subplot Second Subplot
Third Subplot
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 13/22

--- Página 14 ---
from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=5, cols=2,
    specs=[[{}, {"rowspan" : 2}],
           [{}, None],
           [{"rowspan" : 2, "colspan" : 2}, None],
           [None, None],
           [{}, {}]],
    print_grid =True)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(1,1)"), row=1, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(1,2)"), row=1, col=2)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(2,1)"), row=2, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(3,1)"), row=3, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(5,1)"), row=5, col=1)
fig.add_trace (go.Scatter(x=[1, 2], y=[1, 2], name="(5,2)"), row=5, col=2)
fig.update_layout (height=600, width=600, title_text ="specs examples" )
fig.show()
This is the format of your plot grid:
[ (1,1) x,y   ]  ⎡  (1,2) x2,y2 ⎤
[ (2,1) x3,y3 ]  ⎣       :      ⎦
⎡ (3,1) x4,y4           -      ⎤
⎣      :                :      ⎦
[ (5,1) x5,y5 ]  [ (5,2) x6,y6 ]
1 1.5 211.52
1 1.5 211.52
1 1.5 211.52
1 1.2 1.4 1.6 1.8 211.52
1 1.5 211.52
1 1.5 211.52(1,1)
(1,2)
(2,1)
(3,1)
(5,1)
(5,2)specs examples
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 14/22

--- Página 15 ---
Subplots Types
"xy": 2D Cartesian subplot type for scatter, bar, etc. This is the default if no type is specified.
"scene": 3D Cartesian subplot for scatter3d, cone, etc.
"polar": Polar subplot for scatterpolar, barpolar, etc.
"ternary": Ternary subplot for scatterternary.
"mapbox": Mapbox subplot for scattermapbox.
"domain": Subplot type for traces that are individually positioned. pie, parcoords, parcats, etc.
trace type: A trace type name (e.g. "bar", "scattergeo", "carpet", "mesh", etc.) which will be used to determine the appropriate subplot type for that trace.By default, the make_subplots function assumes that the traces that will be added to all subplots are 2-dimensional cartesian traces (e.g. scatter, bar, histogram,
violin, etc.). Traces with other subplot types (e.g. scatterpolar, scattergeo, parcoords, etc.) are supported by specifying the type subplot option in the specs argument
to make_subplots.
Here are the possible values for the type option:
Here is an example that creates and populates a 2 x 2 subplot grid containing 4 different subplot types.
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 15/22

--- Página 16 ---
from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{"type": "xy"}, {"type": "polar"}],
           [{"type": "domain" }, {"type": "scene"}]],
)
fig.add_trace (go.Bar(y=[2, 3, 1]),
              row=1, col=1)
fig.add_trace (go.Barpolar (theta=[0, 45, 90], r=[2, 3, 1]),
              row=1, col=2)
fig.add_trace (go.Pie(values=[2, 3, 1]),
              row=2, col=1)
fig.add_trace (go.Scatter3d (x=[2, 3, 1], y=[0, 0, 0],
                           z=[0.5, 1, 2], mode="lines"),
              row=2, col=2)
fig.update_layout (height=700, showlegend =False)
fig.show()
As an alternative to providing the name of a subplot type (e.g. "xy", "polar", "domain", "scene", etc), the type option may also be set to a string containing the name of
a trace type (e.g. "bar", "barpolar", "pie", "scatter3d", etc.), which will be used to determine the subplot type that is compatible with that trace.
Here is the example above, modified to specify the subplot types using trace type names.0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 16/22

--- Página 17 ---
Side by Side Subplot (low-level API)from plotly.subplots  import make_subplots
import plotly.graph_objects  as go
fig = make_subplots (
    rows=2, cols=2,
    specs=[[{"type": "bar"}, {"type": "barpolar" }],
           [{"type": "pie"}, {"type": "scatter3d" }]],
)
fig.add_trace (go.Bar(y=[2, 3, 1]),
              row=1, col=1)
fig.add_trace (go.Barpolar (theta=[0, 45, 90], r=[2, 3, 1]),
              row=1, col=2)
fig.add_trace (go.Pie(values=[2, 3, 1]),
              row=2, col=1)
fig.add_trace (go.Scatter3d (x=[2, 3, 1], y=[0, 0, 0],
                           z=[0.5, 1, 2], mode="lines"),
              row=2, col=2)
fig.update_layout (height=700, showlegend =False)
fig.show()
0 1 200.511.522.53
0°45°90°
135°
180°
225°
270°315°00.511.522.53
50%33.3%
16.7%
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 17/22

--- Página 18 ---
Subplots with shared axes (low-level API)import plotly.graph_objects  as go
trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6]
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[50, 60, 70],
    xaxis="x2",
    yaxis="y2"
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        domain=[0, 0.7]
    ),
    xaxis2=dict(
        domain=[0.8, 1]
    ),
    yaxis2=dict(
        anchor="x2"
    )
)
fig = go.Figure(data=data, layout=layout)
fig.show()
1 1.5 2 2.5 344.555.56
20253035405055606570trace 0
trace 1
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 18/22

--- Página 19 ---
import plotly.graph_objects  as go
trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 3, 4]
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[5, 5, 5],
    xaxis="x2",
    yaxis="y"
)
trace3 = go.Scatter(
    x=[2, 3, 4],
    y=[600, 700, 800],
    xaxis="x",
    yaxis="y3"
)
trace4 = go.Scatter(
    x=[4000, 5000, 6000],
    y=[7000, 8000, 9000],
    xaxis="x4",
    yaxis="y4"
)
data = [trace1, trace2, trace3, trace4]
layout = go.Layout(
    xaxis=dict(
        domain=[0, 0.45]
    ),
    yaxis=dict(
        domain=[0, 0.45]
    ),
    xaxis2=dict(
        domain=[0.55, 1]
    ),
    xaxis4=dict(
        domain=[0.55, 1],
        anchor="y4"
    ),
    yaxis3=dict(
        domain=[0.55, 1]
    ),
    yaxis4=dict(
        domain=[0.55, 1],
        anchor="x4"
    )
)
fig = go.Figure(data=data, layout=layout)
fig.show()
1 2 3 42345600650700750800
20 25 30 35 404000 4500 5000 5500 600070007500800085009000 trace 0
trace 1
trace 2
trace 3
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 19/22

--- Página 20 ---
Stacked Subplots with a Shared X-Axis (low-level API)
Setting Subplots on a Figure Directlyimport plotly.graph_objects  as go
trace1 = go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
)
trace2 = go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
    yaxis="y2"
)
trace3 = go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
    yaxis="y3"
)
data = [trace1, trace2, trace3]
layout = go.Layout(
    yaxis=dict(
        domain=[0, 0.33]
    ),
    legend=dict(
        traceorder ="reversed"
    ),
    yaxis2=dict(
        domain=[0.33, 0.66]
    ),
    yaxis3=dict(
        domain=[0.66, 1]
    )
)
fig = go.Figure(data=data, layout=layout)
fig.show()
new in 4.13
Subplots can be added to an already existing figure, provided it doesn't already have subplots. go.Figure.set_subplots accepts all the same arguments as
plotly.subplots.make_subplots.
import plotly.graph_objects  as go
fig = go.Figure().set_subplots (2, 3, horizontal_spacing =0.1)0 1 2 3 4 51010.51111.51210010511011512010001050110011501200trace 2
trace 1
trace 0
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 20/22

--- Página 21 ---
Reference
What About Dash?is equivalent to:
from plotly.subplots  import make_subplots
fig = make_subplots (2, 3, horizontal_spacing =0.1)
All of the x-axis properties are found here:  All of the y-axis
properties are found here: 
https://plotly.com/python/reference/layout/xaxis/ (https://plotly.com/python/reference/layout/xaxis/)
https://plotly.com/python/reference/layout/yaxis/ (https://plotly.com/python/reference/layout/yaxis/)
from plotly.subplots  import make_subplots
help(make_subplots )
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Help on function make_subplots in module plotly.subplots:
make_subplots(rows=1, cols=1, shared_xaxes=False, shared_yaxes=False, start_cell='top-left', print_grid=False, horizontal_spacing=None, vertical_spacing=None, su
bplot_titles=None, column_widths=None, row_heights=None, specs=None, insets=None, column_titles=None, row_titles=None, x_title=None, y_title=None, figure=
None, **kwargs) -&gt; plotly.graph_objs._figure.Figure
Return an instance of plotly.graph_objs.Figure with predefined subplots
configured in 'layout'.
Parameters
----------
rows: int (default 1)
Number of rows in the subplot grid. Must be greater than zero.
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 21/22

--- Página 22 ---
Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
and Row
Titles
el API)
xis (low-
y16/07/2025, 06:58 Subplots in Python
https://plotly.com/python/subplots/ 22/22</content>
      </file>
      <file name="Table and chart subplots in Python.pdf" path="pyvy_2x9/Table and chart subplots in Python.pdf" type="pdf">
        <content>--- Página 1 ---
 (https://plotly.com/)
(/graphing-libraries/)Import CSV Data &gt;  &gt; Table and Chart
Subplots
Table and Chart Subplots in Python
How to create a subplot with tables and charts in Python with Plotly.
Plotly Studio: Transform any dataset into an interactive data application in minutes with AI. 
Python (/python)
Subplots (/python/subplot-charts)
Suggest an edit to this
page(https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/table-
subplots.md)
Sign up for early access now. (https://plotly.com/studio/?
utm_medium=graphing_libraries&amp;utm_campaign=studio_early_access&amp;utm_content=sidebar)
ta-
 &amp;utm_campaign=studio_cloud_launch&amp;utm_content=sidebar)
16/07/2025, 06:58 Table and chart subplots in Python
https://plotly.com/python/table-subplots/ 1/4

--- Página 2 ---
import plotly.graph_objects  as go
from plotly.subplots  import make_subplots
import pandas as pd
import re
df = pd.read_csv ("https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv" )
for i, row in enumerate (df["Date"]):
    p = re.compile(" 00:00:00" )
    datetime  = p.split(df["Date"][i])[0]
    df.iloc[i, 1] = datetime
fig = make_subplots (
    rows=3, cols=1,
    shared_xaxes =True,
    vertical_spacing =0.03,
    specs=[[{"type": "table"}],
           [{"type": "scatter" }],
           [{"type": "scatter" }]]
)
fig.add_trace (
    go.Scatter(
        x=df["Date"],
        y=df["Mining-revenue-USD" ],
        mode="lines",
        name="mining revenue"
    ),
    row=3, col=1
)
fig.add_trace (
    go.Scatter(
        x=df["Date"],
        y=df["Hash-rate" ],
        mode="lines",
        name="hash-rate-TH/s"
    ),
    row=2, col=1
)
fig.add_trace (
    go.Table(
        header=dict(
            values=["Date", "Number&lt;br&gt;Transactions" , "Output&lt;br&gt;Volume (BTC)" ,
                    "Market&lt;br&gt;Price" , "Hash&lt;br&gt;Rate" , "Cost per&lt;br&gt;trans-USD" ,
                    "Mining&lt;br&gt;Revenue-USD" , "Trasaction&lt;br&gt;fees-BTC" ],
            font=dict(size=10),
            align="left"
        ),
        cells=dict(
            values=[df[k].tolist() for k in df.columns[1:]],
            align = "left")
    ),
    row=1, col=1
)
fig.update_layout (
    height=800,
    showlegend =False,
    title_text ="Bitcoin mining stats for 180 days" ,
)
fig.show()
16/07/2025, 06:58 Table and chart subplots in Python
https://plotly.com/python/table-subplots/ 2/4

--- Página 3 ---
Reference
What About Dash?See  for more information regarding chart attributes!
For examples of Plotly Tables, see: 
https://plotly.com/python/reference/table/ (https://plotly.com/python/reference/table/)
https://plotly.com/python/table/ (https://plotly.com/python/table/)
 is an open-source framework for building analytical applications, with no Javascript required, and it is tightly integrated with the Plotly
graphing library.
Dash (https://dash.plot.ly/)
Learn about how to install Dash at .
https://dash.plot.ly/installation (https://dash.plot.ly/installation)
Everywhere in this page that you see fig.show(), you can display the same figure in a Dash application by passing it to the figure argument of the 
 from the built-in dash_core_components package like this:
Graph component
(https://dash.plot.ly/dash-core-components/graph)
import plotly.graph_objects  as go # or plotly.express as px
fig = go.Figure() # or any Plotly Express function e.g. px.bar(...)
# fig.add_trace( ... )
# fig.update_layout( ... )
from dash import Dash, dcc, html
app = Dash()
app.layout = html.Div([
    dcc.Graph(figure=fig)
])
app.run(debug=True, use_reloader =False)  # Turn off reloader if inside Jupyter4M6M8M10M12M
May 2017 Jun 2017 Jul 2017 Aug 2017 Sep 2017 Oct 20175M10M2017-04-29
2017-04-30
2017-05-01
2017-05-02
2017-05-03
2017-05-04
2017-05-05
20170506341319
281489
294786
333161
295149
354737
267193
3630224488916
3918072
3892124
4099704
3425069
4359179
3347227
43591793119179
2720216
2878278
3149553
2760373
3500746
2779170
36107894488916
3918072
3892124
4099704
3425069
4359179
3347227
43591799
10
10
10
10
10
11
103119179
2720216
2878278
3149553
2760373
3500746
2779170
3610789256
199
228
273
247
307
261
297Bitcoin mining stats for 180 days
16/07/2025, 06:58 Table and chart subplots in Python
https://plotly.com/python/table-subplots/ 3/4

--- Página 4 ---
(https://dash.plotly.com/tutorial?utm_medium=graphing_libraries&amp;utm_content=python_footer)Sign up to stay in the loop with all things Plotly — from Dash Club
to product updates, webinars, and more!JOIN OUR MAILING LIST
SUBSCRIBE
(HTTPS://GO.PLOT.LY/SUBSCRIPTION) Products
Dash (https://plotly.com/dash/)
Consulting and Training
(https://plotly.com/consulting-and-oem/) Pricing
Enterprise Pricing (https://plotly.com/get-pricing/)
About Us
Careers (https://plotly.com/careers)
Resources (https://plotly.com/resources/)
Blog (https://medium.com/@plotlygraphs) Support
Community Support (https://community.plot.ly/)
Documentation (https://plotly.com/graphing-libraries)
Copyright © 2025 Plotly. All rights reserved.
Terms of Service (https://community.plotly.com/tos)
Privacy Policy (https://plotly.com/privacy/)
16/07/2025, 06:58 Table and chart subplots in Python
https://plotly.com/python/table-subplots/ 4/4</content>
      </file>
    </category>
    <category name="pyvy_main" path="pyvy_main">
      <file name="pyvy_2x2_1_basic_charts" path="pyvy_main/pyvy_2x2_1_basic_charts" type="unknown">
        <content>Tipo de arquivo não suportado: pyvy_2x2_1_basic_charts</content>
      </file>
      <file name="pyvy_2xA.md" path="pyvy_main/pyvy_2xA.md" type="md">
        <content>&lt;web_content&gt;
  &lt;title&gt;EVALUATION ONLY - Labeling Instructions&lt;/title&gt;
  &lt;author&gt;Alignerr&lt;/author&gt;
  &lt;publication_date&gt;2025-07-12&lt;/publication_date&gt;
  &lt;license&gt;Internal Evaluation Use Only&lt;/license&gt;
  &lt;section&gt;
    &lt;title&gt;Objective&lt;/title&gt;
    &lt;paragraph&gt;
      This is a Python evaluation focused on data visualization and storytelling. The main task is to recreate a visual similar to a reference image, telling the same story using a dummy dataset. This involves creating Python scripts for data generation and visualization. An input prompt that would naturally produce the created visual must also be written.
    &lt;/paragraph&gt;
    &lt;paragraph&gt;
      IMPORTANT UPDATE AS OF JULY 12TH: An upload script is no longer used. The contents of the scripts and HTML file are to be copy-pasted into the Labelbox editor.
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Labeling Steps&lt;/title&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;
        &lt;b&gt;Find and Analyze the Dashboard/Graph:&lt;/b&gt; Search the web for a reference image of a business-related dashboard or graph that matches the given chart description. Obtain the direct URL to the image. The objective is to creatively expand on this reference, capturing core features while developing realistic datasets and visualizations.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Generate a Prompt:&lt;/b&gt; Write a simple, open-ended, natural, and practical user-style question or instruction that the reference image would answer. This prompt frames the data story.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Generate Data To Tell the Business Story:&lt;/b&gt; Write a data creation script (data_gen.py) using only pandas and numpy. It must generate at least two datasets (as DataFrames or Numpy arrays) that tell a story similar to the reference image.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Recreate the Visualization:&lt;/b&gt; Write a visualization script (viz.py) using only pandas, numpy, and plotly. This script reads the generated data and outputs a single interactive HTML file (dashboard.html).
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Upload Files:&lt;/b&gt; Copy and paste the contents of the data generation script, visualization script, and the generated HTML file into the Labelbox platform's left side panel. The generated .csv/.npy files are not needed.
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Prompt Examples&lt;/title&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;&lt;b&gt;Prompt Topic&lt;/b&gt;&lt;/cell&gt;
        &lt;cell&gt;&lt;b&gt;Story &amp;amp; Visuals&lt;/b&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Show how global electric-vehicle (EV) adoption has evolved since 2015 and predict the next five years."&lt;/cell&gt;
        &lt;cell&gt;Multi-line time-series of unit sales by region, Stacked area of battery chemistries, Sankey of supply-chain flows, Heat-map of EV market-share by country.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Analyze hospital network capacity vs. infectious-disease outbreaks during winter seasons."&lt;/cell&gt;
        &lt;cell&gt;Dual-axis line (ICU beds vs. cases), Correlation heat-map of symptoms &amp;amp; test positivity, Box-whisker of LOS by diagnosis group.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Contrast same-day vs. two-day e-commerce delivery performance during holiday peaks."&lt;/cell&gt;
        &lt;cell&gt;Violin plot of delivery times, Pareto of top delay causes, Time-series forecast of warehouse backlog.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Track sustainable-aviation-fuel (SAF) usage across the airline industry and project carbon savings."&lt;/cell&gt;
        &lt;cell&gt;Waterfall of CO2 reductions, Treemap of SAF feedstocks, Monte Carlo projection of carbon offset targets.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Visualization Style Guidelines&lt;/title&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Typography:&lt;/b&gt; Titles MUST be bold, with properly formatted legends and labels.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Aesthetics:&lt;/b&gt; Organize layout using visual containers (e.g., cards, sections). Use depth thoughtfully via shadows or gradients for visual hierarchy.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Storytelling:&lt;/b&gt; Establish a clear narrative flow, starting with high-level KPIs and drilling down into details. Data elements should feel connected.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Complexity:&lt;/b&gt; Dashboards must match the visual density and insight variety of provided examples. Avoid oversimplification.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Layout:&lt;/b&gt; No overlapping elements or cut-off text. Ensure consistent padding, margin, and spacing.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Legends:&lt;/b&gt; Ensure legends are clearly displayed, boxed if appropriate, with well-organized placement.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Color Palette:&lt;/b&gt; Use a professional and aesthetically pleasing color scheme that complements the data and enhances readability.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Overall Quality:&lt;/b&gt; The final plot should be polished and suitable for a presentation or publication.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;visual_elements&gt;
    &lt;image&gt;
      &lt;url&gt;local_file_image&lt;/url&gt;
      &lt;dimensions&gt;
        &lt;width&gt;unknown&lt;/width&gt;
        &lt;height&gt;unknown&lt;/height&gt;
      &lt;/dimensions&gt;
      &lt;colors&gt;
        &lt;primary&gt;#2d333b&lt;/primary&gt;
        &lt;secondary&gt;#adbac7&lt;/secondary&gt;
        &lt;accent&gt;#539bf5&lt;/accent&gt;
      &lt;/colors&gt;
      &lt;text&gt;
        &lt;![CDATA[
        &lt;data_row_id&gt;/
        |-- data/
        |   |-- sample.npy
        |   |-- dataframe2.csv
        |   |-- dataframe.csv      # Generated .csv and/or npy files
        |-- scripts/
        |   |-- data_gen.py        # Data generation script
        |   |-- viz.py             # Visualization script
        |-- outputs/
        |   |-- dashboard.html     # Interactive html generated using viz.py
        ]]&gt;
      &lt;/text&gt;
    &lt;/image&gt;
  &lt;/visual_elements&gt;
  &lt;summary&gt;
    This document provides evaluation instructions for a Python data visualization task. The goal is to find a reference dashboard/graph, create a relevant prompt, generate synthetic data using pandas/numpy, and build an interactive visualization with Plotly. The final deliverables (data script, visualization script, and HTML output) are to be pasted into the Labelbox editor. The instructions emphasize storytelling, visual quality, and adherence to a specific folder structure and style guidelines.
  &lt;/summary&gt;
  &lt;link url="[Evaluation Labeling Walkthrough] Advanced Capabilities v2" type="external"&gt;Walkthrough Video&lt;/link&gt;
  &lt;link url="full_example_url_placeholder" type="external"&gt;A full example is available here.&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Positive Visualization Examples&lt;/title&gt;
  &lt;author&gt;Unknown&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Internal Evaluation Use Only&lt;/license&gt;
  &lt;summary&gt;
    Este documento é um catálogo visual de exemplos positivos de dashboards e gráficos complexos. Ele serve como uma referência de qualidade para tarefas de visualização de dados, exibindo uma variedade de tipos de gráficos, incluindo painéis financeiros, infográficos de mercado, mapas geográficos, diagramas de Sankey e rodas de sabor, todos demonstrando uma narrativa clara e design polido.
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Lending Operations Dashboard&lt;/title&gt;
      &lt;visualization&gt;
        Um painel de controle financeiro com tema claro que monitora as operações de empréstimo em tempo real. [cite_start]Ele usa cartões de KPI, gráficos de área, gráficos de linha e um gráfico de funil para apresentar o portfólio de empréstimos, volume de aplicações e o pipeline de aprovação[cite: 1, 2].
      &lt;/visualization&gt;
      &lt;metric&gt;
        &lt;label&gt;Total Loan Portfolio&lt;/label&gt;
        &lt;value&gt;$25.5M&lt;/value&gt;
      &lt;/metric&gt;
      &lt;metric&gt;
        &lt;label&gt;Applications&lt;/label&gt;
        &lt;value&gt;12K+&lt;/value&gt;
      &lt;/metric&gt;
      &lt;metric&gt;
        &lt;label&gt;Approval Rate&lt;/label&gt;
        &lt;value&gt;81%&lt;/value&gt;
      &lt;/metric&gt;
      &lt;metric&gt;
        &lt;label&gt;Default Rate&lt;/label&gt;
        &lt;value&gt;3.4%&lt;/value&gt;
      &lt;/metric&gt;
      &lt;chart&gt;
        &lt;type&gt;funnel&lt;/type&gt;
        &lt;title&gt;Application Pipeline&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;area&lt;/type&gt;
        &lt;title&gt;Application Volume&lt;/title&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Regional Sales Performance&lt;/title&gt;
      &lt;visualization&gt;
        Um painel de desempenho de vendas com tema escuro. [cite_start]Ele combina um grande KPI para a cota geral, um gráfico de linha para a tendência de receita mensal, uma lista de melhores desempenhos e um mapa geográfico para o desempenho global de vendas[cite: 13, 16].
      &lt;/visualization&gt;
      &lt;metric&gt;
        &lt;label&gt;Overall Quota&lt;/label&gt;
        &lt;value&gt;87%&lt;/value&gt;
      &lt;/metric&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Monthly Revenue Trend&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;map&lt;/type&gt;
        &lt;title&gt;Global Sales Performance&lt;/title&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Social Media Engagement Dashboard&lt;/title&gt;
      &lt;visualization&gt;
        Um painel de mídia social com tema escuro que rastreia o alcance global e o engajamento. [cite_start]Ele usa uma combinação de cartões de KPI, um mapa geográfico, um gráfico de radar para interesses dos seguidores, e um gráfico de barras agrupadas para dados demográficos de audiência[cite: 62, 70, 73, 78].
      &lt;/visualization&gt;
       &lt;metric&gt;
        &lt;label&gt;Total Likes&lt;/label&gt;
        &lt;value&gt;350,809&lt;/value&gt;
      &lt;/metric&gt;
       &lt;metric&gt;
        &lt;label&gt;Engagement Rate&lt;/label&gt;
        &lt;value&gt;48.07%&lt;/value&gt;
      &lt;/metric&gt;
       &lt;metric&gt;
        &lt;label&gt;Total Users Reached&lt;/label&gt;
        &lt;value&gt;840,466&lt;/value&gt;
      &lt;/metric&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;SaaS Financial Performance Dashboard&lt;/title&gt;
      &lt;visualization&gt;
        Um painel financeiro para um negócio de SaaS, utilizando um tema escuro. Apresenta KPIs chave na parte superior, como MRR e Churn. [cite_start]Os gráficos principais incluem um gráfico de área empilhada para tendências de aquisição, uma análise de cascata do ARR, um funil de aquisição de clientes e um heatmap para análise de retenção de coorte[cite: 87, 88, 89, 90, 91, 104, 95, 110].
      &lt;/visualization&gt;
        &lt;metric&gt;
            &lt;label&gt;Monthly Recurring Revenue&lt;/label&gt;
            &lt;value&gt;$3.2M&lt;/value&gt;
        &lt;/metric&gt;
        &lt;metric&gt;
            &lt;label&gt;Net Revenue Retention&lt;/label&gt;
            &lt;value&gt;112%&lt;/value&gt;
        &lt;/metric&gt;
        &lt;metric&gt;
            &lt;label&gt;LTV:CAC Ratio&lt;/label&gt;
            &lt;value&gt;4.8x&lt;/value&gt;
        &lt;/metric&gt;
    &lt;/dashboard&gt;
    &lt;chart&gt;
        &lt;type&gt;sankey&lt;/type&gt;
        &lt;title&gt;How Nike Inc (NKE) Makes Its Money&lt;/title&gt;
        &lt;visualization&gt;
            [cite_start]Um diagrama de Sankey detalhando o fluxo financeiro da Nike em 28-05-2023[cite: 141]. [cite_start]Ele rastreia a receita de diferentes segmentos de produtos (Calçados, Vestuário, etc.) através do Custo dos Produtos Vendidos (COGS) e Despesas Operacionais para chegar ao Lucro Líquido[cite: 140, 143, 153, 159, 149].
        &lt;/visualization&gt;
    &lt;/chart&gt;
     &lt;dashboard&gt;
      &lt;title&gt;Global Oil Benchmark Infographic&lt;/title&gt;
      &lt;visualization&gt;
        [cite_start]Um infográfico complexo sobre o mercado de petróleo, focando na inclusão do WTI Midland no benchmark Dated Brent[cite: 173]. [cite_start]Ele usa um mapa global para mostrar o alcance, gráficos de barras e de bolhas para comparações, e gráficos de linha para sincronia de preços[cite: 218, 178, 179, 197].
      &lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;chart&gt;
      &lt;type&gt;sunburst&lt;/type&gt;
      &lt;title&gt;Aroma, Taste, and Mouthfeel Wheel&lt;/title&gt;
      &lt;visualization&gt;
        Uma roda de sabor, provavelmente para café ou vinho, que categoriza a experiência sensorial. [cite_start]Ela se divide em Aroma, Sabor e Sensação na Boca, com cada categoria se ramificando em descritores mais específicos de forma hierárquica[cite: 529, 541, 542].
      &lt;/visualization&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Data Visualization &amp;amp; Dashboards&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Showcase of Examples&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento apresenta uma galeria de aplicações e painéis interativos construídos com o Plotly Dash[cite: 5]. [cite_start]Os exemplos abrangem uma ampla gama de setores e casos de uso, incluindo a análise de custos de planos de saúde [cite: 13, 14][cite_start], disparidade salarial de gênero [cite: 17, 24][cite_start], análise de dados de filmes do IMDb [cite: 39, 40][cite_start], dados geoespaciais de corridas da Uber [cite: 88, 89][cite_start], visualização de dados climáticos [cite: 92, 93][cite_start], métricas de plataformas de streaming [cite: 207, 208] e muito mais, demonstrando a versatilidade da ferramenta para criar visualizações de dados interativas.
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Medical Provider Charges Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os custos de provedores de saúde em diferentes estados[cite: 14].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Gender Pay Gap Report&lt;/title&gt;
      &lt;author&gt;Ann Marie&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Analisa a diferença entre a média e mediana do pagamento por hora entre homens e mulheres[cite: 24].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IMDb Analysis for Movies &amp;amp; Series&lt;/title&gt;
      &lt;author&gt;TFI&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza e analisa dados do IMDb para os principais filmes e séries e obtém recomendações[cite: 40].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IOT Rainfall App&lt;/title&gt;
      &lt;author&gt;Tanima&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora dados de precipitação neste painel Python IOT[cite: 53].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Clinical Patient Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora o volume de pacientes da clínica por hora do dia, tempo de espera e pontuação de cuidado[cite: 64].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Retail Demand Transference&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Prevê a demanda de produtos de consumo para varejistas em diferentes localidades de lojas[cite: 81].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Uber Rides Geospatial Data&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os locais de embarque de milhões de corridas da Uber em NYC[cite: 89].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;CBE Climate Visualization App&lt;/title&gt;
      &lt;author&gt;Center for the Built Environment (Berkeley)&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados climáticos com séries temporais, mapas de calor, mapas, rosas dos ventos e mais[cite: 93].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;HERA Radio Telescope &amp;amp; Weather App&lt;/title&gt;
      &lt;author&gt;HERA Reionization Team&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados científicos e geoespaciais em tempo real do conjunto de radiotelescópios HERA[cite: 142].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;World Atlas&lt;/title&gt;
      &lt;author&gt;Dan Baker&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza centenas de indicadores entre países nesta aplicação de múltiplas páginas[cite: 150].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Dash Molstar for SARS-COV-2&lt;/title&gt;
      &lt;author&gt;Simon Sun&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Exemplo de uso do Dash-Molstar para visualizar estruturas moleculares e dados em aplicações web[cite: 169].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Repair Cafe Dashboard&lt;/title&gt;
      &lt;author&gt;Natalia&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza os dados do Repair Café para rastrear e explorar os resultados de reparos de dispositivos[cite: 217].&lt;/visualization&gt;
    &lt;/dashboard&gt;
     &lt;dashboard&gt;
      &lt;title&gt;An Analytics App on USA Flights Data&lt;/title&gt;
      &lt;author&gt;Unknown&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explore esta aplicação web para descobrir dados importantes relacionados a voos de passageiros nos EUA[cite: 227].&lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Predictive Analytics, Forecasting&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Showcase of Examples&lt;/license&gt;
  &lt;section&gt;
    &lt;title&gt;Predictive Analytics, Forecasting&lt;/title&gt;
    &lt;paragraph&gt;
      Enquanto ferramentas de BI tradicionais respondem "O que aconteceu?", o Plotly e o Dash respondem "E se?". [cite_start]Explore estes exemplos de Python em análise preditiva e previsão. [cite: 96, 97]
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;summary&gt;
    Este documento da Plotly exibe aplicações de análise preditiva e previsão construídas com Dash. Ele destaca dois exemplos principais: um preditor de idade cronológica que utiliza deep learning e uma ferramenta interativa para ajustar modelos de séries temporais SARIMA, demonstrando como o Python pode ser usado para análises avançadas do tipo "E se?".
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Harvard Age Prediction&lt;/title&gt;
      &lt;author&gt;Theo Vincent&lt;/author&gt;
      &lt;visualization&gt;
        [cite_start]Uma aplicação que apresenta preditores de idade cronológica utilizando ferramentas de deep learning. [cite: 107] A interface permite selecionar a forma como uma amostra é definida e exibe o desempenho da previsão.
      &lt;/visualization&gt;
      &lt;metric&gt;
        &lt;label&gt;Average R²&lt;/label&gt;
        &lt;value&gt;0.611 +- 0.229&lt;/value&gt;
      &lt;/metric&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;SARIMA Tuner&lt;/title&gt;
      &lt;author&gt;Gabriele&lt;/author&gt;
      &lt;visualization&gt;
        [cite_start]Uma aplicação para aprender sobre os passos necessários para trabalhar com dados de séries temporais, ajustando modelos SARIMA para fazer previsões. [cite: 125] [cite_start]A ferramenta guia o usuário através das etapas de "1-Data set up", "2-Stationarity" e "3-Model Selection". [cite: 113, 114, 115]
      &lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Model interpretability - Time series&lt;/title&gt;
  &lt;author&gt;multidimensionality-of-aging.net project&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Research Application&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento exibe um painel de controle interativo da web projetado para a interpretabilidade de um modelo de Rede Neural Convolucional 1D (1DCNN)[cite: 995]. [cite_start]A aplicação permite que os usuários explorem como o modelo analisa dados de séries temporais (especificamente, pressão arterial [cite: 1021, 1032]) para prever métricas relacionadas ao envelhecimento. [cite_start]Os usuários podem filtrar os resultados por várias dimensões de envelhecimento, dados demográficos e taxas de envelhecimento para visualizar o impacto nos dados e nas previsões do modelo[cite: 989, 996, 998, 1000].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Painel de Controle de Interpretabilidade Interativa&lt;/title&gt;
    &lt;paragraph&gt;
      Esta aplicação web fornece uma interface para analisar a interpretabilidade de um modelo de previsão de idade baseado em séries temporais. Ela permite a seleção de diferentes coortes e parâmetros para visualizar os dados de entrada e as previsões do modelo correspondentes.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Dimensões de Envelhecimento:&lt;/b&gt; Arterial, Cardíaca, Atividade Física[cite: 990].
      &lt;/item&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Filtros Demográficos:&lt;/b&gt; Sexo (Masculino, Feminino) e Faixa Etária (Jovem, Meia-idade, Idoso)[cite: 996, 997, 998, 999].
      &lt;/item&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Filtros de Envelhecimento:&lt;/b&gt; Taxa de envelhecimento (Acelerada, Normal, Desacelerada)[cite: 1000, 1001].
      &lt;/item&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Seleção de Dados:&lt;/b&gt; Permite a seleção de amostras e canais de dados específicos[cite: 1002, 1011].
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Model interpretability - Time series&lt;/title&gt;
      &lt;metric&gt;
        &lt;label&gt;1DCNN Model Performance (R²)&lt;/label&gt;
        &lt;value&gt;0.41 +- 0.004&lt;/value&gt;
      &lt;/metric&gt;
      &lt;visualization&gt;
        [cite_start]O painel apresenta um gráfico de dispersão que plota a pressão arterial normalizada em função do tempo[cite: 1021, 1030]. Os pontos de dados no gráfico representam a série temporal para a amostra selecionada. A interface é projetada para explorar como diferentes subgrupos de dados influenciam a interpretabilidade do modelo.
      &lt;/visualization&gt;
      &lt;chart&gt;
        &lt;type&gt;scatter&lt;/type&gt;
        &lt;title&gt;Blood Pressure Over Time&lt;/title&gt;
        &lt;data&gt;
          &lt;label&gt;X-Axis&lt;/label&gt;
          &lt;value&gt;Time (10 min / unit)&lt;/value&gt;
        &lt;/data&gt;
        &lt;data&gt;
          &lt;label&gt;Y-Axis&lt;/label&gt;
          &lt;value&gt;blood pressure [normalized]&lt;/value&gt;
        &lt;/data&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;link url="https://www.multidimensionality-of-aging.net/model_interpretability/time_series" type="external"&gt;Link para a Aplicação Web&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Sarima Tuner&lt;/title&gt;
  &lt;author&gt;Gabriele (inferred), using Plotly Dash&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Web Application&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]O "Sarima Tuner" é uma aplicação web interativa de 4 etapas, criada com Plotly Dash, que guia os usuários através do processo completo de previsão de séries temporais usando modelos SARIMA[cite: 3, 44, 51]. [cite_start]A ferramenta abrange desde a configuração e visualização inicial dos dados, passando pela transformação para garantir a estacionariedade, até a seleção de modelos por meio de uma busca em grade de hiperparâmetros e, finalmente, a geração e análise de previsões[cite: 53, 56, 59, 61].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Visão Geral e Fluxo de Trabalho da Aplicação&lt;/title&gt;
    &lt;paragraph&gt;
      Esta aplicação permite a um usuário passar por todas as etapas necessárias para realizar uma previsão de série temporal com um modelo SARIMA. O processo é dividido em quatro seções principais.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;
        &lt;b&gt;1. Configuração dos Dados:&lt;/b&gt; O usuário começa selecionando um conjunto de dados. [cite_start]O padrão é o conjunto de dados "Air passenger", mas qualquer arquivo .csv pode ser usado[cite: 53, 54, 55]. [cite_start]A série temporal inicial é então visualizada em um gráfico de linhas[cite: 687].
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;2. [cite_start]Estacionariedade:&lt;/b&gt; Esta etapa fornece ferramentas para transformar os dados para torná-los estacionários[cite: 56]. [cite_start]As transformações disponíveis incluem log e diferenciação[cite: 57]. [cite_start]A estacionariedade é avaliada usando o teste Augmented Dickey-Fuller [cite: 57, 720][cite_start], juntamente com gráficos de Autocorrelação (ACF) e Autocorrelação Parcial (PACF) para ajudar a identificar parâmetros adequados para o modelo[cite: 58].
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;3. [cite_start]Seleção do Modelo:&lt;/b&gt; Aqui, uma busca em grade (grid search) de hiperparâmetros é realizada para encontrar o melhor modelo SARIMA(p,d,q; P,D,Q,m)[cite: 12, 59]. [cite_start]O usuário pode definir a porcentagem de divisão para treino [cite: 13, 14] [cite_start]e os intervalos para os parâmetros regulares e sazonais[cite: 17, 20]. [cite_start]A aplicação exibe os 10 modelos de melhor desempenho com base na pontuação AIC (Akaike Information Criterion)[cite: 60].
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;4. [cite_start]Previsão:&lt;/b&gt; Na etapa final, o melhor modelo da busca em grade é automaticamente ajustado aos dados de treino para fazer previsões[cite: 62, 64]. [cite_start]A aplicação exibe um gráfico com os valores reais, as previsões para os conjuntos de treino e teste [cite: 64][cite_start], e permite gerar previsões futuras[cite: 639]. [cite_start]Também são mostrados gráficos ACF e PACF para os resíduos do modelo para análise de diagnóstico[cite: 65, 660].
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Interface do Sarima Tuner&lt;/title&gt;
      &lt;visualization&gt;
        A aplicação é apresentada como uma interface web de múltiplas abas, onde cada aba corresponde a uma etapa do processo de modelagem de séries temporais. Ela utiliza vários componentes interativos, como seletores, campos de entrada numérica e botões, juntamente com uma variedade de gráficos para visualização de dados e resultados do modelo.
      &lt;/visualization&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Dataset Linechart&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Transformed Data Linechart&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;bar&lt;/type&gt;
        &lt;title&gt;Autocorrelation (ACF)&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;bar&lt;/type&gt;
        &lt;title&gt;Partial Autocorrelation (PACF)&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Final Model: Fit &amp;amp; Prediction&lt;/title&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;link url="https://gabria1.pythonanywhere.com" type="external"&gt;URL da Aplicação Principal&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Interactive html export in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Documentation&lt;/license&gt;
  &lt;summary&gt;
    Este documento é um tutorial da Plotly que explica como exportar figuras interativas para arquivos HTML usando Python. Ele aborda vários métodos, incluindo salvar um arquivo HTML autônomo com o método `write_html`, controlar o tamanho do arquivo, incorporar gráficos em templates HTML personalizados usando Jinja2, e implementar uma funcionalidade de download de HTML em aplicações Dash. O documento fornece exemplos de código detalhados para cada técnica.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Salvando Figuras como um Arquivo HTML Autônomo&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]Figuras da Plotly podem ser salvas como arquivos HTML que permanecem totalmente interativos quando abertos em um navegador[cite: 421, 426, 431]. [cite_start]Isso é feito usando o método `write_html`[cite: 430]. [cite_start]Por padrão, o arquivo HTML resultante é totalmente autônomo, contendo uma cópia embutida da biblioteca Plotly.js, o que o torna grande (mais de 5MB)[cite: 436, 437].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      fig = px.scatter(x=range(10), y=range(10))
      fig.write_html("path/to/file.html")
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Incorporando Saída da Plotly em HTML com Jinja2&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]É possível inserir a saída da Plotly em templates HTML usando Jinja2[cite: 439]. [cite_start]Para isso, use o método `.to_html(full_html=False)` para gerar apenas o HTML do gráfico, sem a estrutura completa da página, e passe-o para o template[cite: 441, 442]. [cite_start]Primeiro, crie um arquivo de template HTML com um marcador de posição Jinja como `{{ fig }}`[cite: 444, 445].
    &lt;/paragraph&gt;
    &lt;code&gt;
      &amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset="utf-8" /&amp;gt;
          &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;h1&amp;gt;Here's a Plotly graph!&amp;lt;/h1&amp;gt;
          {{ fig }}
          &amp;lt;p&amp;gt;And here's some text after the graph.&amp;lt;/p&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    &lt;/code&gt;
    &lt;paragraph&gt;
      [cite_start]Em seguida, use um script Python para ler o template, renderizar o gráfico dentro dele e salvar o resultado em um novo arquivo HTML[cite: 478].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      from jinja2 import Template

      # Carregar dados e criar figura
      data_canada = px.data.gapminder().query("country == 'Canada'")
      fig = px.bar(data_canada, x='year', y='pop')

      # Definir caminhos e dados para o template
      output_html_path = r"/path/to/output.html"
      input_template_path = r"/path/to/template.html"
      plotly_jinja_data = {"fig": fig.to_html(full_html=False)}

      # Renderizar o template com a figura
      with open(output_html_path, "w", encoding="utf-8") as output_file:
          with open(input_template_path) as template_file:
              j2_template = Template(template_file.read())
              output_file.write(j2_template.render(plotly_jinja_data))
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Exportação de HTML em Aplicações Dash&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]Dash é a maneira recomendada para construir aplicações analíticas com figuras da Plotly[cite: 495]. É possível implementar uma funcionalidade de download de HTML dentro de uma aplicação Dash. [cite_start]O exemplo de código a seguir mostra como criar um botão que permite ao usuário baixar o gráfico exibido como um arquivo HTML[cite: 522, 539].
    &lt;/paragraph&gt;
    &lt;code&gt;
      from dash import Dash, dcc, html
      import plotly.express as px
      from base64 import b64encode
      import io

      app = Dash(__name__)

      buffer = io.StringIO()
      df = px.data.iris()
      fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
      fig.write_html(buffer)

      html_bytes = buffer.getvalue().encode()
      encoded = b64encode(html_bytes).decode()

      app.layout = html.Div([
          dcc.Graph(id="graph", figure=fig),
          html.A(
              html.Button("Download as HTML"),
              id="download",
              href="data:text/html;base64," + encoded,
              download="plotly_figure.html"
          )
      ])
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Documentação Completa de Parâmetros&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]A documentação completa para todos os parâmetros do método `write_html` pode ser acessada diretamente em Python usando a função `help()`[cite: 556]. [cite_start]Os parâmetros principais incluem `file` (o caminho do arquivo ou objeto gravável) e `config` (um dicionário para opções de configuração do Plotly.js)[cite: 561, 563].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;link url="https://plotly.com/python/interactive-html-export/" type="external"&gt;Interactive HTML Export in Python&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;GitHub Issue: Text is cut off on bars where textposition=outside #2001&lt;/title&gt;
  &lt;author&gt;RedShift1&lt;/author&gt;
  &lt;publication_date&gt;2017-09-13&lt;/publication_date&gt;
  &lt;license&gt;GitHub Issue / Bug Report&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento é um relatório de bug do repositório plotly/plotly.js no GitHub, aberto em 13 de setembro de 2017[cite: 1466]. [cite_start]O problema relatado é que os rótulos de texto em gráficos de barras são cortados quando `textposition: 'outside'` é usado nas barras de maior valor[cite: 1467, 1469]. [cite_start]Embora a issue tenha sido fechada rapidamente como uma duplicata[cite: 1488, 1489], os usuários continuaram a encontrar o problema e, ao longo dos anos, contribuíram com várias soluções alternativas eficazes. [cite_start]As soluções incluem usar a opção `cliponaxis: false` [cite: 1497][cite_start], ajustar manualmente o intervalo do eixo ou as margens do gráfico [cite: 1512][cite_start], e usar anotações em vez de texto de barra[cite: 1562].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Relatório de Bug Original&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O usuário 'RedShift1' abriu a issue em 13 de setembro de 2017, relatando que, ao desenhar um gráfico de barras com a opção `textposition: 'outside'`, o texto das barras mais altas é cortado pela borda da área do gráfico[cite: 1466, 1467, 1469]. [cite_start]A issue foi fechada no mesmo dia por um mantenedor, que a marcou como uma duplicata da issue #2000, afirmando que a correção resolveria o problema para gráficos de barras e de dispersão[cite: 1488, 1489]. [cite_start]No entanto, os comentários subsequentes indicam que o problema persistiu para os usuários[cite: 1493].
    &lt;/paragraph&gt;
    &lt;visual_elements&gt;
      &lt;chart&gt;
        &lt;type&gt;bar&lt;/type&gt;
        &lt;title&gt;Exemplo do Bug de Texto Cortado&lt;/title&gt;
        [cite_start]&lt;visualization&gt;Um gráfico de barras vertical onde o rótulo de texto da barra mais alta (valor 5900) é visivelmente cortado no topo[cite: 1469, 1502].&lt;/visualization&gt;
      &lt;/chart&gt;
    &lt;/visual_elements&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Soluções Alternativas da Comunidade&lt;/title&gt;
    &lt;paragraph&gt;
      Ao longo de vários anos, os usuários da comunidade forneceram várias soluções alternativas eficazes para contornar o problema do texto cortado.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Usar `cliponaxis: false`&lt;/b&gt;: Um usuário apontou para um Pull Request relacionado e sugeriu usar a opção `cliponaxis: false` no traço do gráfico de barras para evitar que o texto seja cortado pelo eixo[cite: 1497].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Ajustar a Margem Superior&lt;/b&gt;: Uma solução alternativa é aumentar manualmente a margem superior do layout do gráfico para criar espaço suficiente para o rótulo de texto[cite: 1512].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Expandir o Intervalo do Eixo&lt;/b&gt;: Outra abordagem é estender manualmente o intervalo do eixo y para que ele seja maior que o valor máximo da barra. [cite_start]Isso pode ser feito definindo um valor fixo [cite: 1512] [cite_start]ou calculando dinamicamente um novo máximo (por exemplo, `max_value * 1.1`)[cite: 1559].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Usar Anotações&lt;/b&gt;: Uma solução alternativa "à prova de falhas" é adicionar os rótulos como anotações separadas em vez de usar o parâmetro `textposition`. [cite_start]As anotações não são cortadas da mesma forma[cite: 1562].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;link url="https://github.com/plotly/plotly.js/issues/2001" type="external"&gt;Link para a Issue #2001 no GitHub&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Plotly Python 3D: axes with ticktexts shows only limited numbers of ticks&lt;/title&gt;
  &lt;author&gt;bso&lt;/author&gt;
  &lt;publication_date&gt;2025-07-11&lt;/publication_date&gt;
  &lt;license&gt;Community Forum Post&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento é uma thread do Fórum da Comunidade Plotly onde um usuário relata um problema com gráficos 3D que não exibem todos os rótulos de eixo (`ticktexts`) especificados, mostrando apenas um número limitado[cite: 215, 216]. [cite_start]Outro usuário diagnostica que a causa é o uso de `autorange=False` sem definir manualmente um `range` para o eixo[cite: 253, 256]. [cite_start]A solução, confirmada pelo autor original, é definir explicitamente o `range` do eixo (por exemplo, `range=[0, len(values)]`), o que força a exibição de todos os ticks desejados[cite: 286].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Problema: Exibição Limitada de Ticks em Eixos 3D&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]Em 11 de julho de 2025, o usuário 'bso' postou um problema que estava enfrentando com a versão 4.2.0 do Plotly[cite: 213, 219]. [cite_start]Ao tentar criar um gráfico 3D com nomes de ticks de eixo definidos individualmente usando `ticktext`, os eixos não exibiam mais do que 5 ou 7 ticks, independentemente do número de ticks fornecidos[cite: 215, 216]. [cite_start]O usuário observou que, embora os ticks não fossem visíveis na figura, os valores corretos do eixo estavam presentes no arquivo HTML bruto ao salvar o gráfico[cite: 217].
    &lt;/paragraph&gt;
    &lt;code&gt;
      # Código original com o problema
      def make_axis(id, number):
          return [id+str(i) for i in range(number)]
      def get_3d_axis_dict(values):
          return dict(
              ticktext=[val for val in values],
              nticks=len(values),
              tickmode='array',
              autorange=False,
              tickvals=[i for i in range(len(values))],
          )
      # ... (resto do código de configuração da figura)
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Diagnóstico e Solução&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O usuário 'AIMPED' respondeu, diagnosticando que o problema era causado pelo uso de `autorange=False` sem a especificação de um `range` para o eixo[cite: 251, 253, 256]. Quando `autorange` é definido como `False`, o Plotly requer que um intervalo explícito seja fornecido para renderizar o eixo corretamente.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Solução Proposta:&lt;/b&gt; Manter `autorange=False` e adicionar um parâmetro `range` explícito ao dicionário de configuração do eixo, como `range=[0, len(values)]`[cite: 271].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Alternativa:&lt;/b&gt; Definir `autorange=True`, embora o usuário original tenha notado que isso não atendia à sua necessidade de exibir todos os ticks, pois mostrava apenas os ticks relacionados aos dados[cite: 256, 287].&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;
        # Código corrigido
        def get_3d_axis_dict(values):
            return dict(
                ticktext=[val for val in values],
                nticks=len(values),
                tickmode='array',
                autorange=False,
                range=[0, len(values)],  # Linha adicionada que corrige o problema
                tickvals=[i for i in range(len(values))],
            )
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Confirmação da Correção&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O autor original, 'bso', confirmou que a adição do parâmetro `range` de fato resolveu o problema[cite: 284, 286]. [cite_start]Ele havia presumido incorretamente que, com `autorange=False`, o Plotly exibiria automaticamente todos os `tickvals` fornecidos, mas entendeu a necessidade de definir o intervalo manualmente[cite: 287, 288].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;link url="https://community.plotly.com/t/plotly-python-3d-axes-with-ticktexts-shows-only-limited-numbers-of-ticks/93115/print" type="external"&gt;Link para a Thread do Fórum&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Guia Mestre para Visualização de Dados Profissional com Python&lt;/title&gt;
  &lt;author&gt;Sintetizado de Guias de Projeto Alignerr, Plotly, Pandas, Stack Overflow e outros&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Guia Instrucional Agregado&lt;/license&gt;
  &lt;summary&gt;
    Este guia mestre consolida o conhecimento de múltiplas fontes para fornecer um fluxo de trabalho completo para a criação de visualizações de dados e dashboards de nível profissional usando Python. Ele abrange desde a configuração fundamental do projeto e ambiente, passando pela manipulação avançada de dados com Pandas (usando `groupby` e `melt`), até a criação de visualizações complexas com Plotly, com um foco especial em gráficos sunburst. Adicionalmente, o guia detalha princípios essenciais de design visual, como a seleção de cores acessíveis e o gerenciamento eficaz de rótulos, e conclui com um rigoroso processo de controle de qualidade e submissão final, baseado em um projeto de avaliação do mundo real.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 1: Fundação do Projeto e Fluxo de Trabalho Profissional&lt;/title&gt;
    &lt;paragraph&gt;
      Antes de iniciar o desenvolvimento, é crucial estabelecer uma base sólida para o projeto. Um erro comum, como o uso de um ID de projeto compartilhado, levou a falhas sistêmicas em projetos anteriores, resultando em erros de upload e perda de trabalho. A solução é a geração de um Identificador Único Universal (UUID) para cada projeto.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;&lt;b&gt;Configuração do Ambiente (VS Code)&lt;/b&gt;: É obrigatório verificar se as extensões essenciais como Python, Jupyter e Python Debugger da Microsoft estão instaladas.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Instalação de Bibliotecas&lt;/b&gt;: Instale as bibliotecas aprovadas e necessárias. Bibliotecas como `matplotlib` e `seaborn` são frequentemente proibidas em ambientes de avaliação profissional.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Geração de UUID&lt;/b&gt;: Acesse uma ferramenta como `uuidtools.com` para gerar um UUID v4 único. Este UUID será usado como o nome da pasta principal do projeto e é vital para uploads bem-sucedidos.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Estrutura de Pastas Obrigatória&lt;/b&gt;: Crie uma estrutura de pastas exata para garantir que os scripts encontrem os arquivos corretamente. A estrutura padrão é uma pasta raiz nomeada com o UUID, contendo subpastas `data`, `scripts`, e `outputs`.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 2: Preparação e Manipulação de Dados com Pandas&lt;/title&gt;
    &lt;paragraph&gt;
      A preparação de dados é um pré-requisito para qualquer visualização eficaz. O Pandas é a ferramenta principal para esta fase.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Agrupamento de Dados (`groupby`)&lt;/b&gt;: A operação `groupby` envolve dividir o objeto, aplicar uma função e combinar os resultados. É essencial para calcular operações em grandes volumes de dados agrupados.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Remodelagem de Dados (`melt`)&lt;/b&gt;: A função `melt` é usada para "despivotar" um DataFrame de um formato largo para um formato longo. Isso é útil para preparar dados para bibliotecas de visualização que esperam colunas de identificador e colunas de valor.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Geração de Dados Realistas&lt;/b&gt;: Em vez de usar dados aleatórios sem sentido, crie datasets que contem uma história de negócio coerente. Isso demonstra conhecimento de domínio e resulta em dashboards mais significativos.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 3: Visualização Principal com Gráficos Sunburst da Plotly&lt;/title&gt;
    &lt;paragraph&gt;
      Gráficos sunburst são uma forma elegante e eficaz de visualizar dados hierárquicos usando um layout radial.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;
        &lt;b&gt;Criação Básica (`plotly.express`)&lt;/b&gt;: A maneira mais direta de criar um gráfico sunburst é com `px.sunburst`, usando o parâmetro `path` para definir a hierarquia a partir de colunas em um DataFrame retangular.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Controle Avançado (`graph_objects`)&lt;/b&gt;: Para uma customização mais sofisticada, use `go.Sunburst`. Este método requer uma estrutura de dados explícita com `labels` (os nós) e `parents` (as relações pai-filho), oferecendo maior controle sobre a aparência e o comportamento.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Solução de Problemas: Quebra de Texto (Text Wrapping)&lt;/b&gt;: Um problema comum é que rótulos de texto longos são cortados. Como o Plotly não suporta quebra de texto automática, a solução é pré-processar os rótulos inserindo a tag HTML `&lt;br&gt;` para criar quebras de linha manuais. Isso pode ser alcançado com uma função que utiliza a biblioteca `textwrap` do Python.
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 4: Design, Estética e Acessibilidade&lt;/title&gt;
    &lt;paragraph&gt;
      Um bom design visual é crucial para a clareza e o profissionalismo. As escolhas de cores e tipografia devem ser deliberadas e focadas na acessibilidade e na narrativa dos dados.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Seleção de Paletas de Cores&lt;/b&gt;: Opte por paletas profissionais e harmoniosas, evitando cores excessivamente brilhantes ou que causam distração. É fundamental usar esquemas de cores que sejam amigáveis para daltônicos; ferramentas como o `Viz Palette` podem ser usadas para testar a acessibilidade.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Tipos de Paletas&lt;/b&gt;: Use paletas categóricas para distinguir grupos distintos, sequenciais para dados progressivos e divergentes para dados com um ponto central neutro.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Gerenciamento de Rótulos&lt;/b&gt;: Garanta que os rótulos sejam concisos, legíveis e nunca cortados. Use a propriedade `uniformtext` no Plotly com `mode='hide'` para ocultar automaticamente rótulos que não cabem em seus segmentos.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Requisitos de Formatação&lt;/b&gt;: Em contextos profissionais, requisitos explícitos como "títulos em negrito" são comuns e devem ser rigorosamente seguidos para evitar penalidades na avaliação.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 5: Controle de Qualidade e Submissão Final&lt;/title&gt;
    &lt;paragraph&gt;
      A fase final é uma verificação rigorosa para garantir que todos os requisitos técnicos e de qualidade foram atendidos antes da entrega.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;&lt;b&gt;Checklist de Verificação Técnica&lt;/b&gt;: Valide a estrutura de pastas, a geração correta de todos os arquivos (`.csv`, `.json`, `.html`), e a execução sem erros dos scripts `data_gen.py` e `viz.py`.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Processo de Upload&lt;/b&gt;: Use o script de upload fornecido, inserindo seu UUID único quando solicitado. Após a conclusão, anote cuidadosamente todos os caminhos `gs://` gerados, pois eles são necessários para a submissão.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Submissão no Labelbox&lt;/b&gt;: Preencha cada campo no formulário de submissão com precisão, incluindo a URL da imagem de referência, o prompt do usuário e os URIs `gs://` para cada artefato do projeto. Verifique novamente se o UUID em todos os caminhos está correto.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Erros Fatais a Evitar&lt;/b&gt;: Erros como usar um UUID incorreto, ter uma estrutura de pastas errada, ou usar bibliotecas proibidas podem levar à reprovação automática.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Um Guia Prático para Cores em Visualização de Dados&lt;/title&gt;
  &lt;author&gt;Sintetizado da Documentação da Simplified Science Publishing e PatternFly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Guia Instrucional&lt;/license&gt;
  &lt;summary&gt;
    Este guia aborda os princípios para selecionar paletas de cores eficazes e acessíveis para visualização de dados. Ele detalha a importância da cor para a narrativa e acessibilidade, apresenta ferramentas como Viz Palette e Color Brewer para testes, explica as propriedades das cores (matiz, saturação, luminosidade) e fornece um processo passo a passo e exemplos concretos de esquemas de cores profissionais.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Por Que a Cor é Importante: Narrativa e Acessibilidade&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]A cor é um elemento crucial no design de gráficos e visualizações de dados, pois é uma ferramenta poderosa para contar histórias[cite: 1207]. [cite_start]A escolha certa das cores melhora a compreensão do público e torna o trabalho acessível a pessoas com Deficiência de Visão de Cores (CVD), também conhecida como daltonismo[cite: 1206]. [cite_start]A CVD é uma ocorrência comum, afetando aproximadamente 1 em cada 12 homens e 1 em cada 200 mulheres[cite: 1216].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Princípios para a Seleção Eficaz de Cores&lt;/title&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Contraste&lt;/b&gt;: Você pode usar qualquer combinação de cores, desde que sejam altamente contrastantes[cite: 1227]. [cite_start]O contraste pode ser criado ajustando as três principais características da cor: matiz, saturação e luminosidade[cite: 1228]. [cite_start]Ao usar escala de cinza, é fundamental garantir que haja uma diferença de saturação de aproximadamente 15-30% entre as cores[cite: 1497].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Cores Opostas&lt;/b&gt;: Escolher cores de lados opostos do círculo cromático é uma das melhores maneiras de criar combinações de cores que são acessíveis para pessoas com daltonismo e outras dificuldades de percepção de cores[cite: 1221, 1222].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Códigos de Cores&lt;/b&gt;: Para garantir consistência entre diferentes plataformas e ferramentas (como Adobe Illustrator, Excel, PowerPoint, etc.), é importante usar códigos de cores[cite: 1241]. [cite_start]O código "HEX" é um código de seis dígitos que pode ser usado para identificar as cores exatas que você deseja manter consistentes[cite: 1241].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Um Fluxo de Trabalho Prático para Escolher Paletas&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O processo a seguir pode ser usado para criar sua própria paleta de cores científica[cite: 1508]:
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 1&lt;/b&gt;: Escolha uma paleta de cores que pareça boa para você e que melhor represente sua história de dados[cite: 1510].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 2&lt;/b&gt;: Teste as cores em uma ferramenta como o **Viz Palette** para ver como elas afetarão um público com deficiência de visão de cores[cite: 1511, 1248]. [cite_start]O **Color Brewer** é outra ferramenta excelente para testar paletas de cores, especialmente para mapas e dados cartográficos[cite: 1450, 1451, 1452].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 3&lt;/b&gt;: Ajuste a cor, matiz e saturação no Viz Palette até que não haja conflitos de cores[cite: 1512].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 4&lt;/b&gt;: Aplique as cores finais à sua plataforma de visualização de dados, destacando o ponto principal de seus dados[cite: 1513].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Exemplos de Paletas e Casos de Uso&lt;/title&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Paletas de Sistemas Padrão&lt;/b&gt;: Alguns sistemas de design, como o PatternFly, fornecem um ciclo de cores padrão para gráficos. [cite_start]Por exemplo, quando há mais de 6 grupos, o PatternFly usa automaticamente um ciclo de cores que inclui azul, verde, azul-petróleo, roxo e amarelo[cite: 503].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Sequenciais&lt;/b&gt;: Ideal para dados que têm uma progressão (por exemplo, de baixo para alto). [cite_start]Um exemplo é uma combinação de azul claro, médio e escuro[cite: 1279, 1303].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Qualitativas/Categóricas&lt;/b&gt;: Usadas para categorias distintas sem uma ordem inerente. [cite_start]Um exemplo inclui uma combinação de Azul, Laranja e Cinza[cite: 1299, 1300].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Paletas Divergentes&lt;/b&gt;: Adequadas para dados com um ponto médio neutro, como destacar desvios[cite: 1325].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Escala de Cinza&lt;/b&gt;: Uma ótima opção padrão quando usada com contraste suficiente[cite: 1495, 1496]. [cite_start]Exemplos de códigos HEX para uma paleta de cinza são `#b8b8b8` (cinza claro) e `#707070` (cinza escuro)[cite: 1276].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;link url="https://projects.susielu.com/viz-palette" type="external"&gt;Viz Palette Tool&lt;/link&gt;
  &lt;link url="https://colorbrewer2.org/" type="external"&gt;Color Brewer Tool&lt;/link&gt;
&lt;/web_content&gt;

</content>
      </file>
      <file name="pyvy_2xA.txt" path="pyvy_main/pyvy_2xA.txt" type="txt">
        <content>&lt;web_content&gt;
  &lt;title&gt;EVALUATION ONLY - Labeling Instructions&lt;/title&gt;
  &lt;author&gt;Alignerr&lt;/author&gt;
  &lt;publication_date&gt;2025-07-12&lt;/publication_date&gt;
  &lt;license&gt;Internal Evaluation Use Only&lt;/license&gt;
  &lt;section&gt;
    &lt;title&gt;Objective&lt;/title&gt;
    &lt;paragraph&gt;
      This is a Python evaluation focused on data visualization and storytelling. The main task is to recreate a visual similar to a reference image, telling the same story using a dummy dataset. This involves creating Python scripts for data generation and visualization. An input prompt that would naturally produce the created visual must also be written.
    &lt;/paragraph&gt;
    &lt;paragraph&gt;
      IMPORTANT UPDATE AS OF JULY 12TH: An upload script is no longer used. The contents of the scripts and HTML file are to be copy-pasted into the Labelbox editor.
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Labeling Steps&lt;/title&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;
        &lt;b&gt;Find and Analyze the Dashboard/Graph:&lt;/b&gt; Search the web for a reference image of a business-related dashboard or graph that matches the given chart description. Obtain the direct URL to the image. The objective is to creatively expand on this reference, capturing core features while developing realistic datasets and visualizations.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Generate a Prompt:&lt;/b&gt; Write a simple, open-ended, natural, and practical user-style question or instruction that the reference image would answer. This prompt frames the data story.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Generate Data To Tell the Business Story:&lt;/b&gt; Write a data creation script (data_gen.py) using only pandas and numpy. It must generate at least two datasets (as DataFrames or Numpy arrays) that tell a story similar to the reference image.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Recreate the Visualization:&lt;/b&gt; Write a visualization script (viz.py) using only pandas, numpy, and plotly. This script reads the generated data and outputs a single interactive HTML file (dashboard.html).
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Upload Files:&lt;/b&gt; Copy and paste the contents of the data generation script, visualization script, and the generated HTML file into the Labelbox platform's left side panel. The generated .csv/.npy files are not needed.
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Prompt Examples&lt;/title&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;&lt;b&gt;Prompt Topic&lt;/b&gt;&lt;/cell&gt;
        &lt;cell&gt;&lt;b&gt;Story &amp;amp; Visuals&lt;/b&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Show how global electric-vehicle (EV) adoption has evolved since 2015 and predict the next five years."&lt;/cell&gt;
        &lt;cell&gt;Multi-line time-series of unit sales by region, Stacked area of battery chemistries, Sankey of supply-chain flows, Heat-map of EV market-share by country.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Analyze hospital network capacity vs. infectious-disease outbreaks during winter seasons."&lt;/cell&gt;
        &lt;cell&gt;Dual-axis line (ICU beds vs. cases), Correlation heat-map of symptoms &amp;amp; test positivity, Box-whisker of LOS by diagnosis group.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Contrast same-day vs. two-day e-commerce delivery performance during holiday peaks."&lt;/cell&gt;
        &lt;cell&gt;Violin plot of delivery times, Pareto of top delay causes, Time-series forecast of warehouse backlog.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"Track sustainable-aviation-fuel (SAF) usage across the airline industry and project carbon savings."&lt;/cell&gt;
        &lt;cell&gt;Waterfall of CO2 reductions, Treemap of SAF feedstocks, Monte Carlo projection of carbon offset targets.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Visualization Style Guidelines&lt;/title&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Typography:&lt;/b&gt; Titles MUST be bold, with properly formatted legends and labels.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Aesthetics:&lt;/b&gt; Organize layout using visual containers (e.g., cards, sections). Use depth thoughtfully via shadows or gradients for visual hierarchy.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Storytelling:&lt;/b&gt; Establish a clear narrative flow, starting with high-level KPIs and drilling down into details. Data elements should feel connected.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Complexity:&lt;/b&gt; Dashboards must match the visual density and insight variety of provided examples. Avoid oversimplification.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Layout:&lt;/b&gt; No overlapping elements or cut-off text. Ensure consistent padding, margin, and spacing.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Legends:&lt;/b&gt; Ensure legends are clearly displayed, boxed if appropriate, with well-organized placement.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Color Palette:&lt;/b&gt; Use a professional and aesthetically pleasing color scheme that complements the data and enhances readability.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Overall Quality:&lt;/b&gt; The final plot should be polished and suitable for a presentation or publication.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;visual_elements&gt;
    &lt;image&gt;
      &lt;url&gt;local_file_image&lt;/url&gt;
      &lt;dimensions&gt;
        &lt;width&gt;unknown&lt;/width&gt;
        &lt;height&gt;unknown&lt;/height&gt;
      &lt;/dimensions&gt;
      &lt;colors&gt;
        &lt;primary&gt;#2d333b&lt;/primary&gt;
        &lt;secondary&gt;#adbac7&lt;/secondary&gt;
        &lt;accent&gt;#539bf5&lt;/accent&gt;
      &lt;/colors&gt;
      &lt;text&gt;
        &lt;![CDATA[
        &lt;data_row_id&gt;/
        |-- data/
        |   |-- sample.npy
        |   |-- dataframe2.csv
        |   |-- dataframe.csv      # Generated .csv and/or npy files
        |-- scripts/
        |   |-- data_gen.py        # Data generation script
        |   |-- viz.py             # Visualization script
        |-- outputs/
        |   |-- dashboard.html     # Interactive html generated using viz.py
        ]]&gt;
      &lt;/text&gt;
    &lt;/image&gt;
  &lt;/visual_elements&gt;
  &lt;summary&gt;
    This document provides evaluation instructions for a Python data visualization task. The goal is to find a reference dashboard/graph, create a relevant prompt, generate synthetic data using pandas/numpy, and build an interactive visualization with Plotly. The final deliverables (data script, visualization script, and HTML output) are to be pasted into the Labelbox editor. The instructions emphasize storytelling, visual quality, and adherence to a specific folder structure and style guidelines.
  &lt;/summary&gt;
  &lt;link url="[Evaluation Labeling Walkthrough] Advanced Capabilities v2" type="external"&gt;Walkthrough Video&lt;/link&gt;
  &lt;link url="full_example_url_placeholder" type="external"&gt;A full example is available here.&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Positive Visualization Examples&lt;/title&gt;
  &lt;author&gt;Unknown&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Internal Evaluation Use Only&lt;/license&gt;
  &lt;summary&gt;
    Este documento é um catálogo visual de exemplos positivos de dashboards e gráficos complexos. Ele serve como uma referência de qualidade para tarefas de visualização de dados, exibindo uma variedade de tipos de gráficos, incluindo painéis financeiros, infográficos de mercado, mapas geográficos, diagramas de Sankey e rodas de sabor, todos demonstrando uma narrativa clara e design polido.
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Lending Operations Dashboard&lt;/title&gt;
      &lt;visualization&gt;
        Um painel de controle financeiro com tema claro que monitora as operações de empréstimo em tempo real. [cite_start]Ele usa cartões de KPI, gráficos de área, gráficos de linha e um gráfico de funil para apresentar o portfólio de empréstimos, volume de aplicações e o pipeline de aprovação[cite: 1, 2].
      &lt;/visualization&gt;
      &lt;metric&gt;
        &lt;label&gt;Total Loan Portfolio&lt;/label&gt;
        &lt;value&gt;$25.5M&lt;/value&gt;
      &lt;/metric&gt;
      &lt;metric&gt;
        &lt;label&gt;Applications&lt;/label&gt;
        &lt;value&gt;12K+&lt;/value&gt;
      &lt;/metric&gt;
      &lt;metric&gt;
        &lt;label&gt;Approval Rate&lt;/label&gt;
        &lt;value&gt;81%&lt;/value&gt;
      &lt;/metric&gt;
      &lt;metric&gt;
        &lt;label&gt;Default Rate&lt;/label&gt;
        &lt;value&gt;3.4%&lt;/value&gt;
      &lt;/metric&gt;
      &lt;chart&gt;
        &lt;type&gt;funnel&lt;/type&gt;
        &lt;title&gt;Application Pipeline&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;area&lt;/type&gt;
        &lt;title&gt;Application Volume&lt;/title&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Regional Sales Performance&lt;/title&gt;
      &lt;visualization&gt;
        Um painel de desempenho de vendas com tema escuro. [cite_start]Ele combina um grande KPI para a cota geral, um gráfico de linha para a tendência de receita mensal, uma lista de melhores desempenhos e um mapa geográfico para o desempenho global de vendas[cite: 13, 16].
      &lt;/visualization&gt;
      &lt;metric&gt;
        &lt;label&gt;Overall Quota&lt;/label&gt;
        &lt;value&gt;87%&lt;/value&gt;
      &lt;/metric&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Monthly Revenue Trend&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;map&lt;/type&gt;
        &lt;title&gt;Global Sales Performance&lt;/title&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Social Media Engagement Dashboard&lt;/title&gt;
      &lt;visualization&gt;
        Um painel de mídia social com tema escuro que rastreia o alcance global e o engajamento. [cite_start]Ele usa uma combinação de cartões de KPI, um mapa geográfico, um gráfico de radar para interesses dos seguidores, e um gráfico de barras agrupadas para dados demográficos de audiência[cite: 62, 70, 73, 78].
      &lt;/visualization&gt;
       &lt;metric&gt;
        &lt;label&gt;Total Likes&lt;/label&gt;
        &lt;value&gt;350,809&lt;/value&gt;
      &lt;/metric&gt;
       &lt;metric&gt;
        &lt;label&gt;Engagement Rate&lt;/label&gt;
        &lt;value&gt;48.07%&lt;/value&gt;
      &lt;/metric&gt;
       &lt;metric&gt;
        &lt;label&gt;Total Users Reached&lt;/label&gt;
        &lt;value&gt;840,466&lt;/value&gt;
      &lt;/metric&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;SaaS Financial Performance Dashboard&lt;/title&gt;
      &lt;visualization&gt;
        Um painel financeiro para um negócio de SaaS, utilizando um tema escuro. Apresenta KPIs chave na parte superior, como MRR e Churn. [cite_start]Os gráficos principais incluem um gráfico de área empilhada para tendências de aquisição, uma análise de cascata do ARR, um funil de aquisição de clientes e um heatmap para análise de retenção de coorte[cite: 87, 88, 89, 90, 91, 104, 95, 110].
      &lt;/visualization&gt;
        &lt;metric&gt;
            &lt;label&gt;Monthly Recurring Revenue&lt;/label&gt;
            &lt;value&gt;$3.2M&lt;/value&gt;
        &lt;/metric&gt;
        &lt;metric&gt;
            &lt;label&gt;Net Revenue Retention&lt;/label&gt;
            &lt;value&gt;112%&lt;/value&gt;
        &lt;/metric&gt;
        &lt;metric&gt;
            &lt;label&gt;LTV:CAC Ratio&lt;/label&gt;
            &lt;value&gt;4.8x&lt;/value&gt;
        &lt;/metric&gt;
    &lt;/dashboard&gt;
    &lt;chart&gt;
        &lt;type&gt;sankey&lt;/type&gt;
        &lt;title&gt;How Nike Inc (NKE) Makes Its Money&lt;/title&gt;
        &lt;visualization&gt;
            [cite_start]Um diagrama de Sankey detalhando o fluxo financeiro da Nike em 28-05-2023[cite: 141]. [cite_start]Ele rastreia a receita de diferentes segmentos de produtos (Calçados, Vestuário, etc.) através do Custo dos Produtos Vendidos (COGS) e Despesas Operacionais para chegar ao Lucro Líquido[cite: 140, 143, 153, 159, 149].
        &lt;/visualization&gt;
    &lt;/chart&gt;
     &lt;dashboard&gt;
      &lt;title&gt;Global Oil Benchmark Infographic&lt;/title&gt;
      &lt;visualization&gt;
        [cite_start]Um infográfico complexo sobre o mercado de petróleo, focando na inclusão do WTI Midland no benchmark Dated Brent[cite: 173]. [cite_start]Ele usa um mapa global para mostrar o alcance, gráficos de barras e de bolhas para comparações, e gráficos de linha para sincronia de preços[cite: 218, 178, 179, 197].
      &lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;chart&gt;
      &lt;type&gt;sunburst&lt;/type&gt;
      &lt;title&gt;Aroma, Taste, and Mouthfeel Wheel&lt;/title&gt;
      &lt;visualization&gt;
        Uma roda de sabor, provavelmente para café ou vinho, que categoriza a experiência sensorial. [cite_start]Ela se divide em Aroma, Sabor e Sensação na Boca, com cada categoria se ramificando em descritores mais específicos de forma hierárquica[cite: 529, 541, 542].
      &lt;/visualization&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Data Visualization &amp;amp; Dashboards&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Showcase of Examples&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento apresenta uma galeria de aplicações e painéis interativos construídos com o Plotly Dash[cite: 5]. [cite_start]Os exemplos abrangem uma ampla gama de setores e casos de uso, incluindo a análise de custos de planos de saúde [cite: 13, 14][cite_start], disparidade salarial de gênero [cite: 17, 24][cite_start], análise de dados de filmes do IMDb [cite: 39, 40][cite_start], dados geoespaciais de corridas da Uber [cite: 88, 89][cite_start], visualização de dados climáticos [cite: 92, 93][cite_start], métricas de plataformas de streaming [cite: 207, 208] e muito mais, demonstrando a versatilidade da ferramenta para criar visualizações de dados interativas.
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Medical Provider Charges Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os custos de provedores de saúde em diferentes estados[cite: 14].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Gender Pay Gap Report&lt;/title&gt;
      &lt;author&gt;Ann Marie&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Analisa a diferença entre a média e mediana do pagamento por hora entre homens e mulheres[cite: 24].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IMDb Analysis for Movies &amp;amp; Series&lt;/title&gt;
      &lt;author&gt;TFI&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza e analisa dados do IMDb para os principais filmes e séries e obtém recomendações[cite: 40].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;IOT Rainfall App&lt;/title&gt;
      &lt;author&gt;Tanima&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora dados de precipitação neste painel Python IOT[cite: 53].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Clinical Patient Dashboard&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora o volume de pacientes da clínica por hora do dia, tempo de espera e pontuação de cuidado[cite: 64].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Retail Demand Transference&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Prevê a demanda de produtos de consumo para varejistas em diferentes localidades de lojas[cite: 81].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Uber Rides Geospatial Data&lt;/title&gt;
      &lt;author&gt;Plotly&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explora os locais de embarque de milhões de corridas da Uber em NYC[cite: 89].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;CBE Climate Visualization App&lt;/title&gt;
      &lt;author&gt;Center for the Built Environment (Berkeley)&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados climáticos com séries temporais, mapas de calor, mapas, rosas dos ventos e mais[cite: 93].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;HERA Radio Telescope &amp;amp; Weather App&lt;/title&gt;
      &lt;author&gt;HERA Reionization Team&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza dados científicos e geoespaciais em tempo real do conjunto de radiotelescópios HERA[cite: 142].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;World Atlas&lt;/title&gt;
      &lt;author&gt;Dan Baker&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza centenas de indicadores entre países nesta aplicação de múltiplas páginas[cite: 150].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Dash Molstar for SARS-COV-2&lt;/title&gt;
      &lt;author&gt;Simon Sun&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Exemplo de uso do Dash-Molstar para visualizar estruturas moleculares e dados em aplicações web[cite: 169].&lt;/visualization&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Repair Cafe Dashboard&lt;/title&gt;
      &lt;author&gt;Natalia&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Visualiza os dados do Repair Café para rastrear e explorar os resultados de reparos de dispositivos[cite: 217].&lt;/visualization&gt;
    &lt;/dashboard&gt;
     &lt;dashboard&gt;
      &lt;title&gt;An Analytics App on USA Flights Data&lt;/title&gt;
      &lt;author&gt;Unknown&lt;/author&gt;
      [cite_start]&lt;visualization&gt;Explore esta aplicação web para descobrir dados importantes relacionados a voos de passageiros nos EUA[cite: 227].&lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Predictive Analytics, Forecasting&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;Unknown&lt;/publication_date&gt;
  &lt;license&gt;Showcase of Examples&lt;/license&gt;
  &lt;section&gt;
    &lt;title&gt;Predictive Analytics, Forecasting&lt;/title&gt;
    &lt;paragraph&gt;
      Enquanto ferramentas de BI tradicionais respondem "O que aconteceu?", o Plotly e o Dash respondem "E se?". [cite_start]Explore estes exemplos de Python em análise preditiva e previsão. [cite: 96, 97]
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;summary&gt;
    Este documento da Plotly exibe aplicações de análise preditiva e previsão construídas com Dash. Ele destaca dois exemplos principais: um preditor de idade cronológica que utiliza deep learning e uma ferramenta interativa para ajustar modelos de séries temporais SARIMA, demonstrando como o Python pode ser usado para análises avançadas do tipo "E se?".
  &lt;/summary&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Harvard Age Prediction&lt;/title&gt;
      &lt;author&gt;Theo Vincent&lt;/author&gt;
      &lt;visualization&gt;
        [cite_start]Uma aplicação que apresenta preditores de idade cronológica utilizando ferramentas de deep learning. [cite: 107] A interface permite selecionar a forma como uma amostra é definida e exibe o desempenho da previsão.
      &lt;/visualization&gt;
      &lt;metric&gt;
        &lt;label&gt;Average R²&lt;/label&gt;
        &lt;value&gt;0.611 +- 0.229&lt;/value&gt;
      &lt;/metric&gt;
    &lt;/dashboard&gt;
    &lt;dashboard&gt;
      &lt;title&gt;SARIMA Tuner&lt;/title&gt;
      &lt;author&gt;Gabriele&lt;/author&gt;
      &lt;visualization&gt;
        [cite_start]Uma aplicação para aprender sobre os passos necessários para trabalhar com dados de séries temporais, ajustando modelos SARIMA para fazer previsões. [cite: 125] [cite_start]A ferramenta guia o usuário através das etapas de "1-Data set up", "2-Stationarity" e "3-Model Selection". [cite: 113, 114, 115]
      &lt;/visualization&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Model interpretability - Time series&lt;/title&gt;
  &lt;author&gt;multidimensionality-of-aging.net project&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Research Application&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento exibe um painel de controle interativo da web projetado para a interpretabilidade de um modelo de Rede Neural Convolucional 1D (1DCNN)[cite: 995]. [cite_start]A aplicação permite que os usuários explorem como o modelo analisa dados de séries temporais (especificamente, pressão arterial [cite: 1021, 1032]) para prever métricas relacionadas ao envelhecimento. [cite_start]Os usuários podem filtrar os resultados por várias dimensões de envelhecimento, dados demográficos e taxas de envelhecimento para visualizar o impacto nos dados e nas previsões do modelo[cite: 989, 996, 998, 1000].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Painel de Controle de Interpretabilidade Interativa&lt;/title&gt;
    &lt;paragraph&gt;
      Esta aplicação web fornece uma interface para analisar a interpretabilidade de um modelo de previsão de idade baseado em séries temporais. Ela permite a seleção de diferentes coortes e parâmetros para visualizar os dados de entrada e as previsões do modelo correspondentes.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Dimensões de Envelhecimento:&lt;/b&gt; Arterial, Cardíaca, Atividade Física[cite: 990].
      &lt;/item&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Filtros Demográficos:&lt;/b&gt; Sexo (Masculino, Feminino) e Faixa Etária (Jovem, Meia-idade, Idoso)[cite: 996, 997, 998, 999].
      &lt;/item&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Filtros de Envelhecimento:&lt;/b&gt; Taxa de envelhecimento (Acelerada, Normal, Desacelerada)[cite: 1000, 1001].
      &lt;/item&gt;
      &lt;item&gt;
        [cite_start]&lt;b&gt;Seleção de Dados:&lt;/b&gt; Permite a seleção de amostras e canais de dados específicos[cite: 1002, 1011].
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Model interpretability - Time series&lt;/title&gt;
      &lt;metric&gt;
        &lt;label&gt;1DCNN Model Performance (R²)&lt;/label&gt;
        &lt;value&gt;0.41 +- 0.004&lt;/value&gt;
      &lt;/metric&gt;
      &lt;visualization&gt;
        [cite_start]O painel apresenta um gráfico de dispersão que plota a pressão arterial normalizada em função do tempo[cite: 1021, 1030]. Os pontos de dados no gráfico representam a série temporal para a amostra selecionada. A interface é projetada para explorar como diferentes subgrupos de dados influenciam a interpretabilidade do modelo.
      &lt;/visualization&gt;
      &lt;chart&gt;
        &lt;type&gt;scatter&lt;/type&gt;
        &lt;title&gt;Blood Pressure Over Time&lt;/title&gt;
        &lt;data&gt;
          &lt;label&gt;X-Axis&lt;/label&gt;
          &lt;value&gt;Time (10 min / unit)&lt;/value&gt;
        &lt;/data&gt;
        &lt;data&gt;
          &lt;label&gt;Y-Axis&lt;/label&gt;
          &lt;value&gt;blood pressure [normalized]&lt;/value&gt;
        &lt;/data&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;link url="https://www.multidimensionality-of-aging.net/model_interpretability/time_series" type="external"&gt;Link para a Aplicação Web&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Sarima Tuner&lt;/title&gt;
  &lt;author&gt;Gabriele (inferred), using Plotly Dash&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Web Application&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]O "Sarima Tuner" é uma aplicação web interativa de 4 etapas, criada com Plotly Dash, que guia os usuários através do processo completo de previsão de séries temporais usando modelos SARIMA[cite: 3, 44, 51]. [cite_start]A ferramenta abrange desde a configuração e visualização inicial dos dados, passando pela transformação para garantir a estacionariedade, até a seleção de modelos por meio de uma busca em grade de hiperparâmetros e, finalmente, a geração e análise de previsões[cite: 53, 56, 59, 61].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Visão Geral e Fluxo de Trabalho da Aplicação&lt;/title&gt;
    &lt;paragraph&gt;
      Esta aplicação permite a um usuário passar por todas as etapas necessárias para realizar uma previsão de série temporal com um modelo SARIMA. O processo é dividido em quatro seções principais.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;
        &lt;b&gt;1. Configuração dos Dados:&lt;/b&gt; O usuário começa selecionando um conjunto de dados. [cite_start]O padrão é o conjunto de dados "Air passenger", mas qualquer arquivo .csv pode ser usado[cite: 53, 54, 55]. [cite_start]A série temporal inicial é então visualizada em um gráfico de linhas[cite: 687].
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;2. [cite_start]Estacionariedade:&lt;/b&gt; Esta etapa fornece ferramentas para transformar os dados para torná-los estacionários[cite: 56]. [cite_start]As transformações disponíveis incluem log e diferenciação[cite: 57]. [cite_start]A estacionariedade é avaliada usando o teste Augmented Dickey-Fuller [cite: 57, 720][cite_start], juntamente com gráficos de Autocorrelação (ACF) e Autocorrelação Parcial (PACF) para ajudar a identificar parâmetros adequados para o modelo[cite: 58].
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;3. [cite_start]Seleção do Modelo:&lt;/b&gt; Aqui, uma busca em grade (grid search) de hiperparâmetros é realizada para encontrar o melhor modelo SARIMA(p,d,q; P,D,Q,m)[cite: 12, 59]. [cite_start]O usuário pode definir a porcentagem de divisão para treino [cite: 13, 14] [cite_start]e os intervalos para os parâmetros regulares e sazonais[cite: 17, 20]. [cite_start]A aplicação exibe os 10 modelos de melhor desempenho com base na pontuação AIC (Akaike Information Criterion)[cite: 60].
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;4. [cite_start]Previsão:&lt;/b&gt; Na etapa final, o melhor modelo da busca em grade é automaticamente ajustado aos dados de treino para fazer previsões[cite: 62, 64]. [cite_start]A aplicação exibe um gráfico com os valores reais, as previsões para os conjuntos de treino e teste [cite: 64][cite_start], e permite gerar previsões futuras[cite: 639]. [cite_start]Também são mostrados gráficos ACF e PACF para os resíduos do modelo para análise de diagnóstico[cite: 65, 660].
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;visual_elements&gt;
    &lt;dashboard&gt;
      &lt;title&gt;Interface do Sarima Tuner&lt;/title&gt;
      &lt;visualization&gt;
        A aplicação é apresentada como uma interface web de múltiplas abas, onde cada aba corresponde a uma etapa do processo de modelagem de séries temporais. Ela utiliza vários componentes interativos, como seletores, campos de entrada numérica e botões, juntamente com uma variedade de gráficos para visualização de dados e resultados do modelo.
      &lt;/visualization&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Dataset Linechart&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Transformed Data Linechart&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;bar&lt;/type&gt;
        &lt;title&gt;Autocorrelation (ACF)&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;bar&lt;/type&gt;
        &lt;title&gt;Partial Autocorrelation (PACF)&lt;/title&gt;
      &lt;/chart&gt;
      &lt;chart&gt;
        &lt;type&gt;line&lt;/type&gt;
        &lt;title&gt;Final Model: Fit &amp;amp; Prediction&lt;/title&gt;
      &lt;/chart&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  &lt;link url="https://gabria1.pythonanywhere.com" type="external"&gt;URL da Aplicação Principal&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Interactive html export in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Documentation&lt;/license&gt;
  &lt;summary&gt;
    Este documento é um tutorial da Plotly que explica como exportar figuras interativas para arquivos HTML usando Python. Ele aborda vários métodos, incluindo salvar um arquivo HTML autônomo com o método `write_html`, controlar o tamanho do arquivo, incorporar gráficos em templates HTML personalizados usando Jinja2, e implementar uma funcionalidade de download de HTML em aplicações Dash. O documento fornece exemplos de código detalhados para cada técnica.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Salvando Figuras como um Arquivo HTML Autônomo&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]Figuras da Plotly podem ser salvas como arquivos HTML que permanecem totalmente interativos quando abertos em um navegador[cite: 421, 426, 431]. [cite_start]Isso é feito usando o método `write_html`[cite: 430]. [cite_start]Por padrão, o arquivo HTML resultante é totalmente autônomo, contendo uma cópia embutida da biblioteca Plotly.js, o que o torna grande (mais de 5MB)[cite: 436, 437].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      fig = px.scatter(x=range(10), y=range(10))
      fig.write_html("path/to/file.html")
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Incorporando Saída da Plotly em HTML com Jinja2&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]É possível inserir a saída da Plotly em templates HTML usando Jinja2[cite: 439]. [cite_start]Para isso, use o método `.to_html(full_html=False)` para gerar apenas o HTML do gráfico, sem a estrutura completa da página, e passe-o para o template[cite: 441, 442]. [cite_start]Primeiro, crie um arquivo de template HTML com um marcador de posição Jinja como `{{ fig }}`[cite: 444, 445].
    &lt;/paragraph&gt;
    &lt;code&gt;
      &amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;meta charset="utf-8" /&amp;gt;
          &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;h1&amp;gt;Here's a Plotly graph!&amp;lt;/h1&amp;gt;
          {{ fig }}
          &amp;lt;p&amp;gt;And here's some text after the graph.&amp;lt;/p&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    &lt;/code&gt;
    &lt;paragraph&gt;
      [cite_start]Em seguida, use um script Python para ler o template, renderizar o gráfico dentro dele e salvar o resultado em um novo arquivo HTML[cite: 478].
    &lt;/paragraph&gt;
    &lt;code&gt;
      import plotly.express as px
      from jinja2 import Template

      # Carregar dados e criar figura
      data_canada = px.data.gapminder().query("country == 'Canada'")
      fig = px.bar(data_canada, x='year', y='pop')

      # Definir caminhos e dados para o template
      output_html_path = r"/path/to/output.html"
      input_template_path = r"/path/to/template.html"
      plotly_jinja_data = {"fig": fig.to_html(full_html=False)}

      # Renderizar o template com a figura
      with open(output_html_path, "w", encoding="utf-8") as output_file:
          with open(input_template_path) as template_file:
              j2_template = Template(template_file.read())
              output_file.write(j2_template.render(plotly_jinja_data))
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Exportação de HTML em Aplicações Dash&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]Dash é a maneira recomendada para construir aplicações analíticas com figuras da Plotly[cite: 495]. É possível implementar uma funcionalidade de download de HTML dentro de uma aplicação Dash. [cite_start]O exemplo de código a seguir mostra como criar um botão que permite ao usuário baixar o gráfico exibido como um arquivo HTML[cite: 522, 539].
    &lt;/paragraph&gt;
    &lt;code&gt;
      from dash import Dash, dcc, html
      import plotly.express as px
      from base64 import b64encode
      import io

      app = Dash(__name__)

      buffer = io.StringIO()
      df = px.data.iris()
      fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
      fig.write_html(buffer)

      html_bytes = buffer.getvalue().encode()
      encoded = b64encode(html_bytes).decode()

      app.layout = html.Div([
          dcc.Graph(id="graph", figure=fig),
          html.A(
              html.Button("Download as HTML"),
              id="download",
              href="data:text/html;base64," + encoded,
              download="plotly_figure.html"
          )
      ])
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Documentação Completa de Parâmetros&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]A documentação completa para todos os parâmetros do método `write_html` pode ser acessada diretamente em Python usando a função `help()`[cite: 556]. [cite_start]Os parâmetros principais incluem `file` (o caminho do arquivo ou objeto gravável) e `config` (um dicionário para opções de configuração do Plotly.js)[cite: 561, 563].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;link url="https://plotly.com/python/interactive-html-export/" type="external"&gt;Interactive HTML Export in Python&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;GitHub Issue: Text is cut off on bars where textposition=outside #2001&lt;/title&gt;
  &lt;author&gt;RedShift1&lt;/author&gt;
  &lt;publication_date&gt;2017-09-13&lt;/publication_date&gt;
  &lt;license&gt;GitHub Issue / Bug Report&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento é um relatório de bug do repositório plotly/plotly.js no GitHub, aberto em 13 de setembro de 2017[cite: 1466]. [cite_start]O problema relatado é que os rótulos de texto em gráficos de barras são cortados quando `textposition: 'outside'` é usado nas barras de maior valor[cite: 1467, 1469]. [cite_start]Embora a issue tenha sido fechada rapidamente como uma duplicata[cite: 1488, 1489], os usuários continuaram a encontrar o problema e, ao longo dos anos, contribuíram com várias soluções alternativas eficazes. [cite_start]As soluções incluem usar a opção `cliponaxis: false` [cite: 1497][cite_start], ajustar manualmente o intervalo do eixo ou as margens do gráfico [cite: 1512][cite_start], e usar anotações em vez de texto de barra[cite: 1562].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Relatório de Bug Original&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O usuário 'RedShift1' abriu a issue em 13 de setembro de 2017, relatando que, ao desenhar um gráfico de barras com a opção `textposition: 'outside'`, o texto das barras mais altas é cortado pela borda da área do gráfico[cite: 1466, 1467, 1469]. [cite_start]A issue foi fechada no mesmo dia por um mantenedor, que a marcou como uma duplicata da issue #2000, afirmando que a correção resolveria o problema para gráficos de barras e de dispersão[cite: 1488, 1489]. [cite_start]No entanto, os comentários subsequentes indicam que o problema persistiu para os usuários[cite: 1493].
    &lt;/paragraph&gt;
    &lt;visual_elements&gt;
      &lt;chart&gt;
        &lt;type&gt;bar&lt;/type&gt;
        &lt;title&gt;Exemplo do Bug de Texto Cortado&lt;/title&gt;
        [cite_start]&lt;visualization&gt;Um gráfico de barras vertical onde o rótulo de texto da barra mais alta (valor 5900) é visivelmente cortado no topo[cite: 1469, 1502].&lt;/visualization&gt;
      &lt;/chart&gt;
    &lt;/visual_elements&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Soluções Alternativas da Comunidade&lt;/title&gt;
    &lt;paragraph&gt;
      Ao longo de vários anos, os usuários da comunidade forneceram várias soluções alternativas eficazes para contornar o problema do texto cortado.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Usar `cliponaxis: false`&lt;/b&gt;: Um usuário apontou para um Pull Request relacionado e sugeriu usar a opção `cliponaxis: false` no traço do gráfico de barras para evitar que o texto seja cortado pelo eixo[cite: 1497].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Ajustar a Margem Superior&lt;/b&gt;: Uma solução alternativa é aumentar manualmente a margem superior do layout do gráfico para criar espaço suficiente para o rótulo de texto[cite: 1512].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Expandir o Intervalo do Eixo&lt;/b&gt;: Outra abordagem é estender manualmente o intervalo do eixo y para que ele seja maior que o valor máximo da barra. [cite_start]Isso pode ser feito definindo um valor fixo [cite: 1512] [cite_start]ou calculando dinamicamente um novo máximo (por exemplo, `max_value * 1.1`)[cite: 1559].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Usar Anotações&lt;/b&gt;: Uma solução alternativa "à prova de falhas" é adicionar os rótulos como anotações separadas em vez de usar o parâmetro `textposition`. [cite_start]As anotações não são cortadas da mesma forma[cite: 1562].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;link url="https://github.com/plotly/plotly.js/issues/2001" type="external"&gt;Link para a Issue #2001 no GitHub&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Plotly Python 3D: axes with ticktexts shows only limited numbers of ticks&lt;/title&gt;
  &lt;author&gt;bso&lt;/author&gt;
  &lt;publication_date&gt;2025-07-11&lt;/publication_date&gt;
  &lt;license&gt;Community Forum Post&lt;/license&gt;
  &lt;summary&gt;
    [cite_start]Este documento é uma thread do Fórum da Comunidade Plotly onde um usuário relata um problema com gráficos 3D que não exibem todos os rótulos de eixo (`ticktexts`) especificados, mostrando apenas um número limitado[cite: 215, 216]. [cite_start]Outro usuário diagnostica que a causa é o uso de `autorange=False` sem definir manualmente um `range` para o eixo[cite: 253, 256]. [cite_start]A solução, confirmada pelo autor original, é definir explicitamente o `range` do eixo (por exemplo, `range=[0, len(values)]`), o que força a exibição de todos os ticks desejados[cite: 286].
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Problema: Exibição Limitada de Ticks em Eixos 3D&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]Em 11 de julho de 2025, o usuário 'bso' postou um problema que estava enfrentando com a versão 4.2.0 do Plotly[cite: 213, 219]. [cite_start]Ao tentar criar um gráfico 3D com nomes de ticks de eixo definidos individualmente usando `ticktext`, os eixos não exibiam mais do que 5 ou 7 ticks, independentemente do número de ticks fornecidos[cite: 215, 216]. [cite_start]O usuário observou que, embora os ticks não fossem visíveis na figura, os valores corretos do eixo estavam presentes no arquivo HTML bruto ao salvar o gráfico[cite: 217].
    &lt;/paragraph&gt;
    &lt;code&gt;
      # Código original com o problema
      def make_axis(id, number):
          return [id+str(i) for i in range(number)]
      def get_3d_axis_dict(values):
          return dict(
              ticktext=[val for val in values],
              nticks=len(values),
              tickmode='array',
              autorange=False,
              tickvals=[i for i in range(len(values))],
          )
      # ... (resto do código de configuração da figura)
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Diagnóstico e Solução&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O usuário 'AIMPED' respondeu, diagnosticando que o problema era causado pelo uso de `autorange=False` sem a especificação de um `range` para o eixo[cite: 251, 253, 256]. Quando `autorange` é definido como `False`, o Plotly requer que um intervalo explícito seja fornecido para renderizar o eixo corretamente.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Solução Proposta:&lt;/b&gt; Manter `autorange=False` e adicionar um parâmetro `range` explícito ao dicionário de configuração do eixo, como `range=[0, len(values)]`[cite: 271].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Alternativa:&lt;/b&gt; Definir `autorange=True`, embora o usuário original tenha notado que isso não atendia à sua necessidade de exibir todos os ticks, pois mostrava apenas os ticks relacionados aos dados[cite: 256, 287].&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;
        # Código corrigido
        def get_3d_axis_dict(values):
            return dict(
                ticktext=[val for val in values],
                nticks=len(values),
                tickmode='array',
                autorange=False,
                range=[0, len(values)],  # Linha adicionada que corrige o problema
                tickvals=[i for i in range(len(values))],
            )
    &lt;/code&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Confirmação da Correção&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O autor original, 'bso', confirmou que a adição do parâmetro `range` de fato resolveu o problema[cite: 284, 286]. [cite_start]Ele havia presumido incorretamente que, com `autorange=False`, o Plotly exibiria automaticamente todos os `tickvals` fornecidos, mas entendeu a necessidade de definir o intervalo manualmente[cite: 287, 288].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;link url="https://community.plotly.com/t/plotly-python-3d-axes-with-ticktexts-shows-only-limited-numbers-of-ticks/93115/print" type="external"&gt;Link para a Thread do Fórum&lt;/link&gt;
  &lt;language code="en-US"&gt;English&lt;/language&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Guia Mestre para Visualização de Dados Profissional com Python&lt;/title&gt;
  &lt;author&gt;Sintetizado de Guias de Projeto Alignerr, Plotly, Pandas, Stack Overflow e outros&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Guia Instrucional Agregado&lt;/license&gt;
  &lt;summary&gt;
    Este guia mestre consolida o conhecimento de múltiplas fontes para fornecer um fluxo de trabalho completo para a criação de visualizações de dados e dashboards de nível profissional usando Python. Ele abrange desde a configuração fundamental do projeto e ambiente, passando pela manipulação avançada de dados com Pandas (usando `groupby` e `melt`), até a criação de visualizações complexas com Plotly, com um foco especial em gráficos sunburst. Adicionalmente, o guia detalha princípios essenciais de design visual, como a seleção de cores acessíveis e o gerenciamento eficaz de rótulos, e conclui com um rigoroso processo de controle de qualidade e submissão final, baseado em um projeto de avaliação do mundo real.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 1: Fundação do Projeto e Fluxo de Trabalho Profissional&lt;/title&gt;
    &lt;paragraph&gt;
      Antes de iniciar o desenvolvimento, é crucial estabelecer uma base sólida para o projeto. Um erro comum, como o uso de um ID de projeto compartilhado, levou a falhas sistêmicas em projetos anteriores, resultando em erros de upload e perda de trabalho. A solução é a geração de um Identificador Único Universal (UUID) para cada projeto.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;&lt;b&gt;Configuração do Ambiente (VS Code)&lt;/b&gt;: É obrigatório verificar se as extensões essenciais como Python, Jupyter e Python Debugger da Microsoft estão instaladas.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Instalação de Bibliotecas&lt;/b&gt;: Instale as bibliotecas aprovadas e necessárias. Bibliotecas como `matplotlib` e `seaborn` são frequentemente proibidas em ambientes de avaliação profissional.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Geração de UUID&lt;/b&gt;: Acesse uma ferramenta como `uuidtools.com` para gerar um UUID v4 único. Este UUID será usado como o nome da pasta principal do projeto e é vital para uploads bem-sucedidos.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Estrutura de Pastas Obrigatória&lt;/b&gt;: Crie uma estrutura de pastas exata para garantir que os scripts encontrem os arquivos corretamente. A estrutura padrão é uma pasta raiz nomeada com o UUID, contendo subpastas `data`, `scripts`, e `outputs`.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 2: Preparação e Manipulação de Dados com Pandas&lt;/title&gt;
    &lt;paragraph&gt;
      A preparação de dados é um pré-requisito para qualquer visualização eficaz. O Pandas é a ferramenta principal para esta fase.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Agrupamento de Dados (`groupby`)&lt;/b&gt;: A operação `groupby` envolve dividir o objeto, aplicar uma função e combinar os resultados. É essencial para calcular operações em grandes volumes de dados agrupados.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Remodelagem de Dados (`melt`)&lt;/b&gt;: A função `melt` é usada para "despivotar" um DataFrame de um formato largo para um formato longo. Isso é útil para preparar dados para bibliotecas de visualização que esperam colunas de identificador e colunas de valor.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Geração de Dados Realistas&lt;/b&gt;: Em vez de usar dados aleatórios sem sentido, crie datasets que contem uma história de negócio coerente. Isso demonstra conhecimento de domínio e resulta em dashboards mais significativos.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 3: Visualização Principal com Gráficos Sunburst da Plotly&lt;/title&gt;
    &lt;paragraph&gt;
      Gráficos sunburst são uma forma elegante e eficaz de visualizar dados hierárquicos usando um layout radial.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;
        &lt;b&gt;Criação Básica (`plotly.express`)&lt;/b&gt;: A maneira mais direta de criar um gráfico sunburst é com `px.sunburst`, usando o parâmetro `path` para definir a hierarquia a partir de colunas em um DataFrame retangular.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Controle Avançado (`graph_objects`)&lt;/b&gt;: Para uma customização mais sofisticada, use `go.Sunburst`. Este método requer uma estrutura de dados explícita com `labels` (os nós) e `parents` (as relações pai-filho), oferecendo maior controle sobre a aparência e o comportamento.
      &lt;/item&gt;
      &lt;item&gt;
        &lt;b&gt;Solução de Problemas: Quebra de Texto (Text Wrapping)&lt;/b&gt;: Um problema comum é que rótulos de texto longos são cortados. Como o Plotly não suporta quebra de texto automática, a solução é pré-processar os rótulos inserindo a tag HTML `&lt;br&gt;` para criar quebras de linha manuais. Isso pode ser alcançado com uma função que utiliza a biblioteca `textwrap` do Python.
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 4: Design, Estética e Acessibilidade&lt;/title&gt;
    &lt;paragraph&gt;
      Um bom design visual é crucial para a clareza e o profissionalismo. As escolhas de cores e tipografia devem ser deliberadas e focadas na acessibilidade e na narrativa dos dados.
    &lt;/paragraph&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Seleção de Paletas de Cores&lt;/b&gt;: Opte por paletas profissionais e harmoniosas, evitando cores excessivamente brilhantes ou que causam distração. É fundamental usar esquemas de cores que sejam amigáveis para daltônicos; ferramentas como o `Viz Palette` podem ser usadas para testar a acessibilidade.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Tipos de Paletas&lt;/b&gt;: Use paletas categóricas para distinguir grupos distintos, sequenciais para dados progressivos e divergentes para dados com um ponto central neutro.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Gerenciamento de Rótulos&lt;/b&gt;: Garanta que os rótulos sejam concisos, legíveis e nunca cortados. Use a propriedade `uniformtext` no Plotly com `mode='hide'` para ocultar automaticamente rótulos que não cabem em seus segmentos.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Requisitos de Formatação&lt;/b&gt;: Em contextos profissionais, requisitos explícitos como "títulos em negrito" são comuns e devem ser rigorosamente seguidos para evitar penalidades na avaliação.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Fase 5: Controle de Qualidade e Submissão Final&lt;/title&gt;
    &lt;paragraph&gt;
      A fase final é uma verificação rigorosa para garantir que todos os requisitos técnicos e de qualidade foram atendidos antes da entrega.
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      &lt;item&gt;&lt;b&gt;Checklist de Verificação Técnica&lt;/b&gt;: Valide a estrutura de pastas, a geração correta de todos os arquivos (`.csv`, `.json`, `.html`), e a execução sem erros dos scripts `data_gen.py` e `viz.py`.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Processo de Upload&lt;/b&gt;: Use o script de upload fornecido, inserindo seu UUID único quando solicitado. Após a conclusão, anote cuidadosamente todos os caminhos `gs://` gerados, pois eles são necessários para a submissão.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Submissão no Labelbox&lt;/b&gt;: Preencha cada campo no formulário de submissão com precisão, incluindo a URL da imagem de referência, o prompt do usuário e os URIs `gs://` para cada artefato do projeto. Verifique novamente se o UUID em todos os caminhos está correto.&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Erros Fatais a Evitar&lt;/b&gt;: Erros como usar um UUID incorreto, ter uma estrutura de pastas errada, ou usar bibliotecas proibidas podem levar à reprovação automática.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Um Guia Prático para Cores em Visualização de Dados&lt;/title&gt;
  &lt;author&gt;Sintetizado da Documentação da Simplified Science Publishing e PatternFly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-17&lt;/publication_date&gt;
  &lt;license&gt;Guia Instrucional&lt;/license&gt;
  &lt;summary&gt;
    Este guia aborda os princípios para selecionar paletas de cores eficazes e acessíveis para visualização de dados. Ele detalha a importância da cor para a narrativa e acessibilidade, apresenta ferramentas como Viz Palette e Color Brewer para testes, explica as propriedades das cores (matiz, saturação, luminosidade) e fornece um processo passo a passo e exemplos concretos de esquemas de cores profissionais.
  &lt;/summary&gt;
  &lt;section&gt;
    &lt;title&gt;Por Que a Cor é Importante: Narrativa e Acessibilidade&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]A cor é um elemento crucial no design de gráficos e visualizações de dados, pois é uma ferramenta poderosa para contar histórias[cite: 1207]. [cite_start]A escolha certa das cores melhora a compreensão do público e torna o trabalho acessível a pessoas com Deficiência de Visão de Cores (CVD), também conhecida como daltonismo[cite: 1206]. [cite_start]A CVD é uma ocorrência comum, afetando aproximadamente 1 em cada 12 homens e 1 em cada 200 mulheres[cite: 1216].
    &lt;/paragraph&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Princípios para a Seleção Eficaz de Cores&lt;/title&gt;
    &lt;list type="unordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Contraste&lt;/b&gt;: Você pode usar qualquer combinação de cores, desde que sejam altamente contrastantes[cite: 1227]. [cite_start]O contraste pode ser criado ajustando as três principais características da cor: matiz, saturação e luminosidade[cite: 1228]. [cite_start]Ao usar escala de cinza, é fundamental garantir que haja uma diferença de saturação de aproximadamente 15-30% entre as cores[cite: 1497].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Cores Opostas&lt;/b&gt;: Escolher cores de lados opostos do círculo cromático é uma das melhores maneiras de criar combinações de cores que são acessíveis para pessoas com daltonismo e outras dificuldades de percepção de cores[cite: 1221, 1222].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Códigos de Cores&lt;/b&gt;: Para garantir consistência entre diferentes plataformas e ferramentas (como Adobe Illustrator, Excel, PowerPoint, etc.), é importante usar códigos de cores[cite: 1241]. [cite_start]O código "HEX" é um código de seis dígitos que pode ser usado para identificar as cores exatas que você deseja manter consistentes[cite: 1241].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Um Fluxo de Trabalho Prático para Escolher Paletas&lt;/title&gt;
    &lt;paragraph&gt;
      [cite_start]O processo a seguir pode ser usado para criar sua própria paleta de cores científica[cite: 1508]:
    &lt;/paragraph&gt;
    &lt;list type="ordered"&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 1&lt;/b&gt;: Escolha uma paleta de cores que pareça boa para você e que melhor represente sua história de dados[cite: 1510].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 2&lt;/b&gt;: Teste as cores em uma ferramenta como o **Viz Palette** para ver como elas afetarão um público com deficiência de visão de cores[cite: 1511, 1248]. [cite_start]O **Color Brewer** é outra ferramenta excelente para testar paletas de cores, especialmente para mapas e dados cartográficos[cite: 1450, 1451, 1452].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 3&lt;/b&gt;: Ajuste a cor, matiz e saturação no Viz Palette até que não haja conflitos de cores[cite: 1512].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Passo 4&lt;/b&gt;: Aplique as cores finais à sua plataforma de visualização de dados, destacando o ponto principal de seus dados[cite: 1513].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;section&gt;
    &lt;title&gt;Exemplos de Paletas e Casos de Uso&lt;/title&gt;
    &lt;list type="unordered"&gt;
      &lt;item&gt;&lt;b&gt;Paletas de Sistemas Padrão&lt;/b&gt;: Alguns sistemas de design, como o PatternFly, fornecem um ciclo de cores padrão para gráficos. [cite_start]Por exemplo, quando há mais de 6 grupos, o PatternFly usa automaticamente um ciclo de cores que inclui azul, verde, azul-petróleo, roxo e amarelo[cite: 503].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Sequenciais&lt;/b&gt;: Ideal para dados que têm uma progressão (por exemplo, de baixo para alto). [cite_start]Um exemplo é uma combinação de azul claro, médio e escuro[cite: 1279, 1303].&lt;/item&gt;
      &lt;item&gt;&lt;b&gt;Paletas Qualitativas/Categóricas&lt;/b&gt;: Usadas para categorias distintas sem uma ordem inerente. [cite_start]Um exemplo inclui uma combinação de Azul, Laranja e Cinza[cite: 1299, 1300].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Paletas Divergentes&lt;/b&gt;: Adequadas para dados com um ponto médio neutro, como destacar desvios[cite: 1325].&lt;/item&gt;
      [cite_start]&lt;item&gt;&lt;b&gt;Escala de Cinza&lt;/b&gt;: Uma ótima opção padrão quando usada com contraste suficiente[cite: 1495, 1496]. [cite_start]Exemplos de códigos HEX para uma paleta de cinza são `#b8b8b8` (cinza claro) e `#707070` (cinza escuro)[cite: 1276].&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  &lt;link url="https://projects.susielu.com/viz-palette" type="external"&gt;Viz Palette Tool&lt;/link&gt;
  &lt;link url="https://colorbrewer2.org/" type="external"&gt;Color Brewer Tool&lt;/link&gt;
&lt;/web_content&gt;

</content>
      </file>
      <file name="pyvy_2x_1.md" path="pyvy_main/pyvy_2x_1.md" type="md">
        <content>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos de gráficos, desde básicos e estatísticos até científicos, financeiros e geoespaciais. Além disso, aborda funcionalidades avançadas como integração com Jupyter, animações, controles personalizados e a criação de aplicações web analíticas com o Dash[cite: 43].&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Fundamentos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;The Figure Data Structure [cite: 21]&lt;/item&gt;
      &lt;item&gt;Creating and Updating Figures [cite: 29]&lt;/item&gt;
      &lt;item&gt;Displaying Figures [cite: 28]&lt;/item&gt;
      &lt;item&gt;Plotly Express [cite: 41]&lt;/item&gt;
      &lt;item&gt;Analytical Apps with Dash [cite: 43]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Básicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Scatter Plots [cite: 25]&lt;/item&gt;
      &lt;item&gt;Line Charts [cite: 30]&lt;/item&gt;
      &lt;item&gt;Bar Charts [cite: 31]&lt;/item&gt;
      &lt;item&gt;Pie Charts [cite: 47]&lt;/item&gt;
      &lt;item&gt;Bubble Charts [cite: 49]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Estatísticos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Error Bars [cite: 32]&lt;/item&gt;
      &lt;item&gt;Box Plots [cite: 33]&lt;/item&gt;
      &lt;item&gt;Histograms [cite: 51]&lt;/item&gt;
      &lt;item&gt;Distplots [cite: 54]&lt;/item&gt;
      &lt;item&gt;2D Histograms [cite: 55]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Científicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Heatmaps [cite: 57]&lt;/item&gt;
      &lt;item&gt;Imshow [cite: 58]&lt;/item&gt;
      &lt;item&gt;Ternary Plots [cite: 63]&lt;/item&gt;
      &lt;item&gt;Log Plots [cite: 64]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Financeiros e de Séries Temporais&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Time Series and Date Axes [cite: 71]&lt;/item&gt;
      &lt;item&gt;Candlestick Charts [cite: 72]&lt;/item&gt;
      &lt;item&gt;Waterfall Charts [cite: 84]&lt;/item&gt;
      &lt;item&gt;Funnel Chart [cite: 81]&lt;/item&gt;
      &lt;item&gt;OHLC Charts [cite: 82]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Mapas&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;MapLibre Migration [cite: 98]&lt;/item&gt;
      &lt;item&gt;Tile Choropleth Maps [cite: 100]&lt;/item&gt;
      &lt;item&gt;Lines on Tile Maps [cite: 103]&lt;/item&gt;
      &lt;item&gt;Filled Area on Tile Maps [cite: 104]&lt;/item&gt;
      &lt;item&gt;Bubble Maps [cite: 106]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Inteligência Artificial e Machine Learning&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;ML Regression [cite: 111]&lt;/item&gt;
      &lt;item&gt;KNN Classification [cite: 113]&lt;/item&gt;
      &lt;item&gt;ROC and PR Curves [cite: 115]&lt;/item&gt;
      &lt;item&gt;PCA Visualization [cite: 117]&lt;/item&gt;
      &lt;item&gt;AI/ML Apps with Dash [cite: 119]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Bioinformática&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Volcano Plot [cite: 121]&lt;/item&gt;
      &lt;item&gt;Manhattan Plot [cite: 123]&lt;/item&gt;
      &lt;item&gt;Clustergram [cite: 124]&lt;/item&gt;
      &lt;item&gt;Alignment Chart [cite: 126]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos 3D&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;3D Axes [cite: 131]&lt;/item&gt;
      &lt;item&gt;3D Scatter Plots [cite: 133]&lt;/item&gt;
      &lt;item&gt;3D Surface Plots [cite: 135]&lt;/item&gt;
      &lt;item&gt;3D Subplots [cite: 136]&lt;/item&gt;
      &lt;item&gt;3D Camera Controls [cite: 138]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Interação com Jupyter Widgets&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Plotly FigureWidget Overview [cite: 162]&lt;/item&gt;
      &lt;item&gt;Jupyter Lab with FigureWidget [cite: 164]&lt;/item&gt;
      &lt;item&gt;Interactive Data Analysis with FigureWidget ipywidgets [cite: 166]&lt;/item&gt;
      &lt;item&gt;Click Events [cite: 167]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Controles Personalizados e Animações&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Custom Buttons [cite: 173]&lt;/item&gt;
      &lt;item&gt;Sliders [cite: 179]&lt;/item&gt;
      &lt;item&gt;Dropdown Menus [cite: 188]&lt;/item&gt;
      &lt;item&gt;Range Slider and Selector [cite: 189]&lt;/item&gt;
      &lt;item&gt;Intro to Animations [cite: 176]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;bar&lt;/type&gt;
      &lt;title&gt;Gráficos de Barras&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráficos de Linha&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;pie&lt;/type&gt;
      &lt;title&gt;Gráficos de Pizza&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Gráficos de Dispersão&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;heatmap&lt;/type&gt;
      &lt;title&gt;Mapas de Calor&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Histogramas&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;box-plot&lt;/type&gt;
      &lt;title&gt;Box Plots&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;candlestick&lt;/type&gt;
        &lt;title&gt;Gráficos de Candlestick&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;3d-surface&lt;/type&gt;
        &lt;title&gt;Gráficos de Superfície 3D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;dashboard&gt;
        &lt;title&gt;Analytical Apps with Dash&lt;/title&gt;
        &lt;metric&gt;
            &lt;label&gt;Descrição&lt;/label&gt;
            &lt;value&gt;Crie aplicações web analíticas com Dash, sem necessidade de JavaScript. [cite: 43, 206]&lt;/value&gt;
        &lt;/metric&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/" type="external"&gt;Página Principal da Biblioteca Python&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py" type="external"&gt;Repositório no GitHub [cite: 12]&lt;/link&gt;
  &lt;link url="https://dash.plotly.com/" type="external"&gt;Dash [cite: 40, 220]&lt;/link&gt;
  &lt;link url="https://plotly.com/studio/?utm.medium-graphing libraries&amp;amp;utm campaign=studio early access&amp;amp;utm content=sidebar" type="external"&gt;Plotly Studio Early Access [cite: 14]&lt;/link&gt;
  &lt;link url="https://community.plot.ly/" type="external"&gt;Suporte da Comunidade [cite: 230]&lt;/link&gt;
  &lt;link url="https://plotly.com/graphing-libraries" type="external"&gt;Documentação [cite: 2, 230]&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Plot CSV Data in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que demonstra como criar gráficos a partir de arquivos de dados CSV em Python utilizando a biblioteca Plotly em conjunto com a biblioteca Pandas. São abordados três métodos principais: o uso do Plotly Express para criação rápida de gráficos, a utilização dos Graph Objects para maior customização e a integração dos gráficos gerados em aplicações analíticas interativas com o framework Dash.&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Plot de Dados CSV&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;CSV (comma-delimited-values) é um formato muito popular para armazenar dados estruturados[cite: 10]. [cite_start]Neste tutorial, veremos como plotar belos gráficos usando dados de um CSV e a biblioteca Pandas[cite: 11]. [cite_start]Aprenderemos como importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com Plotly Express&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Primeiro, importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV no Dash&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Dash é a melhor maneira de construir aplicações analíticas em Python usando figuras Plotly[cite: 41]. [cite_start]Para exibir uma figura em uma aplicação Dash, basta passá-la para o argumento `figure` do componente `dcc.Graph`[cite: 118, 129].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      from dash import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd

      app = Dash(__name__)

      app.layout = html.Div([
          html.H4('Simple stock plot with adjustable axis'),
          html.Button("Switch Axis", n_clicks=0, id='button'),
          dcc.Graph(id="graph"),
      ])

      @app.callback(
          Output("graph", "figure"),
          Input("button", "n_clicks"))
      def display_graph(n_clicks):
          df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
          
          if n_clicks % 2 == 0:
              x, y = 'AAPL_x', 'AAPL_y'
          else:
              x, y = 'AAPL_y', 'AAPL_x'

          fig = px.line(df, x=x, y=y)
          return fig

      # app.run(debug=True)
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Apple Share Prices over time (2014)&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/plot-data-from-csv/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv" type="external"&gt;Fonte de Dados CSV (Ações da Apple 2014)&lt;/link&gt;
  &lt;link url="https://plotly.com/dash/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/plot-data-from-csv.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Random Walk in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica o conceito de 'random walk' (passeio aleatório) e demonstra como simular e visualizar exemplos em 1D e 2D utilizando Python, com as bibliotecas NumPy e Plotly. [cite: 9, 10] O conteúdo aborda a teoria, a implementação prática com blocos de código, a visualização dos resultados com gráficos de dispersão e a conexão entre passeios aleatórios e o fenômeno da difusão, ilustrada com histogramas. [cite: 15, 128] Adicionalmente, apresenta uma seção com a fundamentação matemática do valor esperado de um passeio aleatório. [cite: 205, 213]&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Random Walk (Passeio Aleatório)&lt;/title&gt;
    &lt;paragraph&gt;Um passeio aleatório (random walk) pode ser entendido como um processo aleatório no qual um marcador é movido aleatoriamente por algum espaço. [cite: 13] É mais comumente conceituado em uma dimensão ($\mathbb{Z}$), duas dimensões ($\mathbb{Z}^2$) ou três dimensões ($\mathbb{Z}^3$) no espaço Cartesiano, onde $\mathbb{Z}$ representa o conjunto dos inteiros. [cite: 14] As visualizações neste tutorial utilizam gráficos de dispersão com uma escala de cores para denotar a sequência temporal do passeio. [cite: 15]&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk em 1D&lt;/title&gt;
    &lt;paragraph&gt;A flutuação (jitter) nos pontos de dados ao longo dos eixos x e y tem como objetivo iluminar onde os pontos estão sendo desenhados e qual é a tendência do passeio aleatório. [cite: 17]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      np.random.seed(1)
      l = 100
      steps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l)
      position = np.cumsum(steps)
      y = 0.05 * np.random.randn(l)

      fig = go.Figure(data=go.Scatter(
          x = position,
          y = y,
          mode = 'markers',
          name = 'Random Walk in 1D',
          marker = dict(
              color=np.arange(l),
              size=7,
              colorscale='Reds',
              showscale=True,
          )
      ))
      fig.update_layout(yaxis_range=[-1,1])
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Random Walk em 2D&lt;/title&gt;
    &lt;paragraph&gt;O conceito é estendido para duas dimensões, onde passos são dados tanto na direção x quanto na y.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      x_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      y_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      x_position = np.cumsum(x_steps)
      y_position = np.cumsum(y_steps)

      fig = go.Figure(data=go.Scatter(
          x = x_position,
          y = y_position,
          mode = 'markers',
          name = 'Random Walk',
          marker = dict(
              color=np.arange(l),
              size=8,
              colorscale='Greens',
              showscale=True
          )
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk e Difusão&lt;/title&gt;
    &lt;paragraph&gt;Esta seção mostra a ligação entre passeios aleatórios e difusão. [cite: 128] Um grande número de passeios aleatórios é computado, representando, por exemplo, moléculas em uma pequena gota de um químico. [cite: 129] Embora todas as trajetórias comecem em 0, após algum tempo, a distribuição espacial dos pontos se torna uma distribuição Gaussiana. [cite: 130] Além disso, a distância média da origem cresce como $\sqrt{t}$. [cite: 131]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Histograma das posições finais
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      N = 10000
      steps = np.random.choice([-1,1], size=(N, l)) + 0.05*np.random.standard_normal((N, l))
      position = np.cumsum(steps, axis=1)
      
      fig = go.Figure(data=go.Histogram(x=position[:, -1]))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Dica Avançada: Fundamentação Matemática&lt;/title&gt;
    &lt;paragraph&gt;Podemos pensar formalmente em um passeio aleatório 1D como um ponto saltando ao longo da linha de números inteiros. [cite: 206] Seja $Z_i$ uma variável aleatória que assume os valores +1 e -1. [cite: 207] Considere a soma $S_{n}=\sum_{i=0}^{n}Z_{i}$, onde S_n representa o ponto final do passeio após n passos. [cite: 211, 212] Para encontrar o valor esperado de $S_n$, podemos calculá-lo diretamente. [cite: 213] Como cada $Z_i$ é independente, temos $E(S_{n})=\sum_{i=0}^{n}E(Z_{i})$. [cite: 218] Uma vez que $Z_i$ assume os valores +1 e -1 com probabilidade de $\frac{1}{2}$ cada, $E(Z_i) = 1 \cdot P(Z_i=1) + (-1) \cdot P(Z_i=-1) = \frac{1}{2} - \frac{1}{2} = 0$. [cite: 209, 214, 219, 220] Isso resulta em $E(S_n)=0$, o que significa que esperamos que o passeio aleatório paire em torno de 0, independentemente de quantos passos damos. [cite: 221]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 1D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 2D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Distribuição Espacial das Posições Finais (Difusão)&lt;/title&gt;
    &lt;/chart&gt;
     &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Distância Média e Quadrática Média vs. Tempo na Difusão&lt;/title&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/random-walk/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://en.wikipedia.org/wiki/Random_walk" type="external"&gt;Artigo da Wikipedia sobre Random Walk&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/random-walk.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Peak Finding in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que ensina como encontrar picos e vales em conjuntos de dados utilizando Python. O processo utiliza a biblioteca SciPy, especificamente a função `find_peaks`, para a lógica de detecção, a biblioteca Pandas para manipulação de dados e a Plotly para visualização. O guia demonstra como carregar dados de séries temporais, aplicar a detecção de picos básica, e subsequentemente filtrar os resultados para identificar apenas os picos mais significativos utilizando um limiar (threshold).&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução e Importação de Dados&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para começar a detectar picos, o tutorial utiliza dados sobre a produção mensal de leite. [cite: 16] [cite_start]As bibliotecas necessárias são Pandas para manipulação de dados e SciPy para a função de detecção de picos. [cite: 12]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Importação de bibliotecas e dados
      import pandas as pd
      from scipy.signal import find_peaks
      import plotly.graph_objects as go

      # Leitura dos dados de um arquivo CSV
      milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
      time_series = milk_data['Monthly milk production (pounds per cow)']

      # Plot inicial da série temporal
      fig = go.Figure(data=go.Scatter(
          y = time_series,
          mode = 'lines'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Detecção de Picos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para localizar os picos, utilizamos a função `find_peaks` da SciPy, que retorna os índices do eixo x onde os picos ocorrem. [cite: 53] [cite_start]Em seguida, esses picos detectados são plotados sobre o gráfico original para visualização. [cite: 67, 75]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos na série temporal
      indices, _ = find_peaks(time_series)

      # Cria a figura e adiciona o plot original
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))

      # Adiciona os picos detectados ao gráfico
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Filtrando Apenas os Picos Mais Altos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível ajustar um limiar (threshold) para identificar apenas os picos mais significativos. [cite: 91] [cite_start]O parâmetro `threshold` na função `find_peaks` pode ser usado para este propósito. [cite: 109]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos com um threshold
      indices, _ = find_peaks(time_series, threshold=20)

      # Plot com os picos filtrados
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal da Produção Mensal de Leite&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal com Picos Detectados&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda&lt;/label&gt;
        &lt;value&gt;Original Plot (Linha Azul), Detected Peaks (Cruzes Vermelhas)&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/peak-finding/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv" type="external"&gt;Fonte de Dados CSV (Produção de Leite)&lt;/link&gt;
  &lt;link url="https://pandas.pydata.org/docs/user_guide/10min.html" type="external"&gt;Documentação do Pandas&lt;/link&gt;
  &lt;link url="https://www.scipy.org/" type="external"&gt;Documentação do SciPy&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;LaTeX in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. [cite_start]All rights reserved. [cite: 988]&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica como adicionar e renderizar expressões matemáticas e notações complexas usando LaTeX em gráficos Plotly. Ele detalha que a funcionalidade depende da biblioteca MathJax e que as diretivas LaTeX devem ser envolvidas por cifrões ($...$). O guia fornece exemplos de código práticos para adicionar LaTeX a títulos de gráficos, rótulos de eixos e nomes de legendas, tanto com o Plotly Express quanto com os Graph Objects.&lt;/summary&gt;
  
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Tipografia LaTeX em Gráficos Plotly&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Títulos de figuras, rótulos de eixos e anotações aceitam diretivas LaTeX para renderizar fórmulas matemáticas e notações quando todo o rótulo está entre cifrões ($...$)[cite: 876]. [cite_start]Essa renderização é gerenciada pela biblioteca MathJax, que deve ser carregada no ambiente onde as figuras estão sendo exibidas[cite: 877]. [cite_start]O MathJax é incluído por padrão em ambientes do tipo Jupyter, mas pode exigir o carregamento separado em outros contextos, como através de uma tag &amp;lt;script&amp;gt;[cite: 878].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Exemplo com Plotly Express&lt;/title&gt;
    &lt;paragraph&gt;O exemplo a seguir demonstra como adicionar títulos e rótulos de eixos formatados com LaTeX a um gráfico de linha criado com Plotly Express.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px

      fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], 
                    title=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$')
      
      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Exemplo com Graph Objects e Múltiplas Traces&lt;/title&gt;
    &lt;paragraph&gt;Este exemplo usa `graph_objects` para criar um gráfico com duas 'traces' (séries de dados), onde o nome de cada uma é uma expressão LaTeX, que será renderizada na legenda do gráfico.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go

      fig = go.Figure()

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[1, 4, 9, 16],
          name=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[0.5, 2, 4.5, 8],
          name=r'$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )

      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Título e Eixos em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Título&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo X&lt;/label&gt;
        &lt;value&gt;$\sqrt{(n_\text{c}(t|T_\text{early}))}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo Y&lt;/label&gt;
        &lt;value&gt;$d, r \text{ (solar radius)}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Legendas em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda 1&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
       &lt;data&gt;
        &lt;label&gt;Legenda 2&lt;/label&gt;
        &lt;value&gt;$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  [cite_start]&lt;link url="https://plotly.com/python/LaTeX/" type="external"&gt;Página do Tutorial [cite: 900, 961, 994]&lt;/link&gt;
  [cite_start]&lt;link url="https://www.npmjs.com/package/mathjax?activeTab=versions" type="external"&gt;Biblioteca MathJax [cite: 877]&lt;/link&gt;
  [cite_start]&lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash [cite: 945]&lt;/link&gt;
&lt;/web_content&gt;

</content>
      </file>
      <file name="pyvy_2x_1.txt" path="pyvy_main/pyvy_2x_1.txt" type="txt">
        <content>&lt;web_content&gt;
  &lt;title&gt;Plotly Python Graphing Library&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Plotly.py is free and open source[cite: 12]. Copyright © 2025 Plotly. All rights reserved. [cite: 232]&lt;/license&gt;
  &lt;summary&gt;Este documento apresenta a biblioteca de gráficos Python da Plotly, uma ferramenta de código aberto que permite a criação de gráficos interativos e com qualidade de publicação[cite: 11, 12]. Ele detalha uma vasta gama de tipos de gráficos, desde básicos e estatísticos até científicos, financeiros e geoespaciais. Além disso, aborda funcionalidades avançadas como integração com Jupyter, animações, controles personalizados e a criação de aplicações web analíticas com o Dash[cite: 43].&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução&lt;/title&gt;
    &lt;paragraph&gt;A biblioteca de gráficos Python da Plotly cria gráficos interativos e com qualidade de publicação. Exemplos de como fazer gráficos de linha, gráficos de dispersão, gráficos de área, gráficos de barras, barras de erro, box plots, histogramas, heatmaps, subplots, múltiplos eixos, gráficos polares e gráficos de bolhas. [cite: 11]&lt;/paragraph&gt;
    &lt;paragraph&gt;Plotly.py é gratuito e de código aberto [cite: 12] e você pode visualizar o código-fonte, relatar problemas ou contribuir no GitHub. [cite: 12]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Fundamentos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;The Figure Data Structure [cite: 21]&lt;/item&gt;
      &lt;item&gt;Creating and Updating Figures [cite: 29]&lt;/item&gt;
      &lt;item&gt;Displaying Figures [cite: 28]&lt;/item&gt;
      &lt;item&gt;Plotly Express [cite: 41]&lt;/item&gt;
      &lt;item&gt;Analytical Apps with Dash [cite: 43]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Básicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Scatter Plots [cite: 25]&lt;/item&gt;
      &lt;item&gt;Line Charts [cite: 30]&lt;/item&gt;
      &lt;item&gt;Bar Charts [cite: 31]&lt;/item&gt;
      &lt;item&gt;Pie Charts [cite: 47]&lt;/item&gt;
      &lt;item&gt;Bubble Charts [cite: 49]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Estatísticos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Error Bars [cite: 32]&lt;/item&gt;
      &lt;item&gt;Box Plots [cite: 33]&lt;/item&gt;
      &lt;item&gt;Histograms [cite: 51]&lt;/item&gt;
      &lt;item&gt;Distplots [cite: 54]&lt;/item&gt;
      &lt;item&gt;2D Histograms [cite: 55]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Científicos&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Heatmaps [cite: 57]&lt;/item&gt;
      &lt;item&gt;Imshow [cite: 58]&lt;/item&gt;
      &lt;item&gt;Ternary Plots [cite: 63]&lt;/item&gt;
      &lt;item&gt;Log Plots [cite: 64]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos Financeiros e de Séries Temporais&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Time Series and Date Axes [cite: 71]&lt;/item&gt;
      &lt;item&gt;Candlestick Charts [cite: 72]&lt;/item&gt;
      &lt;item&gt;Waterfall Charts [cite: 84]&lt;/item&gt;
      &lt;item&gt;Funnel Chart [cite: 81]&lt;/item&gt;
      &lt;item&gt;OHLC Charts [cite: 82]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Mapas&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;MapLibre Migration [cite: 98]&lt;/item&gt;
      &lt;item&gt;Tile Choropleth Maps [cite: 100]&lt;/item&gt;
      &lt;item&gt;Lines on Tile Maps [cite: 103]&lt;/item&gt;
      &lt;item&gt;Filled Area on Tile Maps [cite: 104]&lt;/item&gt;
      &lt;item&gt;Bubble Maps [cite: 106]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Inteligência Artificial e Machine Learning&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;ML Regression [cite: 111]&lt;/item&gt;
      &lt;item&gt;KNN Classification [cite: 113]&lt;/item&gt;
      &lt;item&gt;ROC and PR Curves [cite: 115]&lt;/item&gt;
      &lt;item&gt;PCA Visualization [cite: 117]&lt;/item&gt;
      &lt;item&gt;AI/ML Apps with Dash [cite: 119]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Bioinformática&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Volcano Plot [cite: 121]&lt;/item&gt;
      &lt;item&gt;Manhattan Plot [cite: 123]&lt;/item&gt;
      &lt;item&gt;Clustergram [cite: 124]&lt;/item&gt;
      &lt;item&gt;Alignment Chart [cite: 126]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Gráficos 3D&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;3D Axes [cite: 131]&lt;/item&gt;
      &lt;item&gt;3D Scatter Plots [cite: 133]&lt;/item&gt;
      &lt;item&gt;3D Surface Plots [cite: 135]&lt;/item&gt;
      &lt;item&gt;3D Subplots [cite: 136]&lt;/item&gt;
      &lt;item&gt;3D Camera Controls [cite: 138]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Interação com Jupyter Widgets&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Plotly FigureWidget Overview [cite: 162]&lt;/item&gt;
      &lt;item&gt;Jupyter Lab with FigureWidget [cite: 164]&lt;/item&gt;
      &lt;item&gt;Interactive Data Analysis with FigureWidget ipywidgets [cite: 166]&lt;/item&gt;
      &lt;item&gt;Click Events [cite: 167]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Controles Personalizados e Animações&lt;/title&gt;
    &lt;list&gt;
      &lt;item&gt;Custom Buttons [cite: 173]&lt;/item&gt;
      &lt;item&gt;Sliders [cite: 179]&lt;/item&gt;
      &lt;item&gt;Dropdown Menus [cite: 188]&lt;/item&gt;
      &lt;item&gt;Range Slider and Selector [cite: 189]&lt;/item&gt;
      &lt;item&gt;Intro to Animations [cite: 176]&lt;/item&gt;
    &lt;/list&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;bar&lt;/type&gt;
      &lt;title&gt;Gráficos de Barras&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráficos de Linha&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;pie&lt;/type&gt;
      &lt;title&gt;Gráficos de Pizza&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Gráficos de Dispersão&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;heatmap&lt;/type&gt;
      &lt;title&gt;Mapas de Calor&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Histogramas&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;box-plot&lt;/type&gt;
      &lt;title&gt;Box Plots&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;candlestick&lt;/type&gt;
        &lt;title&gt;Gráficos de Candlestick&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
        &lt;type&gt;3d-surface&lt;/type&gt;
        &lt;title&gt;Gráficos de Superfície 3D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;dashboard&gt;
        &lt;title&gt;Analytical Apps with Dash&lt;/title&gt;
        &lt;metric&gt;
            &lt;label&gt;Descrição&lt;/label&gt;
            &lt;value&gt;Crie aplicações web analíticas com Dash, sem necessidade de JavaScript. [cite: 43, 206]&lt;/value&gt;
        &lt;/metric&gt;
    &lt;/dashboard&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/" type="external"&gt;Página Principal da Biblioteca Python&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py" type="external"&gt;Repositório no GitHub [cite: 12]&lt;/link&gt;
  &lt;link url="https://dash.plotly.com/" type="external"&gt;Dash [cite: 40, 220]&lt;/link&gt;
  &lt;link url="https://plotly.com/studio/?utm.medium-graphing libraries&amp;amp;utm campaign=studio early access&amp;amp;utm content=sidebar" type="external"&gt;Plotly Studio Early Access [cite: 14]&lt;/link&gt;
  &lt;link url="https://community.plot.ly/" type="external"&gt;Suporte da Comunidade [cite: 230]&lt;/link&gt;
  &lt;link url="https://plotly.com/graphing-libraries" type="external"&gt;Documentação [cite: 2, 230]&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Plot CSV Data in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que demonstra como criar gráficos a partir de arquivos de dados CSV em Python utilizando a biblioteca Plotly em conjunto com a biblioteca Pandas. São abordados três métodos principais: o uso do Plotly Express para criação rápida de gráficos, a utilização dos Graph Objects para maior customização e a integração dos gráficos gerados em aplicações analíticas interativas com o framework Dash.&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Plot de Dados CSV&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;CSV (comma-delimited-values) é um formato muito popular para armazenar dados estruturados[cite: 10]. [cite_start]Neste tutorial, veremos como plotar belos gráficos usando dados de um CSV e a biblioteca Pandas[cite: 11]. [cite_start]Aprenderemos como importar dados CSV de uma fonte externa (uma URL) e plotá-los usando Plotly[cite: 12].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com Plotly Express&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Primeiro, importamos os dados e os visualizamos usando Pandas[cite: 13].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      df.head()
    &lt;/code&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;""&lt;/cell&gt;
        &lt;cell&gt;"AAPL_x"&lt;/cell&gt;
        &lt;cell&gt;"AAPL_y"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"0"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-02"&lt;/cell&gt;
        &lt;cell&gt;"77.445395"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"1"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-03"&lt;/cell&gt;
        &lt;cell&gt;"77.045575"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"2"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-06"&lt;/cell&gt;
        &lt;cell&gt;"74.896972"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"3"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-07"&lt;/cell&gt;
        &lt;cell&gt;"75.856461"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;"4"&lt;/cell&gt;
        &lt;cell&gt;"2014-01-08"&lt;/cell&gt;
        &lt;cell&gt;"75.091947"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    [cite_start]&lt;paragraph&gt;O código a seguir utiliza a função `line` do Plotly Express para gerar um gráfico de linha a partir dos dados do CSV[cite: 22].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      fig = px.line(df, x='AAPL_x', y='AAPL_y', title='Apple Share Prices over time (2014)')
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV com graph_objects&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível obter um controle mais granular sobre o gráfico utilizando `graph_objects`[cite: 86]. [cite_start]O código abaixo cria uma figura e adiciona um traço do tipo `Scatter`[cite: 90].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import pandas as pd
      import plotly.graph_objects as go
      
      df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
      
      fig = go.Figure(go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                            name='Share Prices (in USD)'))
      
      fig.update_layout(title_dict=dict(text='Apple Share Prices over time (2014)'),
                        plot_bgcolor='rgb(230, 230,230)',
                        showlegend=True)
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Plot a partir de CSV no Dash&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Dash é a melhor maneira de construir aplicações analíticas em Python usando figuras Plotly[cite: 41]. [cite_start]Para exibir uma figura em uma aplicação Dash, basta passá-la para o argumento `figure` do componente `dcc.Graph`[cite: 118, 129].&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      from dash import Dash, dcc, html, Input, Output
      import plotly.express as px
      import pandas as pd

      app = Dash(__name__)

      app.layout = html.Div([
          html.H4('Simple stock plot with adjustable axis'),
          html.Button("Switch Axis", n_clicks=0, id='button'),
          dcc.Graph(id="graph"),
      ])

      @app.callback(
          Output("graph", "figure"),
          Input("button", "n_clicks"))
      def display_graph(n_clicks):
          df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
          
          if n_clicks % 2 == 0:
              x, y = 'AAPL_x', 'AAPL_y'
          else:
              x, y = 'AAPL_y', 'AAPL_x'

          fig = px.line(df, x=x, y=y)
          return fig

      # app.run(debug=True)
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Apple Share Prices over time (2014)&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/plot-data-from-csv/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv" type="external"&gt;Fonte de Dados CSV (Ações da Apple 2014)&lt;/link&gt;
  &lt;link url="https://plotly.com/dash/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/plot-data-from-csv.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Random Walk in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica o conceito de 'random walk' (passeio aleatório) e demonstra como simular e visualizar exemplos em 1D e 2D utilizando Python, com as bibliotecas NumPy e Plotly. [cite: 9, 10] O conteúdo aborda a teoria, a implementação prática com blocos de código, a visualização dos resultados com gráficos de dispersão e a conexão entre passeios aleatórios e o fenômeno da difusão, ilustrada com histogramas. [cite: 15, 128] Adicionalmente, apresenta uma seção com a fundamentação matemática do valor esperado de um passeio aleatório. [cite: 205, 213]&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução ao Random Walk (Passeio Aleatório)&lt;/title&gt;
    &lt;paragraph&gt;Um passeio aleatório (random walk) pode ser entendido como um processo aleatório no qual um marcador é movido aleatoriamente por algum espaço. [cite: 13] É mais comumente conceituado em uma dimensão ($\mathbb{Z}$), duas dimensões ($\mathbb{Z}^2$) ou três dimensões ($\mathbb{Z}^3$) no espaço Cartesiano, onde $\mathbb{Z}$ representa o conjunto dos inteiros. [cite: 14] As visualizações neste tutorial utilizam gráficos de dispersão com uma escala de cores para denotar a sequência temporal do passeio. [cite: 15]&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk em 1D&lt;/title&gt;
    &lt;paragraph&gt;A flutuação (jitter) nos pontos de dados ao longo dos eixos x e y tem como objetivo iluminar onde os pontos estão sendo desenhados e qual é a tendência do passeio aleatório. [cite: 17]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      np.random.seed(1)
      l = 100
      steps = np.random.choice([-1, 1], size=l) + 0.05 * np.random.randn(l)
      position = np.cumsum(steps)
      y = 0.05 * np.random.randn(l)

      fig = go.Figure(data=go.Scatter(
          x = position,
          y = y,
          mode = 'markers',
          name = 'Random Walk in 1D',
          marker = dict(
              color=np.arange(l),
              size=7,
              colorscale='Reds',
              showscale=True,
          )
      ))
      fig.update_layout(yaxis_range=[-1,1])
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Random Walk em 2D&lt;/title&gt;
    &lt;paragraph&gt;O conceito é estendido para duas dimensões, onde passos são dados tanto na direção x quanto na y.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      x_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      y_steps = np.random.choice([-1, 1], size=l) + 0.2 * np.random.randn(l)
      x_position = np.cumsum(x_steps)
      y_position = np.cumsum(y_steps)

      fig = go.Figure(data=go.Scatter(
          x = x_position,
          y = y_position,
          mode = 'markers',
          name = 'Random Walk',
          marker = dict(
              color=np.arange(l),
              size=8,
              colorscale='Greens',
              showscale=True
          )
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Random Walk e Difusão&lt;/title&gt;
    &lt;paragraph&gt;Esta seção mostra a ligação entre passeios aleatórios e difusão. [cite: 128] Um grande número de passeios aleatórios é computado, representando, por exemplo, moléculas em uma pequena gota de um químico. [cite: 129] Embora todas as trajetórias comecem em 0, após algum tempo, a distribuição espacial dos pontos se torna uma distribuição Gaussiana. [cite: 130] Além disso, a distância média da origem cresce como $\sqrt{t}$. [cite: 131]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Histograma das posições finais
      import plotly.graph_objects as go
      import numpy as np

      l = 1000
      N = 10000
      steps = np.random.choice([-1,1], size=(N, l)) + 0.05*np.random.standard_normal((N, l))
      position = np.cumsum(steps, axis=1)
      
      fig = go.Figure(data=go.Histogram(x=position[:, -1]))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Dica Avançada: Fundamentação Matemática&lt;/title&gt;
    &lt;paragraph&gt;Podemos pensar formalmente em um passeio aleatório 1D como um ponto saltando ao longo da linha de números inteiros. [cite: 206] Seja $Z_i$ uma variável aleatória que assume os valores +1 e -1. [cite: 207] Considere a soma $S_{n}=\sum_{i=0}^{n}Z_{i}$, onde S_n representa o ponto final do passeio após n passos. [cite: 211, 212] Para encontrar o valor esperado de $S_n$, podemos calculá-lo diretamente. [cite: 213] Como cada $Z_i$ é independente, temos $E(S_{n})=\sum_{i=0}^{n}E(Z_{i})$. [cite: 218] Uma vez que $Z_i$ assume os valores +1 e -1 com probabilidade de $\frac{1}{2}$ cada, $E(Z_i) = 1 \cdot P(Z_i=1) + (-1) \cdot P(Z_i=-1) = \frac{1}{2} - \frac{1}{2} = 0$. [cite: 209, 214, 219, 220] Isso resulta em $E(S_n)=0$, o que significa que esperamos que o passeio aleatório paire em torno de 0, independentemente de quantos passos damos. [cite: 221]&lt;/paragraph&gt;
  &lt;/section&gt;
  
  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 1D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;scatter&lt;/type&gt;
      &lt;title&gt;Visualização de um Random Walk em 2D&lt;/title&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;histogram&lt;/type&gt;
      &lt;title&gt;Distribuição Espacial das Posições Finais (Difusão)&lt;/title&gt;
    &lt;/chart&gt;
     &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Distância Média e Quadrática Média vs. Tempo na Difusão&lt;/title&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/random-walk/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://en.wikipedia.org/wiki/Random_walk" type="external"&gt;Artigo da Wikipedia sobre Random Walk&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
  &lt;link url="https://github.com/plotly/plotly.py/edit/doc-prod/doc/python/random-walk.md" type="external"&gt;Sugerir Edição desta Página&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;Peak Finding in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. All rights reserved.&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que ensina como encontrar picos e vales em conjuntos de dados utilizando Python. O processo utiliza a biblioteca SciPy, especificamente a função `find_peaks`, para a lógica de detecção, a biblioteca Pandas para manipulação de dados e a Plotly para visualização. O guia demonstra como carregar dados de séries temporais, aplicar a detecção de picos básica, e subsequentemente filtrar os resultados para identificar apenas os picos mais significativos utilizando um limiar (threshold).&lt;/summary&gt;
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Introdução e Importação de Dados&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para começar a detectar picos, o tutorial utiliza dados sobre a produção mensal de leite. [cite: 16] [cite_start]As bibliotecas necessárias são Pandas para manipulação de dados e SciPy para a função de detecção de picos. [cite: 12]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Importação de bibliotecas e dados
      import pandas as pd
      from scipy.signal import find_peaks
      import plotly.graph_objects as go

      # Leitura dos dados de um arquivo CSV
      milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
      time_series = milk_data['Monthly milk production (pounds per cow)']

      # Plot inicial da série temporal
      fig = go.Figure(data=go.Scatter(
          y = time_series,
          mode = 'lines'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Detecção de Picos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Para localizar os picos, utilizamos a função `find_peaks` da SciPy, que retorna os índices do eixo x onde os picos ocorrem. [cite: 53] [cite_start]Em seguida, esses picos detectados são plotados sobre o gráfico original para visualização. [cite: 67, 75]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos na série temporal
      indices, _ = find_peaks(time_series)

      # Cria a figura e adiciona o plot original
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))

      # Adiciona os picos detectados ao gráfico
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Filtrando Apenas os Picos Mais Altos&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;É possível ajustar um limiar (threshold) para identificar apenas os picos mais significativos. [cite: 91] [cite_start]O parâmetro `threshold` na função `find_peaks` pode ser usado para este propósito. [cite: 109]&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      # Encontra os picos com um threshold
      indices, _ = find_peaks(time_series, threshold=20)

      # Plot com os picos filtrados
      fig = go.Figure()
      fig.add_trace(go.Scatter(
          y=time_series,
          mode='lines+markers',
          name='Original Plot'
      ))
      fig.add_trace(go.Scatter(
          x=indices,
          y=[time_series[j] for j in indices],
          mode='markers',
          marker=dict(
              size=8,
              color='red',
              symbol='cross'
          ),
          name='Detected Peaks'
      ))
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal da Produção Mensal de Leite&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Fonte dos Dados&lt;/label&gt;
        &lt;value&gt;https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Série Temporal com Picos Detectados&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda&lt;/label&gt;
        &lt;value&gt;Original Plot (Linha Azul), Detected Peaks (Cruzes Vermelhas)&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  &lt;link url="https://plotly.com/python/peak-finding/" type="external"&gt;Página do Tutorial&lt;/link&gt;
  &lt;link url="https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv" type="external"&gt;Fonte de Dados CSV (Produção de Leite)&lt;/link&gt;
  &lt;link url="https://pandas.pydata.org/docs/user_guide/10min.html" type="external"&gt;Documentação do Pandas&lt;/link&gt;
  &lt;link url="https://www.scipy.org/" type="external"&gt;Documentação do SciPy&lt;/link&gt;
  &lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash&lt;/link&gt;
&lt;/web_content&gt;

&lt;web_content&gt;
  &lt;title&gt;LaTeX in Python&lt;/title&gt;
  &lt;author&gt;Plotly&lt;/author&gt;
  &lt;publication_date&gt;2025-07-16&lt;/publication_date&gt;
  &lt;license&gt;Copyright © 2025 Plotly. [cite_start]All rights reserved. [cite: 988]&lt;/license&gt;
  &lt;summary&gt;Este documento é um tutorial que explica como adicionar e renderizar expressões matemáticas e notações complexas usando LaTeX em gráficos Plotly. Ele detalha que a funcionalidade depende da biblioteca MathJax e que as diretivas LaTeX devem ser envolvidas por cifrões ($...$). O guia fornece exemplos de código práticos para adicionar LaTeX a títulos de gráficos, rótulos de eixos e nomes de legendas, tanto com o Plotly Express quanto com os Graph Objects.&lt;/summary&gt;
  
  &lt;language code="en"&gt;English&lt;/language&gt;
  
  &lt;section&gt;
    &lt;title&gt;Tipografia LaTeX em Gráficos Plotly&lt;/title&gt;
    [cite_start]&lt;paragraph&gt;Títulos de figuras, rótulos de eixos e anotações aceitam diretivas LaTeX para renderizar fórmulas matemáticas e notações quando todo o rótulo está entre cifrões ($...$)[cite: 876]. [cite_start]Essa renderização é gerenciada pela biblioteca MathJax, que deve ser carregada no ambiente onde as figuras estão sendo exibidas[cite: 877]. [cite_start]O MathJax é incluído por padrão em ambientes do tipo Jupyter, mas pode exigir o carregamento separado em outros contextos, como através de uma tag &amp;lt;script&amp;gt;[cite: 878].&lt;/paragraph&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;title&gt;Exemplo com Plotly Express&lt;/title&gt;
    &lt;paragraph&gt;O exemplo a seguir demonstra como adicionar títulos e rótulos de eixos formatados com LaTeX a um gráfico de linha criado com Plotly Express.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.express as px

      fig = px.line(x=[1, 2, 3, 4], y=[1, 4, 9, 16], 
                    title=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$')
      
      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )
      
      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;
  
  &lt;section&gt;
    &lt;title&gt;Exemplo com Graph Objects e Múltiplas Traces&lt;/title&gt;
    &lt;paragraph&gt;Este exemplo usa `graph_objects` para criar um gráfico com duas 'traces' (séries de dados), onde o nome de cada uma é uma expressão LaTeX, que será renderizada na legenda do gráfico.&lt;/paragraph&gt;
    &lt;code language="python"&gt;
      import plotly.graph_objects as go

      fig = go.Figure()

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[1, 4, 9, 16],
          name=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.add_trace(go.Scatter(
          x=[1, 2, 3, 4],
          y=[0.5, 2, 4.5, 8],
          name=r'$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$'
      ))

      fig.update_layout(
          xaxis_title=r'$\sqrt{(n_\text{c}(t|T_\text{early}))}$',
          yaxis_title=r'$d, r \text{ (solar radius)}$'
      )

      fig.show()
    &lt;/code&gt;
  &lt;/section&gt;

  &lt;visual_elements&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Título e Eixos em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Título&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo X&lt;/label&gt;
        &lt;value&gt;$\sqrt{(n_\text{c}(t|T_\text{early}))}$&lt;/value&gt;
      &lt;/data&gt;
      &lt;data&gt;
        &lt;label&gt;Eixo Y&lt;/label&gt;
        &lt;value&gt;$d, r \text{ (solar radius)}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
    &lt;chart&gt;
      &lt;type&gt;line&lt;/type&gt;
      &lt;title&gt;Gráfico com Legendas em LaTeX&lt;/title&gt;
      &lt;data&gt;
        &lt;label&gt;Legenda 1&lt;/label&gt;
        &lt;value&gt;$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
       &lt;data&gt;
        &lt;label&gt;Legenda 2&lt;/label&gt;
        &lt;value&gt;$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$&lt;/value&gt;
      &lt;/data&gt;
    &lt;/chart&gt;
  &lt;/visual_elements&gt;
  
  [cite_start]&lt;link url="https://plotly.com/python/LaTeX/" type="external"&gt;Página do Tutorial [cite: 900, 961, 994]&lt;/link&gt;
  [cite_start]&lt;link url="https://www.npmjs.com/package/mathjax?activeTab=versions" type="external"&gt;Biblioteca MathJax [cite: 877]&lt;/link&gt;
  [cite_start]&lt;link url="https://dash.plot.ly/" type="external"&gt;Documentação do Dash [cite: 945]&lt;/link&gt;
&lt;/web_content&gt;

</content>
      </file>
      <file name="pyvy_Insights_chart_colab" path="pyvy_main/pyvy_Insights_chart_colab" type="unknown">
        <content>Tipo de arquivo não suportado: pyvy_Insights_chart_colab</content>
      </file>
      <file name="pyvy_Recomendations_plotly_colab" path="pyvy_main/pyvy_Recomendations_plotly_colab" type="unknown">
        <content>Tipo de arquivo não suportado: pyvy_Recomendations_plotly_colab</content>
      </file>
    </category>
  </content>
</plotly_python_guide>